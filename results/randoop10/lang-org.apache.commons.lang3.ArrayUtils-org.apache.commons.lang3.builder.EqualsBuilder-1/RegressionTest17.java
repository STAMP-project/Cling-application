import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest17 {

    public static boolean debug = false;

    @Test
    public void test08501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08501");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        java.lang.Boolean[] booleanArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray0);
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) booleanArray0);
        java.lang.Boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray0);
        java.lang.Boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray3);
        java.lang.Boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray3);
        int[] intArray10 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.add(intArray10, (int) 'a');
        int[] intArray18 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray13, intArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray19);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) booleanArray5, (java.lang.Object) intArray19);
        short[] shortArray24 = null;
        java.lang.Short[] shortArray26 = new java.lang.Short[] { (short) 1 };
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray26);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray26);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray26, (short) (byte) 100);
        short[] shortArray31 = new short[] {};
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray31);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray30, shortArray31);
        java.lang.Short[] shortArray35 = new java.lang.Short[] { (short) 1 };
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray35);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray35);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray35, (short) (byte) 100);
        short[] shortArray40 = new short[] {};
        java.lang.Short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray40);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray39, shortArray40);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray33, shortArray40);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray43);
        java.lang.Short[] shortArray46 = new java.lang.Short[] { (short) 1 };
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray46);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray46);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray46, (short) (byte) 100);
        short[] shortArray51 = new short[] {};
        java.lang.Short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray51);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray50, shortArray51);
        java.lang.Short[] shortArray55 = new java.lang.Short[] { (short) 1 };
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray55);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray55);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray55, (short) (byte) 100);
        short[] shortArray60 = new short[] {};
        java.lang.Short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray60);
        short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray59, shortArray60);
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray53, shortArray60);
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.add(shortArray63, (short) (byte) 10);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray63, 0, 1);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray44, shortArray68);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray68, (int) '#', 6);
        int int74 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray5, (java.lang.Object) shortArray72, (int) (short) 10);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[1]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[1]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[1]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1]");
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[1]");
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test08502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08502");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray1, (float) 'a');
        float[] floatArray7 = new float[] { 1L, 100L, 100 };
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) (-1L), (int) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray7);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.clone(floatArray3);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (float) 9);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray14, (int) (byte) 10, 4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[9.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
    }

    @Test
    public void test08503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08503");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        java.lang.Character[] charArray44 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, 'a');
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.add(charArray46, '#');
        boolean boolean49 = objMap31.equals((java.lang.Object) '#');
        boolean[] booleanArray54 = new boolean[] { false, false, false, false };
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray54);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray54, false);
        java.lang.Boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray54);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray54);
        java.lang.Boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray54);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray60);
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray60, true);
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray63, (int) (short) 0, 100);
        boolean boolean67 = objMap31.containsValue((java.lang.Object) booleanArray66);
        boolean boolean68 = objMap31.isEmpty();
        float[] floatArray72 = new float[] { (short) 100, 0, 10 };
        float[] floatArray75 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray76 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray75);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.contains(floatArray75, (float) 0);
        float[] floatArray80 = org.apache.commons.lang3.ArrayUtils.add(floatArray75, 10.0f);
        float[] floatArray81 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray72, floatArray75);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray75);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.contains(floatArray75, (float) (short) 1);
        java.lang.Object obj85 = objMap31.get((java.lang.Object) floatArray75);
        float[] floatArray87 = org.apache.commons.lang3.ArrayUtils.add(floatArray75, (float) ' ');
        float[] floatArray89 = org.apache.commons.lang3.ArrayUtils.remove(floatArray75, (int) (short) 0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray87), "[1.0, -1.0, 32.0]");
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[-1.0]");
    }

    @Test
    public void test08504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08504");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray9 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray12 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder0.append(doubleArray9, doubleArray12);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder15 = equalsBuilder0.appendSuper(true);
        java.lang.Character[] charArray21 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21, 'a');
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray24);
        java.lang.Character[] charArray31 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray31, 'a');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.add(charArray33, '#');
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.remove(charArray33, (int) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder0.append(charArray25, charArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = equalsBuilder38.appendSuper(true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder40.append((double) 10, 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder43.append((byte) 10, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder46.append((byte) 1, (byte) 0);
        char[] charArray51 = new char[] { 'a' };
        java.lang.Character[] charArray52 = org.apache.commons.lang3.ArrayUtils.toObject(charArray51);
        java.lang.Character[] charArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray52);
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray52, '4');
        java.lang.Character[] charArray56 = org.apache.commons.lang3.ArrayUtils.toObject(charArray55);
        java.lang.Object[] objArray57 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder58 = equalsBuilder49.append((java.lang.Object[]) charArray56, objArray57);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(equalsBuilder15);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder40);
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertNotNull(equalsBuilder58);
    }

    @Test
    public void test08505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08505");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 10, (int) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray7);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) 1, (int) ' ');
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 10);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray21);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.add(byteArray26, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder0.append(byteArray7, byteArray26);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder33 = equalsBuilder0.append(true, true);
        java.lang.Long[] longArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray34);
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray35);
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray35);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder38.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray47 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        long[] longArray54 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray55 = org.apache.commons.lang3.ArrayUtils.clone(longArray54);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder41.append(longArray48, longArray54);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.add(longArray48, (int) (byte) 0, (long) 2);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.add(longArray59, (long) 2);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder62 = equalsBuilder0.append(longArray37, longArray59);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder65 = equalsBuilder62.append(100.0f, (float) (byte) 1);
        long[] longArray66 = null;
        long[] longArray72 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.clone(longArray72);
        java.lang.Long[] longArray74 = org.apache.commons.lang3.ArrayUtils.toObject(longArray73);
        long[] longArray80 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray81 = org.apache.commons.lang3.ArrayUtils.clone(longArray80);
        java.lang.Long[] longArray82 = org.apache.commons.lang3.ArrayUtils.toObject(longArray81);
        long[] longArray83 = org.apache.commons.lang3.ArrayUtils.clone(longArray81);
        long[] longArray84 = org.apache.commons.lang3.ArrayUtils.addAll(longArray73, longArray83);
        long[] longArray86 = org.apache.commons.lang3.ArrayUtils.add(longArray83, (long) '#');
        int int89 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray83, 100L, (int) ' ');
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray83);
        long[] longArray91 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray83);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder92 = equalsBuilder65.append(longArray66, longArray91);
        equalsBuilder65.reset();
        // The following exception was thrown during execution in test generation
        try {
            int int94 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) equalsBuilder65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertNotNull(equalsBuilder33);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[2, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[2, 32, 100, 10, 10, 1, 2]");
        org.junit.Assert.assertNotNull(equalsBuilder62);
        org.junit.Assert.assertNotNull(equalsBuilder65);
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertNotNull(longArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray80), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray83), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray84), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray86), "[32, 100, 10, 10, 1, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(longArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray91), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder92);
    }

    @Test
    public void test08506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08506");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        java.lang.Character[] charArray15 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray18);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray20, '4');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.add(charArray22, '4');
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        java.lang.Character[] charArray31 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray31, ' ');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray33);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray33);
        java.lang.Character[] charArray41 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray41, ' ');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray43);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray33, charArray43);
        java.lang.Character[] charArray51 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, ' ');
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray53);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray54);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray33, charArray54);
        int int59 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray54, '4', 100);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray22, charArray54);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 44a44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 44a44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, 4, a, 4, 4]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test08507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08507");
        int[] intArray3 = new int[] { '#', (byte) -1, (short) 0 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (int) '#', (int) (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray3, (int) (byte) 1);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray9, (-1));
        int[] intArray16 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.clone(intArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray9, intArray16);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray16);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[35, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test08508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08508");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        java.lang.Short[] shortArray12 = new java.lang.Short[] { (short) 1 };
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) (byte) 100);
        short[] shortArray17 = new short[] {};
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray17);
        float[] floatArray22 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(floatArray22, (float) 0);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, 10.0f);
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        boolean boolean30 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray16, (java.lang.Object) floatArray28, false);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray10, (java.lang.Object[]) floatArray28);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, false);
        java.lang.Boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray10);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        java.lang.Boolean[][] booleanArray37 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray44 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray51 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray58 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray65 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray66 = new java.lang.Boolean[][] { booleanArray44, booleanArray51, booleanArray58, booleanArray65 };
        java.lang.Boolean[][] booleanArray67 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray37, booleanArray66);
        java.util.Map<java.lang.Object, java.lang.Object> objMap68 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray37);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet69 = objMap68.entrySet();
        java.util.Set<java.lang.Object> objSet70 = objMap68.keySet();
        java.util.Set<java.lang.Object> objSet71 = objMap68.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet72 = objMap68.entrySet();
        java.lang.Short[] shortArray74 = new java.lang.Short[] { (short) 1 };
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray74);
        int int77 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray75, (short) 10);
        int int80 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray75, (short) 100, (int) (byte) 1);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray75);
        java.lang.Short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        java.lang.Byte[] byteArray83 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        java.lang.Byte[] byteArray84 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray83);
        int int86 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray82, (java.lang.Object) byteArray84, 4);
        java.lang.Object obj87 = objMap68.replace((java.lang.Object) shortArray75, (java.lang.Object) int86);
        short[] shortArray89 = org.apache.commons.lang3.ArrayUtils.remove(shortArray75, (int) (short) 0);
        int int91 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray10, (java.lang.Object) (short) 0, (int) (byte) -1);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(objMap68);
        org.junit.Assert.assertNotNull(objEntrySet69);
        org.junit.Assert.assertNotNull(objSet70);
        org.junit.Assert.assertNotNull(objSet71);
        org.junit.Assert.assertNotNull(objEntrySet72);
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[1]");
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(shortArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray89), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test08509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08509");
        int[] intArray0 = new int[] {};
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.add(intArray0, 0, 100);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray3);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray10 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.add(intArray10, (int) 'a');
        int[] intArray18 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray13, intArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray13);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray13);
        int[] intArray28 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.clone(intArray28);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray28);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.addAll(intArray13, intArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray3, intArray13);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray3, 7);
        double[] doubleArray38 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray38);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.add(doubleArray38, (double) (byte) 10);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray38, (double) 0L, 0);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray38, (double) (short) -1, (int) (byte) -1);
        java.lang.Double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray38);
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray48, (double) 1);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray48);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 7, (java.lang.Object) doubleArray48);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, -1, -1, 0, 97, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test08510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08510");
        java.util.Iterator[] iteratorArray1 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray2 = (java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray1;
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray3 = org.apache.commons.lang3.ArrayUtils.clone((java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray1);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray6 = org.apache.commons.lang3.ArrayUtils.subarray(objEntryItorArray3, 7, 0);
        java.lang.Boolean[][] booleanArray7 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray36 = new java.lang.Boolean[][] { booleanArray14, booleanArray21, booleanArray28, booleanArray35 };
        java.lang.Boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray36);
        java.util.Map<java.lang.Object, java.lang.Object> objMap38 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray7);
        java.lang.Short[] shortArray41 = new java.lang.Short[] { (short) 1 };
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray41);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray41, (short) 10);
        java.lang.Object obj45 = objMap38.replace((java.lang.Object) 2, (java.lang.Object) shortArray44);
        java.lang.Character[] charArray51 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, 'a');
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.add(charArray53, '#');
        boolean boolean56 = objMap38.equals((java.lang.Object) '#');
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = objMap38.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList58 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor59 = objEntryList58.iterator();
        java.lang.String[] strArray60 = new java.lang.String[] {};
        java.lang.String[] strArray64 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray65 = org.apache.commons.lang3.ArrayUtils.addAll(strArray60, strArray64);
        java.lang.Comparable<java.lang.String>[] strComparableArray66 = objEntryList58.toArray((java.lang.Comparable<java.lang.String>[]) strArray60);
        java.lang.Object[] objArray67 = objEntryList58.toArray();
        boolean boolean68 = objEntrySet57.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList58);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor69 = objEntrySet57.iterator();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray70 = org.apache.commons.lang3.ArrayUtils.add(objEntryItorArray3, objEntryItor69);
        org.junit.Assert.assertNotNull(iteratorArray1);
        org.junit.Assert.assertNotNull(objEntryItorArray2);
        org.junit.Assert.assertNotNull(objEntryItorArray3);
        org.junit.Assert.assertNotNull(objEntryItorArray6);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(objMap38);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertNotNull(objEntryItor59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strComparableArray66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objEntryItor69);
        org.junit.Assert.assertNotNull(objEntryItorArray70);
    }

    @Test
    public void test08511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08511");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.lang.Character[] charArray38 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, 'a');
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.add(charArray40, '#');
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.remove(charArray40, (int) (short) 0);
        java.lang.Object obj45 = objMap31.remove((java.lang.Object) charArray44);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList47 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor48 = objEntryList47.iterator();
        java.lang.String[] strArray49 = new java.lang.String[] {};
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray54 = org.apache.commons.lang3.ArrayUtils.addAll(strArray49, strArray53);
        java.lang.Comparable<java.lang.String>[] strComparableArray55 = objEntryList47.toArray((java.lang.Comparable<java.lang.String>[]) strArray49);
        java.lang.Object[] objArray56 = objEntryList47.toArray();
        int[] intArray61 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray62 = org.apache.commons.lang3.ArrayUtils.clone(intArray61);
        int[] intArray64 = org.apache.commons.lang3.ArrayUtils.add(intArray61, (int) 'a');
        int[] intArray69 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray70 = org.apache.commons.lang3.ArrayUtils.clone(intArray69);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray70);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray64, intArray70);
        int int74 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray70, 0);
        java.lang.Integer[] intArray75 = org.apache.commons.lang3.ArrayUtils.toObject(intArray70);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray70);
        int[] intArray77 = new int[] {};
        int[] intArray78 = org.apache.commons.lang3.ArrayUtils.clone(intArray77);
        int int81 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray78, 1, (int) (byte) 1);
        boolean boolean82 = objMap31.replace((java.lang.Object) objEntryList47, (java.lang.Object) intArray70, (java.lang.Object) (byte) 1);
        java.util.Spliterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySpliterator83 = objEntryList47.spliterator();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , a,  , #]");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNotNull(objEntryItor48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strComparableArray55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objEntrySpliterator83);
    }

    @Test
    public void test08512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08512");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        float[] floatArray6 = null;
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray6);
        float[] floatArray8 = null;
        float[] floatArray12 = new float[] { (short) 100, 0, 10 };
        float[] floatArray15 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(floatArray15, (float) 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 10.0f);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray15);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray12, 3, 0);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray8, floatArray12);
        float[] floatArray28 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray28);
        java.lang.Float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray29);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray29);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, 0.0f);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray31, (float) 5, (int) ' ');
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray31);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.clone(floatArray31);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray38, (float) ' ');
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray7, floatArray40);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) 2, 0);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray7, (float) 6);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test08513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08513");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) 10);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 10);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.clone(byteArray6);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 10);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.clone(byteArray14);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray14, (int) (byte) 100, 11);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 10, 10, 10, 10, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 10, 10, 10, 10, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test08514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08514");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean2 = objEntryList0.remove((java.lang.Object) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 1);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray5);
        byte[] byteArray8 = new byte[] { (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray8);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray5, byteArray8);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray5, (byte) 100);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray12, (byte) 10, 8);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test08515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08515");
        java.lang.Character[] charArray5 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder9 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder12 = equalsBuilder9.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray17 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray17);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.add(doubleArray17, (double) (byte) 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) 0L, 0);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder9.append(doubleArray13, doubleArray17);
        long[] longArray34 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.clone(longArray34);
        java.lang.Long[] longArray36 = org.apache.commons.lang3.ArrayUtils.toObject(longArray35);
        long[] longArray42 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.clone(longArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray35, longArray43);
        long[] longArray50 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.clone(longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray51);
        long[] longArray58 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray58);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray51, longArray59);
        java.lang.Long[] longArray61 = org.apache.commons.lang3.ArrayUtils.toObject(longArray59);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder62 = equalsBuilder28.append(longArray35, longArray59);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder65 = equalsBuilder62.append(false, true);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) charArray5, (java.lang.Object) equalsBuilder62);
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(equalsBuilder12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertNotNull(equalsBuilder62);
        org.junit.Assert.assertNotNull(equalsBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[4, #, #,  , a]");
    }

    @Test
    public void test08516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08516");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) doubleArray7);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray7);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0]");
    }

    @Test
    public void test08517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08517");
        java.lang.Double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList2 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor3 = objEntryList2.iterator();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry4 = null;
        boolean boolean5 = objEntryList2.add(objEntry4);
        int int6 = objEntryList2.size();
        java.lang.Boolean[][] booleanArray7 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray36 = new java.lang.Boolean[][] { booleanArray14, booleanArray21, booleanArray28, booleanArray35 };
        java.lang.Boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray36);
        java.util.Map<java.lang.Object, java.lang.Object> objMap38 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray7);
        java.lang.Short[] shortArray41 = new java.lang.Short[] { (short) 1 };
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray41);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray41, (short) 10);
        java.lang.Object obj45 = objMap38.replace((java.lang.Object) 2, (java.lang.Object) shortArray44);
        objMap38.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet47 = objMap38.entrySet();
        java.lang.Object obj48 = null;
        boolean boolean49 = objEntrySet47.remove(obj48);
        boolean boolean50 = objEntryList2.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet47);
        boolean boolean51 = objEntryList2.isEmpty();
        objEntryList2.clear();
        java.util.Spliterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySpliterator53 = objEntryList2.spliterator();
        int[] intArray58 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.clone(intArray58);
        int[] intArray61 = org.apache.commons.lang3.ArrayUtils.add(intArray58, (int) 'a');
        int[] intArray66 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.clone(intArray66);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray67);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray61, intArray67);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray67);
        int[] intArray72 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray67, 0);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray72);
        int[] intArray75 = org.apache.commons.lang3.ArrayUtils.add(intArray72, (int) '4');
        int[] intArray77 = org.apache.commons.lang3.ArrayUtils.add(intArray75, 3);
        int[] intArray78 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray75);
        boolean boolean79 = objEntryList2.equals((java.lang.Object) intArray75);
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray0, (java.lang.Object) objEntryList2, 9);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(objEntryItor3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(objMap38);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(objEntrySet47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objEntrySpliterator53);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 100, 52]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 100, 52, 3]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 100, 52]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test08518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08518");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray9 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray12 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder0.append(doubleArray9, doubleArray12);
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) 1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append((java.lang.Object[]) shortArray15, (java.lang.Object[]) byteArray17);
        java.lang.Short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray15);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15, (short) (byte) 1);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray22, (short) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.add(shortArray24, 2, (short) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1]");
    }

    @Test
    public void test08519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08519");
        short[] shortArray0 = null;
        java.lang.Boolean[][] booleanArray1 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray8 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray15 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray22 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray29 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray30 = new java.lang.Boolean[][] { booleanArray8, booleanArray15, booleanArray22, booleanArray29 };
        java.lang.Boolean[][] booleanArray31 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray30);
        java.util.Map<java.lang.Object, java.lang.Object> objMap32 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray1);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = objMap32.entrySet();
        java.util.Set<java.lang.Object> objSet34 = objMap32.keySet();
        java.util.Set<java.lang.Object> objSet35 = objMap32.keySet();
        java.lang.Short[] shortArray37 = new java.lang.Short[] { (short) 1 };
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray37);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray37);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray37, (short) (byte) 100);
        short[] shortArray42 = new short[] {};
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray42);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray41, shortArray42);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray42, (short) (byte) 10, (int) (byte) 10);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray42);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.clone(shortArray42);
        java.lang.Short[] shortArray51 = new java.lang.Short[] { (short) 1 };
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray51);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray51);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray51, (short) (byte) 100);
        short[] shortArray56 = new short[] {};
        java.lang.Short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray55, shortArray56);
        java.lang.Short[] shortArray60 = new java.lang.Short[] { (short) 1 };
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray60);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray60);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray60, (short) (byte) 100);
        short[] shortArray65 = new short[] {};
        java.lang.Short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray65);
        short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray64, shortArray65);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray58, shortArray65);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray58);
        short[] shortArray71 = org.apache.commons.lang3.ArrayUtils.add(shortArray58, (short) 0);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray42, shortArray71);
        boolean boolean73 = objMap32.equals((java.lang.Object) shortArray42);
        short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.clone(shortArray42);
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray42);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray75);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray0, shortArray75);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray0, (short) (byte) 0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(objMap32);
        org.junit.Assert.assertNotNull(objEntrySet33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertNotNull(objSet35);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[1]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1]");
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[]");
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[1]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[1, 0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray74), "[]");
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(shortArray79);
    }

    @Test
    public void test08520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08520");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        java.lang.Character[] charArray10 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray10, ' ');
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray1, (java.lang.Object[]) charArray10);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) shortArray1);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08521");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, ' ');
        java.lang.Character[] charArray18 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, 'a');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.add(charArray20, '#');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, ' ');
        java.lang.Character[] charArray32 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray32, ' ');
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray32, '#');
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray36, ' ');
        java.lang.Character[] charArray45 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray45, ' ');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray45, '#');
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.clone(charArray49);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray50);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray51, 'a');
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray51);
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.subarray(charArray51, (int) (byte) 100, 9);
        java.lang.Character[] charArray58 = org.apache.commons.lang3.ArrayUtils.toObject(charArray51);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray58, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, 4, a, 4, a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ , 4, 4, a, 4,  , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " 44a4 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " 44a4 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ , 4, 4, a, 4,  , 4, 4, a, 4,  , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , 4, 4, a, 4,  , 4, 4, a, 4]");
    }

    @Test
    public void test08522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08522");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) 1 };
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray10);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) (byte) 100);
        short[] shortArray15 = new short[] {};
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray14, shortArray15);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray8);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) (byte) -1);
        java.lang.String str22 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray8);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) 0);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray8);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray8, (short) 100);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{1}" + "'", str22, "{1}");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test08523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08523");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean35 = objEntryList33.remove((java.lang.Object) byteArray34);
        boolean boolean36 = objEntrySet32.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.lang.Object[] objArray37 = objEntryList33.toArray();
        java.lang.Object[] objArray38 = objEntryList33.toArray();
        java.lang.Boolean[][] booleanArray39 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray46 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray53 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray60 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray67 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray68 = new java.lang.Boolean[][] { booleanArray46, booleanArray53, booleanArray60, booleanArray67 };
        java.lang.Boolean[][] booleanArray69 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray39, booleanArray68);
        java.util.Map<java.lang.Object, java.lang.Object> objMap70 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray39);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet71 = objMap70.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList72 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean74 = objEntryList72.remove((java.lang.Object) byteArray73);
        boolean boolean75 = objEntrySet71.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList72);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor76 = objEntrySet71.iterator();
        java.lang.Object[] objArray77 = objEntrySet71.toArray();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream78 = objEntrySet71.parallelStream();
        boolean boolean79 = objEntryList33.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet71);
        java.util.Spliterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySpliterator80 = objEntrySet71.spliterator();
        boolean boolean81 = objEntrySet71.isEmpty();
        boolean boolean83 = objEntrySet71.remove((java.lang.Object) 100.0f);
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry84 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = objEntrySet71.add(objEntry84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertNotNull(objMap70);
        org.junit.Assert.assertNotNull(objEntrySet71);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objEntryItor76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(objEntryStream78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEntrySpliterator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test08524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08524");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (short) 0);
        long[] longArray13 = new long[] { 'a', 1, 0 };
        long[] longArray19 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        java.lang.Long[] longArray21 = org.apache.commons.lang3.ArrayUtils.toObject(longArray20);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.clone(longArray20);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.add(longArray22, (long) (short) 0);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.clone(longArray24);
        long[] longArray31 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.clone(longArray31);
        java.lang.Long[] longArray33 = org.apache.commons.lang3.ArrayUtils.toObject(longArray32);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray32);
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.add(longArray34, (long) (short) 0);
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.addAll(longArray25, longArray34);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray25, (long) ' ', (int) ' ');
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray25);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray13, 10L, (int) (short) 0);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.addAll(longArray9, longArray13);
        java.lang.Long[] longArray46 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray46);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray46);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray48);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray48);
        long[] longArray56 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.clone(longArray56);
        java.lang.Long[] longArray58 = org.apache.commons.lang3.ArrayUtils.toObject(longArray57);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray57);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.subarray(longArray59, 1, 7);
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.addAll(longArray48, longArray63);
        long[] longArray68 = new long[] { 4, 'a', (byte) 0 };
        long[] longArray70 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray68, (long) 'a');
        long[] longArray72 = org.apache.commons.lang3.ArrayUtils.remove(longArray70, (int) (byte) 1);
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.addAll(longArray48, longArray72);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray48);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray45, longArray48);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[97, 1, 0]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[32, 100, 10, 10, 1, 0, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[32, 100, 10, 10, 1, 97, 1, 0]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[]");
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[1, 10, 10, 100, 32]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[10, 10, 100, 32]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[10, 10, 100, 32]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[4, 97, 0]");
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[4, 0]");
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[4]");
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[4]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test08525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08525");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray7, ' ', 5);
        java.lang.Character[] charArray18 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, ' ');
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray18);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray22, '4', (int) (short) 1);
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray22);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        java.lang.Character[] charArray34 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray34, ' ');
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray34, '#');
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.clone(charArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        java.lang.Character[] charArray47 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray47, ' ');
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray47, '#');
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.clone(charArray51);
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.addAll(charArray38, charArray52);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray53, 'a');
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray28, charArray53);
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray53, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4a44  44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4a44  44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, a, 4, 4,  ,  , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ , 4, 4, a, 4,  , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " 444 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " 444 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ , 4, 4, 4,  , 4, 4, a, 4]");
    }

    @Test
    public void test08526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08526");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, (long) (short) 1);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, (long) '4');
        java.lang.Long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toObject(longArray13);
        java.lang.String str16 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) longArray13, "{{},{},{},{},{},{}}");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{32,100,10,10,1}" + "'", str16, "{32,100,10,10,1}");
    }

    @Test
    public void test08527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08527");
        java.lang.Double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray0, (double) (-1.0f));
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray2, (int) ' ', 10);
        double[] doubleArray9 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray9);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, (double) (byte) 10);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, (double) 100.0f, (double) 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray5, doubleArray9);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray9, 0.0d, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test08528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08528");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0L, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) -1, (int) (byte) -1);
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13, (double) 1);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, 0.0d);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray15, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test08529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08529");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray9 = new short[] {};
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (short) -1);
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) 1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15, (short) (byte) 100);
        short[] shortArray20 = new short[] {};
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray20);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray20);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray24);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) (byte) 100);
        short[] shortArray29 = new short[] {};
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray28, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray29);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray32, (short) (byte) 10);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray32);
        java.lang.Short[] shortArray37 = new java.lang.Short[] { (short) 1 };
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray37);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray37);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray37, (short) (byte) 100);
        short[] shortArray42 = new short[] {};
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray42);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray41, shortArray42);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray44, (short) 0);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray44, (short) (byte) 10);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray44, (short) -1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray44);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray44, (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray53);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray53, (short) 10);
        java.lang.Short[] shortArray58 = new java.lang.Short[] { (short) 1 };
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray58);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray58, (short) 10);
        int int63 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray61, (short) (byte) 1);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray56, shortArray61);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.add(shortArray61, (-1), (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[1]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1, 1]");
    }

    @Test
    public void test08530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08530");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray6);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(floatArray11, (float) 4);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(floatArray11, (float) (short) 10);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08531");
        float[] floatArray3 = new float[] { (short) 100, 0, 10 };
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, 10.0f);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray6);
        float[] floatArray15 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(floatArray15, (float) 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 10.0f);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray15);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (-1.0f));
        float[] floatArray26 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray26);
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray27);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray27);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.add(floatArray29, 0.0f);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray29, 0.0f);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray23, floatArray29);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.remove(floatArray29, 0);
        float[] floatArray39 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray39);
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray39, 0, 100);
        float[] floatArray46 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray46);
        java.lang.Character[] charArray53 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray53, 'a');
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray46, (java.lang.Object) 'a');
        float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray46, (int) (byte) 1, (int) (byte) 1);
        float[] floatArray62 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.contains(floatArray62, (float) 0);
        float[] floatArray67 = org.apache.commons.lang3.ArrayUtils.add(floatArray62, 10.0f);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.contains(floatArray62, (float) (-1));
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray62);
        float[] floatArray71 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray46, floatArray62);
        float[] floatArray72 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray39, floatArray62);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray29, floatArray62);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray75 = org.apache.commons.lang3.ArrayUtils.remove(floatArray29, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[1.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test08532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08532");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        boolean[] booleanArray19 = new boolean[] { false, false, false, false };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray19, false);
        java.lang.Boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray19);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray19);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray19);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray19);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray19);
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray36 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray43 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray50 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray57 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray58 = new java.lang.Boolean[][] { booleanArray36, booleanArray43, booleanArray50, booleanArray57 };
        java.lang.Boolean[][] booleanArray59 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray29, booleanArray58);
        java.util.Map<java.lang.Object, java.lang.Object> objMap60 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray29);
        java.lang.Short[] shortArray63 = new java.lang.Short[] { (short) 1 };
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray63);
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray63, (short) 10);
        java.lang.Object obj67 = objMap60.replace((java.lang.Object) 2, (java.lang.Object) shortArray66);
        boolean[] booleanArray72 = new boolean[] { false, true, true, true };
        boolean[] booleanArray73 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray72);
        boolean boolean74 = objMap60.containsKey((java.lang.Object) booleanArray72);
        boolean[] booleanArray75 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray72);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray19, booleanArray75);
        boolean[] booleanArray78 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray19, true);
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray78, false, (int) (short) 10);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray78);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertNotNull(objMap60);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1]");
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[1]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray73), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray75), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test08533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08533");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray4);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray4);
        float[] floatArray12 = new float[] { 1L, 100L, 100 };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) (-1L), (int) (short) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 'a', (int) (byte) 10);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray4, (java.lang.Object) floatArray12);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.add(intArray4, 4);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.subarray(intArray21, 100, (int) (short) 100);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray24, 6, (int) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray24);
        int[] intArray33 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.clone(intArray33);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray33, (int) 'a');
        int[] intArray41 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.clone(intArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray36, intArray42);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray42, 0);
        java.lang.Integer[] intArray47 = org.apache.commons.lang3.ArrayUtils.toObject(intArray42);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray42);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray24, intArray48);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, -1, -1, 0, 4]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test08534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08534");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((long) (byte) 10, (long) (byte) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder3.append((byte) 1, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder27 = equalsBuilder3.append((byte) 1, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder3.append((long) 1, (long) (byte) 0);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray31);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray32, (byte) -1);
        java.lang.Byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray34);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList36 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean38 = objEntryList36.remove((java.lang.Object) byteArray37);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray37, (byte) 1);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray37);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray37, (byte) 100);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray43, (byte) 0);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.clone(byteArray43);
        java.lang.Byte[] byteArray51 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray51, (byte) 100);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.add(byteArray53, (byte) 10);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray53, 0, (int) (short) 1);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList59 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray60 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean61 = objEntryList59.remove((java.lang.Object) byteArray60);
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray60, (byte) 1);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray60);
        byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray64);
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.clone(byteArray65);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.clone(byteArray66);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray53, byteArray66);
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.remove(byteArray53, (int) (short) 1);
        byte[] byteArray71 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray43, byteArray53);
        float[] floatArray74 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray75 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray74);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray75);
        java.lang.Object[] objArray77 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.Object[]) floatArray75);
        java.lang.Byte[] byteArray84 = new java.lang.Byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 0 };
        byte[] byteArray85 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray84);
        byte[] byteArray86 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray84);
        java.lang.Object[] objArray87 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) byteArray84);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) objArray77, (java.lang.Object) byteArray84);
        java.lang.Byte[] byteArray89 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray84);
        byte[] byteArray90 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray84);
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray53, byteArray90);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder92 = equalsBuilder3.append(byteArray34, byteArray53);
        boolean boolean93 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray53);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(equalsBuilder27);
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100, 1, 100, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[-1.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(equalsBuilder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test08535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08535");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (byte) 10);
        java.lang.Long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toObject(longArray3);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.subarray(longArray3, 5, 4);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray3);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray3);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
    }

    @Test
    public void test08536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08536");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        boolean[] booleanArray23 = new boolean[] { false, false, false, false };
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray23);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        java.lang.Boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray23);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray23);
        java.lang.Boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray23);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray29);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.add(booleanArray30, 0, true);
        boolean[] booleanArray38 = new boolean[] { false, false, false, false };
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray38, false);
        java.lang.Boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray38);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray38, true, 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder3.append(booleanArray30, booleanArray38);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray38);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, false, false]");
    }

    @Test
    public void test08537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08537");
        java.lang.Object[] objArray0 = null;
        long[][] longArray1 = new long[][] {};
        long[][] longArray2 = new long[][] {};
        long[][] longArray3 = new long[][] {};
        long[][] longArray4 = new long[][] {};
        long[][][] longArray5 = new long[][][] { longArray1, longArray2, longArray3, longArray4 };
        long[][][][] longArray6 = new long[][][][] { longArray5 };
        long[][] longArray7 = new long[][] {};
        long[][] longArray8 = new long[][] {};
        long[][] longArray9 = new long[][] {};
        long[][] longArray10 = new long[][] {};
        long[][][] longArray11 = new long[][][] { longArray7, longArray8, longArray9, longArray10 };
        long[][][][] longArray12 = new long[][][][] { longArray11 };
        long[][] longArray13 = new long[][] {};
        long[][] longArray14 = new long[][] {};
        long[][] longArray15 = new long[][] {};
        long[][] longArray16 = new long[][] {};
        long[][][] longArray17 = new long[][][] { longArray13, longArray14, longArray15, longArray16 };
        long[][][][] longArray18 = new long[][][][] { longArray17 };
        long[][] longArray19 = new long[][] {};
        long[][] longArray20 = new long[][] {};
        long[][] longArray21 = new long[][] {};
        long[][] longArray22 = new long[][] {};
        long[][][] longArray23 = new long[][][] { longArray19, longArray20, longArray21, longArray22 };
        long[][][][] longArray24 = new long[][][][] { longArray23 };
        long[][][][][] longArray25 = new long[][][][][] { longArray6, longArray12, longArray18, longArray24 };
        long[][] longArray26 = new long[][] {};
        long[][] longArray27 = new long[][] {};
        long[][] longArray28 = new long[][] {};
        long[][] longArray29 = new long[][] {};
        long[][][] longArray30 = new long[][][] { longArray26, longArray27, longArray28, longArray29 };
        long[][][][] longArray31 = new long[][][][] { longArray30 };
        long[][] longArray32 = new long[][] {};
        long[][] longArray33 = new long[][] {};
        long[][] longArray34 = new long[][] {};
        long[][] longArray35 = new long[][] {};
        long[][][] longArray36 = new long[][][] { longArray32, longArray33, longArray34, longArray35 };
        long[][][][] longArray37 = new long[][][][] { longArray36 };
        long[][] longArray38 = new long[][] {};
        long[][] longArray39 = new long[][] {};
        long[][] longArray40 = new long[][] {};
        long[][] longArray41 = new long[][] {};
        long[][][] longArray42 = new long[][][] { longArray38, longArray39, longArray40, longArray41 };
        long[][][][] longArray43 = new long[][][][] { longArray42 };
        long[][] longArray44 = new long[][] {};
        long[][] longArray45 = new long[][] {};
        long[][] longArray46 = new long[][] {};
        long[][] longArray47 = new long[][] {};
        long[][][] longArray48 = new long[][][] { longArray44, longArray45, longArray46, longArray47 };
        long[][][][] longArray49 = new long[][][][] { longArray48 };
        long[][][][][] longArray50 = new long[][][][][] { longArray31, longArray37, longArray43, longArray49 };
        long[][] longArray51 = new long[][] {};
        long[][] longArray52 = new long[][] {};
        long[][] longArray53 = new long[][] {};
        long[][] longArray54 = new long[][] {};
        long[][][] longArray55 = new long[][][] { longArray51, longArray52, longArray53, longArray54 };
        long[][][][] longArray56 = new long[][][][] { longArray55 };
        long[][] longArray57 = new long[][] {};
        long[][] longArray58 = new long[][] {};
        long[][] longArray59 = new long[][] {};
        long[][] longArray60 = new long[][] {};
        long[][][] longArray61 = new long[][][] { longArray57, longArray58, longArray59, longArray60 };
        long[][][][] longArray62 = new long[][][][] { longArray61 };
        long[][] longArray63 = new long[][] {};
        long[][] longArray64 = new long[][] {};
        long[][] longArray65 = new long[][] {};
        long[][] longArray66 = new long[][] {};
        long[][][] longArray67 = new long[][][] { longArray63, longArray64, longArray65, longArray66 };
        long[][][][] longArray68 = new long[][][][] { longArray67 };
        long[][] longArray69 = new long[][] {};
        long[][] longArray70 = new long[][] {};
        long[][] longArray71 = new long[][] {};
        long[][] longArray72 = new long[][] {};
        long[][][] longArray73 = new long[][][] { longArray69, longArray70, longArray71, longArray72 };
        long[][][][] longArray74 = new long[][][][] { longArray73 };
        long[][][][][] longArray75 = new long[][][][][] { longArray56, longArray62, longArray68, longArray74 };
        long[][][][][][] longArray76 = new long[][][][][][] { longArray25, longArray50, longArray75 };
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray76);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray76);
        java.lang.Object obj79 = null;
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray76, obj79);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray0, (java.lang.Object[]) longArray76);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08538");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 10);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, 1, (short) (byte) -1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray2);
        java.lang.Short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray2);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder10 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder10.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray18 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.add(doubleArray18, (double) (byte) 10);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) 0L, 0);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray18, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder29 = equalsBuilder10.append(doubleArray14, doubleArray18);
        long[] longArray35 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.clone(longArray35);
        java.lang.Long[] longArray37 = org.apache.commons.lang3.ArrayUtils.toObject(longArray36);
        long[] longArray43 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.clone(longArray43);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray36, longArray44);
        long[] longArray51 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.clone(longArray51);
        java.lang.Long[] longArray53 = org.apache.commons.lang3.ArrayUtils.toObject(longArray52);
        long[] longArray59 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.clone(longArray59);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray52, longArray60);
        java.lang.Long[] longArray62 = org.apache.commons.lang3.ArrayUtils.toObject(longArray60);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder29.append(longArray36, longArray60);
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray36, (long) (-1), (int) (byte) -1);
        java.lang.Long[] longArray67 = org.apache.commons.lang3.ArrayUtils.toObject(longArray36);
        java.lang.Long[] longArray68 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray67);
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray9, (java.lang.Object) longArray67, 4);
        java.lang.Long[] longArray71 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray67);
        long[] longArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray67);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray67, (long) 6);
        long[] longArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray67);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder29);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray75), "[32, 100, 10, 10, 1]");
    }

    @Test
    public void test08539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08539");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        java.lang.Boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray10);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray11);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11);
        java.lang.Long[] longArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray15);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray16);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16);
        java.lang.Long[] longArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray16);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19);
        java.lang.Long[] longArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray11, (java.lang.Object[]) longArray21);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) boolean22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08540");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, 0.0d);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (-1), (int) (short) 10, (double) (-1.0f));
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray3, 0);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) (byte) -1);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 9);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test08541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08541");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray5);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8, 3);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.remove(intArray10, 2);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray10, (int) ' ');
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, -1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, -1, -1, 100]");
    }

    @Test
    public void test08542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08542");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        objMap31.clear();
        java.lang.Object obj40 = null;
        long[] longArray46 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.clone(longArray46);
        java.lang.Long[] longArray48 = org.apache.commons.lang3.ArrayUtils.toObject(longArray47);
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.add(longArray49, (long) (short) 0);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.clone(longArray51);
        long[] longArray58 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray58);
        java.lang.Long[] longArray60 = org.apache.commons.lang3.ArrayUtils.toObject(longArray59);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.clone(longArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.add(longArray61, (long) (short) 0);
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.addAll(longArray52, longArray61);
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray52, (long) 10);
        java.lang.Object obj67 = objMap31.putIfAbsent(obj40, (java.lang.Object) longArray52);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray52, (long) (byte) -1);
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray52, (long) (short) 10, 0);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.contains(longArray52, (long) 8);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray76 = org.apache.commons.lang3.ArrayUtils.remove(longArray52, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[32, 100, 10, 10, 1, 0, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[32, 100, 10, 1, 0]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test08543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08543");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0L, 0);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray3, 2, (int) (short) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray3, 100.0d);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray20);
        double[] doubleArray25 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray25);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (double) (byte) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) 10.0f);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.add(doubleArray31, (double) 1.0f);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray31);
        double[] doubleArray40 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray40);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray40);
        java.lang.Object obj43 = null;
        boolean boolean45 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray42, obj43, false);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray42, (double) 3);
        double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray34, doubleArray47);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray34);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.add(doubleArray49, (double) 2);
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray20, doubleArray49);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray52, (double) (byte) -1, 3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0, 100.0, 10.0, 2.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0, 0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test08544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08544");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, (long) (short) 1);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, (long) (short) -1);
        long[] longArray19 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray20);
        boolean boolean23 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) longArray9, (java.lang.Object) longArray20, false);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[1, 10, 10, 100, 32]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08545");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test08546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08546");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        double[] doubleArray5 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray5);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        boolean boolean10 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray1, (java.lang.Object) doubleArray8, true);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 0);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray1, (byte) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray1, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test08547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08547");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        java.lang.Boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray10);
        java.lang.Character[] charArray17 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17, 'a');
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, 'a', (-1));
        java.lang.Character[] charArray28 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray28, ' ');
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray28, '#');
        java.lang.Character[] charArray38 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray39 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray38);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, 'a');
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray32, charArray41);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray32);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray11, (java.lang.Object) charArray32);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray11, true);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.add(booleanArray46, true);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.add(booleanArray48, 4, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "a a # 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "a a # 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a,  , a,  , #,  , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, false, false, false, false, true]");
    }

    @Test
    public void test08548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08548");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray3);
        java.lang.Class<?> wildcardClass5 = floatArray3.getClass();
        float[] floatArray8 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray8);
        java.lang.Float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray9);
        java.lang.Class<?> wildcardClass11 = floatArray9.getClass();
        float[] floatArray14 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray15);
        java.lang.Class<?> wildcardClass17 = floatArray15.getClass();
        float[] floatArray20 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray20);
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray21);
        java.lang.Class<?> wildcardClass23 = floatArray21.getClass();
        float[] floatArray26 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray26);
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray27);
        java.lang.Class<?> wildcardClass29 = floatArray27.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray30 = new java.lang.reflect.GenericDeclaration[] { wildcardClass5, wildcardClass11, wildcardClass17, wildcardClass23, wildcardClass29 };
        float[] floatArray33 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray33);
        java.lang.Float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray34);
        java.lang.Class<?> wildcardClass36 = floatArray34.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray37 = org.apache.commons.lang3.ArrayUtils.add(genericDeclarationArray30, (java.lang.reflect.GenericDeclaration) wildcardClass36);
        java.lang.Short[] shortArray40 = new java.lang.Short[] { (short) 1 };
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray40);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray40);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray40, (short) (byte) 100);
        short[] shortArray45 = new short[] {};
        java.lang.Short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray45);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray44, shortArray45);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray47, (short) 0);
        java.lang.Short[] shortArray51 = new java.lang.Short[] { (short) 1 };
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray51);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray51);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray51, (short) (byte) 100);
        short[] shortArray56 = new short[] {};
        java.lang.Short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray55, shortArray56);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray55, 4, (-1));
        short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray49, shortArray61);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray62);
        java.lang.Short[] shortArray65 = new java.lang.Short[] { (short) 1 };
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray65);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray65, (short) 10);
        short[] shortArray71 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray68, 7, (int) 'a');
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray68, (short) 1);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray62, shortArray68);
        java.lang.Class<?> wildcardClass75 = shortArray62.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.GenericDeclaration[] genericDeclarationArray76 = org.apache.commons.lang3.ArrayUtils.add(genericDeclarationArray37, (-1), (java.lang.reflect.GenericDeclaration) wildcardClass75);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(genericDeclarationArray30);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(genericDeclarationArray37);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[1]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[1]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[]");
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[1]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[1]");
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test08549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08549");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder3.append((byte) 10, (byte) 0);
        java.lang.Character[] charArray13 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, 'a');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, ' ');
        java.lang.Character[] charArray23 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray23, 'a');
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray25, '#');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.subarray(charArray25, (int) (byte) -1, (int) '#');
        java.lang.Character[] charArray36 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray36);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray36, 'a');
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.clone(charArray39);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.addAll(charArray25, charArray39);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray39, 'a');
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.clone(charArray39);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.addAll(charArray17, charArray44);
        java.lang.Character[] charArray51 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, ' ');
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, '#');
        java.lang.Character[] charArray61 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray61);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61, 'a');
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray55, charArray64);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray64, 'a', (int) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder69 = equalsBuilder7.append(charArray44, charArray64);
        java.lang.Object obj70 = null;
        java.lang.Object obj71 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder72 = equalsBuilder7.append(obj70, obj71);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, #, #,  ]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder69);
        org.junit.Assert.assertNotNull(equalsBuilder72);
    }

    @Test
    public void test08550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08550");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray5);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7);
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9, 6);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.add(intArray11, (int) (short) 1, (int) (short) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(intArray11, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = org.apache.commons.lang3.ArrayUtils.add(intArray11, 6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 1, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08551");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d, 0.0d, 0.0d, 1.0d };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) '#');
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray7, 7, (int) (short) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray10, (double) 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
    }

    @Test
    public void test08552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08552");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray9);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray9, (int) '4', 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# a a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# a a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#,  , a,  , a]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "# a a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "# a a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  , a,  , a]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test08553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08553");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray8);
        java.lang.Character[] charArray15 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, ' ');
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray17);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray8);
        java.lang.Character[] charArray27 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray27, ' ');
        java.lang.Character[] charArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray30);
        java.lang.Character[] charArray32 = org.apache.commons.lang3.ArrayUtils.toObject(charArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(charArray31, 'a');
        java.lang.Character[] charArray40 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray40, ' ');
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray42);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(charArray42, 'a');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray42, '#');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray42);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.addAll(charArray31, charArray42);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray42);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray42);
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray42);
        java.lang.Object obj53 = null;
        java.lang.Character[] charArray59 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray60 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray59);
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray59, '4');
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray59, ' ');
        java.lang.String[] strArray65 = new java.lang.String[] {};
        java.lang.String[] strArray69 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray70 = org.apache.commons.lang3.ArrayUtils.addAll(strArray65, strArray69);
        java.lang.String[] strArray71 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray65);
        java.lang.String[] strArray72 = org.apache.commons.lang3.ArrayUtils.toArray(strArray71);
        java.lang.String[] strArray73 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray71);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) strArray73);
        boolean boolean75 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(obj53, (java.lang.Object) charArray59, strArray73);
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray59, '#');
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray42, charArray77);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4a44 4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4a44 4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, a, 4, 4,  , 4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , 4, 4, a, 4,  , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , 4, 4, a, 4,  , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test08554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08554");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, 10.0f);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray2);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        java.lang.Float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test08555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08555");
        short[] shortArray0 = null;
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray0, 10, 8);
        org.junit.Assert.assertNull(shortArray3);
    }

    @Test
    public void test08556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08556");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((long) ' ', (long) (short) 10);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        java.lang.Character[] charArray33 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray33, ' ');
        java.lang.Character[] charArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder22.append((java.lang.Object[]) shortArray24, (java.lang.Object[]) charArray36);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder39 = equalsBuilder37.appendSuper(true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder42 = equalsBuilder37.append((byte) -1, (byte) 100);
        boolean[] booleanArray44 = new boolean[] { true };
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray44, (int) (short) 100, (int) (short) 0);
        boolean[] booleanArray49 = new boolean[] { true };
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray49, (int) (short) 100, (int) (short) 0);
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray52, (int) '#', (int) '4');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder42.append(booleanArray44, booleanArray52);
        java.lang.Integer[] intArray61 = new java.lang.Integer[] { 4, 4, (-1), 0 };
        java.lang.Integer[] intArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray61);
        boolean[] booleanArray67 = new boolean[] { false, false, false, false };
        boolean[] booleanArray68 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray67);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray67, false);
        java.lang.Boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray67);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray62, (java.lang.Object) booleanArray71, (int) '#');
        int[] intArray74 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray62);
        int[] intArray77 = org.apache.commons.lang3.ArrayUtils.add(intArray74, 3, (int) (byte) 100);
        int[] intArray78 = org.apache.commons.lang3.ArrayUtils.clone(intArray77);
        int[] intArray79 = new int[] {};
        int[] intArray82 = org.apache.commons.lang3.ArrayUtils.add(intArray79, 0, 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder83 = equalsBuilder42.append(intArray78, intArray82);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder86 = equalsBuilder42.append((float) 7, 0.0f);
        boolean boolean87 = equalsBuilder86.isEquals();
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder39);
        org.junit.Assert.assertNotNull(equalsBuilder42);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[true]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[]");
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[4, 4, -1, 0]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[4, 4, -1, 100, 0]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[4, 4, -1, 100, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder83);
        org.junit.Assert.assertNotNull(equalsBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test08557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08557");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        java.lang.Object[] objArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray10, (byte) 0, 5);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.clone(byteArray10);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList15 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean17 = objEntryList15.remove((java.lang.Object) byteArray16);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray16, (byte) -1);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, 5, (int) '4');
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.clone(byteArray19);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray19, (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray19);
        java.lang.Byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray27);
        byte[] byteArray29 = null;
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray28, byteArray29);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray28, (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder33 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder33.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray37 = new double[] {};
        double[] doubleArray41 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray41);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.add(doubleArray41, (double) (byte) 10);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray41, (double) 0L, 0);
        double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray41);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray41, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder52 = equalsBuilder33.append(doubleArray37, doubleArray41);
        double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray57 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray57);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.add(doubleArray57, (double) (byte) 10);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray60, (double) 10.0f);
        double[] doubleArray66 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray66);
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.add(doubleArray66, (double) (byte) 10);
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray66, (double) 0L, 0);
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray66);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray66, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray77 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray60, doubleArray66);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder78 = equalsBuilder52.append(doubleArray53, doubleArray66);
        byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray79);
        byte[] byteArray81 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray83 = org.apache.commons.lang3.ArrayUtils.add(byteArray81, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder84 = equalsBuilder78.append(byteArray79, byteArray81);
        byte[] byteArray85 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray79);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray85);
        byte[] byteArray87 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray28, byteArray85);
        byte[] byteArray89 = org.apache.commons.lang3.ArrayUtils.add(byteArray87, (byte) 0);
        byte[] byteArray92 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray87, 3, (int) ' ');
        byte[] byteArray93 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray19, byteArray92);
        byte[] byteArray94 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray14, byteArray93);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[1, 100, -1, 10, 100, 0]");
    }

    @Test
    public void test08558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08558");
        java.lang.Integer[] intArray4 = new java.lang.Integer[] { 4, 4, (-1), 0 };
        java.lang.Integer[] intArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray4);
        boolean[] booleanArray10 = new boolean[] { false, false, false, false };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray10, false);
        java.lang.Boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray5, (java.lang.Object) booleanArray14, (int) '#');
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.add(intArray17, 3, (int) (byte) 100);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray20, (int) (byte) -1);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.add(intArray20, 2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[4, 4, -1, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[4, 4, -1, 100, 0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[4, 4, -1, 100, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[4, 4, 100, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[4, 4, -1, 100, 0, 2]");
    }

    @Test
    public void test08559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08559");
        java.util.stream.Stream[] streamArray1 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray2 = (java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) streamArray1;
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray5 = org.apache.commons.lang3.ArrayUtils.subarray(objEntryStreamArray2, 100, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray7 = org.apache.commons.lang3.ArrayUtils.remove(objEntryStreamArray2, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(streamArray1);
        org.junit.Assert.assertNotNull(objEntryStreamArray2);
        org.junit.Assert.assertNotNull(objEntryStreamArray5);
    }

    @Test
    public void test08560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08560");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray6, (double) 10.0f);
        double[] doubleArray12 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (double) (byte) 10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 0L, 0);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray6, doubleArray12);
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray12);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray25);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray25);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (-1.0d), (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test08561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08561");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        objMap31.clear();
        boolean[] booleanArray38 = new boolean[] { false, false, false, false };
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray38, false);
        java.lang.Boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray38);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray38);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder44.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean48 = equalsBuilder47.isEquals();
        java.lang.String[] strArray49 = new java.lang.String[] {};
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray54 = org.apache.commons.lang3.ArrayUtils.addAll(strArray49, strArray53);
        java.lang.String[] strArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray49);
        java.lang.Character[] charArray61 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61, ' ');
        java.lang.Character[] charArray64 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray61);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder65 = equalsBuilder47.append((java.lang.Object[]) strArray49, (java.lang.Object[]) charArray64);
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray64);
        java.lang.Object obj67 = objMap31.putIfAbsent((java.lang.Object) booleanArray38, (java.lang.Object) charArray66);
        java.lang.Short[] shortArray69 = new java.lang.Short[] { (short) 1 };
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray69);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray69);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray69, (short) (byte) 100);
        short[] shortArray74 = new short[] {};
        java.lang.Short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray74);
        short[] shortArray76 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray73, shortArray74);
        short[] shortArray78 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray76, (short) 0);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray78, (int) ' ', 0);
        short[] shortArray82 = new short[] {};
        java.lang.Short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray82);
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray82);
        short[] shortArray85 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray78, shortArray82);
        boolean boolean86 = objMap31.containsValue((java.lang.Object) shortArray82);
        java.util.Set<java.lang.Object> objSet87 = objMap31.keySet();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertNotNull(equalsBuilder65);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[1]");
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[1]");
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray74), "[]");
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertNotNull(shortArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray76), "[1]");
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[1]");
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[]");
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[]");
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray85), "[1]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objSet87);
    }

    @Test
    public void test08562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08562");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray9 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray12 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder0.append(doubleArray9, doubleArray12);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder16 = equalsBuilder13.append(1L, (long) ' ');
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(equalsBuilder16);
    }

    @Test
    public void test08563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08563");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        objMap31.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet40 = objMap31.entrySet();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder41.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder41.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder46.append((long) (short) 10, (long) '#');
        boolean boolean50 = equalsBuilder46.isEquals();
        java.lang.Object obj51 = objMap31.remove((java.lang.Object) boolean50);
        objMap31.clear();
        double[] doubleArray56 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray56);
        double[] doubleArray59 = org.apache.commons.lang3.ArrayUtils.add(doubleArray56, (double) (byte) 10);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray59, (double) 10.0f);
        double[] doubleArray65 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray65);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.add(doubleArray65, (double) (byte) 10);
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray65, (double) 0L, 0);
        double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray65);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray65, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray76 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray59, doubleArray65);
        double[] doubleArray80 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray81 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray80);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray80);
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray65, doubleArray80);
        java.lang.Object obj84 = objMap31.get((java.lang.Object) doubleArray80);
        double[] doubleArray85 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray80);
        double[] doubleArray87 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray80, (double) (-1.0f));
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objEntrySet40);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[0.0, 10.0, 100.0]");
    }

    @Test
    public void test08564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08564");
        long[] longArray6 = new long[] { (-1), (short) 100, 100L, 'a', (-1L), 'a' };
        long[] longArray13 = new long[] { (-1), (short) 100, 100L, 'a', (-1L), 'a' };
        long[] longArray20 = new long[] { (-1), (short) 100, 100L, 'a', (-1L), 'a' };
        long[] longArray27 = new long[] { (-1), (short) 100, 100L, 'a', (-1L), 'a' };
        long[][] longArray28 = new long[][] { longArray6, longArray13, longArray20, longArray27 };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray28);
        java.lang.Object[] objArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray28);
        long[][] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        long[] longArray38 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.clone(longArray38);
        java.lang.Long[] longArray40 = org.apache.commons.lang3.ArrayUtils.toObject(longArray39);
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (short) 0);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        java.lang.Long[] longArray44 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray40);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray44);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.subarray(longArray45, 100, 2);
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray48);
        // The following exception was thrown during execution in test generation
        try {
            long[][] longArray50 = org.apache.commons.lang3.ArrayUtils.add(longArray31, 10, longArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[-1, 100, 100, 97, -1, 97]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 100, 100, 97, -1, 97]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 100, 100, 97, -1, 97]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 100, 100, 97, -1, 97]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[[-1, 100, 100, 97, -1, 97], [-1, 100, 100, 97, -1, 97], [-1, 100, 100, 97, -1, 97], [-1, 100, 100, 97, -1, 97]]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
    }

    @Test
    public void test08565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08565");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        float[] floatArray4 = new float[] { (short) 100, 0, 10 };
        float[] floatArray7 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (float) 0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, 10.0f);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray7);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (float) (byte) 10);
        boolean boolean16 = objEntryList0.equals((java.lang.Object) boolean15);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList17 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Object[] objArray18 = objEntryList17.toArray();
        boolean boolean19 = objEntryList0.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList17);
        java.lang.Boolean[][] booleanArray20 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray27 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray34 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray48 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray49 = new java.lang.Boolean[][] { booleanArray27, booleanArray34, booleanArray41, booleanArray48 };
        java.lang.Boolean[][] booleanArray50 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray20, booleanArray49);
        java.util.Map<java.lang.Object, java.lang.Object> objMap51 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray20);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet52 = objMap51.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList53 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean55 = objEntryList53.remove((java.lang.Object) byteArray54);
        boolean boolean56 = objEntrySet52.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList53);
        boolean boolean57 = objEntryList17.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet52);
        int int58 = objEntrySet52.size();
        objEntrySet52.clear();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList60 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor61 = objEntryList60.iterator();
        java.lang.String[] strArray62 = new java.lang.String[] {};
        java.lang.String[] strArray66 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray67 = org.apache.commons.lang3.ArrayUtils.addAll(strArray62, strArray66);
        java.lang.Comparable<java.lang.String>[] strComparableArray68 = objEntryList60.toArray((java.lang.Comparable<java.lang.String>[]) strArray62);
        java.lang.reflect.Type[][][] typeArray69 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][] typeArray70 = new java.lang.reflect.Type[][] {};
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(typeArray70);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(typeArray70);
        java.lang.reflect.Type[][][] typeArray73 = org.apache.commons.lang3.ArrayUtils.add(typeArray69, typeArray70);
        boolean boolean74 = objEntryList60.remove((java.lang.Object) typeArray73);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor75 = objEntryList60.iterator();
        boolean boolean76 = objEntrySet52.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList60);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList77 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Object[] objArray78 = objEntryList77.toArray();
        int int79 = objEntryList77.size();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList80 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList81 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor82 = objEntryList81.iterator();
        java.lang.String[] strArray83 = new java.lang.String[] {};
        java.lang.String[] strArray87 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray88 = org.apache.commons.lang3.ArrayUtils.addAll(strArray83, strArray87);
        java.lang.Comparable<java.lang.String>[] strComparableArray89 = objEntryList81.toArray((java.lang.Comparable<java.lang.String>[]) strArray83);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream90 = objEntryList81.parallelStream();
        boolean boolean91 = objEntryList80.addAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList81);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream92 = objEntryList81.stream();
        boolean boolean93 = objEntryList77.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList81);
        boolean boolean94 = objEntrySet52.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList81);
        int int95 = objEntryList81.size();
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertNotNull(objMap51);
        org.junit.Assert.assertNotNull(objEntrySet52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objEntryItor61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strComparableArray68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objEntryItor75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(objEntryItor82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strComparableArray89);
        org.junit.Assert.assertNotNull(objEntryStream90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objEntryStream92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test08566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08566");
        java.lang.Long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 3);
        org.junit.Assert.assertNull(longArray2);
    }

    @Test
    public void test08567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08567");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.add(intArray4, (int) 'a');
        int[] intArray12 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.clone(intArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray7);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7);
        int[] intArray22 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray22);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.addAll(intArray7, intArray22);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, (int) ' ');
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.clone(intArray28);
        java.lang.Integer[] intArray30 = org.apache.commons.lang3.ArrayUtils.toObject(intArray29);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray30, (int) (short) 0);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray30, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100, -1, -1, 0, 97, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, -1, -1, 0]");
    }

    @Test
    public void test08568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08568");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        boolean[] booleanArray14 = new boolean[] { false, false, false, false };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray14);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20, false);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20);
        java.lang.Character[] charArray30 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray30, ' ');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray32);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray33);
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray33);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray20, (java.lang.Object[]) charArray35);
        java.lang.Boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray20);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray37, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, false, false, false]");
    }

    @Test
    public void test08569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08569");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder3.append((byte) 10, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder10 = equalsBuilder7.append((byte) 100, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder11 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder14 = equalsBuilder11.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray18 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray19, (java.lang.Object) ' ');
        boolean[] booleanArray26 = new boolean[] { false, true, true, true };
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray19, (java.lang.Object) booleanArray27, (int) (byte) 10);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.add(booleanArray27, true);
        boolean[] booleanArray36 = new boolean[] { false, true, true, true };
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray36);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray37, true, (int) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder11.append(booleanArray31, booleanArray37);
        boolean[] booleanArray46 = new boolean[] { false, false, false, false };
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray46);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray46, false);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.add(booleanArray46, true);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray46);
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.add(booleanArray46, 3, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder56.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray63 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray63);
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray64, (java.lang.Object) ' ');
        boolean[] booleanArray71 = new boolean[] { false, true, true, true };
        boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray71);
        int int74 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray64, (java.lang.Object) booleanArray72, (int) (byte) 10);
        boolean[] booleanArray76 = org.apache.commons.lang3.ArrayUtils.add(booleanArray72, true);
        boolean[] booleanArray81 = new boolean[] { false, true, true, true };
        boolean[] booleanArray82 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray81);
        int int85 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray82, true, (int) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder86 = equalsBuilder56.append(booleanArray76, booleanArray82);
        boolean[] booleanArray88 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray76, false);
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray46, booleanArray88);
        boolean[] booleanArray92 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray88, (int) 'a', (int) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder93 = equalsBuilder10.append(booleanArray37, booleanArray88);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder96 = equalsBuilder10.append(true, true);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertNotNull(equalsBuilder10);
        org.junit.Assert.assertNotNull(equalsBuilder14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray76), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray81), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray82), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertNotNull(equalsBuilder86);
        org.junit.Assert.assertNotNull(booleanArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray88), "[true, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(booleanArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray92), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder93);
        org.junit.Assert.assertNotNull(equalsBuilder96);
    }

    @Test
    public void test08570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08570");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.Set<java.lang.Object> objSet33 = objMap31.keySet();
        java.util.Set<java.lang.Object> objSet34 = objMap31.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = objMap31.entrySet();
        objMap31.clear();
        java.lang.Boolean[][] booleanArray37 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray44 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray51 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray58 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray65 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray66 = new java.lang.Boolean[][] { booleanArray44, booleanArray51, booleanArray58, booleanArray65 };
        java.lang.Boolean[][] booleanArray67 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray37, booleanArray66);
        java.util.Map<java.lang.Object, java.lang.Object> objMap68 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray37);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet69 = objMap68.entrySet();
        java.lang.Character[] charArray75 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray75, 'a');
        char[] charArray79 = org.apache.commons.lang3.ArrayUtils.add(charArray77, '#');
        char[] charArray81 = org.apache.commons.lang3.ArrayUtils.remove(charArray77, (int) (short) 0);
        java.lang.Object obj82 = objMap68.remove((java.lang.Object) charArray81);
        float[] floatArray86 = new float[] { 1L, 100L, 100 };
        int int89 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray86, (float) (-1L), (int) (short) 100);
        java.lang.Float[] floatArray90 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray86);
        java.lang.Object obj91 = null;
        java.lang.Object obj92 = objMap68.put((java.lang.Object) floatArray86, obj91);
        boolean[] booleanArray93 = null;
        boolean[] booleanArray95 = org.apache.commons.lang3.ArrayUtils.add(booleanArray93, true);
        boolean boolean96 = objMap68.containsKey((java.lang.Object) booleanArray93);
        java.util.Collection<java.lang.Object> objCollection97 = objMap68.values();
        objMap31.putAll(objMap68);
        java.util.Set<java.lang.Object> objSet99 = objMap68.keySet();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(objSet33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(objMap68);
        org.junit.Assert.assertNotNull(objEntrySet69);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[ , a,  , #]");
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(floatArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray86), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(floatArray90);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(booleanArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray95), "[true]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(objCollection97);
        org.junit.Assert.assertNotNull(objSet99);
    }

    @Test
    public void test08571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08571");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) -1);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray21, (double) (byte) 10);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.add(doubleArray21, (double) 4);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0, 100.0, -1.0, 4.0]");
    }

    @Test
    public void test08572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08572");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder5 = equalsBuilder0.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder8 = equalsBuilder5.append((long) (short) 10, (long) '#');
        java.lang.Character[] charArray14 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray14, ' ');
        java.lang.Character[] charArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray14);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17);
        java.lang.Character[] charArray19 = org.apache.commons.lang3.ArrayUtils.toObject(charArray18);
        java.lang.Character[] charArray25 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray25);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray25, 'a');
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray28, ' ');
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray18, charArray28);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray18, '4');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray18);
        char[] charArray36 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder8.append(charArray35, charArray36);
        java.lang.Short[] shortArray39 = new java.lang.Short[] { (short) 1 };
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray39);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39, (short) (byte) 100);
        short[] shortArray44 = new short[] {};
        java.lang.Short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray44);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray43, shortArray44);
        java.lang.Short[] shortArray48 = new java.lang.Short[] { (short) 1 };
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray48);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray48);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray48, (short) -1);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray44, shortArray52);
        java.lang.Short[] shortArray55 = new java.lang.Short[] { (short) 1 };
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray55);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray55);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray55);
        java.lang.Short[] shortArray60 = new java.lang.Short[] { (short) 1 };
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray60);
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray60, (short) 10);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray58, shortArray63);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder65 = equalsBuilder37.append(shortArray52, shortArray64);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder68 = equalsBuilder65.append((double) 2, (double) (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder71 = equalsBuilder68.append((short) (byte) 100, (short) (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder68.append((byte) 10, (byte) 100);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(equalsBuilder5);
        org.junit.Assert.assertNotNull(equalsBuilder8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " 44a44## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " 44a44## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , 4, 4, a, 4, 4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[1]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[1]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1]");
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[1]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder65);
        org.junit.Assert.assertNotNull(equalsBuilder68);
        org.junit.Assert.assertNotNull(equalsBuilder71);
        org.junit.Assert.assertNotNull(equalsBuilder74);
    }

    @Test
    public void test08573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08573");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray9 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray12 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder0.append(doubleArray9, doubleArray12);
        java.lang.Boolean[][] booleanArray14 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray42 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray43 = new java.lang.Boolean[][] { booleanArray21, booleanArray28, booleanArray35, booleanArray42 };
        java.lang.Boolean[][] booleanArray44 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray14, booleanArray43);
        java.lang.Boolean[][] booleanArray45 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray52 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray59 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray66 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray73 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray74 = new java.lang.Boolean[][] { booleanArray52, booleanArray59, booleanArray66, booleanArray73 };
        java.lang.Boolean[][] booleanArray75 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray45, booleanArray74);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder76 = equalsBuilder0.append((java.lang.Object[]) booleanArray43, (java.lang.Object[]) booleanArray45);
        equalsBuilder0.reset();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder0.append((double) '4', (double) 2);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder83 = equalsBuilder0.append((short) 10, (short) 10);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertNotNull(equalsBuilder76);
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertNotNull(equalsBuilder83);
    }

    @Test
    public void test08574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08574");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, 10.0f);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) (-1));
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) 10, 7);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 3);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray15);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, (float) 'a');
        float[] floatArray21 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray21);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray21, 0.0f);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray18, floatArray21);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray18);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray14, 5, (float) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08575");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 10, (int) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray7);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) 1, (int) ' ');
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 10);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray21);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.add(byteArray26, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder0.append(byteArray7, byteArray26);
        java.lang.Byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray26);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray36, (byte) 10, (int) (short) -1);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray36);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray36, (byte) 1, (int) ' ');
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray45, (byte) -1);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray36, byteArray45);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray52, (byte) 10, (int) (short) -1);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray52, (byte) 10);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray52, (byte) 1);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.contains(byteArray52, (byte) 100);
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray65, (byte) 10, (int) (short) -1);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray65);
        int int72 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray65, (byte) 1, (int) ' ');
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray52, byteArray65);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray80);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray80, (byte) 10);
        int int85 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray80, (byte) 10);
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray52, byteArray80);
        byte[] byteArray89 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray52, (int) (byte) -1, (int) '#');
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.contains(byteArray52, (byte) 0);
        byte[] byteArray92 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray45, byteArray52);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray45);
        boolean boolean94 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray26, byteArray45);
        int int97 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray26, (byte) 0, (int) (byte) 100);
        byte[] byteArray98 = org.apache.commons.lang3.ArrayUtils.clone(byteArray26);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 10, 0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[]");
    }

    @Test
    public void test08576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08576");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        equalsBuilder3.reset();
        float[] floatArray7 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        java.lang.Character[] charArray14 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray14, 'a');
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray7, (java.lang.Object) 'a');
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray7, (int) (byte) 1, (int) (byte) 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray7, (float) (byte) 100, (int) (byte) 100);
        java.lang.Float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray7);
        java.lang.Short[] shortArray27 = new java.lang.Short[] { (short) 1 };
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27);
        boolean[] booleanArray35 = new boolean[] { false, false, false, false };
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray35);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray35, false);
        java.lang.Boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray35);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray35);
        java.lang.Boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray35);
        java.lang.Short[] shortArray43 = new java.lang.Short[] { (short) 1 };
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray43);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray43);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray43, (short) (byte) 100);
        short[] shortArray48 = new short[] {};
        java.lang.Short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray48);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray47, shortArray48);
        float[] floatArray53 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray53);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.contains(floatArray53, (float) 0);
        float[] floatArray58 = org.apache.commons.lang3.ArrayUtils.add(floatArray53, 10.0f);
        java.lang.Float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray53);
        boolean boolean61 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray47, (java.lang.Object) floatArray59, false);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray41, (java.lang.Object[]) floatArray59);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray27, (java.lang.Object[]) floatArray59);
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray59, (java.lang.Object) 1, 0);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray59);
        float[] floatArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray59);
        java.lang.Float[] floatArray69 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray68);
        float[] floatArray71 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray68, 10.0f);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder72 = equalsBuilder3.append(floatArray7, floatArray71);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[1]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(equalsBuilder72);
    }

    @Test
    public void test08577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08577");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray1, (float) 'a');
        float[] floatArray7 = new float[] { 1L, 100L, 100 };
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray7, (float) (-1L), (int) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray7);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray3);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray12);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.clone(floatArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 13, 9);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test08578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08578");
        java.util.stream.Stream[] streamArray1 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray2 = (java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) streamArray1;
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray5 = org.apache.commons.lang3.ArrayUtils.subarray(objEntryStreamArray2, 100, 0);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray6 = org.apache.commons.lang3.ArrayUtils.clone(objEntryStreamArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.BaseStream<java.util.Map.Entry<java.lang.Object, java.lang.Object>, java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>>[] objEntryBaseStreamArray8 = org.apache.commons.lang3.ArrayUtils.remove((java.util.stream.BaseStream<java.util.Map.Entry<java.lang.Object, java.lang.Object>, java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>>[]) objEntryStreamArray6, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(streamArray1);
        org.junit.Assert.assertNotNull(objEntryStreamArray2);
        org.junit.Assert.assertNotNull(objEntryStreamArray5);
        org.junit.Assert.assertNotNull(objEntryStreamArray6);
    }

    @Test
    public void test08579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08579");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.clone(byteArray6);
        byte[] byteArray9 = null;
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray9);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder11 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder14 = equalsBuilder11.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray19 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray19);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray19, (double) (byte) 10);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) 0L, 0);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray19);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder11.append(doubleArray15, doubleArray19);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray35 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray35);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.add(doubleArray35, (double) (byte) 10);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray38, (double) 10.0f);
        double[] doubleArray44 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray44);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.add(doubleArray44, (double) (byte) 10);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray44, (double) 0L, 0);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray44);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray44, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray38, doubleArray44);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder30.append(doubleArray31, doubleArray44);
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray57);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.add(byteArray59, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder62 = equalsBuilder56.append(byteArray57, byteArray59);
        java.lang.Boolean boolean63 = equalsBuilder56.build();
        java.lang.Long[] longArray69 = new java.lang.Long[] { 10L, 100L, 0L, (-1L), 0L };
        java.lang.Long[] longArray75 = new java.lang.Long[] { 10L, 100L, 0L, (-1L), 0L };
        java.lang.Long[] longArray81 = new java.lang.Long[] { 10L, 100L, 0L, (-1L), 0L };
        java.lang.Long[][] longArray82 = new java.lang.Long[][] { longArray69, longArray75, longArray81 };
        java.lang.Long[][] longArray83 = org.apache.commons.lang3.ArrayUtils.toArray(longArray82);
        java.lang.Object obj84 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder85 = equalsBuilder56.append((java.lang.Object) longArray83, obj84);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder88 = equalsBuilder85.append((short) (byte) 100, (short) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray9, (java.lang.Object) equalsBuilder88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(equalsBuilder14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder62);
        org.junit.Assert.assertEquals("'" + boolean63 + "' != '" + false + "'", boolean63, false);
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertNotNull(equalsBuilder85);
        org.junit.Assert.assertNotNull(equalsBuilder88);
    }

    @Test
    public void test08580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08580");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, false);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false);
        boolean[] booleanArray20 = new boolean[] { false, false, false, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        java.lang.Boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray20);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray20);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray20);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        boolean[] booleanArray33 = new boolean[] { false, false, false, false, true };
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray20, booleanArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, (int) ' ');
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray33);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray33);
        java.lang.Boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray33);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray33);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, false, false, false, false, false, true]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, false, true]");
    }

    @Test
    public void test08581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08581");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(shortArray2, (short) 100);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test08582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08582");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 10L);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) (-1));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.remove(floatArray2, (int) (byte) 0);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, (float) 6);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.clone(floatArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray14, (float) 6);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08583");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '#' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1, ' ');
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, 'a');
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, 'a', 4);
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
    }

    @Test
    public void test08584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08584");
        float[] floatArray0 = null;
        float[] floatArray4 = new float[] { (short) 100, 0, 10 };
        float[] floatArray7 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (float) 0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, 10.0f);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray7);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray4, 3, 0);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray4);
        float[] floatArray20 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray20);
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray21);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray21);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, 0.0f);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray23, (float) 5, (int) ' ');
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray23);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.clone(floatArray23);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(floatArray23, (float) 100);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08585");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder3.append((byte) 10, (byte) 0);
        java.lang.Boolean boolean8 = equalsBuilder3.build();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder11 = equalsBuilder3.append(true, false);
        float[] floatArray14 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(floatArray14, (float) 0);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray14, 10.0f);
        java.lang.Float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray14, (int) (byte) 0, (float) 100);
        float[] floatArray26 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray26);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(floatArray26, (float) 0);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.add(floatArray26, 10.0f);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(floatArray26, (float) (-1));
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray26);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder3.append(floatArray14, floatArray26);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder3.append((long) (short) 10, (long) (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder3.append(false, true);
        short[] shortArray42 = new short[] {};
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray42);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(shortArray42, (short) (byte) 0);
        boolean boolean46 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) true, (java.lang.Object) shortArray42);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray42, (int) (short) -1, 0);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
        org.junit.Assert.assertNotNull(equalsBuilder11);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[100.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[]");
    }

    @Test
    public void test08586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08586");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray4);
        java.lang.Integer[] intArray11 = new java.lang.Integer[] { 4, 4, (-1), 0 };
        java.lang.Integer[] intArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray11);
        boolean[] booleanArray17 = new boolean[] { false, false, false, false };
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray17, false);
        java.lang.Boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray17);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray12, (java.lang.Object) booleanArray21, (int) '#');
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray12);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray24, 3, (int) (byte) 100);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.clone(intArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray28);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray28, 0);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray28);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[4, 4, -1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[4, 4, -1, 100, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 100, -1, 4, 4]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, -1, 4, 4]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08587");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) (short) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray9, 0.0d, (double) 'a');
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test08588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08588");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) ' ');
        java.lang.Object obj7 = null;
        java.lang.Object[] objArray8 = org.apache.commons.lang3.ArrayUtils.add((java.lang.Object[]) doubleArray4, obj7);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) 0);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, 0.0d);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray12, (double) (short) 10);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[0.0, 10.0, 100.0, null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[0.0, 10.0, 100.0, null]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
    }

    @Test
    public void test08589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08589");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        java.lang.Character[] charArray44 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, 'a');
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.add(charArray46, '#');
        boolean boolean49 = objMap31.equals((java.lang.Object) '#');
        double[] doubleArray55 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray55);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray55);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray55, (double) (short) 100, (double) 3);
        java.lang.Object obj61 = objMap31.get((java.lang.Object) doubleArray55);
        long[] longArray67 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.clone(longArray67);
        java.lang.Long[] longArray69 = org.apache.commons.lang3.ArrayUtils.toObject(longArray68);
        long[] longArray70 = org.apache.commons.lang3.ArrayUtils.clone(longArray68);
        boolean boolean71 = objMap31.containsValue((java.lang.Object) longArray68);
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.add(longArray68, (long) (byte) -1);
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray73, (long) 100);
        long[] longArray77 = org.apache.commons.lang3.ArrayUtils.add(longArray73, (long) (short) 100);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.contains(longArray77, (long) 100);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[32, 100, 10, 10, 1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[32, 100, 10, 10, 1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test08590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08590");
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[][] objEntryStreamArray0 = null;
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[][] objEntryStreamArray1 = org.apache.commons.lang3.ArrayUtils.clone(objEntryStreamArray0);
        org.junit.Assert.assertNull(objEntryStreamArray1);
    }

    @Test
    public void test08591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08591");
        int[] intArray0 = new int[] {};
        int[] intArray1 = org.apache.commons.lang3.ArrayUtils.clone(intArray0);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 1, (int) (byte) 1);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray1);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 2);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test08592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08592");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray26);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) 'a');
        java.lang.Long[] longArray57 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray58 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray57);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray57);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray59);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray59);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray59);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (int) (byte) 1, (long) '#');
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray68 = org.apache.commons.lang3.ArrayUtils.add(longArray65, (int) ' ', (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[32, 35, 100, 10, 10, 1]");
    }

    @Test
    public void test08593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08593");
        int[] intArray0 = new int[] {};
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.add(intArray0, 0, 100);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray3);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray3);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray3);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder9 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder12 = equalsBuilder9.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray13 = new double[] {};
        double[] doubleArray17 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray17);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.add(doubleArray17, (double) (byte) 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) 0L, 0);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder9.append(doubleArray13, doubleArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder9.append((long) ' ', (long) (short) 10);
        java.lang.Short[] shortArray33 = new java.lang.Short[] { (short) 1 };
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray33);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray33);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray33);
        java.lang.Character[] charArray42 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, ' ');
        java.lang.Character[] charArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder31.append((java.lang.Object[]) shortArray33, (java.lang.Object[]) charArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder48 = equalsBuilder46.appendSuper(true);
        boolean[] booleanArray53 = new boolean[] { false, false, false, false };
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray53);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray53, false);
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.add(booleanArray53, true);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray53);
        boolean[] booleanArray64 = new boolean[] { false, false, false, false };
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray64);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder46.append(booleanArray53, booleanArray65);
        float[] floatArray69 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray70 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray69);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.contains(floatArray69, (float) 0);
        float[] floatArray74 = org.apache.commons.lang3.ArrayUtils.add(floatArray69, 10.0f);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.contains(floatArray69, (float) (-1));
        int int79 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray69, 0.0f, (int) '#');
        java.lang.Character[] charArray85 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray87 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray85, ' ');
        java.lang.Character[] charArray88 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray85);
        char[] charArray89 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray88);
        int int92 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray89, '#', (int) ' ');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder93 = equalsBuilder46.append((java.lang.Object) '#', (java.lang.Object) charArray89);
        int int94 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray8, (java.lang.Object) charArray89);
        int[] intArray95 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        java.lang.Integer[] intArray96 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap97 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) intArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '100', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(equalsBuilder12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder48);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[100]");
        org.junit.Assert.assertNotNull(intArray96);
    }

    @Test
    public void test08594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08594");
        java.lang.Byte[] byteArray4 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray4, (byte) 100);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (byte) 10);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, 0, (int) (short) 1);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList12 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean14 = objEntryList12.remove((java.lang.Object) byteArray13);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray13);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray17);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.clone(byteArray18);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.clone(byteArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray6, byteArray19);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) 10);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray24, (byte) -1, 100);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray24, (byte) -1, (int) (short) 100);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray24);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, 100, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test08595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08595");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        objMap31.clear();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder40.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray44 = new double[] {};
        double[] doubleArray48 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray48);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.add(doubleArray48, (double) (byte) 10);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray48, (double) 0L, 0);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray48);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray48, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder40.append(doubleArray44, doubleArray48);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder62 = equalsBuilder40.append((byte) 100, (byte) 1);
        java.lang.String[] strArray63 = new java.lang.String[] {};
        java.lang.String[] strArray67 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray68 = org.apache.commons.lang3.ArrayUtils.addAll(strArray63, strArray67);
        java.lang.Short[] shortArray70 = new java.lang.Short[] { (short) 1 };
        short[] shortArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray70);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray70);
        short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray70, (short) (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder75 = equalsBuilder40.append((java.lang.Object[]) strArray68, (java.lang.Object[]) shortArray70);
        short[] shortArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray70, (short) 10);
        java.lang.Object obj78 = objMap31.get((java.lang.Object) (short) 10);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet79 = objMap31.entrySet();
        objEntrySet79.clear();
        objEntrySet79.clear();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream82 = objEntrySet79.parallelStream();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertNotNull(equalsBuilder62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray71), "[1]");
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray74), "[1]");
        org.junit.Assert.assertNotNull(equalsBuilder75);
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[1]");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(objEntrySet79);
        org.junit.Assert.assertNotNull(objEntryStream82);
    }

    @Test
    public void test08596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08596");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.addAll(strArray5, strArray9);
        java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray5);
        java.lang.Character[] charArray17 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17, ' ');
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((java.lang.Object[]) strArray5, (java.lang.Object[]) charArray20);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder3.append((double) 'a', (double) 100.0f);
        boolean[] booleanArray29 = new boolean[] { false, false, false, false };
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray29);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray29, false);
        java.lang.Boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray29);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray29);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray29);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray29);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray36);
        boolean[] booleanArray42 = new boolean[] { false, false, false, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray42);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray42, false);
        java.lang.Boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray42);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray42);
        java.lang.Boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray42);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray48);
        boolean[] booleanArray54 = new boolean[] { false, false, false, false };
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray54);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray54, false);
        java.lang.Boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray54);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray49, booleanArray54);
        java.lang.Boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray54);
        boolean[] booleanArray65 = new boolean[] { false, false, false, false };
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray65);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray65, false);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.add(booleanArray65, true);
        double[] doubleArray76 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray77 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray76);
        boolean boolean78 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray70, (java.lang.Object) doubleArray76);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray76);
        double[] doubleArray80 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray76);
        int int82 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray80, (double) 10);
        double[] doubleArray83 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray80);
        double[] doubleArray86 = org.apache.commons.lang3.ArrayUtils.add(doubleArray80, 2, (double) (short) 0);
        double[] doubleArray89 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray86, 11, (int) (byte) 100);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) booleanArray54, (java.lang.Object) (byte) 100);
        int int93 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray54, false, 3);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder94 = equalsBuilder3.append(booleanArray36, booleanArray54);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.0, -1.0, 0.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNotNull(equalsBuilder94);
    }

    @Test
    public void test08597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08597");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.Set<java.lang.Object> objSet33 = objMap31.keySet();
        float[] floatArray36 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray36);
        java.lang.Character[] charArray43 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray43, 'a');
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray36, (java.lang.Object) 'a');
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray36, (int) (byte) 1, (int) (byte) 1);
        float[] floatArray52 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray52);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains(floatArray52, (float) 0);
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.add(floatArray52, 10.0f);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(floatArray52, (float) (-1));
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray52);
        float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray36, floatArray52);
        java.lang.Float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray61);
        java.lang.Object obj63 = objMap31.get((java.lang.Object) floatArray62);
        boolean[] booleanArray68 = new boolean[] { false, false, false, false };
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray68);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray68, false);
        java.lang.Boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray68);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray68, false);
        float[] floatArray78 = new float[] { 1L, 100L, 100 };
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray78, (float) (-1L), (int) (short) 100);
        java.lang.Float[] floatArray82 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray78);
        java.lang.Object obj83 = objMap31.put((java.lang.Object) booleanArray74, (java.lang.Object) floatArray82);
        java.lang.Boolean[] booleanArray84 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray74);
        boolean[] booleanArray86 = new boolean[] { true };
        boolean[] booleanArray89 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray86, (int) (short) 100, (int) (short) 0);
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray86, false);
        boolean[] booleanArray92 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray86);
        boolean boolean93 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray74, booleanArray86);
        int int95 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray74, true);
        boolean[] booleanArray97 = org.apache.commons.lang3.ArrayUtils.add(booleanArray74, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray99 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray74, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(objSet33);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray68), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, false, false]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(booleanArray84);
        org.junit.Assert.assertNotNull(booleanArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray86), "[true]");
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(booleanArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray92), "[true]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(booleanArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray97), "[false, false, false, true]");
    }

    @Test
    public void test08598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08598");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Character[] charArray9 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, 'a');
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray2, (java.lang.Object) 'a');
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 3);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) ' ');
        boolean[] booleanArray22 = new boolean[] { false, false, false, false };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, false);
        java.lang.Boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray22);
        java.lang.Boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        java.lang.Short[] shortArray30 = new java.lang.Short[] { (short) 1 };
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30, (short) (byte) 100);
        short[] shortArray35 = new short[] {};
        java.lang.Short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray35);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray35);
        float[] floatArray40 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(floatArray40, (float) 0);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, 10.0f);
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray40);
        boolean boolean48 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray34, (java.lang.Object) floatArray46, false);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray28, (java.lang.Object[]) floatArray46);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray28, false);
        java.lang.Boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray28);
        java.lang.Character[] charArray58 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray58, ' ');
        java.lang.Character[] charArray61 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray58);
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61);
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray64, false, 10);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray64, true);
        java.lang.Character[] charArray75 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray75, ' ');
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray77);
        java.lang.String[] strArray79 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isNotEmpty((java.lang.Comparable<java.lang.String>[]) strArray79);
        java.lang.String[] strArray81 = org.apache.commons.lang3.ArrayUtils.clone(strArray79);
        java.lang.String[] strArray82 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray81);
        java.lang.String[] strArray86 = new java.lang.String[] { "{}", "", "{}" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        boolean boolean89 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray78, (java.lang.Object) strArray82, (java.util.Collection<java.lang.String>) strList87);
        boolean boolean90 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray63, (java.lang.Object) booleanArray64, (java.util.Collection<java.lang.String>) strList87);
        boolean boolean91 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) floatArray2, (java.lang.Object) booleanArray52, (java.util.Collection<java.lang.String>) strList87);
        float[] floatArray93 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) (-1));
        float[] floatArray95 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, (float) (short) 100);
        boolean boolean97 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, 0.0f);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(floatArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray93), "[-1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray95), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test08599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08599");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(longArray6, (long) (byte) 0);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray6);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray9, (long) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray9);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[1, 10, 10, 100, 32]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[1, 10, 10, 100, 32]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test08600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08600");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray2);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) 5);
        float[] floatArray9 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray9);
        java.lang.Character[] charArray16 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray9, (java.lang.Object) 'a');
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray9, (int) (byte) 1, (int) (byte) 1);
        float[] floatArray25 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(floatArray25, (float) 0);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray25, 10.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(floatArray25, (float) (-1));
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray25);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray9, floatArray25);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray25);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray25);
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        java.lang.Float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray42, (byte) 10, (int) (short) -1);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray42);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray42, (byte) 1, (int) ' ');
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray42, (byte) 0);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList52 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean54 = objEntryList52.remove((java.lang.Object) byteArray53);
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray53, (byte) 1);
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray53);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray53, (byte) 100);
        byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.add(byteArray59, (byte) 1);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray51, byteArray61);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.contains(byteArray51, (byte) 10);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray38, (java.lang.Object) byteArray51);
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.add(byteArray66, (int) (byte) 0, (byte) 100);
        byte[] byteArray71 = org.apache.commons.lang3.ArrayUtils.add(byteArray69, (byte) 0);
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.clone(byteArray71);
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray51, byteArray71);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray73);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test08601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08601");
        java.lang.Byte[] byteArray4 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray4, (byte) 100);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray7);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray8);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
    }

    @Test
    public void test08602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08602");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        java.lang.Character[] charArray15 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray18);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        char[] charArray22 = new char[] { 'a' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray20, charArray22);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray20);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray20);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder27 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder27.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean31 = equalsBuilder30.isEquals();
        java.lang.String[] strArray32 = new java.lang.String[] {};
        java.lang.String[] strArray36 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray37 = org.apache.commons.lang3.ArrayUtils.addAll(strArray32, strArray36);
        java.lang.String[] strArray38 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray32);
        java.lang.Character[] charArray44 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, ' ');
        java.lang.Character[] charArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray44);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder48 = equalsBuilder30.append((java.lang.Object[]) strArray32, (java.lang.Object[]) charArray47);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray47);
        java.lang.Character[] charArray50 = org.apache.commons.lang3.ArrayUtils.toObject(charArray49);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray50);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray51, '4', (int) (short) 10);
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray51);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertNotNull(equalsBuilder48);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , 4, 4, a, 4,  , 4, 4, a, 4]");
    }

    @Test
    public void test08603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08603");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '#');
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, '#');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.remove(charArray9, 3);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a a##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a a##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , a, #, #]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test08604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08604");
        char[] charArray1 = new char[] { 'a' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        java.lang.Character[] charArray9 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, 'a');
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, 'a', (-1));
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray1, charArray11);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray1, ' ');
        java.lang.Character[] charArray18 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[a]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  ]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test08605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08605");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, (int) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, (int) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray4);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray13 = org.apache.commons.lang3.ArrayUtils.remove(intArray4, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test08606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08606");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Object[] objArray1 = objEntryList0.toArray();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList2 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean4 = objEntryList2.remove((java.lang.Object) byteArray3);
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry5 = null;
        boolean boolean6 = objEntryList2.add(objEntry5);
        boolean boolean7 = objEntryList0.addAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList2);
        float[][] floatArray8 = new float[][] {};
        float[][] floatArray9 = new float[][] {};
        float[][] floatArray10 = new float[][] {};
        float[][] floatArray11 = new float[][] {};
        float[][] floatArray12 = new float[][] {};
        float[][] floatArray13 = new float[][] {};
        float[][][] floatArray14 = new float[][][] { floatArray8, floatArray9, floatArray10, floatArray11, floatArray12, floatArray13 };
        float[][] floatArray15 = new float[][] {};
        float[][] floatArray16 = new float[][] {};
        float[][] floatArray17 = new float[][] {};
        float[][] floatArray18 = new float[][] {};
        float[][] floatArray19 = new float[][] {};
        float[][] floatArray20 = new float[][] {};
        float[][][] floatArray21 = new float[][][] { floatArray15, floatArray16, floatArray17, floatArray18, floatArray19, floatArray20 };
        float[][][][] floatArray22 = new float[][][][] { floatArray14, floatArray21 };
        float[][][][] floatArray23 = objEntryList2.toArray(floatArray22);
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry24 = null;
        boolean boolean25 = objEntryList2.add(objEntry24);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test08607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08607");
        char[] charArray1 = new char[] { 'a' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        java.lang.Character[] charArray9 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, 'a');
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, 'a', (-1));
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray1, charArray11);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray1, ' ');
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.subarray(charArray17, 11, (int) ' ');
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.toObject(charArray17);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21, 'a');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray23);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[a]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  ]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a,  ]");
    }

    @Test
    public void test08608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08608");
        long[] longArray0 = new long[] {};
        long[] longArray1 = new long[] {};
        long[][] longArray2 = new long[][] { longArray0, longArray1 };
        long[] longArray3 = new long[] {};
        long[] longArray4 = new long[] {};
        long[][] longArray5 = new long[][] { longArray3, longArray4 };
        long[] longArray6 = new long[] {};
        long[] longArray7 = new long[] {};
        long[][] longArray8 = new long[][] { longArray6, longArray7 };
        long[] longArray9 = new long[] {};
        long[] longArray10 = new long[] {};
        long[][] longArray11 = new long[][] { longArray9, longArray10 };
        long[] longArray12 = new long[] {};
        long[] longArray13 = new long[] {};
        long[][] longArray14 = new long[][] { longArray12, longArray13 };
        long[] longArray15 = new long[] {};
        long[] longArray16 = new long[] {};
        long[][] longArray17 = new long[][] { longArray15, longArray16 };
        long[][][] longArray18 = new long[][][] { longArray2, longArray5, longArray8, longArray11, longArray14, longArray17 };
        long[] longArray23 = new long[] { (byte) -1, '4', 10, 1 };
        long[][] longArray24 = new long[][] { longArray23 };
        long[] longArray30 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray30);
        java.lang.Long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toObject(longArray31);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.clone(longArray31);
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.add(longArray33, (long) (short) 0);
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.clone(longArray35);
        long[] longArray42 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.clone(longArray42);
        java.lang.Long[] longArray44 = org.apache.commons.lang3.ArrayUtils.toObject(longArray43);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.clone(longArray43);
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.add(longArray45, (long) (short) 0);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.addAll(longArray36, longArray45);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray36, (long) 10);
        long[][] longArray51 = org.apache.commons.lang3.ArrayUtils.add(longArray24, longArray50);
        long[][][] longArray52 = org.apache.commons.lang3.ArrayUtils.add(longArray18, longArray24);
        short[] shortArray55 = new short[] { (short) 0, (byte) 10 };
        short[][] shortArray56 = new short[][] { shortArray55 };
        short[] shortArray59 = new short[] { (short) 0, (byte) 10 };
        short[][] shortArray60 = new short[][] { shortArray59 };
        short[][][] shortArray61 = new short[][][] { shortArray56, shortArray60 };
        short[][][] shortArray64 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray61, (int) (byte) 10, (int) 'a');
        java.lang.Cloneable[][] cloneableArray65 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.Cloneable[][]) longArray18, (java.lang.Cloneable[][]) shortArray64);
        long[][][] longArray67 = org.apache.commons.lang3.ArrayUtils.remove(longArray18, 1);
        // The following exception was thrown during execution in test generation
        try {
            long[][][] longArray69 = org.apache.commons.lang3.ArrayUtils.remove(longArray67, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1, 52, 10, 1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[32, 100, 10, 10, 1, 0, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[0, 10]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[0, 10]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertNotNull(cloneableArray65);
        org.junit.Assert.assertNotNull(longArray67);
    }

    @Test
    public void test08609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08609");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray24 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray24);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray24, (double) (byte) 10);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray27, (double) 10.0f);
        double[] doubleArray33 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.add(doubleArray33, (double) (byte) 10);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray33, (double) 0L, 0);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray33);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray27, doubleArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder45 = equalsBuilder19.append(doubleArray20, doubleArray33);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray46);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder51 = equalsBuilder45.append(byteArray46, byteArray48);
        java.lang.Boolean boolean52 = equalsBuilder45.build();
        java.lang.Long[] longArray58 = new java.lang.Long[] { 10L, 100L, 0L, (-1L), 0L };
        java.lang.Long[] longArray64 = new java.lang.Long[] { 10L, 100L, 0L, (-1L), 0L };
        java.lang.Long[] longArray70 = new java.lang.Long[] { 10L, 100L, 0L, (-1L), 0L };
        java.lang.Long[][] longArray71 = new java.lang.Long[][] { longArray58, longArray64, longArray70 };
        java.lang.Long[][] longArray72 = org.apache.commons.lang3.ArrayUtils.toArray(longArray71);
        java.lang.Object obj73 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder45.append((java.lang.Object) longArray72, obj73);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder77 = equalsBuilder74.append((short) (byte) 100, (short) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder79 = equalsBuilder74.appendSuper(true);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder51);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + false + "'", boolean52, false);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertNotNull(equalsBuilder74);
        org.junit.Assert.assertNotNull(equalsBuilder77);
        org.junit.Assert.assertNotNull(equalsBuilder79);
    }

    @Test
    public void test08610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08610");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.addAll(strArray5, strArray9);
        java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray5);
        java.lang.Character[] charArray17 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17, ' ');
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((java.lang.Object[]) strArray5, (java.lang.Object[]) charArray20);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder3.append((int) (short) -1, 100);
        boolean[] booleanArray29 = new boolean[] { false, false, false, false };
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray29);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray29, false);
        java.lang.Boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray29);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray29, true, 0);
        boolean[] booleanArray41 = new boolean[] { false, false, false, false };
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray41);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray41, false);
        java.lang.Boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray41);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray41);
        java.lang.Boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray41);
        java.lang.Short[] shortArray49 = new java.lang.Short[] { (short) 1 };
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray49);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray49);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray49, (short) (byte) 100);
        short[] shortArray54 = new short[] {};
        java.lang.Short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray54);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray53, shortArray54);
        float[] floatArray59 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray59);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(floatArray59, (float) 0);
        float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.add(floatArray59, 10.0f);
        java.lang.Float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray59);
        boolean boolean67 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray53, (java.lang.Object) floatArray65, false);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray47, (java.lang.Object[]) floatArray65);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray47, false);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray70);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder72 = equalsBuilder3.append(booleanArray29, booleanArray71);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray71, true, 1);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[1]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1]");
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(equalsBuilder72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test08611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08611");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][] strArray9 = org.apache.commons.lang3.ArrayUtils.subarray(strArray6, 10, (int) 'a');
        java.lang.Comparable<java.lang.String>[][] strComparableArray10 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.Comparable<java.lang.String>[][]) strArray6);
        java.lang.String str12 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) strComparableArray10, "2");
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strComparableArray10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{{},{},{},{},{},{}}" + "'", str12, "{{},{},{},{},{},{}}");
    }

    @Test
    public void test08612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08612");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0L, 0);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean12 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray3, (java.lang.Object) booleanArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, 0.0d);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray3, (int) 'a', (int) (short) 1);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray3, (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0]");
    }

    @Test
    public void test08613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08613");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0L, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) -1, (int) (byte) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) 2);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, 0.0d);
        double[] doubleArray20 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray20);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.add(doubleArray20, (double) (byte) 10);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (short) 0, (int) ' ', (double) 1L);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) 2, (int) (short) 100, (double) 10L);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray16, doubleArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) (byte) 1, (int) (short) -1);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray20, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 100.0, 2.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 100.0, 2.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test08614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08614");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 100.0f, 0.0d);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 10.0f);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (byte) 1, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test08615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08615");
        java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
        int[] intArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
    }

    @Test
    public void test08616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08616");
        java.lang.Byte[] byteArray4 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray4, (byte) 100);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) -1);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 1, 100]");
    }

    @Test
    public void test08617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08617");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray1, (float) 'a');
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) floatArray1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray1, (float) 11);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, (float) (short) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[1.0]");
    }

    @Test
    public void test08618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08618");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        java.lang.Character[] charArray16 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray16);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, 'a');
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, ' ');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray19);
        java.lang.Character[] charArray29 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray29, ' ');
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray31);
        java.lang.Character[] charArray39 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39, ' ');
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray41);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray31, charArray41);
        java.lang.Character[] charArray49 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray49, ' ');
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray51);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray52);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray31, charArray52);
        double[] doubleArray58 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray59 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray58);
        double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.add(doubleArray58, (double) (byte) 10);
        double[] doubleArray63 = org.apache.commons.lang3.ArrayUtils.add(doubleArray58, 0.0d);
        char[] charArray65 = new char[] { 'a' };
        java.lang.Character[] charArray66 = org.apache.commons.lang3.ArrayUtils.toObject(charArray65);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 0.0d, (java.lang.Object) charArray65);
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.clone(charArray65);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray52, charArray65);
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray65);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray70, '#', (int) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray70);
        char[] charArray75 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray70);
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.add(charArray75, '4');
        int int78 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) charArray75);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 44a44## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 44a44## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, 4, a, 4, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[a]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[a]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), " 44a4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), " 44a4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[ , 4, 4, a, 4, a]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " 44a4a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " 44a4a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , 4, 4, a, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 6 + "'", int78 == 6);
    }

    @Test
    public void test08619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08619");
        short[] shortArray0 = new short[] {};
        java.lang.Short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) 1);
        java.lang.Short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        java.lang.Short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray4);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray4, (short) (byte) 100);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) shortArray4);
        java.lang.Object[] objArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) shortArray4);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test08620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08620");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        objMap31.clear();
        java.lang.Object obj40 = null;
        long[] longArray46 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.clone(longArray46);
        java.lang.Long[] longArray48 = org.apache.commons.lang3.ArrayUtils.toObject(longArray47);
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.add(longArray49, (long) (short) 0);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.clone(longArray51);
        long[] longArray58 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray58);
        java.lang.Long[] longArray60 = org.apache.commons.lang3.ArrayUtils.toObject(longArray59);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.clone(longArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.add(longArray61, (long) (short) 0);
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.addAll(longArray52, longArray61);
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray52, (long) 10);
        java.lang.Object obj67 = objMap31.putIfAbsent(obj40, (java.lang.Object) longArray52);
        java.lang.Character[] charArray73 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray73, ' ');
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray73, '#');
        java.lang.Character[] charArray83 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray84 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray83);
        char[] charArray86 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray83, 'a');
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray77, charArray86);
        char[] charArray88 = org.apache.commons.lang3.ArrayUtils.clone(charArray77);
        java.lang.Object obj89 = objMap31.get((java.lang.Object) charArray88);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray88);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[32, 100, 10, 10, 1, 0, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[32, 100, 10, 1, 0]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test08621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08621");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        java.lang.Character[] charArray10 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray10, ' ');
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray1, (java.lang.Object[]) charArray10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) 1);
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray16);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray17);
    }

    @Test
    public void test08622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08622");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#');
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.remove(charArray7, (int) (short) 0);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, '4');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray11, 1, 'a');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.clone(charArray11);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(charArray17, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " aa #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " aa #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ , a, a,  , #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test08623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08623");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        objMap31.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet40 = objMap31.entrySet();
        int int41 = objEntrySet40.size();
        boolean boolean42 = objEntrySet40.isEmpty();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objEntrySet40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test08624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08624");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((byte) 100, (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder23 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder26 = equalsBuilder23.append(true, true);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray30, (byte) 10, (int) (short) -1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray30);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray30, (byte) 1, (int) ' ');
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 10);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray30, byteArray44);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.add(byteArray49, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder23.append(byteArray30, byteArray49);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray54);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray54, 100, (int) (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder0.append(byteArray49, byteArray54);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray49);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray49, (byte) 0, 11);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(equalsBuilder26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test08625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08625");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray6);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray6);
        float[] floatArray14 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        float[] floatArray18 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray18);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) 0);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray18);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray14);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray14);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray14);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray25);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray25);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.clone(floatArray25);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray28, 8, 10);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray28);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[1.0, -1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
    }

    @Test
    public void test08626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08626");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        boolean[] booleanArray14 = new boolean[] { false, false, false, false };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray14);
        boolean[] booleanArray24 = new boolean[] { false, true, true, true };
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, true, (int) (short) 100);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray25);
        java.lang.Boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        java.lang.Object[] objArray31 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[false, false, false, false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[false, false, false, false]");
    }

    @Test
    public void test08627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08627");
        java.lang.Character[] charArray5 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        boolean[] booleanArray13 = new boolean[] { false, true, true, true };
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) charArray5, (java.lang.Object) booleanArray13);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '4');
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 100.0d, (-1.0d), 1.0d, 1.0d };
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 100.0d, (-1.0d), 1.0d, 1.0d };
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 100.0d, (-1.0d), 1.0d, 1.0d };
        java.lang.Double[][] doubleArray34 = new java.lang.Double[][] { doubleArray23, doubleArray28, doubleArray33 };
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder35.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray44 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray44);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray44);
        double[] doubleArray47 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder48 = equalsBuilder35.append(doubleArray44, doubleArray47);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder35.appendSuper(true);
        java.lang.Character[] charArray56 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray56);
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray56, 'a');
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.clone(charArray59);
        java.lang.Character[] charArray66 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray66, 'a');
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.add(charArray68, '#');
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.remove(charArray68, (int) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder73 = equalsBuilder35.append(charArray60, charArray68);
        java.lang.Double[][] doubleArray74 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray34, (java.lang.Object) equalsBuilder73);
        boolean boolean76 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray5, (java.lang.Object) doubleArray34, false);
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5);
        java.lang.Character[] charArray78 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray80 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray78, 'a');
        char[] charArray81 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray78);
        char[] charArray82 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray78);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder48);
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(equalsBuilder73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[4, #, #,  , a]");
    }

    @Test
    public void test08628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08628");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, 10.0f);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray2, 7, (int) (short) 100);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray2, 11, (int) '#');
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) (byte) 100);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray16, (float) 11);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray16, (int) '4', (int) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0, 11.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
    }

    @Test
    public void test08629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08629");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        objMap31.clear();
        java.lang.Object obj40 = null;
        long[] longArray46 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.clone(longArray46);
        java.lang.Long[] longArray48 = org.apache.commons.lang3.ArrayUtils.toObject(longArray47);
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.add(longArray49, (long) (short) 0);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.clone(longArray51);
        long[] longArray58 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray58);
        java.lang.Long[] longArray60 = org.apache.commons.lang3.ArrayUtils.toObject(longArray59);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.clone(longArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.add(longArray61, (long) (short) 0);
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.addAll(longArray52, longArray61);
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray52, (long) 10);
        java.lang.Object obj67 = objMap31.putIfAbsent(obj40, (java.lang.Object) longArray52);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet68 = objMap31.entrySet();
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray69);
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray70, (byte) -1);
        java.lang.Byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray72);
        java.lang.Object obj74 = objMap31.remove((java.lang.Object) byteArray72);
        byte[] byteArray76 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray72, (byte) 100);
        byte[] byteArray78 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray76, (byte) -1);
        byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray78);
        byte[] byteArray81 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray78, (byte) 100);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[32, 100, 10, 10, 1, 0, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[32, 100, 10, 1, 0]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(objEntrySet68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
    }

    @Test
    public void test08630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08630");
        java.lang.Object[] objArray0 = null;
        java.lang.Float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray1);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray1);
        java.lang.Float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray1);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray1);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray1);
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength(objArray0, (java.lang.Object[]) floatArray1);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test08631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08631");
        java.util.stream.Stream[] streamArray1 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray2 = (java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) streamArray1;
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray5 = org.apache.commons.lang3.ArrayUtils.subarray(objEntryStreamArray2, 100, 0);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray6 = org.apache.commons.lang3.ArrayUtils.clone(objEntryStreamArray2);
        java.util.stream.Stream[] streamArray8 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray9 = (java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) streamArray8;
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray12 = org.apache.commons.lang3.ArrayUtils.subarray(objEntryStreamArray9, 100, 0);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray13 = org.apache.commons.lang3.ArrayUtils.addAll(objEntryStreamArray2, objEntryStreamArray12);
        java.lang.Boolean[][] booleanArray14 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray42 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray43 = new java.lang.Boolean[][] { booleanArray21, booleanArray28, booleanArray35, booleanArray42 };
        java.lang.Boolean[][] booleanArray44 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray14, booleanArray43);
        java.util.Map<java.lang.Object, java.lang.Object> objMap45 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray14);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = objMap45.entrySet();
        java.lang.Character[] charArray52 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray52, 'a');
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.add(charArray54, '#');
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.remove(charArray54, (int) (short) 0);
        java.lang.Object obj59 = objMap45.remove((java.lang.Object) charArray58);
        float[] floatArray63 = new float[] { 1L, 100L, 100 };
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray63, (float) (-1L), (int) (short) 100);
        java.lang.Float[] floatArray67 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray63);
        java.lang.Object obj68 = null;
        java.lang.Object obj69 = objMap45.put((java.lang.Object) floatArray63, obj68);
        int int71 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) objEntryStreamArray12, (java.lang.Object) objMap45, 9);
        java.util.stream.Stream[] streamArray73 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray74 = (java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) streamArray73;
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray77 = org.apache.commons.lang3.ArrayUtils.subarray(objEntryStreamArray74, 100, 0);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray78 = org.apache.commons.lang3.ArrayUtils.clone(objEntryStreamArray74);
        java.lang.AutoCloseable[] autoCloseableArray79 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.AutoCloseable[]) objEntryStreamArray12, (java.lang.AutoCloseable[]) objEntryStreamArray74);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) autoCloseableArray79);
        org.junit.Assert.assertNotNull(streamArray1);
        org.junit.Assert.assertNotNull(objEntryStreamArray2);
        org.junit.Assert.assertNotNull(objEntryStreamArray5);
        org.junit.Assert.assertNotNull(objEntryStreamArray6);
        org.junit.Assert.assertNotNull(streamArray8);
        org.junit.Assert.assertNotNull(objEntryStreamArray9);
        org.junit.Assert.assertNotNull(objEntryStreamArray12);
        org.junit.Assert.assertNotNull(objEntryStreamArray13);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(objMap45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ , a,  , #]");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(streamArray73);
        org.junit.Assert.assertNotNull(objEntryStreamArray74);
        org.junit.Assert.assertNotNull(objEntryStreamArray77);
        org.junit.Assert.assertNotNull(objEntryStreamArray78);
        org.junit.Assert.assertNotNull(autoCloseableArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test08632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08632");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) 1 };
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray10);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) (byte) 100);
        short[] shortArray15 = new short[] {};
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray14, shortArray15);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray8);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray8, (short) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray8, (short) (byte) 0);
        java.lang.Short[] shortArray25 = new java.lang.Short[] { (short) 1 };
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) 10);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) 100, (int) (byte) 1);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray26);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray32);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray32, 1, (int) (short) 0);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray36, (short) -1);
        short[] shortArray39 = null;
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray36, shortArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray8, shortArray39);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.clone(shortArray39);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(shortArray42);
    }

    @Test
    public void test08633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08633");
        short[] shortArray0 = null;
        java.lang.Short[] shortArray2 = new java.lang.Short[] { (short) 1 };
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray2);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2, (short) (byte) 100);
        short[] shortArray7 = new short[] {};
        java.lang.Short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray7);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray6, shortArray7);
        java.lang.Short[] shortArray11 = new java.lang.Short[] { (short) 1 };
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray11);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11, (short) (byte) 100);
        short[] shortArray16 = new short[] {};
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray16);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray16);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray16);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray0, shortArray19);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.remove(shortArray0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1]");
    }

    @Test
    public void test08634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08634");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean2 = objEntryList0.remove((java.lang.Object) byteArray1);
        boolean[] booleanArray7 = new boolean[] { false, false, false, false };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray7, false);
        java.lang.Boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray7);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true, 0);
        boolean boolean15 = objEntryList0.contains((java.lang.Object) int14);
        java.lang.Class<?>[] wildcardClassArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.Type[] typeArray17 = objEntryList0.toArray((java.lang.reflect.Type[]) wildcardClassArray16);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.ArrayUtils.subarray(typeArray17, (int) (short) -1, (int) (short) 100);
        java.util.Map<java.lang.Object, java.lang.Object> objMap21 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) typeArray17);
        objMap21.clear();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClassArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(objMap21);
    }

    @Test
    public void test08635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08635");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 10, (int) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray7);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) 1, (int) ' ');
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 10);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray21);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.add(byteArray26, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder0.append(byteArray7, byteArray26);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray26);
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray35, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray35);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray35);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray26, byteArray40);
        java.lang.Boolean[][] booleanArray42 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray49 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray56 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray63 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray70 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray71 = new java.lang.Boolean[][] { booleanArray49, booleanArray56, booleanArray63, booleanArray70 };
        java.lang.Boolean[][] booleanArray72 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray42, booleanArray71);
        java.util.Map<java.lang.Object, java.lang.Object> objMap73 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray42);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = objMap73.entrySet();
        java.util.Set<java.lang.Object> objSet75 = objMap73.keySet();
        java.util.Set<java.lang.Object> objSet76 = objMap73.keySet();
        int[] intArray80 = new int[] { 1, (byte) 1 };
        int[] intArray83 = org.apache.commons.lang3.ArrayUtils.add(intArray80, (int) (short) 0, (int) '4');
        int[] intArray84 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray80);
        java.lang.Object obj85 = objMap73.put((java.lang.Object) 10.0d, (java.lang.Object) intArray84);
        boolean boolean87 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray40, obj85, false);
        byte[] byteArray88 = null;
        byte[] byteArray89 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray40, byteArray88);
        int int92 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray40, (byte) 0, 7);
        boolean boolean93 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray40);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertNotNull(objMap73);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertNotNull(objSet75);
        org.junit.Assert.assertNotNull(objSet76);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[52, 1, 1]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1]");
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test08636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08636");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        double[] doubleArray15 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray15);
        boolean boolean17 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray9, (java.lang.Object) doubleArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray15);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray15);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, (double) (short) 1);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, (double) (byte) 0, (double) 'a');
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, 0.0d);
        double[] doubleArray32 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray32);
        double[] doubleArray37 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray37);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.add(doubleArray37, (double) (byte) 10);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.add(doubleArray37, 0.0d);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray32, doubleArray37);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray37, (double) 0.0f);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray37, (double) 7);
        double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray15, doubleArray37);
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.add(doubleArray48, (double) 100L);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray48, (double) 7);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0, 10.0, -1.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, -1.0, 10.0, 10.0, 0.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0, -1.0, 10.0, 10.0, 0.0, 0.0, 10.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test08637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08637");
        int[] intArray0 = null;
        int[] intArray4 = new int[] { '#', (byte) -1, (short) 0 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.subarray(intArray4, (int) '#', (int) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder8 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder11 = equalsBuilder8.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray17 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.clone(longArray17);
        long[] longArray24 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.clone(longArray24);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder26 = equalsBuilder11.append(longArray18, longArray24);
        boolean[] booleanArray31 = new boolean[] { false, false, false, false };
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray31, false);
        java.lang.Boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray31);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray31);
        java.lang.Boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray31);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray37);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.add(booleanArray38, 0, true);
        boolean[] booleanArray46 = new boolean[] { false, false, false, false };
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray46);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray46, false);
        java.lang.Boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray46);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray46, true, 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder54 = equalsBuilder11.append(booleanArray38, booleanArray46);
        java.lang.String[] strArray55 = new java.lang.String[] {};
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray60 = org.apache.commons.lang3.ArrayUtils.addAll(strArray55, strArray59);
        java.lang.String[] strArray61 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray55);
        java.lang.CharSequence[] charSequenceArray62 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.CharSequence[]) strArray61);
        boolean boolean63 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) intArray7, (java.lang.Object) booleanArray46, strArray61);
        int[] intArray67 = new int[] { '#', (byte) -1, (short) 0 };
        int[] intArray70 = org.apache.commons.lang3.ArrayUtils.subarray(intArray67, (int) '#', (int) (short) 0);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray67);
        java.lang.Integer[] intArray76 = new java.lang.Integer[] { 4, 4, (-1), 0 };
        java.lang.Integer[] intArray77 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray76);
        boolean[] booleanArray82 = new boolean[] { false, false, false, false };
        boolean[] booleanArray83 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray82);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray82, false);
        java.lang.Boolean[] booleanArray86 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray82);
        int int88 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray77, (java.lang.Object) booleanArray86, (int) '#');
        int[] intArray89 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray77);
        int[] intArray92 = org.apache.commons.lang3.ArrayUtils.add(intArray89, 3, (int) (byte) 100);
        int[] intArray93 = org.apache.commons.lang3.ArrayUtils.clone(intArray92);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray93);
        int[] intArray95 = org.apache.commons.lang3.ArrayUtils.clone(intArray93);
        int[] intArray96 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray93);
        boolean boolean97 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray96);
        boolean boolean98 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray0, intArray96);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder11);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder26);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(charSequenceArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertNotNull(booleanArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray82), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray83), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(booleanArray86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[4, 4, -1, 0]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[4, 4, -1, 100, 0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 100, -1, 4, 4]");
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 100, -1, 4, 4]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 100, -1, 4, 4]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test08638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08638");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray13 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        java.lang.Long[] longArray15 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray16);
        int[] intArray22 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray22);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        boolean boolean26 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) longArray16, (java.lang.Object) intArray24, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray24);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.add(intArray24, (int) (byte) 1, 0);
        int[] intArray35 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.clone(intArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray35);
        java.lang.Integer[] intArray38 = org.apache.commons.lang3.ArrayUtils.toObject(intArray35);
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray35);
        float[] floatArray43 = new float[] { 1L, 100L, 100 };
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray43, (float) (-1L), (int) (short) 100);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray43, (float) 'a', (int) (byte) 10);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray35, (java.lang.Object) floatArray43);
        int[] intArray52 = org.apache.commons.lang3.ArrayUtils.add(intArray35, 4);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.subarray(intArray52, 100, (int) (short) 100);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray55, 6, (int) (byte) -1);
        int[] intArray61 = org.apache.commons.lang3.ArrayUtils.subarray(intArray55, 100, 2);
        int[] intArray64 = org.apache.commons.lang3.ArrayUtils.subarray(intArray61, (int) ' ', (int) (byte) 0);
        int int66 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray61, (int) ' ');
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray24, intArray61);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 0, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[100, -1, -1, 0, 4]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test08639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08639");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 10L);
        boolean[] booleanArray12 = new boolean[] { false, false, false, false };
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray12, false);
        java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray12);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray12);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray12);
        java.lang.Short[] shortArray20 = new java.lang.Short[] { (short) 1 };
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray20);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray20);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray20, (short) (byte) 100);
        short[] shortArray25 = new short[] {};
        java.lang.Short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray25);
        float[] floatArray30 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray30);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(floatArray30, (float) 0);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.add(floatArray30, 10.0f);
        java.lang.Float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray30);
        boolean boolean38 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray24, (java.lang.Object) floatArray36, false);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray18, (java.lang.Object[]) floatArray36);
        java.lang.Float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray36);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray40);
        java.lang.Float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray40);
        float[] floatArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray40, (float) (byte) 100);
        float[] floatArray47 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray47);
        java.lang.Character[] charArray54 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray54, 'a');
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray47, (java.lang.Object) 'a');
        float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray47, (int) (byte) 1, (int) (byte) 1);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray47, (float) (short) 10, 2);
        float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray47);
        float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray44, floatArray64);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray65);
        float[] floatArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray2);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[-1.0, 1.0]");
    }

    @Test
    public void test08640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08640");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray5 = org.apache.commons.lang3.ArrayUtils.addAll(strArray0, strArray4);
        java.lang.String[] strArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray0);
        float[] floatArray9 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray9);
        float[] floatArray13 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray13, (float) 0);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray13);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.clone(floatArray13);
        float[] floatArray21 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        float[] floatArray25 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(floatArray25, (float) 0);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray21, floatArray25);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray21);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray21);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray13, floatArray21);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray13, (float) (byte) 1);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray13, (float) 'a');
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray36, (float) 0);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) strArray6, (java.lang.Object) floatArray36);
        float[] floatArray42 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray42);
        float[] floatArray46 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray46);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(floatArray46, (float) 0);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray42, floatArray46);
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.clone(floatArray46);
        int int52 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray51);
        int int53 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray51);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray36, floatArray51);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 1.0, 97.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08641");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray6);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray2);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray2);
        java.lang.Float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray13);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray14, (float) 'a');
        float[] floatArray20 = new float[] { 1L, 100L, 100 };
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) (-1L), (int) (short) 100);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray16, floatArray20);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray20);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray25, 0.0f);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray25, (float) 10L);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.remove(floatArray25, 1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 1.0, 1.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 1.0, 1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0, 1.0, 1.0, 100.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0, 1.0, 100.0, 100.0]");
    }

    @Test
    public void test08642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08642");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean2 = objEntryList0.remove((java.lang.Object) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 1);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100);
        java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1);
        java.lang.Byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1);
        java.lang.Byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
    }

    @Test
    public void test08643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08643");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray7, 'a', (-1));
        java.lang.Character[] charArray16 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, ' ');
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, '#');
        java.lang.Character[] charArray26 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray26);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray26, 'a');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray20, charArray29);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray20);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray20);
        java.lang.Character[] charArray38 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, ' ');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray38);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray41);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray41);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray41);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray41, ' ');
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.addAll(charArray32, charArray46);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray46);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(charArray46, '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a a # 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a a # 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a,  , a,  , #,  , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ , 4, 4, a, 4,  , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test08644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08644");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray3);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, 0.0f);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 5, (int) ' ');
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, 3, 100);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.clone(floatArray5);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray14, (float) 100L);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 100.0d, 1.0d, 10.0d, (-1.0d), 100.0d };
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray23);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray24, (double) ' ');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray24, (double) (short) 1);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray24);
        double[] doubleArray35 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray35);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray35);
        java.lang.Object obj38 = null;
        boolean boolean40 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray37, obj38, false);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray37, (double) 3);
        double[] doubleArray46 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray46);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.add(doubleArray46, (double) (byte) 10);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray49, (double) 10.0f);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray49, (double) 1, (int) ' ', (double) '4');
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.add(doubleArray49, 4, (double) 6);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray42, doubleArray49);
        int int60 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray24, (java.lang.Object) doubleArray42);
        boolean boolean61 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) floatArray16, (java.lang.Object) doubleArray24);
        float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray16, 0, 13);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0, 100.0, 10.0, 6.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0, 100.0]");
    }

    @Test
    public void test08645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08645");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, (int) (short) 10, (-1));
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder10 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder10.append(true, true);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray17, (byte) 10, (int) (short) -1);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray17);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray17, (byte) 1, (int) ' ');
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray31, (byte) 10);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray17, byteArray31);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.add(byteArray36, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = equalsBuilder10.append(byteArray17, byteArray36);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder10.append(true, true);
        java.lang.Long[] longArray44 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray44);
        java.lang.Long[] longArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray45);
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder48 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder51 = equalsBuilder48.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray57 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray58 = org.apache.commons.lang3.ArrayUtils.clone(longArray57);
        long[] longArray64 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.clone(longArray64);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder51.append(longArray58, longArray64);
        long[] longArray69 = org.apache.commons.lang3.ArrayUtils.add(longArray58, (int) (byte) 0, (long) 2);
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.add(longArray69, (long) 2);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder72 = equalsBuilder10.append(longArray47, longArray69);
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray47);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.addAll(longArray9, longArray47);
        long[] longArray76 = org.apache.commons.lang3.ArrayUtils.add(longArray74, (long) (byte) 1);
        long[] longArray77 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray74);
        int int80 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray74, 0L, (int) (byte) 100);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder40);
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder51);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[2, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[2, 32, 100, 10, 10, 1, 2]");
        org.junit.Assert.assertNotNull(equalsBuilder72);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray76), "[1]");
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test08646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08646");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray3);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (byte) 0);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 0, 1);
        byte[][][] byteArray15 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder16 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder16.append(true, true);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 10, (int) (short) -1);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray23);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray23, (byte) 1, (int) ' ');
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray37);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray37, (byte) 10);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray23, byteArray37);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.add(byteArray42, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder16.append(byteArray23, byteArray42);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray42);
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray51);
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray51);
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray42, byteArray56);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray56);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray56);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray59, (byte) 10, (int) (byte) 10);
        byte[][][] byteArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (java.lang.Object) byteArray59);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray11, byteArray59);
        byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray59);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 10, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 10, 0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 0, 0]");
    }

    @Test
    public void test08647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08647");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray13 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray14);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray16);
        java.lang.Long[] longArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray16);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) (short) 1);
        int int21 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) longArray16);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 100, 10, 10, 1]");
    }

    @Test
    public void test08648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08648");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean35 = objEntryList33.remove((java.lang.Object) byteArray34);
        boolean boolean36 = objEntrySet32.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.lang.Boolean[][] booleanArray37 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray44 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray51 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray58 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray65 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray66 = new java.lang.Boolean[][] { booleanArray44, booleanArray51, booleanArray58, booleanArray65 };
        java.lang.Boolean[][] booleanArray67 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray37, booleanArray66);
        java.util.Map<java.lang.Object, java.lang.Object> objMap68 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray37);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet69 = objMap68.entrySet();
        objEntrySet69.clear();
        boolean boolean71 = objEntrySet32.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet69);
        int int72 = objEntrySet32.size();
        double[] doubleArray76 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray77 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray76);
        int int79 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray77, (java.lang.Object) ' ');
        boolean[] booleanArray84 = new boolean[] { false, true, true, true };
        boolean[] booleanArray85 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray84);
        int int87 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray77, (java.lang.Object) booleanArray85, (int) (byte) 10);
        boolean[] booleanArray89 = org.apache.commons.lang3.ArrayUtils.add(booleanArray85, true);
        java.lang.Boolean[] booleanArray90 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray89);
        boolean[] booleanArray92 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray90, false);
        java.lang.Boolean[] booleanArray93 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray90);
        java.lang.Boolean[] booleanArray94 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray93);
        java.lang.Boolean[] booleanArray95 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray93);
        boolean[] booleanArray97 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray95, true);
        boolean boolean98 = objEntrySet32.contains((java.lang.Object) booleanArray95);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(objMap68);
        org.junit.Assert.assertNotNull(objEntrySet69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(booleanArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray84), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray89), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray90);
        org.junit.Assert.assertNotNull(booleanArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray92), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray93);
        org.junit.Assert.assertNotNull(booleanArray94);
        org.junit.Assert.assertNotNull(booleanArray95);
        org.junit.Assert.assertNotNull(booleanArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray97), "[false, true, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test08649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08649");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray6);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray2);
        float[] floatArray15 = new float[] { (short) 100, 0, 10 };
        float[] floatArray18 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray18);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) 0);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, 10.0f);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray18);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray18);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray18);
        java.lang.String str31 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray18, "hi!");
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray18);
        float[] floatArray35 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray35);
        float[] floatArray39 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray39);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(floatArray39, (float) 0);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray35, floatArray39);
        float[] floatArray44 = org.apache.commons.lang3.ArrayUtils.clone(floatArray39);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray44);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray45);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray46, (float) 10, 13);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{-1.0,1.0}" + "'", str31, "{-1.0,1.0}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test08650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08650");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray2);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) 5);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (int) (byte) 10, (float) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test08651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08651");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean2 = objEntryList0.remove((java.lang.Object) byteArray1);
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry3 = null;
        boolean boolean4 = objEntryList0.add(objEntry3);
        objEntryList0.clear();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test08652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08652");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, (int) (short) 0, 100);
        boolean[] booleanArray21 = new boolean[] { false, false, false, false };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray21, false);
        java.lang.Boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray21);
        java.lang.Boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27, true);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray30);
        boolean[] booleanArray36 = new boolean[] { false, false, false, false };
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray36, false);
        java.lang.Boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray36);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray36);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray36);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray36);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray30, booleanArray36);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray36);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray36);
        boolean[] booleanArray48 = new boolean[] { true };
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray48, (int) (short) 100, (int) (short) 0);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray51, false);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray36, booleanArray51);
        java.lang.Integer[] intArray59 = new java.lang.Integer[] { 4, 4, (-1), 0 };
        java.lang.Integer[] intArray60 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray59);
        boolean[] booleanArray65 = new boolean[] { false, false, false, false };
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray65);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray65, false);
        java.lang.Boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray65);
        int int71 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray60, (java.lang.Object) booleanArray69, (int) '#');
        java.lang.Boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray69);
        java.lang.Boolean[] booleanArray73 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray69);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray73);
        boolean[] booleanArray76 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray73, false);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray51, booleanArray76);
        boolean[] booleanArray80 = org.apache.commons.lang3.ArrayUtils.add(booleanArray76, (int) (short) 1, false);
        java.lang.Boolean[] booleanArray81 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray76);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray76), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray81);
    }

    @Test
    public void test08653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08653");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0L, 0);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) 4);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder16 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder16.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray24 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray24);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray24, (double) (byte) 10);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray24, (double) 0L, 0);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray24);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray24, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder16.append(doubleArray20, doubleArray24);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) 'a', (int) '4');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray20);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, 0, (double) 100);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray3);
        java.lang.Double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray43);
        java.lang.Double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray44);
        java.lang.Object[] objArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) doubleArray44);
        java.lang.Double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray44);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray47, (double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0, 4.0]");
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0, 100.0]");
    }

    @Test
    public void test08654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08654");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) (-1), (int) (byte) -1);
        java.lang.Long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (long) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.clone(longArray26);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray60, (-1L));
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.remove(longArray60, 4);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1, 10]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[32, 100, 10, 10]");
    }

    @Test
    public void test08655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08655");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder18.append((short) 1, (short) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder23 = equalsBuilder18.appendSuper(false);
        java.lang.Boolean boolean24 = equalsBuilder23.build();
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder23);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
    }

    @Test
    public void test08656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08656");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((long) (byte) 10, (long) (byte) 10);
        java.lang.Byte[] byteArray23 = new java.lang.Byte[] { (byte) 1 };
        java.lang.Byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder25 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder25.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean29 = equalsBuilder28.isEquals();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray35 = org.apache.commons.lang3.ArrayUtils.addAll(strArray30, strArray34);
        java.lang.String[] strArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray30);
        java.lang.Character[] charArray42 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, ' ');
        java.lang.Character[] charArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder28.append((java.lang.Object[]) strArray30, (java.lang.Object[]) charArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder21.append((java.lang.Object[]) byteArray23, (java.lang.Object[]) strArray30);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder21.append((double) 3, (double) (-1L));
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder52 = equalsBuilder21.appendSuper(false);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(equalsBuilder52);
    }

    @Test
    public void test08657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08657");
        java.lang.Integer[] intArray1 = new java.lang.Integer[] { 0 };
        java.lang.Integer[] intArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray1);
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray3);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(intArray3, (int) (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray3);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray3, 13);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray3);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08658");
        java.lang.Byte[] byteArray1 = new java.lang.Byte[] { (byte) 1 };
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray4);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 10, (int) (short) 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test08659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08659");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10.0f);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray0, 2, 0);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray0);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) 6, (int) ' ');
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test08660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08660");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        boolean[] booleanArray14 = new boolean[] { false, false, false, false };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray14);
        boolean[] booleanArray24 = new boolean[] { false, false, false, false };
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray24);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray24, false);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.add(booleanArray24, true);
        boolean[] booleanArray34 = new boolean[] { false, false, false, false };
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray34, false);
        java.lang.Boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray34);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray24, booleanArray34);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray34);
        java.lang.Boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray34);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray34);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, (int) '4', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, false, false, false, false, false]");
    }

    @Test
    public void test08661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08661");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#');
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.remove(charArray7, (int) (short) 0);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray11, '4');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray11);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , a,  , #]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08662");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray9 = new short[] {};
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (short) -1);
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) 1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15, (short) (byte) 100);
        short[] shortArray20 = new short[] {};
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray20);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray20);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray24);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) (byte) 100);
        short[] shortArray29 = new short[] {};
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray28, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray29);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray32, (short) (byte) 10);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray32);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray32, (short) 100);
        java.lang.Short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray37);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.clone(shortArray37);
        java.lang.Short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray39);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(shortArray39, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test08663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08663");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((byte) 100, (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder23 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder26 = equalsBuilder23.append(true, true);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray30, (byte) 10, (int) (short) -1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray30);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray30, (byte) 1, (int) ' ');
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 10);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray30, byteArray44);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.add(byteArray49, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder23.append(byteArray30, byteArray49);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray54);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray54, 100, (int) (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder0.append(byteArray49, byteArray54);
        long[] longArray65 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.clone(longArray65);
        java.lang.Long[] longArray67 = org.apache.commons.lang3.ArrayUtils.toObject(longArray66);
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.clone(longArray66);
        java.lang.Long[] longArray69 = org.apache.commons.lang3.ArrayUtils.toObject(longArray66);
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.add(longArray66, (long) (short) 1);
        long[] longArray77 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray78 = org.apache.commons.lang3.ArrayUtils.clone(longArray77);
        java.lang.Long[] longArray79 = org.apache.commons.lang3.ArrayUtils.toObject(longArray78);
        long[] longArray85 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray86 = org.apache.commons.lang3.ArrayUtils.clone(longArray85);
        java.lang.Long[] longArray87 = org.apache.commons.lang3.ArrayUtils.toObject(longArray86);
        long[] longArray88 = org.apache.commons.lang3.ArrayUtils.clone(longArray86);
        long[] longArray89 = org.apache.commons.lang3.ArrayUtils.addAll(longArray78, longArray88);
        int int91 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray89, (long) 1);
        long[] longArray93 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray89, (long) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder94 = equalsBuilder59.append(longArray71, longArray93);
        long[] longArray97 = org.apache.commons.lang3.ArrayUtils.subarray(longArray93, 3, 0);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(equalsBuilder26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[32, 100, 10, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertNotNull(longArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray85), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray86), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray87);
        org.junit.Assert.assertNotNull(longArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray88), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray89), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(longArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray93), "[32, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder94);
        org.junit.Assert.assertNotNull(longArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray97), "[]");
    }

    @Test
    public void test08664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08664");
        java.lang.String[] strArray1 = new java.lang.String[] { "2" };
        java.lang.String[] strArray3 = new java.lang.String[] { "2" };
        java.lang.String[] strArray5 = new java.lang.String[] { "2" };
        java.lang.Comparable[][] comparableArray7 = new java.lang.Comparable[3][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray8 = (java.lang.Comparable<java.lang.String>[][]) comparableArray7;
        strComparableArray8[0] = strArray1;
        strComparableArray8[1] = strArray3;
        strComparableArray8[2] = strArray5;
        boolean[] booleanArray19 = new boolean[] { false, false, false, false };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray19, false);
        java.lang.Boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray19);
        java.lang.Boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray25);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray25, true);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray28);
        boolean[] booleanArray34 = new boolean[] { false, false, false, false };
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray34);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray34, false);
        java.lang.Boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray34);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray34);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray34);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray34);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray28, booleanArray34);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray34);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray34, (int) (byte) -1, (int) (short) 1);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.add(booleanArray34, true);
        java.lang.Comparable<java.lang.String>[][] strComparableArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(strComparableArray8, (java.lang.Object) true);
        java.lang.Byte[] byteArray54 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray54, (byte) 100);
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray56, (byte) -1);
        int int60 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray56, (byte) 1);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) strComparableArray49, (java.lang.Object) byteArray56);
        float[] floatArray64 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray64);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray65);
        java.lang.Float[] floatArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray65);
        boolean[] booleanArray72 = new boolean[] { false, false, false, false };
        boolean[] booleanArray73 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray72);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray72, false);
        java.lang.Boolean[] booleanArray76 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray72);
        boolean[] booleanArray77 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray72);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray77);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray77);
        boolean boolean81 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) floatArray67, (java.lang.Object) booleanArray77, false);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) floatArray67);
        float[] floatArray83 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray67);
        float[] floatArray85 = org.apache.commons.lang3.ArrayUtils.add(floatArray83, (-1.0f));
        int int87 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strComparableArray49, (java.lang.Object) floatArray85, (int) '4');
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(comparableArray7);
        org.junit.Assert.assertNotNull(strComparableArray8);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(strComparableArray49);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 100, 1, 100]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray73), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray77), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[1.0, -1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test08665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08665");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(longArray6, (long) (byte) 0);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08666");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        int[] intArray23 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray23);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray23, 100);
        long[] longArray32 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.clone(longArray32);
        java.lang.Long[] longArray34 = org.apache.commons.lang3.ArrayUtils.toObject(longArray33);
        long[] longArray40 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.clone(longArray40);
        java.lang.Long[] longArray42 = org.apache.commons.lang3.ArrayUtils.toObject(longArray41);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray33, longArray43);
        int[] intArray49 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.clone(intArray49);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray49);
        boolean boolean53 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) longArray43, (java.lang.Object) intArray51, false);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains(intArray51, (int) ' ');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder18.append(intArray23, intArray51);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray51);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.add(intArray51, 0);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray59, 2, (int) (byte) 1);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.subarray(intArray59, (int) (byte) 0, 2);
        int int67 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray65, (-1));
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1, 0]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[100, -1, -1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, -1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test08667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08667");
        long[] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray2 = org.apache.commons.lang3.ArrayUtils.remove(longArray0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08668");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        java.lang.Short[] shortArray12 = new java.lang.Short[] { (short) 1 };
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) (byte) 100);
        short[] shortArray17 = new short[] {};
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray17);
        float[] floatArray22 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(floatArray22, (float) 0);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, 10.0f);
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        boolean boolean30 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray16, (java.lang.Object) floatArray28, false);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray10, (java.lang.Object[]) floatArray28);
        java.lang.Float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray28);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray32);
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray32);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray32);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray35);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray35, (int) (short) 1, 5);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[1.0]");
    }

    @Test
    public void test08669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08669");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, ' ');
        java.lang.Character[] charArray18 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, 'a');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.add(charArray20, '#');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, 'a');
        java.lang.String str27 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray23, "false");
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, '4');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray23);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, 4, a, 4, a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{ ,4,4,a,4,a, ,a, ,#,#}" + "'", str27, "{ ,4,4,a,4,a, ,a, ,#,#}");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, 4, a, 4, a,  , a,  , #, #]");
    }

    @Test
    public void test08670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08670");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, (long) 10);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray2, (long) (short) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray2, (long) 100);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.subarray(longArray2, (int) (short) 0, 6);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray12);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
    }

    @Test
    public void test08671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08671");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray3);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, 0.0f);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, (int) (byte) -1, (int) (byte) 1);
        float[] floatArray13 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        float[] floatArray17 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray17);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(floatArray17, (float) 0);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray13, floatArray17);
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.clone(floatArray17);
        float[] floatArray26 = new float[] { (short) 100, 0, 10 };
        float[] floatArray29 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray29);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(floatArray29, (float) 0);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.add(floatArray29, 10.0f);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray26, floatArray29);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray26);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.add(floatArray36, (float) (-1));
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(floatArray38, 0.0f);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray38);
        java.lang.Float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray41);
        boolean[] booleanArray47 = new boolean[] { false, false, false, false };
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray47);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray47, false);
        java.lang.Boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray47);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray47);
        java.lang.Boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray47);
        java.lang.Short[] shortArray55 = new java.lang.Short[] { (short) 1 };
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray55);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray55);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray55, (short) (byte) 100);
        short[] shortArray60 = new short[] {};
        java.lang.Short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray60);
        short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray59, shortArray60);
        float[] floatArray65 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray66 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray65);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(floatArray65, (float) 0);
        float[] floatArray70 = org.apache.commons.lang3.ArrayUtils.add(floatArray65, 10.0f);
        java.lang.Float[] floatArray71 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray65);
        boolean boolean73 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray59, (java.lang.Object) floatArray71, false);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray53, (java.lang.Object[]) floatArray71);
        java.lang.Float[] floatArray75 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray71);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray71);
        float[] floatArray78 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray71, 0.0f);
        float[] floatArray80 = org.apache.commons.lang3.ArrayUtils.add(floatArray78, (float) 8);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray41, floatArray78);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 1.0, 100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 1.0, 100.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 1.0, -1.0, 1.0, 100.0, 0.0, 10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[1]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[-1.0, 1.0, 8.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08672");
        char[] charArray0 = null;
        java.lang.Character[] charArray6 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray8);
        java.lang.Character[] charArray16 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, ' ');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray18);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray8, charArray18);
        java.lang.Character[] charArray26 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray26, ' ');
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray28);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray8, charArray29);
        double[] doubleArray35 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray35);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.add(doubleArray35, (double) (byte) 10);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.add(doubleArray35, 0.0d);
        char[] charArray42 = new char[] { 'a' };
        java.lang.Character[] charArray43 = org.apache.commons.lang3.ArrayUtils.toObject(charArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 0.0d, (java.lang.Object) charArray42);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.clone(charArray42);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray29, charArray42);
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.remove(charArray29, 1);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.clone(charArray48);
        java.lang.Character[] charArray50 = org.apache.commons.lang3.ArrayUtils.toObject(charArray48);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray48);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray0, 'a');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "444 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "444 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "444 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "444 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[4, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "444 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "444 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[4, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test08673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08673");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, 0.0d);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (-1), (int) (short) 10, (double) (-1.0f));
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray3, (-1), (int) ' ');
        boolean[] booleanArray20 = new boolean[] { false, false, false, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.add(booleanArray20, true);
        double[] doubleArray31 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray31);
        boolean boolean33 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray25, (java.lang.Object) doubleArray31);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray31);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray35, (double) 10);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray35);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.add(doubleArray35, 2, (double) (short) 0);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray15, doubleArray35);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray15, (double) 9, (double) 8);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, (double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 0.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0, 100.0, 10.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test08674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08674");
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d, 0.0d, 0.0d, 1.0d };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) '#');
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray7, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 0.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 0.0, 0.0, 1.0]");
    }

    @Test
    public void test08675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08675");
        boolean[] booleanArray1 = new boolean[] { true };
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray1, (int) (short) 100, (int) (short) 0);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.add(booleanArray1, 0, false);
        boolean[] booleanArray9 = new boolean[] { true };
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray9, (int) (short) 100, (int) (short) 0);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray9);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray9);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray9);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray9, 11, (-1));
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray9);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[true]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[false, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true]");
    }

    @Test
    public void test08676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08676");
        int[] intArray0 = new int[] {};
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.add(intArray0, 0, 100);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray3);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray10 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.add(intArray10, (int) 'a');
        int[] intArray18 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.clone(intArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray13, intArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray13);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray13);
        int[] intArray28 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.clone(intArray28);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray28);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.addAll(intArray13, intArray28);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray3, intArray13);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.add(intArray3, (int) (short) 10);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.add(intArray3, (int) (short) 10);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray3);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray3);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, -1, -1, 0, 97, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[100, 10]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[100]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test08677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08677");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean34 = objEntrySet32.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        int[] intArray39 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.clone(intArray39);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.add(intArray39, (int) 'a');
        int[] intArray47 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray48);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray42, intArray48);
        boolean boolean51 = objEntrySet32.remove((java.lang.Object) intArray42);
        int[] intArray52 = org.apache.commons.lang3.ArrayUtils.clone(intArray42);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray52, (int) (short) 100, (int) (short) 1);
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray52, (int) (short) 10);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray57, (int) '#', (int) 'a');
        int[] intArray62 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray57, 9);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.subarray(intArray57, 3, (int) (byte) -1);
        int[] intArray66 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray57);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, -1, -1, 0, 97]");
    }

    @Test
    public void test08678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08678");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 10L);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) (-1));
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.remove(floatArray2, (int) (byte) 0);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, 100.0f, 2);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) (short) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f, (int) 'a');
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test08679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08679");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder3.append((byte) 10, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder10 = equalsBuilder3.append((byte) 1, (byte) 10);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray11, (int) (byte) 0, (byte) 100);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray11, 0, (int) '4');
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray18);
        byte[] byteArray20 = null;
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray19, byteArray20);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) 1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray23, (byte) -1);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 1, (int) (short) -1);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray11, byteArray25);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList30 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean32 = objEntryList30.remove((java.lang.Object) byteArray31);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31, (byte) 1);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray31, (byte) 10);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray11, byteArray36);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray11, (byte) 100);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 10, (int) (short) -1);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray44, (byte) 10);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 1);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(byteArray44, (byte) 100);
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray57, (byte) 10, (int) (short) -1);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray57);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray57, (byte) 1, (int) ' ');
        byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray44, byteArray57);
        byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray57, (int) (short) 100, (int) '#');
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.contains(byteArray68, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder71 = equalsBuilder10.append(byteArray11, byteArray68);
        int int74 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray11, (byte) 0, 10);
        int int77 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray11, (byte) 0, 0);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertNotNull(equalsBuilder10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 10, 0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(equalsBuilder71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test08680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08680");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) ' ');
        java.lang.Object obj7 = null;
        java.lang.Object[] objArray8 = org.apache.commons.lang3.ArrayUtils.add((java.lang.Object[]) doubleArray4, obj7);
        java.lang.Object obj9 = null;
        java.lang.Object[] objArray10 = org.apache.commons.lang3.ArrayUtils.removeElement((java.lang.Object[]) doubleArray4, obj9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) (byte) 1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.add(doubleArray13, (int) (byte) 0, (double) 1);
        boolean[] booleanArray19 = new boolean[] { true };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray19, (int) (short) 100, (int) (short) 0);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray22, (int) '#', (int) '4');
        boolean[] booleanArray30 = new boolean[] { false, false, false, false };
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray30);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray30, false);
        java.lang.Boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray30);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray30);
        java.lang.Boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray30);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray36);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray36, true);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray39, (int) (short) 0, 100);
        boolean[] booleanArray47 = new boolean[] { false, false, false, false };
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray47);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray47, false);
        java.lang.Boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray47);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray47);
        java.lang.Boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray47);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray53);
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray53, true);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray56);
        boolean[] booleanArray62 = new boolean[] { false, false, false, false };
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray62, false);
        java.lang.Boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray62);
        boolean[] booleanArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray62);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray62);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray62);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray56, booleanArray62);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray62);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray39, booleanArray62);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.add(booleanArray39, true);
        boolean[] booleanArray75 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray25, booleanArray74);
        boolean[] booleanArray76 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray75);
        boolean[] booleanArray79 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray76, 6, (int) (byte) 1);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray17, (java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[0.0, 10.0, 100.0, null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[0.0, 10.0, 100.0, null]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray75), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray76), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test08681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08681");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray24 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray24);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray24, (double) (byte) 10);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray27, (double) 10.0f);
        double[] doubleArray33 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.add(doubleArray33, (double) (byte) 10);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray33, (double) 0L, 0);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray33);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray27, doubleArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder45 = equalsBuilder19.append(doubleArray20, doubleArray33);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray46);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder51 = equalsBuilder45.append(byteArray46, byteArray48);
        short[] shortArray52 = null;
        java.lang.Short[] shortArray54 = new java.lang.Short[] { (short) 1 };
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray54);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54, (short) (byte) 100);
        short[] shortArray59 = new short[] {};
        java.lang.Short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray59);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray58, shortArray59);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray59, (short) (byte) 10, (int) (byte) 10);
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray59);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder51.append(shortArray52, shortArray59);
        equalsBuilder51.reset();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder70 = equalsBuilder51.append((byte) -1, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder73 = equalsBuilder51.append((short) 1, (short) (byte) 10);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder51);
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[1]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertNotNull(equalsBuilder70);
        org.junit.Assert.assertNotNull(equalsBuilder73);
    }

    @Test
    public void test08682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08682");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        java.lang.Character[] charArray15 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray18);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray20, '4');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.add(charArray22, '4');
        java.lang.Character[] charArray25 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        java.lang.Character[] charArray31 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray31, ' ');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray31, '#');
        java.lang.Character[] charArray41 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray41);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray41, 'a');
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray35, charArray44);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.clone(charArray35);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.subarray(charArray46, (int) (byte) 10, (int) '#');
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.addAll(charArray22, charArray49);
        java.lang.Character[] charArray56 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray56, ' ');
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray58);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray58);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray58, ' ', 5);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray58);
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray58, '#');
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray22, charArray58);
        int int69 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray58, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 44a44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 44a44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, 4, a, 4, 4]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test08683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08683");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder19.append((-1), (int) (short) 100);
        short[] shortArray63 = new short[] { (short) 100, (byte) 10, (short) 0, (byte) 1, (byte) 1, (short) -1 };
        java.lang.Short[] shortArray65 = new java.lang.Short[] { (short) 1 };
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray65);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray65);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray65, (short) (byte) 100);
        short[] shortArray70 = new short[] {};
        java.lang.Short[] shortArray71 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray70);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray69, shortArray70);
        short[] shortArray73 = new short[] {};
        java.lang.Short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray73);
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray72, shortArray73);
        short[] shortArray77 = org.apache.commons.lang3.ArrayUtils.add(shortArray73, (short) -1);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.add(shortArray73, (short) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder56.append(shortArray63, shortArray73);
        short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.add(shortArray73, (short) (byte) 10);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[100, 10, 0, 1, 1, -1]");
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[1]");
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[1]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[]");
        org.junit.Assert.assertNotNull(shortArray71);
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[1]");
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[]");
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[1]");
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[-1]");
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[10]");
    }

    @Test
    public void test08684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08684");
        char[] charArray1 = new char[] { 'a' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray2);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray2, '4');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray5);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray7, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[a]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test08685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08685");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean35 = objEntryList33.remove((java.lang.Object) byteArray34);
        boolean boolean36 = objEntrySet32.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor37 = objEntrySet32.iterator();
        java.lang.Object[] objArray38 = objEntrySet32.toArray();
        boolean boolean40 = objEntrySet32.remove((java.lang.Object) '4');
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream41 = objEntrySet32.stream();
        java.lang.Object[] objArray42 = objEntrySet32.toArray();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEntryItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objEntryStream41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
    }

    @Test
    public void test08686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08686");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray3);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, 0.0f);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, 0.0f);
        float[] floatArray16 = new float[] { 10.0f, 100, (short) -1, (short) 0, 100L, (short) 10 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray16);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray18);
        float[] floatArray22 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray22);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray22, (float) 5);
        float[] floatArray29 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray29);
        java.lang.Character[] charArray36 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray36, 'a');
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray29, (java.lang.Object) 'a');
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray29, (int) (byte) 1, (int) (byte) 1);
        float[] floatArray45 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray45);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(floatArray45, (float) 0);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.add(floatArray45, 10.0f);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.contains(floatArray45, (float) (-1));
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray45);
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray29, floatArray45);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray45);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray22, floatArray45);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray45);
        float[] floatArray60 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray60);
        float[] floatArray64 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray64);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.contains(floatArray64, (float) 0);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray60, floatArray64);
        float[] floatArray69 = org.apache.commons.lang3.ArrayUtils.clone(floatArray64);
        float[] floatArray72 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray73 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray72);
        float[] floatArray76 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray77 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray76);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.contains(floatArray76, (float) 0);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray72, floatArray76);
        float[] floatArray81 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray72);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray72);
        float[] floatArray83 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray64, floatArray72);
        float[] floatArray84 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray45, floatArray64);
        float[] floatArray85 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray84);
        java.lang.Float[] floatArray86 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray84);
        java.lang.Float[] floatArray87 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray84);
        java.lang.Float[] floatArray88 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray87);
        java.lang.Float[] floatArray89 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray88);
        float[] floatArray90 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray88);
        int int92 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray90, 0.0f);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0, 100.0, -1.0, 0.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, 100.0, -1.0, 0.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0, 100.0, -1.0, 0.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray83), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[1.0, -1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[-1.0, 1.0, 1.0, -1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray86);
        org.junit.Assert.assertNotNull(floatArray87);
        org.junit.Assert.assertNotNull(floatArray88);
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertNotNull(floatArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray90), "[1.0, -1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test08687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08687");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray13 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray14);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray16);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17);
        java.lang.Long[] longArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray17);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, (long) 1, 1);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.subarray(longArray20, (int) (byte) 100, (int) ' ');
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray26, (long) 5, 8);
        java.lang.Long[] longArray30 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray31 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray30);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray30);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray32);
        java.lang.Long[] longArray34 = org.apache.commons.lang3.ArrayUtils.toObject(longArray32);
        java.lang.Long[] longArray41 = new java.lang.Long[] { 1L, 10L, 0L, (-1L), (-1L), (-1L) };
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray41, (long) (short) 10);
        java.lang.String[] strArray44 = new java.lang.String[] {};
        java.lang.String[] strArray48 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray49 = org.apache.commons.lang3.ArrayUtils.addAll(strArray44, strArray48);
        java.lang.String[] strArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray48);
        byte[] byteArray51 = null;
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray51);
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray56, (byte) 10, (int) (short) -1);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray56, (byte) 10);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray51, byteArray56);
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray56, (byte) 0, 3);
        int int67 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray56, (byte) 1);
        boolean boolean68 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) strArray50, (java.lang.Object) int67);
        int int69 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray41, (java.lang.Object) strArray50);
        java.lang.Long[] longArray70 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray41);
        long[] longArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray70, (long) (short) 100);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.contains(longArray72, (long) 'a');
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray72);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray72);
        int int78 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray72, 0L);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[1, 10, 0, -1, -1, -1]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[1, 10, 0, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test08688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08688");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((byte) 100, (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder23 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder26 = equalsBuilder23.append(true, true);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray30, (byte) 10, (int) (short) -1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray30);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray30, (byte) 1, (int) ' ');
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 10);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray30, byteArray44);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.add(byteArray49, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder23.append(byteArray30, byteArray49);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray54);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray54, 100, (int) (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder0.append(byteArray49, byteArray54);
        long[] longArray65 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.clone(longArray65);
        java.lang.Long[] longArray67 = org.apache.commons.lang3.ArrayUtils.toObject(longArray66);
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.clone(longArray66);
        java.lang.Long[] longArray69 = org.apache.commons.lang3.ArrayUtils.toObject(longArray66);
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.add(longArray66, (long) (short) 1);
        long[] longArray77 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray78 = org.apache.commons.lang3.ArrayUtils.clone(longArray77);
        java.lang.Long[] longArray79 = org.apache.commons.lang3.ArrayUtils.toObject(longArray78);
        long[] longArray85 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray86 = org.apache.commons.lang3.ArrayUtils.clone(longArray85);
        java.lang.Long[] longArray87 = org.apache.commons.lang3.ArrayUtils.toObject(longArray86);
        long[] longArray88 = org.apache.commons.lang3.ArrayUtils.clone(longArray86);
        long[] longArray89 = org.apache.commons.lang3.ArrayUtils.addAll(longArray78, longArray88);
        int int91 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray89, (long) 1);
        long[] longArray93 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray89, (long) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder94 = equalsBuilder59.append(longArray71, longArray93);
        long[] longArray96 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray71, (long) 3);
        long[] longArray97 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray71);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(equalsBuilder26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[32, 100, 10, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertNotNull(longArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray85), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray86), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray87);
        org.junit.Assert.assertNotNull(longArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray88), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray89), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(longArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray93), "[32, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder94);
        org.junit.Assert.assertNotNull(longArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray96), "[32, 100, 10, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray97), "[32, 100, 10, 10, 1, 1]");
    }

    @Test
    public void test08689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08689");
        double[] doubleArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10.0f);
        double[] doubleArray8 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray8);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray10, (double) 7);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray12);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray12);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 10.0, -1.0, 10.0, 7.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 10.0, -1.0, 10.0, 7.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test08690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08690");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        boolean[] booleanArray14 = new boolean[] { false, false, false, false };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray14);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20);
        java.lang.Boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray21);
        boolean[] booleanArray28 = new boolean[] { false, false, false, false };
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray28);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray28, false);
        java.lang.Boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray28);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray28);
        java.lang.Boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray28);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray34);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray34, true);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray37);
        boolean[] booleanArray43 = new boolean[] { false, false, false, false };
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray43, false);
        java.lang.Boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray43);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray43);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray43);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray43);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray37, booleanArray43);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray43);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray43, true);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray54, true, 2);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray54, (int) (byte) -1, 0);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray60);
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.add(booleanArray60, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false]");
    }

    @Test
    public void test08691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08691");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray13 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray14);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        java.lang.Short[] shortArray18 = new java.lang.Short[] { (short) 1 };
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray18);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray18);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray18, (short) (byte) 100);
        short[] shortArray23 = new short[] {};
        java.lang.Short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray23);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray23);
        float[] floatArray28 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray28);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(floatArray28, (float) 0);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray28, 10.0f);
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray28);
        boolean boolean36 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray22, (java.lang.Object) floatArray34, false);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray16, (java.lang.Object) floatArray34);
        java.lang.Float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray34);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray34);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray34, (float) '4');
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray41, (float) 100L, 100);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, (float) 2);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, 1.0, 2.0]");
    }

    @Test
    public void test08692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08692");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (double) 10.0f, (int) (short) 100, (double) 1.0f);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test08693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08693");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Long[] longArray32 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray32);
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray33, (long) (short) 100);
        java.lang.Object obj36 = objMap31.get((java.lang.Object) longArray33);
        boolean boolean37 = objMap31.isEmpty();
        java.util.Collection<java.lang.Object> objCollection38 = objMap31.values();
        java.lang.Long[] longArray39 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) longArray40);
        java.lang.Long[] longArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray40);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray42);
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray42);
        java.lang.Boolean[][] booleanArray45 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray52 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray59 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray66 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray73 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray74 = new java.lang.Boolean[][] { booleanArray52, booleanArray59, booleanArray66, booleanArray73 };
        java.lang.Boolean[][] booleanArray75 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray45, booleanArray74);
        java.util.Map<java.lang.Object, java.lang.Object> objMap76 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet77 = objMap76.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList78 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean79 = objEntrySet77.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList78);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor80 = objEntryList78.iterator();
        boolean[] booleanArray85 = new boolean[] { false, false, false, false };
        boolean[] booleanArray86 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray85);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray85, false);
        java.lang.Boolean[] booleanArray89 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray85);
        boolean[] booleanArray90 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray85);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray90);
        boolean boolean92 = objEntryList78.remove((java.lang.Object) booleanArray90);
        java.lang.Long[] longArray93 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray94 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray93);
        boolean boolean95 = objEntryList78.remove((java.lang.Object) longArray94);
        boolean boolean96 = objMap31.remove((java.lang.Object) longArray44, (java.lang.Object) longArray94);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertNotNull(objMap76);
        org.junit.Assert.assertNotNull(objEntrySet77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objEntryItor80);
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray86), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertNotNull(booleanArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray90), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(longArray93);
        org.junit.Assert.assertNotNull(longArray94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test08694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08694");
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 4, 7, 0, 4, 5, 9 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) (short) 10);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[4, 7, 0, 4, 5, 9]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[4, 7, 0, 4, 5, 9, 10]");
    }

    @Test
    public void test08695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08695");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        double[] doubleArray36 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray36);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.add(doubleArray36, (double) (byte) 10);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray39, (double) 10.0f);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 1L);
        java.lang.Object obj44 = objMap31.get((java.lang.Object) 1L);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList46 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        float[] floatArray50 = new float[] { (short) 100, 0, 10 };
        float[] floatArray53 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray53);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.contains(floatArray53, (float) 0);
        float[] floatArray58 = org.apache.commons.lang3.ArrayUtils.add(floatArray53, 10.0f);
        float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray50, floatArray53);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.contains(floatArray53, (float) (byte) 10);
        boolean boolean62 = objEntryList46.equals((java.lang.Object) boolean61);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList63 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Object[] objArray64 = objEntryList63.toArray();
        boolean boolean65 = objEntryList46.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList63);
        boolean boolean66 = objEntrySet45.addAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList63);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList67 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor68 = objEntryList67.iterator();
        java.lang.String[] strArray69 = new java.lang.String[] {};
        java.lang.String[] strArray73 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray74 = org.apache.commons.lang3.ArrayUtils.addAll(strArray69, strArray73);
        java.lang.Comparable<java.lang.String>[] strComparableArray75 = objEntryList67.toArray((java.lang.Comparable<java.lang.String>[]) strArray69);
        boolean boolean76 = objEntryList63.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList67);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor77 = objEntryList67.iterator();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry78 = null;
        boolean boolean79 = objEntryList67.add(objEntry78);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objEntryItor68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strComparableArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objEntryItor77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test08696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08696");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        long[] longArray24 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.clone(longArray24);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.add(longArray25, (int) (short) 1, 0L);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray16, longArray25);
        java.lang.Long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toObject(longArray16);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray30, (long) 'a');
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[32, 0, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[32, 100, 10, 10, 1]");
    }

    @Test
    public void test08697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08697");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray5);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8, 3);
        int[] intArray15 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.subarray(intArray16, (int) ' ', (int) (byte) 100);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 100, (int) (short) 100);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 5);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray10);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray10);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.subarray(intArray28, 100, 13);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
    }

    @Test
    public void test08698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08698");
        int[] intArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray0, 3, 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test08699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08699");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray26);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.subarray(longArray26, 0, (int) 'a');
        long[] longArray58 = null;
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray57, longArray58);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test08700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08700");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray9, 4, '#');
        java.lang.Character[] charArray18 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, ' ');
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray20);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray20);
        java.lang.Character[] charArray28 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray28, ' ');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray20, charArray30);
        java.lang.Character[] charArray38 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, ' ');
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray41);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray20, charArray41);
        double[] doubleArray47 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray47);
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.add(doubleArray47, (double) (byte) 10);
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.add(doubleArray47, 0.0d);
        char[] charArray54 = new char[] { 'a' };
        java.lang.Character[] charArray55 = org.apache.commons.lang3.ArrayUtils.toObject(charArray54);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 0.0d, (java.lang.Object) charArray54);
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.clone(charArray54);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray41, charArray54);
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray54);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray12, charArray59);
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, 'a');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray12);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray65 = org.apache.commons.lang3.ArrayUtils.remove(charArray12, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "### a a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "### a a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, #, #,  , a,  , a]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[a]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[a]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test08701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08701");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean2 = objEntryList0.remove((java.lang.Object) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 1);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 10, (int) (byte) -1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray6);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08702");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        java.lang.Boolean[] booleanArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        java.lang.Boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray0, (java.lang.Object[]) booleanArray2);
        java.lang.Boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray2);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        boolean[] booleanArray10 = new boolean[] { false, false, false, false };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray10, false);
        java.lang.Boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray10);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray10);
        java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray10);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray16);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray16, true);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray19, (int) (short) 0, 100);
        boolean[] booleanArray27 = new boolean[] { false, false, false, false };
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray27);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray27, false);
        java.lang.Boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray27);
        java.lang.Boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray27);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray33);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray33, true);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray36);
        boolean[] booleanArray42 = new boolean[] { false, false, false, false };
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray42);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray42, false);
        java.lang.Boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray42);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray42);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray42);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray42);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray36, booleanArray42);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray42);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray19, booleanArray42);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray19, false);
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray5, booleanArray19);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray19, true);
        boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(booleanArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray58), "[false, false, false, false]");
    }

    @Test
    public void test08703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08703");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        double[] doubleArray15 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray15);
        boolean boolean17 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray9, (java.lang.Object) doubleArray15);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray15, 3, 1);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (byte) -1, (int) '4', (double) (short) 10);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray20, (int) ' ', (int) ' ');
        java.lang.Double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray27);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray28);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
    }

    @Test
    public void test08704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08704");
        java.lang.Byte[][][][][][] byteArray0 = new java.lang.Byte[][][][][][] {};
        java.lang.Byte[][][][][][] byteArray1 = new java.lang.Byte[][][][][][] {};
        java.lang.Byte[][][][][][] byteArray2 = new java.lang.Byte[][][][][][] {};
        java.lang.Byte[][][][][][] byteArray3 = new java.lang.Byte[][][][][][] {};
        java.lang.Byte[][][][][][] byteArray4 = new java.lang.Byte[][][][][][] {};
        java.lang.Byte[][][][][][] byteArray5 = new java.lang.Byte[][][][][][] {};
        java.lang.Byte[][][][][][][] byteArray6 = new java.lang.Byte[][][][][][][] { byteArray0, byteArray1, byteArray2, byteArray3, byteArray4, byteArray5 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray6);
        java.lang.Byte[][][][][] byteArray8 = new java.lang.Byte[][][][][] {};
        java.lang.Byte[][][][][][] byteArray9 = new java.lang.Byte[][][][][][] { byteArray8 };
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder10 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder10.append(true, true);
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) 1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        boolean[] booleanArray23 = new boolean[] { false, false, false, false };
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray23);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        java.lang.Boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray23);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray23);
        java.lang.Boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray23);
        java.lang.Short[] shortArray31 = new java.lang.Short[] { (short) 1 };
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray31);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray31);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray31, (short) (byte) 100);
        short[] shortArray36 = new short[] {};
        java.lang.Short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray36);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray35, shortArray36);
        float[] floatArray41 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray41);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(floatArray41, (float) 0);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.add(floatArray41, 10.0f);
        java.lang.Float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray41);
        boolean boolean49 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray35, (java.lang.Object) floatArray47, false);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray29, (java.lang.Object[]) floatArray47);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray15, (java.lang.Object[]) floatArray47);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray47, (java.lang.Object) 1, 0);
        java.lang.Float[] floatArray58 = new java.lang.Float[] { 10.0f, 0.0f, 0.0f };
        java.lang.Float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray58);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder60 = equalsBuilder10.append((java.lang.Object[]) floatArray47, (java.lang.Object[]) floatArray59);
        float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray47);
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray47, (float) 2);
        float[] floatArray66 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray67 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray66);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.contains(floatArray66, (float) 0);
        float[] floatArray71 = org.apache.commons.lang3.ArrayUtils.add(floatArray66, 10.0f);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.contains(floatArray66, (float) (-1));
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray66);
        float[] floatArray75 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray63, floatArray66);
        java.lang.Byte[][][][][][] byteArray76 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray9, (java.lang.Object) floatArray63);
        java.lang.Byte[][][][][][][] byteArray77 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, byteArray9);
        java.lang.Byte[][][][][][] byteArray80 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) (byte) 10, (int) (short) 100);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertNotNull(equalsBuilder60);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertNotNull(byteArray80);
    }

    @Test
    public void test08705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08705");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, 0.0d);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray3);
        double[] doubleArray13 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray13);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray13, (double) (byte) 10);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) 10.0f);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.add(doubleArray19, (double) 1.0f);
        java.lang.Double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray21);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray21);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray21, 1, 0);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray21);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray27, (double) '4');
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray27, 7, 3);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray27, (double) (short) 1, (int) (short) 10, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
    }

    @Test
    public void test08706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08706");
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray0 = new java.lang.reflect.AnnotatedElement[][][] {};
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray1 = org.apache.commons.lang3.ArrayUtils.toArray(annotatedElementArray0);
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray2 = new java.lang.reflect.AnnotatedElement[][][] {};
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray3 = org.apache.commons.lang3.ArrayUtils.toArray(annotatedElementArray2);
        java.lang.reflect.AnnotatedElement[][][] annotatedElementArray4 = org.apache.commons.lang3.ArrayUtils.addAll(annotatedElementArray0, annotatedElementArray2);
        org.junit.Assert.assertNotNull(annotatedElementArray0);
        org.junit.Assert.assertNotNull(annotatedElementArray1);
        org.junit.Assert.assertNotNull(annotatedElementArray2);
        org.junit.Assert.assertNotNull(annotatedElementArray3);
        org.junit.Assert.assertNotNull(annotatedElementArray4);
    }

    @Test
    public void test08707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08707");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean2 = objEntryList0.remove((java.lang.Object) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 1);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 0);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.clone(byteArray7);
        java.lang.Byte[] byteArray15 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15, (byte) 100);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (byte) 10);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray17, 0, (int) (short) 1);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList23 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean25 = objEntryList23.remove((java.lang.Object) byteArray24);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray24, (byte) 1);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray24);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray28);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.clone(byteArray29);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.clone(byteArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray17, byteArray30);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.remove(byteArray17, (int) (short) 1);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray17);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray7);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray7);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) -1);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList42 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean44 = objEntryList42.remove((java.lang.Object) byteArray43);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray43, (byte) 1);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray43);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray47);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.clone(byteArray48);
        java.lang.Byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray48);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray50, (byte) 1);
        java.lang.Byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray50);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray50, (byte) 1);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray55, (byte) 10);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.add(byteArray55, (byte) 100);
        byte[] byteArray62 = org.apache.commons.lang3.ArrayUtils.add(byteArray55, (int) (byte) 0, (byte) 0);
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray41, byteArray62);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray41);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 1, 100, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100, 1, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08708");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) -1);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test08709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08709");
        short[] shortArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray0, (short) 1, 8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test08710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08710");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        objMap31.clear();
        float[] floatArray37 = new float[] { (short) 100, 0, 10 };
        float[] floatArray40 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(floatArray40, (float) 0);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, 10.0f);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray37, floatArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray40);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(floatArray40, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray40);
        java.lang.Object obj51 = objMap31.remove((java.lang.Object) floatArray40);
        java.lang.Short[] shortArray53 = new java.lang.Short[] { (short) 1 };
        short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray53);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray53);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray53, (short) (byte) 100);
        short[] shortArray58 = new short[] {};
        java.lang.Short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray58);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray57, shortArray58);
        float[] floatArray63 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray63);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.contains(floatArray63, (float) 0);
        float[] floatArray68 = org.apache.commons.lang3.ArrayUtils.add(floatArray63, 10.0f);
        java.lang.Float[] floatArray69 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray63);
        boolean boolean71 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray57, (java.lang.Object) floatArray69, false);
        java.lang.Object obj72 = objMap31.get((java.lang.Object) boolean71);
        boolean boolean73 = objMap31.isEmpty();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[1]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[1]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[1]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test08711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08711");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.addAll(strArray5, strArray9);
        java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray5);
        java.lang.Character[] charArray17 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17, ' ');
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((java.lang.Object[]) strArray5, (java.lang.Object[]) charArray20);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray20);
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray20);
        java.lang.Character[] charArray29 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray29);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray29, 'a');
        boolean[] booleanArray37 = new boolean[] { false, true, true, true };
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray37);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) charArray29, (java.lang.Object) booleanArray37);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray23, (java.lang.Object) charArray29, (int) (short) -1);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { (-1.0d), 100.0d, 1.0d, 10.0d, (-1.0d), 100.0d };
        java.lang.Double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray49);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray49);
        double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray49, (double) '4');
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) charArray29, (java.lang.Object[]) doubleArray49);
        java.lang.Double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray49);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray55, (double) 100);
        java.lang.Double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray55);
        java.lang.Double[] doubleArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray58);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray58);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
    }

    @Test
    public void test08712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08712");
        double[][] doubleArray0 = null;
        java.lang.Character[] charArray6 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray8);
        java.lang.Character[] charArray16 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, ' ');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray18);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray8, charArray18);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder21.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray30 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray30);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        double[] doubleArray33 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder21.append(doubleArray30, doubleArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder36 = equalsBuilder21.appendSuper(true);
        java.lang.Character[] charArray42 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray42);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, 'a');
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.clone(charArray45);
        java.lang.Character[] charArray52 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray52, 'a');
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.add(charArray54, '#');
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.remove(charArray54, (int) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder21.append(charArray46, charArray54);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.addAll(charArray18, charArray54);
        double[][] doubleArray61 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray0, (java.lang.Object) charArray60);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.contains(charArray60, '#');
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.add(charArray60, 4, '#');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder36);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " 44a4a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " 44a4a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , 4, 4, a, 4, a,  , a,  , #]");
        org.junit.Assert.assertNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " 44a#4a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " 44a#4a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , 4, 4, a, #, 4, a,  , a,  , #]");
    }

    @Test
    public void test08713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08713");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) 1 };
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray10);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) (byte) 100);
        short[] shortArray15 = new short[] {};
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray14, shortArray15);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray8);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray8);
        boolean[] booleanArray27 = new boolean[] { false, false, false, false };
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray27);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray27, false);
        java.lang.Boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray27);
        java.lang.Boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray27);
        java.lang.Boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray33);
        java.lang.Boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray34);
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray34);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray34);
        boolean boolean39 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray8, (java.lang.Object) booleanArray37, false);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test08714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08714");
        java.lang.Short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray0, (java.lang.Object) byteArray2, 4);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        boolean[] booleanArray10 = new boolean[] { false, false, false, false };
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray10, false);
        java.lang.Boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray10);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray10);
        java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray10);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray16);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray16, true);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19);
        boolean[] booleanArray25 = new boolean[] { false, false, false, false };
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray25, false);
        java.lang.Boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray25);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray25);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray25);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray25);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray19, booleanArray25);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray25);
        java.lang.Boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray25);
        java.lang.Boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray25);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray25, true, (int) 'a');
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray25, true);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList42 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor43 = objEntryList42.iterator();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry44 = null;
        boolean boolean45 = objEntryList42.add(objEntry44);
        java.lang.Boolean[][] booleanArray46 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray53 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray60 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray67 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray74 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray75 = new java.lang.Boolean[][] { booleanArray53, booleanArray60, booleanArray67, booleanArray74 };
        java.lang.Boolean[][] booleanArray76 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray46, booleanArray75);
        java.util.Map<java.lang.Object, java.lang.Object> objMap77 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray46);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet78 = objMap77.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList79 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray80 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean81 = objEntryList79.remove((java.lang.Object) byteArray80);
        boolean boolean82 = objEntrySet78.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList79);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor83 = objEntrySet78.iterator();
        boolean boolean84 = objEntryList42.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet78);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) booleanArray41, (java.lang.Object) objEntrySet78);
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray2, (java.lang.Object) objEntrySet78);
        int int87 = objEntrySet78.size();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry88 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = objEntrySet78.add(objEntry88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(objEntryItor43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertNotNull(objMap77);
        org.junit.Assert.assertNotNull(objEntrySet78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objEntryItor83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test08715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08715");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray21 = new java.lang.Integer[] { 10 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray21, (int) (byte) 10);
        java.lang.Byte[] byteArray28 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray28, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder31 = equalsBuilder19.append((java.lang.Object[]) intArray21, (java.lang.Object[]) byteArray28);
        long[] longArray37 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.clone(longArray37);
        java.lang.Long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toObject(longArray38);
        long[] longArray45 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.clone(longArray45);
        java.lang.Long[] longArray47 = org.apache.commons.lang3.ArrayUtils.toObject(longArray46);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray46);
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.addAll(longArray38, longArray48);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray38);
        long[] longArray56 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.clone(longArray56);
        java.lang.Long[] longArray58 = org.apache.commons.lang3.ArrayUtils.toObject(longArray57);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray57);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.add(longArray59, (long) (short) 0);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.clone(longArray61);
        long[] longArray68 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray69 = org.apache.commons.lang3.ArrayUtils.clone(longArray68);
        java.lang.Long[] longArray70 = org.apache.commons.lang3.ArrayUtils.toObject(longArray69);
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.clone(longArray69);
        long[] longArray73 = org.apache.commons.lang3.ArrayUtils.add(longArray71, (long) (short) 0);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.addAll(longArray62, longArray71);
        long[] longArray77 = org.apache.commons.lang3.ArrayUtils.subarray(longArray62, (int) (short) -1, (int) '4');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder78 = equalsBuilder19.append(longArray38, longArray77);
        long[] longArray79 = org.apache.commons.lang3.ArrayUtils.addAll(longArray16, longArray77);
        long[] longArray80 = org.apache.commons.lang3.ArrayUtils.clone(longArray79);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray80);
        long[] longArray83 = org.apache.commons.lang3.ArrayUtils.remove(longArray80, 0);
        int int86 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray80, (long) (short) 100, (int) ' ');
        long[] longArray89 = org.apache.commons.lang3.ArrayUtils.subarray(longArray80, (int) (short) 100, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray92 = org.apache.commons.lang3.ArrayUtils.add(longArray89, 13, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 13, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(equalsBuilder31);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[1, 10, 10, 100, 32]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray69), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[32, 100, 10, 10, 1, 0, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(equalsBuilder78);
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray80), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray83), "[100, 10, 10, 1, 32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(longArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray89), "[]");
    }

    @Test
    public void test08716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08716");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        int[] intArray14 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.clone(intArray14);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) 'a');
        int[] intArray22 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray23);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray17);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int[] intArray32 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray32);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.addAll(intArray17, intArray32);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray32, (int) ' ');
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray32);
        boolean boolean40 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray9, (java.lang.Object) intArray38, true);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, (int) '#', 10);
        char[] charArray45 = new char[] { 'a' };
        java.lang.Character[] charArray46 = org.apache.commons.lang3.ArrayUtils.toObject(charArray45);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray45);
        java.lang.Character[] charArray53 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray53, 'a');
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray55, 'a', (-1));
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray45, charArray55);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.clone(charArray55);
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.add(charArray60, ' ');
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray62);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.clone(charArray63);
        java.lang.Character[] charArray70 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray71 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray70);
        char[] charArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray70, 'a');
        boolean[] booleanArray78 = new boolean[] { false, true, true, true };
        boolean[] booleanArray79 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray78);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray78);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) charArray70, (java.lang.Object) booleanArray78);
        char[] charArray83 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray70, '4');
        boolean boolean84 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray83);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray63, charArray83);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.contains(charArray63, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[100, -1, -1, 0, 97, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "a a # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "a a # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[a,  , a,  , #,  ]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " 44a4a a # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " 44a4a a # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , 4, 4, a, 4, a,  , a,  , #,  ]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " 44a4a a # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " 44a4a a # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , 4, 4, a, 4, a,  , a,  , #,  ]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray79), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test08717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08717");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray9 = new short[] {};
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (short) -1);
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) 1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15, (short) (byte) 100);
        short[] shortArray20 = new short[] {};
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray20);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray20);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray24);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) (byte) 100);
        short[] shortArray29 = new short[] {};
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray28, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray29);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray32, (short) (byte) 10);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray32);
        java.lang.Short[] shortArray37 = new java.lang.Short[] { (short) 1 };
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray37);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray37);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray37, (short) (byte) 100);
        short[] shortArray42 = new short[] {};
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray42);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray41, shortArray42);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray44, (short) 0);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray44, (short) (byte) 10);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray44, (short) -1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray44);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray44, (short) 0);
        java.lang.Short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray53);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54);
        java.lang.Short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray54);
        java.lang.Short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray56);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray57, (short) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1]");
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[1]");
    }

    @Test
    public void test08718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08718");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList1 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean3 = objEntryList1.remove((java.lang.Object) byteArray2);
        boolean[] booleanArray8 = new boolean[] { false, false, false, false };
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, false);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray8, true, 0);
        boolean boolean16 = objEntryList1.contains((java.lang.Object) int15);
        java.lang.Class<?>[] wildcardClassArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.Type[] typeArray18 = objEntryList1.toArray((java.lang.reflect.Type[]) wildcardClassArray17);
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.ArrayUtils.subarray(typeArray18, (int) (short) -1, (int) (short) 100);
        boolean boolean22 = objEntryList0.contains((java.lang.Object) typeArray21);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream23 = objEntryList0.stream();
        java.lang.Boolean[][] booleanArray24 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray38 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray45 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray52 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray53 = new java.lang.Boolean[][] { booleanArray31, booleanArray38, booleanArray45, booleanArray52 };
        java.lang.Boolean[][] booleanArray54 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray24, booleanArray53);
        java.util.Map<java.lang.Object, java.lang.Object> objMap55 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray24);
        java.lang.Short[] shortArray58 = new java.lang.Short[] { (short) 1 };
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray58);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray58, (short) 10);
        java.lang.Object obj62 = objMap55.replace((java.lang.Object) 2, (java.lang.Object) shortArray61);
        java.lang.Character[] charArray68 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray68, 'a');
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.add(charArray70, '#');
        boolean boolean73 = objMap55.equals((java.lang.Object) '#');
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = objMap55.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList75 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor76 = objEntryList75.iterator();
        java.lang.String[] strArray77 = new java.lang.String[] {};
        java.lang.String[] strArray81 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray82 = org.apache.commons.lang3.ArrayUtils.addAll(strArray77, strArray81);
        java.lang.Comparable<java.lang.String>[] strComparableArray83 = objEntryList75.toArray((java.lang.Comparable<java.lang.String>[]) strArray77);
        java.lang.Object[] objArray84 = objEntryList75.toArray();
        boolean boolean85 = objEntrySet74.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList75);
        boolean boolean86 = objEntryList0.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet74);
        int int87 = objEntryList0.size();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEntryStream23);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(objMap55);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[1]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1]");
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertNotNull(objEntryItor76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strComparableArray83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test08719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08719");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) ' ');
        java.lang.Object obj7 = null;
        java.lang.Object[] objArray8 = org.apache.commons.lang3.ArrayUtils.add((java.lang.Object[]) doubleArray4, obj7);
        java.lang.Object obj9 = null;
        java.lang.Object[] objArray10 = org.apache.commons.lang3.ArrayUtils.removeElement((java.lang.Object[]) doubleArray4, obj9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) (byte) 1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray15);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray16);
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray16);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray16);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) (byte) -1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[0.0, 10.0, 100.0, null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[0.0, 10.0, 100.0, null]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test08720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08720");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        java.lang.Boolean[][] booleanArray39 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray46 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray53 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray60 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray67 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray68 = new java.lang.Boolean[][] { booleanArray46, booleanArray53, booleanArray60, booleanArray67 };
        java.lang.Boolean[][] booleanArray69 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray39, booleanArray68);
        java.util.Map<java.lang.Object, java.lang.Object> objMap70 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray39);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet71 = objMap70.entrySet();
        java.util.Set<java.lang.Object> objSet72 = objMap70.keySet();
        objMap31.putAll(objMap70);
        java.util.Collection<java.lang.Object> objCollection74 = objMap70.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = objMap70.entrySet();
        long[] longArray81 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray82 = org.apache.commons.lang3.ArrayUtils.clone(longArray81);
        java.lang.Long[] longArray83 = org.apache.commons.lang3.ArrayUtils.toObject(longArray82);
        long[] longArray89 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray90 = org.apache.commons.lang3.ArrayUtils.clone(longArray89);
        java.lang.Long[] longArray91 = org.apache.commons.lang3.ArrayUtils.toObject(longArray90);
        long[] longArray92 = org.apache.commons.lang3.ArrayUtils.clone(longArray90);
        long[] longArray93 = org.apache.commons.lang3.ArrayUtils.addAll(longArray82, longArray92);
        int int95 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray93, (long) 1);
        boolean boolean96 = objMap70.containsValue((java.lang.Object) longArray93);
        int int98 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray93, 0L);
        long[] longArray99 = org.apache.commons.lang3.ArrayUtils.clone(longArray93);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertNotNull(objMap70);
        org.junit.Assert.assertNotNull(objEntrySet71);
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertNotNull(longArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray89), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray90), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray91);
        org.junit.Assert.assertNotNull(longArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray92), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray93), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertNotNull(longArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray99), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
    }

    @Test
    public void test08721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08721");
        java.lang.Byte[] byteArray1 = new java.lang.Byte[] { (byte) 1 };
        java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1);
        java.lang.Byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
    }

    @Test
    public void test08722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08722");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        java.lang.Character[] charArray16 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray16);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, 'a');
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, ' ');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray19);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, '4');
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray9);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.subarray(charArray26, 6, 4);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder33 = equalsBuilder30.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray38 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray38);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.add(doubleArray38, (double) (byte) 10);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray38, (double) 0L, 0);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray38);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray38, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder30.append(doubleArray34, doubleArray38);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder52 = equalsBuilder30.append((long) ' ', (long) (short) 10);
        java.lang.Short[] shortArray54 = new java.lang.Short[] { (short) 1 };
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54);
        java.lang.Character[] charArray63 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray63, ' ');
        java.lang.Character[] charArray66 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray63);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder67 = equalsBuilder52.append((java.lang.Object[]) shortArray54, (java.lang.Object[]) charArray66);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54);
        java.lang.Character[] charArray70 = new java.lang.Character[] { '#' };
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray70, ' ');
        int int74 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray54, (java.lang.Object) charArray72, 4);
        java.lang.Character[] charArray75 = org.apache.commons.lang3.ArrayUtils.toObject(charArray72);
        int int78 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray72, '#', (int) (short) -1);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray29, charArray72);
        char[] charArray81 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray29, '4');
        java.lang.Character[] charArray87 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray89 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray87, ' ');
        java.lang.Character[] charArray90 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray87);
        char[] charArray91 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray87);
        char[] charArray94 = org.apache.commons.lang3.ArrayUtils.add(charArray91, 2, ' ');
        boolean boolean95 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray81, charArray91);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) boolean95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 44a44## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 44a44## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, 4, a, 4, 4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertNotNull(equalsBuilder52);
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[1]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertNotNull(equalsBuilder67);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[1]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), " 4 4a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), " 4 4a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray94), "[ , 4,  , 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test08723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08723");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) (-1), (int) (byte) -1);
        long[] longArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray26, 1L);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray26, (long) (short) 100);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray60, 0L);
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray60, (long) 1, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray67 = org.apache.commons.lang3.ArrayUtils.remove(longArray60, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 100, 10, 10]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
    }

    @Test
    public void test08724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08724");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 10, (int) (short) -1);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray3, (byte) 10);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray3, (byte) 100);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 10, (int) (short) -1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 1, (int) ' ');
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray3, byteArray16);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray31, (byte) 10);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray31, (byte) 10);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray3, byteArray31);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray3, (byte) -1);
        boolean[] booleanArray44 = new boolean[] { false, false, false, false };
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray44);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray44, false);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.add(booleanArray44, true);
        boolean boolean51 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) booleanArray49, false);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray49, false);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray49);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray49, false, 4);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.add(booleanArray49, false);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray49, 8, 2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 10, 0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false, false, true]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, false, false, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[]");
    }

    @Test
    public void test08725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08725");
        float[] floatArray3 = new float[] { (short) 100, 0, 10 };
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, 10.0f);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray6);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray3, 3, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray15, (float) 'a', (int) ' ');
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray15, (float) 'a');
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 11);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray15, (float) (short) 100);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[11.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
    }

    @Test
    public void test08726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08726");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean35 = objEntryList33.remove((java.lang.Object) byteArray34);
        boolean boolean36 = objEntrySet32.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream37 = objEntryList33.parallelStream();
        java.lang.Object[] objArray38 = objEntryList33.toArray();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry39 = null;
        boolean boolean40 = objEntryList33.add(objEntry39);
        long[] longArray46 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.clone(longArray46);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.subarray(longArray47, (int) (short) 10, (-1));
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray47, (long) (-1));
        long[] longArray55 = org.apache.commons.lang3.ArrayUtils.add(longArray52, 5, (long) 10);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.add(longArray55, (long) '4');
        boolean boolean58 = objEntryList33.equals((java.lang.Object) '4');
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEntryStream37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[32, 100, 10, 10, 1, 10]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[32, 100, 10, 10, 1, 10, 52]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08727");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList1 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor2 = objEntryList1.iterator();
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray8 = org.apache.commons.lang3.ArrayUtils.addAll(strArray3, strArray7);
        java.lang.Comparable<java.lang.String>[] strComparableArray9 = objEntryList1.toArray((java.lang.Comparable<java.lang.String>[]) strArray3);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream10 = objEntryList1.parallelStream();
        boolean boolean11 = objEntryList0.addAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList1);
        java.lang.Boolean[][] booleanArray12 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray26 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray33 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray40 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray41 = new java.lang.Boolean[][] { booleanArray19, booleanArray26, booleanArray33, booleanArray40 };
        java.lang.Boolean[][] booleanArray42 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray41);
        java.util.Map<java.lang.Object, java.lang.Object> objMap43 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray12);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = objMap43.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList45 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean47 = objEntryList45.remove((java.lang.Object) byteArray46);
        boolean boolean48 = objEntrySet44.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList45);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor49 = objEntrySet44.iterator();
        java.lang.Object[] objArray50 = objEntrySet44.toArray();
        boolean boolean52 = objEntrySet44.remove((java.lang.Object) '4');
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList53 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor54 = objEntryList53.iterator();
        java.lang.String[] strArray55 = new java.lang.String[] {};
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray60 = org.apache.commons.lang3.ArrayUtils.addAll(strArray55, strArray59);
        java.lang.Comparable<java.lang.String>[] strComparableArray61 = objEntryList53.toArray((java.lang.Comparable<java.lang.String>[]) strArray55);
        boolean boolean62 = objEntrySet44.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList53);
        boolean boolean63 = objEntrySet44.isEmpty();
        boolean boolean64 = objEntryList0.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet44);
        java.lang.Object[] objArray65 = objEntryList0.toArray();
        java.util.Spliterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySpliterator66 = objEntryList0.spliterator();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream67 = objEntryList0.stream();
        org.junit.Assert.assertNotNull(objEntryItor2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strComparableArray9);
        org.junit.Assert.assertNotNull(objEntryStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(objMap43);
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objEntryItor49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objEntryItor54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strComparableArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objEntrySpliterator66);
        org.junit.Assert.assertNotNull(objEntryStream67);
    }

    @Test
    public void test08728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08728");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, false]");
    }

    @Test
    public void test08729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08729");
        double[] doubleArray5 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray5);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Object obj8 = null;
        boolean boolean10 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray7, obj8, false);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray7, (double) 10L);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray7, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 10.0, -1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 10.0, -1.0, 10.0, 10.0]");
    }

    @Test
    public void test08730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08730");
        float[] floatArray3 = new float[] { 1L, 100L, 100 };
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (-1L), (int) (short) 100);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray3, (int) (byte) -1, (int) (byte) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray9);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[100.0, 100.0, 1.0]");
    }

    @Test
    public void test08731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08731");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray6);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.add(longArray8, (long) (short) 0);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        long[] longArray17 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.clone(longArray17);
        java.lang.Long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toObject(longArray18);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray20, (long) (short) 0);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.addAll(longArray11, longArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray11);
        java.lang.Long[] longArray25 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray25);
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray27);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray27);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray11, longArray29);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray11);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) (short) 10);
        long[] longArray39 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.clone(longArray39);
        java.lang.Long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toObject(longArray40);
        long[] longArray47 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray40, longArray48);
        java.lang.Long[] longArray50 = org.apache.commons.lang3.ArrayUtils.toObject(longArray48);
        java.lang.Long[] longArray51 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray50);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray51);
        java.lang.Long[] longArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray51);
        java.lang.Byte[] byteArray55 = new java.lang.Byte[] { (byte) 1 };
        java.lang.Byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray55);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray55, (byte) 0);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray51, (java.lang.Object) (byte) 0);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray51, (long) (byte) 1);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.addAll(longArray11, longArray61);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[0, 1, 10, 10, 100, 32]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[32, 100, 10, 10, 1, 0, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[0, 1, 10, 10, 100, 32, 32, 100, 10, 10, 1]");
    }

    @Test
    public void test08732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08732");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean34 = objEntrySet32.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream35 = objEntrySet32.parallelStream();
        java.lang.Boolean[][] booleanArray36 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray43 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray50 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray57 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray64 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray65 = new java.lang.Boolean[][] { booleanArray43, booleanArray50, booleanArray57, booleanArray64 };
        java.lang.Boolean[][] booleanArray66 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray36, booleanArray65);
        java.util.Map<java.lang.Object, java.lang.Object> objMap67 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray36);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet68 = objMap67.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList69 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean71 = objEntryList69.remove((java.lang.Object) byteArray70);
        boolean boolean72 = objEntrySet68.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList69);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor73 = objEntrySet68.iterator();
        java.lang.Object[] objArray74 = objEntrySet68.toArray();
        boolean boolean76 = objEntrySet68.remove((java.lang.Object) '4');
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList77 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor78 = objEntryList77.iterator();
        java.lang.String[] strArray79 = new java.lang.String[] {};
        java.lang.String[] strArray83 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray84 = org.apache.commons.lang3.ArrayUtils.addAll(strArray79, strArray83);
        java.lang.Comparable<java.lang.String>[] strComparableArray85 = objEntryList77.toArray((java.lang.Comparable<java.lang.String>[]) strArray79);
        boolean boolean86 = objEntrySet68.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList77);
        boolean boolean87 = objEntrySet32.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet68);
        int int88 = objEntrySet68.size();
        java.lang.Object[] objArray89 = objEntrySet68.toArray();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor90 = objEntrySet68.iterator();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objEntryStream35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(objMap67);
        org.junit.Assert.assertNotNull(objEntrySet68);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objEntryItor73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objEntryItor78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strComparableArray85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(objEntryItor90);
    }

    @Test
    public void test08733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08733");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder3.append((byte) 10, (byte) 0);
        java.lang.Character[] charArray13 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, 'a');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, ' ');
        java.lang.Character[] charArray23 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray23, 'a');
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray25, '#');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.subarray(charArray25, (int) (byte) -1, (int) '#');
        java.lang.Character[] charArray36 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray36);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray36, 'a');
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.clone(charArray39);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.addAll(charArray25, charArray39);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray39, 'a');
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.clone(charArray39);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.addAll(charArray17, charArray44);
        java.lang.Character[] charArray51 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, ' ');
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, '#');
        java.lang.Character[] charArray61 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray61);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61, 'a');
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray55, charArray64);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray64, 'a', (int) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder69 = equalsBuilder7.append(charArray44, charArray64);
        int int71 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray64, '#');
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray64, 'a');
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, #, #,  ]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
    }

    @Test
    public void test08734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08734");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(shortArray8, (short) 100);
        java.lang.Short[] shortArray12 = new java.lang.Short[] { (short) 1 };
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) (byte) 100);
        short[] shortArray17 = new short[] {};
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray17);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray16, 4, (-1));
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray22, (int) (byte) -1, (int) '4');
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.clone(shortArray22);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray8, shortArray22);
        java.lang.Short[] shortArray29 = new java.lang.Short[] { (short) 1 };
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray29);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray29);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray29, (short) (byte) 100);
        short[] shortArray34 = new short[] {};
        java.lang.Short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray34);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray33, shortArray34);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray36, (short) 0);
        java.lang.Short[] shortArray40 = new java.lang.Short[] { (short) 1 };
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray40);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray40);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray40, (short) (byte) 100);
        short[] shortArray45 = new short[] {};
        java.lang.Short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray45);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray44, shortArray45);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray44, 4, (-1));
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray38, shortArray50);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray51);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray22, (short) (byte) 1, 6);
        java.lang.Short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray22);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray22, 4, 8);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray59);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test08735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08735");
        java.lang.Character[][][] charArray0 = new java.lang.Character[][][] {};
        java.lang.Character[][][] charArray1 = new java.lang.Character[][][] {};
        java.lang.Character[][][] charArray2 = new java.lang.Character[][][] {};
        java.lang.Character[][][] charArray3 = new java.lang.Character[][][] {};
        java.lang.Character[][][] charArray4 = new java.lang.Character[][][] {};
        java.lang.Character[][][] charArray5 = new java.lang.Character[][][] {};
        java.lang.Character[][][][] charArray6 = new java.lang.Character[][][][] { charArray0, charArray1, charArray2, charArray3, charArray4, charArray5 };
        java.lang.Character[][][][] charArray7 = org.apache.commons.lang3.ArrayUtils.toArray(charArray6);
        java.lang.Character[][] charArray9 = new java.lang.Character[][] {};
        java.lang.Character[][] charArray10 = new java.lang.Character[][] {};
        java.lang.Character[][] charArray11 = new java.lang.Character[][] {};
        java.lang.Character[][] charArray12 = new java.lang.Character[][] {};
        java.lang.Character[][][] charArray13 = new java.lang.Character[][][] { charArray9, charArray10, charArray11, charArray12 };
        java.lang.Character[][][] charArray16 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) 'a', (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Character[][][][] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray7, (int) (short) 10, charArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray16);
    }

    @Test
    public void test08736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08736");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, 0.0d);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray3);
        double[] doubleArray13 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray13);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray13, (double) (byte) 10);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) 10.0f);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.add(doubleArray19, (double) 1.0f);
        java.lang.Double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray21);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray21);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray23, 100.0d);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray23, 100, 9);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (double) 0, 11, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test08737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08737");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.GenericDeclaration genericDeclaration1 = null;
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray2 = org.apache.commons.lang3.ArrayUtils.add((java.lang.reflect.GenericDeclaration[]) wildcardClassArray0, genericDeclaration1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.AnnotatedElement[] annotatedElementArray4 = org.apache.commons.lang3.ArrayUtils.remove((java.lang.reflect.AnnotatedElement[]) wildcardClassArray0, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
    }

    @Test
    public void test08738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08738");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        java.lang.Character[] charArray15 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray18);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray20, '4');
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder27 = equalsBuilder24.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray28 = new double[] {};
        double[] doubleArray32 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray32);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.add(doubleArray32, (double) (byte) 10);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray32, (double) 0L, 0);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray32, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder24.append(doubleArray28, doubleArray32);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder24.append((byte) 100, (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder46.append('a', '4');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder52 = equalsBuilder49.append((long) 11, (long) 11);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder55 = equalsBuilder52.append(false, false);
        float[] floatArray58 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray58);
        java.lang.Float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray59);
        float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray59);
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.add(floatArray61, 0.0f);
        float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.add(floatArray61, 0.0f);
        float[] floatArray72 = new float[] { 10.0f, 100, (short) -1, (short) 0, 100L, (short) 10 };
        float[] floatArray73 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray72);
        float[] floatArray74 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray73);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray61, floatArray74);
        float[] floatArray77 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray61, 100.0f);
        float[] floatArray78 = org.apache.commons.lang3.ArrayUtils.clone(floatArray61);
        float[] floatArray79 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder52.append(floatArray78, floatArray79);
        int int82 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray78, (float) (byte) 1);
        int int84 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray23, (java.lang.Object) int82, (-1));
        char[] charArray86 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray23, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(equalsBuilder27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertNotNull(equalsBuilder52);
        org.junit.Assert.assertNotNull(equalsBuilder55);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray72), "[10.0, 100.0, -1.0, 0.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[10.0, 100.0, -1.0, 0.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[10.0, 100.0, -1.0, 0.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[ , 4, 4, a, 4]");
    }

    @Test
    public void test08739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08739");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = org.apache.commons.lang3.ArrayUtils.toArray(strArray0);
        java.lang.CharSequence[][][][][][] charSequenceArray2 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.CharSequence[][][][][][]) strArray0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder6 = equalsBuilder3.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray7 = new double[] {};
        double[] doubleArray11 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray11);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, (double) (byte) 10);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) 0L, 0);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder3.append(doubleArray7, doubleArray11);
        long[] longArray28 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        java.lang.Long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toObject(longArray29);
        long[] longArray36 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray29, longArray37);
        long[] longArray44 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.clone(longArray44);
        java.lang.Long[] longArray46 = org.apache.commons.lang3.ArrayUtils.toObject(longArray45);
        long[] longArray52 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.clone(longArray52);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray45, longArray53);
        java.lang.Long[] longArray55 = org.apache.commons.lang3.ArrayUtils.toObject(longArray53);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder22.append(longArray29, longArray53);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder22.append((-1), (int) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder62 = equalsBuilder22.append((byte) 10, (byte) 10);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charSequenceArray2, (java.lang.Object) (byte) 10, 8);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertNotNull(equalsBuilder6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertNotNull(equalsBuilder62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test08740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08740");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder18.append((float) (short) 100, (float) 8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder18.append((double) (short) 10, (double) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder27 = equalsBuilder18.append((double) 0L, 0.0d);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder27.append((short) 1, (short) 0);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(equalsBuilder27);
        org.junit.Assert.assertNotNull(equalsBuilder30);
    }

    @Test
    public void test08741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08741");
        boolean[] booleanArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, false, 11);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test08742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08742");
        long[][][][][][][] longArray0 = new long[][][][][][][] {};
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray0);
        long[][] longArray2 = new long[][] {};
        long[][] longArray3 = new long[][] {};
        long[][] longArray4 = new long[][] {};
        long[][] longArray5 = new long[][] {};
        long[][][] longArray6 = new long[][][] { longArray2, longArray3, longArray4, longArray5 };
        long[][][][] longArray7 = new long[][][][] { longArray6 };
        long[][] longArray8 = new long[][] {};
        long[][] longArray9 = new long[][] {};
        long[][] longArray10 = new long[][] {};
        long[][] longArray11 = new long[][] {};
        long[][][] longArray12 = new long[][][] { longArray8, longArray9, longArray10, longArray11 };
        long[][][][] longArray13 = new long[][][][] { longArray12 };
        long[][] longArray14 = new long[][] {};
        long[][] longArray15 = new long[][] {};
        long[][] longArray16 = new long[][] {};
        long[][] longArray17 = new long[][] {};
        long[][][] longArray18 = new long[][][] { longArray14, longArray15, longArray16, longArray17 };
        long[][][][] longArray19 = new long[][][][] { longArray18 };
        long[][] longArray20 = new long[][] {};
        long[][] longArray21 = new long[][] {};
        long[][] longArray22 = new long[][] {};
        long[][] longArray23 = new long[][] {};
        long[][][] longArray24 = new long[][][] { longArray20, longArray21, longArray22, longArray23 };
        long[][][][] longArray25 = new long[][][][] { longArray24 };
        long[][][][][] longArray26 = new long[][][][][] { longArray7, longArray13, longArray19, longArray25 };
        long[][] longArray27 = new long[][] {};
        long[][] longArray28 = new long[][] {};
        long[][] longArray29 = new long[][] {};
        long[][] longArray30 = new long[][] {};
        long[][][] longArray31 = new long[][][] { longArray27, longArray28, longArray29, longArray30 };
        long[][][][] longArray32 = new long[][][][] { longArray31 };
        long[][] longArray33 = new long[][] {};
        long[][] longArray34 = new long[][] {};
        long[][] longArray35 = new long[][] {};
        long[][] longArray36 = new long[][] {};
        long[][][] longArray37 = new long[][][] { longArray33, longArray34, longArray35, longArray36 };
        long[][][][] longArray38 = new long[][][][] { longArray37 };
        long[][] longArray39 = new long[][] {};
        long[][] longArray40 = new long[][] {};
        long[][] longArray41 = new long[][] {};
        long[][] longArray42 = new long[][] {};
        long[][][] longArray43 = new long[][][] { longArray39, longArray40, longArray41, longArray42 };
        long[][][][] longArray44 = new long[][][][] { longArray43 };
        long[][] longArray45 = new long[][] {};
        long[][] longArray46 = new long[][] {};
        long[][] longArray47 = new long[][] {};
        long[][] longArray48 = new long[][] {};
        long[][][] longArray49 = new long[][][] { longArray45, longArray46, longArray47, longArray48 };
        long[][][][] longArray50 = new long[][][][] { longArray49 };
        long[][][][][] longArray51 = new long[][][][][] { longArray32, longArray38, longArray44, longArray50 };
        long[][] longArray52 = new long[][] {};
        long[][] longArray53 = new long[][] {};
        long[][] longArray54 = new long[][] {};
        long[][] longArray55 = new long[][] {};
        long[][][] longArray56 = new long[][][] { longArray52, longArray53, longArray54, longArray55 };
        long[][][][] longArray57 = new long[][][][] { longArray56 };
        long[][] longArray58 = new long[][] {};
        long[][] longArray59 = new long[][] {};
        long[][] longArray60 = new long[][] {};
        long[][] longArray61 = new long[][] {};
        long[][][] longArray62 = new long[][][] { longArray58, longArray59, longArray60, longArray61 };
        long[][][][] longArray63 = new long[][][][] { longArray62 };
        long[][] longArray64 = new long[][] {};
        long[][] longArray65 = new long[][] {};
        long[][] longArray66 = new long[][] {};
        long[][] longArray67 = new long[][] {};
        long[][][] longArray68 = new long[][][] { longArray64, longArray65, longArray66, longArray67 };
        long[][][][] longArray69 = new long[][][][] { longArray68 };
        long[][] longArray70 = new long[][] {};
        long[][] longArray71 = new long[][] {};
        long[][] longArray72 = new long[][] {};
        long[][] longArray73 = new long[][] {};
        long[][][] longArray74 = new long[][][] { longArray70, longArray71, longArray72, longArray73 };
        long[][][][] longArray75 = new long[][][][] { longArray74 };
        long[][][][][] longArray76 = new long[][][][][] { longArray57, longArray63, longArray69, longArray75 };
        long[][][][][][] longArray77 = new long[][][][][][] { longArray26, longArray51, longArray76 };
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray77);
        long[][][][][][][] longArray79 = org.apache.commons.lang3.ArrayUtils.add(longArray0, longArray77);
        java.lang.Cloneable[][][] cloneableArray80 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Cloneable[][][]) longArray79);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertNotNull(longArray69);
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertNotNull(cloneableArray80);
    }

    @Test
    public void test08743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08743");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        objMap31.clear();
        boolean[] booleanArray38 = new boolean[] { false, false, false, false };
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray38, false);
        java.lang.Boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray38);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray38);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder44.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean48 = equalsBuilder47.isEquals();
        java.lang.String[] strArray49 = new java.lang.String[] {};
        java.lang.String[] strArray53 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray54 = org.apache.commons.lang3.ArrayUtils.addAll(strArray49, strArray53);
        java.lang.String[] strArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray49);
        java.lang.Character[] charArray61 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61, ' ');
        java.lang.Character[] charArray64 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray61);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder65 = equalsBuilder47.append((java.lang.Object[]) strArray49, (java.lang.Object[]) charArray64);
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray64);
        java.lang.Object obj67 = objMap31.putIfAbsent((java.lang.Object) booleanArray38, (java.lang.Object) charArray66);
        int int68 = objMap31.size();
        boolean boolean69 = objMap31.isEmpty();
        boolean boolean70 = objMap31.isEmpty();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertNotNull(equalsBuilder65);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test08744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08744");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        java.lang.Character[] charArray15 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray18);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.subarray(charArray18, 5, 3);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray18, '4', (int) (short) 10);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray18);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray26, ' ');
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray26, '#', (int) (byte) -1);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(charArray26, '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, #, a]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test08745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08745");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Character[] charArray9 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, 'a');
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray2, (java.lang.Object) 'a');
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray2, (int) (byte) 1, (int) (byte) 1);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) (byte) 100, (int) (byte) 100);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 10, (-1));
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray2);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        float[] floatArray24 = null;
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray23, floatArray24);
        java.lang.String str26 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) boolean25);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "false" + "'", str26, "false");
    }

    @Test
    public void test08746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08746");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) 10);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        byte[] byteArray11 = null;
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray11);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder16 = equalsBuilder13.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray21 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray21);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.add(doubleArray21, (double) (byte) 10);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, (double) 0L, 0);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray21);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray21, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder32 = equalsBuilder13.append(doubleArray17, doubleArray21);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray37 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray37);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.add(doubleArray37, (double) (byte) 10);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray40, (double) 10.0f);
        double[] doubleArray46 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray46);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.add(doubleArray46, (double) (byte) 10);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray46, (double) 0L, 0);
        double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray46);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray46, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray40, doubleArray46);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder58 = equalsBuilder32.append(doubleArray33, doubleArray46);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray59);
        byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.add(byteArray61, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder64 = equalsBuilder58.append(byteArray59, byteArray61);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray11, byteArray61);
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray66);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray11, byteArray66);
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray66);
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.clone(byteArray66);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray70, (byte) 100, (int) (short) 1);
        byte[] byteArray75 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray70, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray70);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.contains(byteArray70, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test08747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08747");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        java.lang.Character[] charArray44 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, 'a');
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.add(charArray46, '#');
        boolean boolean49 = objMap31.equals((java.lang.Object) '#');
        double[] doubleArray55 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray55);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray55);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray55, (double) (short) 100, (double) 3);
        java.lang.Object obj61 = objMap31.get((java.lang.Object) doubleArray55);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray55, (double) (short) 0, 3, (double) (-1.0f));
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray55, 1.0d);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray55, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 8, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 10.0, 10.0, -1.0, 10.0]");
    }

    @Test
    public void test08748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08748");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        java.lang.Short[] shortArray5 = new java.lang.Short[] { (short) 1 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray5);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray5);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray5);
        boolean[] booleanArray13 = new boolean[] { false, false, false, false };
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, false);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray13);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray13);
        java.lang.Boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray13);
        java.lang.Short[] shortArray21 = new java.lang.Short[] { (short) 1 };
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray21);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray21);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray21, (short) (byte) 100);
        short[] shortArray26 = new short[] {};
        java.lang.Short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray26);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray25, shortArray26);
        float[] floatArray31 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray31);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(floatArray31, (float) 0);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, 10.0f);
        java.lang.Float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray31);
        boolean boolean39 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray25, (java.lang.Object) floatArray37, false);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray19, (java.lang.Object[]) floatArray37);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray5, (java.lang.Object[]) floatArray37);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray37, (java.lang.Object) 1, 0);
        java.lang.Float[] floatArray48 = new java.lang.Float[] { 10.0f, 0.0f, 0.0f };
        java.lang.Float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray48);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder0.append((java.lang.Object[]) floatArray37, (java.lang.Object[]) floatArray49);
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray37);
        float[] floatArray54 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray54);
        float[] floatArray58 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray58);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.contains(floatArray58, (float) 0);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray54, floatArray58);
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.clone(floatArray58);
        float[] floatArray67 = new float[] { (short) 100, 0, 10 };
        float[] floatArray70 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray71 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray70);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.contains(floatArray70, (float) 0);
        float[] floatArray75 = org.apache.commons.lang3.ArrayUtils.add(floatArray70, 10.0f);
        float[] floatArray76 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray67, floatArray70);
        float[] floatArray77 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray58, floatArray67);
        float[] floatArray80 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray77, (int) '4', 2);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray51, floatArray80);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray83 = org.apache.commons.lang3.ArrayUtils.remove(floatArray80, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(floatArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray75), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[-1.0, 1.0, 100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08749");
        char[] charArray6 = new char[] { ' ', ' ', '#', ' ', '4', 'a' };
        char[][] charArray7 = new char[][] { charArray6 };
        char[] charArray14 = new char[] { ' ', ' ', '#', ' ', '4', 'a' };
        char[][] charArray15 = new char[][] { charArray14 };
        char[] charArray22 = new char[] { ' ', ' ', '#', ' ', '4', 'a' };
        char[][] charArray23 = new char[][] { charArray22 };
        char[] charArray30 = new char[] { ' ', ' ', '#', ' ', '4', 'a' };
        char[][] charArray31 = new char[][] { charArray30 };
        char[][][] charArray32 = new char[][][] { charArray7, charArray15, charArray23, charArray31 };
        char[][][] charArray33 = org.apache.commons.lang3.ArrayUtils.toArray(charArray32);
        char[] charArray39 = new char[] { '#', 'a', '4', 'a', ' ' };
        char[] charArray45 = new char[] { '#', 'a', '4', 'a', ' ' };
        char[] charArray51 = new char[] { '#', 'a', '4', 'a', ' ' };
        char[] charArray57 = new char[] { '#', 'a', '4', 'a', ' ' };
        char[] charArray63 = new char[] { '#', 'a', '4', 'a', ' ' };
        char[] charArray69 = new char[] { '#', 'a', '4', 'a', ' ' };
        char[][] charArray70 = new char[][] { charArray39, charArray45, charArray51, charArray57, charArray63, charArray69 };
        char[][] charArray71 = new char[][] {};
        char[][] charArray72 = org.apache.commons.lang3.ArrayUtils.addAll(charArray70, charArray71);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) charArray72);
        char[][][] charArray74 = org.apache.commons.lang3.ArrayUtils.add(charArray33, charArray72);
        byte[] byteArray75 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray78 = org.apache.commons.lang3.ArrayUtils.add(byteArray75, (int) (byte) 0, (byte) 100);
        byte[] byteArray81 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray78, 7, (int) (short) 1);
        byte[] byteArray83 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray81, (byte) 0);
        int int85 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray72, (java.lang.Object) byteArray83, 9);
        int int87 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray83, (byte) -1);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "  # 4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "  # 4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ ,  , #,  , 4, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "  # 4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "  # 4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ ,  , #,  , 4, a]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "  # 4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "  # 4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ ,  , #,  , 4, a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "  # 4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "  # 4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ ,  , #,  , 4, a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "#a4a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "#a4a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#, a, 4, a,  ]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "#a4a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "#a4a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#, a, 4, a,  ]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "#a4a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "#a4a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#, a, 4, a,  ]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "#a4a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "#a4a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[#, a, 4, a,  ]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "#a4a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "#a4a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#, a, 4, a,  ]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "#a4a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "#a4a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#, a, 4, a,  ]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[100]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test08750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08750");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray9 = new short[] {};
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray9);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray9, (int) 'a', 0);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray14, (short) (byte) 100, 13);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test08751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08751");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder56 = equalsBuilder53.append((int) (short) 1, (int) (byte) 1);
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        int int60 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray57, false, 10);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray57, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder63.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray70 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray71 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray70);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray71, (java.lang.Object) ' ');
        boolean[] booleanArray78 = new boolean[] { false, true, true, true };
        boolean[] booleanArray79 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray78);
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray71, (java.lang.Object) booleanArray79, (int) (byte) 10);
        boolean[] booleanArray83 = org.apache.commons.lang3.ArrayUtils.add(booleanArray79, true);
        boolean[] booleanArray88 = new boolean[] { false, true, true, true };
        boolean[] booleanArray89 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray88);
        int int92 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray89, true, (int) (short) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder93 = equalsBuilder63.append(booleanArray83, booleanArray89);
        boolean[] booleanArray95 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray83, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder96 = equalsBuilder56.append(booleanArray57, booleanArray83);
        int int99 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray57, true, 4);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(equalsBuilder56);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray79), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(booleanArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray83), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray88), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray89), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
        org.junit.Assert.assertNotNull(equalsBuilder93);
        org.junit.Assert.assertNotNull(booleanArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray95), "[true, true, true, true]");
        org.junit.Assert.assertNotNull(equalsBuilder96);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test08752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08752");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, 10.0f);
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (int) (byte) 0, (float) 100);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray2);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[100.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test08753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08753");
        java.util.RandomAccess[] randomAccessArray0 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray1 = org.apache.commons.lang3.ArrayUtils.toArray(randomAccessArray0);
        java.lang.Boolean[][] booleanArray2 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray9 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray16 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray23 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray31 = new java.lang.Boolean[][] { booleanArray9, booleanArray16, booleanArray23, booleanArray30 };
        java.lang.Boolean[][] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray2, booleanArray31);
        java.util.Map<java.lang.Object, java.lang.Object> objMap33 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray2);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet34 = objMap33.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList35 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean36 = objEntrySet34.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList35);
        boolean boolean37 = objEntrySet34.isEmpty();
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) randomAccessArray0, (java.lang.Object) objEntrySet34, (int) 'a');
        double[] doubleArray43 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray43);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.add(doubleArray43, (double) (byte) 10);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray46, (double) 10.0f);
        double[] doubleArray52 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray52);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.add(doubleArray52, (double) (byte) 10);
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray52, (double) 0L, 0);
        double[] doubleArray59 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray52);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray52, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray63 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray46, doubleArray52);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray63);
        double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray63, 0, (int) (byte) 0);
        java.lang.Double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray63);
        boolean boolean69 = objEntrySet34.equals((java.lang.Object) doubleArray63);
        org.junit.Assert.assertNotNull(randomAccessArray0);
        org.junit.Assert.assertNotNull(randomAccessArray1);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertNotNull(objMap33);
        org.junit.Assert.assertNotNull(objEntrySet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test08754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08754");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray7, 'a', (-1));
        java.lang.Character[] charArray16 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, ' ');
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, '#');
        java.lang.Character[] charArray26 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray26);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray26, 'a');
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray20, charArray29);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray20);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray20);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray20, ' ');
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray20, 'a');
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray20, 'a');
        java.lang.Character[] charArray44 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, 'a');
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.add(charArray46, '#');
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.add(charArray48, 4, '#');
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.subarray(charArray51, 100, (int) 'a');
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray51);
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.clone(charArray51);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray56);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "a a # 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "a a # 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[a,  , a,  , #,  , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " 444");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " 444");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , 4, 4, 4]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a a ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a a ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a,  , a,  , #, #, #]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " 44a4a a ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " 44a4a a ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , 4, 4, a, 4, a,  , a,  , #, #, #]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "### a a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "### a a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#, #, #,  , a,  , a]");
    }

    @Test
    public void test08755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08755");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) ' ');
        boolean[] booleanArray11 = new boolean[] { false, true, true, true };
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) booleanArray12, (int) (byte) 10);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.add(booleanArray12, true);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray12);
        java.lang.Short[] shortArray19 = new java.lang.Short[] { (short) 1 };
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray19);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray19);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray19);
        boolean[] booleanArray27 = new boolean[] { false, false, false, false };
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray27);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray27, false);
        java.lang.Boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray27);
        java.lang.Boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray27);
        java.lang.Short[] shortArray35 = new java.lang.Short[] { (short) 1 };
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray35);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray35);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray35, (short) (byte) 100);
        short[] shortArray40 = new short[] {};
        java.lang.Short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray40);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray39, shortArray40);
        float[] floatArray45 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray45);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(floatArray45, (float) 0);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.add(floatArray45, 10.0f);
        java.lang.Float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray45);
        boolean boolean53 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray39, (java.lang.Object) floatArray51, false);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray33, (java.lang.Object[]) floatArray51);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray19, (java.lang.Object[]) floatArray51);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) floatArray51, (java.lang.Object) 1, 0);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray51);
        java.lang.Byte[] byteArray60 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        java.lang.Byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray60);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray51, (java.lang.Object) byteArray60);
        java.lang.Byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray60);
        java.lang.Object[] objArray64 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) byteArray60);
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray17, (java.lang.Object) byteArray60, 13);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray60);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[1]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
    }

    @Test
    public void test08756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08756");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray7);
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        java.lang.Character[] charArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray11);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray11, ' ');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08757");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray9 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray12 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder0.append(doubleArray9, doubleArray12);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder15 = equalsBuilder0.appendSuper(true);
        java.lang.Character[] charArray21 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21, 'a');
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray24);
        java.lang.Character[] charArray31 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray31, 'a');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.add(charArray33, '#');
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.remove(charArray33, (int) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder0.append(charArray25, charArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder0.append((short) (byte) 10, (short) (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder0.append((long) (short) 10, (long) ' ');
        equalsBuilder44.reset();
        java.lang.Character[] charArray51 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, 'a');
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.add(charArray53, '#');
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.remove(charArray55, 2);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray57);
        java.lang.Character[] charArray64 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray64, 'a');
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.add(charArray66, '#');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder69 = equalsBuilder44.append(charArray57, charArray66);
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.add(charArray57, ' ');
        java.lang.Character[] charArray72 = org.apache.commons.lang3.ArrayUtils.toObject(charArray71);
        java.lang.Character[] charArray73 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray72);
        java.lang.Object[] objArray74 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) charArray73);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(equalsBuilder15);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "##  a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "##  a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[#, #,  ,  , a]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(equalsBuilder69);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "##  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "##  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[#, #,  ,  , a,  ]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[#, #,  ,  , a,  ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[#, #,  ,  , a,  ]");
    }

    @Test
    public void test08758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08758");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8, ' ');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8, 'a');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray15, ' ');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.add(charArray17, ' ');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.subarray(charArray19, 1, (-1));
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.subarray(charArray22, 2, (-1));
        java.lang.Character[] charArray26 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " 44a4 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " 44a4 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , 4, 4, a, 4,  ]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 44a4  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 44a4  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, 4, a, 4,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertNotNull(charArray26);
    }

    @Test
    public void test08759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08759");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (short) 0, (int) ' ', (double) 1L);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 'a');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) 2, (double) 2);
        double[] doubleArray19 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray19);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray19, (double) (byte) 10);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) 0L, 0);
        double[] doubleArray29 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray29);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.add(doubleArray29, (double) (byte) 10);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, (double) 0L, 0);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray29);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray29, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray29);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray19);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray41, (double) 1.0f);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) '4');
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) 6);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) 3);
        double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, 100.0d);
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.add(doubleArray53, 2, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 10.0, 0.0, 3.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 10.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 10.0, 1.0, 0.0, 100.0]");
    }

    @Test
    public void test08760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08760");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder8 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder11 = equalsBuilder8.append(true, true);
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 10, (int) (short) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray15);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray15, (byte) 1, (int) ' ');
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray29);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray29, (byte) 10);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray15, byteArray29);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.add(byteArray34, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder8.append(byteArray15, byteArray34);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray34);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray43, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray43);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray43);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray34, byteArray48);
        java.lang.Boolean[][] booleanArray50 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray57 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray64 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray71 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray78 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray79 = new java.lang.Boolean[][] { booleanArray57, booleanArray64, booleanArray71, booleanArray78 };
        java.lang.Boolean[][] booleanArray80 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray50, booleanArray79);
        java.util.Map<java.lang.Object, java.lang.Object> objMap81 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray50);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet82 = objMap81.entrySet();
        java.util.Set<java.lang.Object> objSet83 = objMap81.keySet();
        java.util.Set<java.lang.Object> objSet84 = objMap81.keySet();
        int[] intArray88 = new int[] { 1, (byte) 1 };
        int[] intArray91 = org.apache.commons.lang3.ArrayUtils.add(intArray88, (int) (short) 0, (int) '4');
        int[] intArray92 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray88);
        java.lang.Object obj93 = objMap81.put((java.lang.Object) 10.0d, (java.lang.Object) intArray92);
        boolean boolean95 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray48, obj93, false);
        byte[] byteArray96 = org.apache.commons.lang3.ArrayUtils.clone(byteArray48);
        byte[] byteArray97 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray48);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(equalsBuilder11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertNotNull(booleanArray79);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertNotNull(objMap81);
        org.junit.Assert.assertNotNull(objEntrySet82);
        org.junit.Assert.assertNotNull(objSet83);
        org.junit.Assert.assertNotNull(objSet84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[52, 1, 1]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 1]");
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[1, 100, -1, 10, 100, 0, 0, 0, 10]");
    }

    @Test
    public void test08761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08761");
        float[] floatArray3 = new float[] { (short) 100, 0, 10 };
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, 10.0f);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray6);
        float[] floatArray15 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(floatArray15, (float) 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 10.0f);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray15);
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray22);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22, (float) (short) 100);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22, (float) 100);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray27);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray27, (float) '#');
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0, 1.0]");
    }

    @Test
    public void test08762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08762");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((long) (byte) 10, (long) (byte) 10);
        java.lang.Byte[] byteArray23 = new java.lang.Byte[] { (byte) 1 };
        java.lang.Byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder25 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder25.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean29 = equalsBuilder28.isEquals();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray35 = org.apache.commons.lang3.ArrayUtils.addAll(strArray30, strArray34);
        java.lang.String[] strArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray30);
        java.lang.Character[] charArray42 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, ' ');
        java.lang.Character[] charArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder28.append((java.lang.Object[]) strArray30, (java.lang.Object[]) charArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder21.append((java.lang.Object[]) byteArray23, (java.lang.Object[]) strArray30);
        java.lang.Byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray23, (java.lang.Object) byteArray48, (int) (byte) 10);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray48, (byte) 100);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.add(byteArray52, (byte) 0);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray54);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.add(byteArray54, 1, (byte) -1);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, -1]");
    }

    @Test
    public void test08763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08763");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray9 = new short[] {};
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (short) -1);
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) 1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15, (short) (byte) 100);
        short[] shortArray20 = new short[] {};
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray20);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray20);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray24);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) (byte) 100);
        short[] shortArray29 = new short[] {};
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray28, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray29);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray32, (short) (byte) 10);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray32);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray35);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray35, (short) 0);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray35, (short) 100);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray35, 1, (int) ' ');
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[]");
    }

    @Test
    public void test08764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08764");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        java.lang.Integer[] intArray2 = new java.lang.Integer[] { 10 };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray2, (int) (byte) 10);
        java.lang.Byte[] byteArray9 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder12 = equalsBuilder0.append((java.lang.Object[]) intArray2, (java.lang.Object[]) byteArray9);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder15 = equalsBuilder0.append((double) (byte) 10, (double) 100.0f);
        java.lang.Integer[] intArray19 = new java.lang.Integer[] { 10, 3, 10 };
        java.lang.Integer[] intArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray19);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray20, (int) (byte) -1);
        java.lang.Integer[] intArray23 = org.apache.commons.lang3.ArrayUtils.toObject(intArray22);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray24);
        int[] intArray30 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.clone(intArray30);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray30, (int) 'a');
        int[] intArray38 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray39 = org.apache.commons.lang3.ArrayUtils.clone(intArray38);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray33, intArray39);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray33);
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray33);
        int[] intArray48 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.clone(intArray48);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray48);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.addAll(intArray33, intArray48);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray48, (int) ' ');
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray48);
        int[] intArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray48, 1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray48);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray48, 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder60 = equalsBuilder15.append(intArray24, intArray59);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder60.append((short) 1, (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder60.append((short) 0, (short) (byte) 1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(equalsBuilder12);
        org.junit.Assert.assertNotNull(equalsBuilder15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[10, 3, 10]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[10, 3, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[100, -1, -1, 0, 97, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, -1, 100]");
        org.junit.Assert.assertNotNull(equalsBuilder60);
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertNotNull(equalsBuilder66);
    }

    @Test
    public void test08765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08765");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray6);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray2);
        float[] floatArray15 = new float[] { (short) 100, 0, 10 };
        float[] floatArray18 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray18);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) 0);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, 10.0f);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray18);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray18);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray18);
        float[] floatArray33 = new float[] { (short) 100, 0, 10 };
        float[] floatArray36 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(floatArray36, (float) 0);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.add(floatArray36, 10.0f);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray33, floatArray36);
        float[] floatArray45 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray45);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(floatArray45, (float) 0);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.add(floatArray45, 10.0f);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray33, floatArray45);
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray29, floatArray33);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray52);
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray52);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray52, (float) 100L);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[-1.0, 1.0, -1.0, 1.0, 100.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0, 1.0, -1.0, 1.0, 100.0, 0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
    }

    @Test
    public void test08766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08766");
        byte[] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray0);
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray5, (byte) 10, (int) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray5, (byte) 10);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray1, byteArray5);
        java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray13, (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder18.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray22 = new double[] {};
        double[] doubleArray26 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray26);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.add(doubleArray26, (double) (byte) 10);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray26, (double) 0L, 0);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray26);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder18.append(doubleArray22, doubleArray26);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray42 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray42);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.add(doubleArray42, (double) (byte) 10);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray45, (double) 10.0f);
        double[] doubleArray51 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray51);
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.add(doubleArray51, (double) (byte) 10);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray51, (double) 0L, 0);
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray51);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray51, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray45, doubleArray51);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = equalsBuilder37.append(doubleArray38, doubleArray51);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray64);
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.add(byteArray66, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder69 = equalsBuilder63.append(byteArray64, byteArray66);
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray64);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray70);
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray13, byteArray70);
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray1, byteArray72);
        byte[] byteArray76 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray73, (int) '#', (int) (short) 1);
        int int78 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray76, (byte) 10);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray76);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray76);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test08767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08767");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 10, (int) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray7);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) 1, (int) ' ');
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 10);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray21);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.add(byteArray26, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder0.append(byteArray7, byteArray26);
        short[] shortArray31 = new short[] {};
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray31);
        int int33 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) shortArray31);
        short[] shortArray36 = new short[] { (short) 100, (short) -1 };
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder0.append(shortArray31, shortArray36);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.add(shortArray31, (short) 1);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray39, (short) 10);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray39, (short) -1, (int) (byte) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray39);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[100, -1]");
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test08768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08768");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int8 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray6);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray6);
        byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9, (byte) 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9, (byte) 10);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray14);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 10, -1, 100, 1]");
    }

    @Test
    public void test08769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08769");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        boolean[] booleanArray19 = new boolean[] { false, false, false, false };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray19, false);
        java.lang.Boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray19);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray19);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray19);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray19);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray19);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray19, (int) (byte) -1, (int) (short) 1);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray19);
        java.lang.Boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray19, true, 10);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test08770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08770");
        double[] doubleArray5 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray5);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Object obj8 = null;
        boolean boolean10 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray7, obj8, false);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray7, (double) 3);
        double[] doubleArray16 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray16);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.add(doubleArray16, (double) (byte) 10);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray19, (double) 10.0f);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) 1, (int) ' ', (double) '4');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray19, 4, (double) 6);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray12, doubleArray19);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray19);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) (byte) -1, (int) '4', 100.0d);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, (double) 13, (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0, 100.0, 10.0, 6.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test08771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08771");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder6 = equalsBuilder3.append((float) (short) 100, (float) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder9 = equalsBuilder3.append((short) 1, (short) (byte) -1);
        java.lang.Boolean boolean10 = equalsBuilder3.build();
        boolean boolean11 = equalsBuilder3.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder14 = equalsBuilder3.append('a', '4');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder17 = equalsBuilder3.append((short) 100, (short) 10);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(equalsBuilder6);
        org.junit.Assert.assertNotNull(equalsBuilder9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + false + "'", boolean10, false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(equalsBuilder14);
        org.junit.Assert.assertNotNull(equalsBuilder17);
    }

    @Test
    public void test08772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08772");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        java.lang.Character[] charArray16 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray16);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, 'a');
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, ' ');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray19);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, ' ', (int) (short) -1);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, ' ');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 44a44## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 44a44## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, 4, a, 4, 4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test08773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08773");
        java.util.Iterator[] iteratorArray1 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray2 = (java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray1;
        java.util.Iterator[] iteratorArray4 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray5 = (java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray4;
        java.util.Iterator[] iteratorArray7 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray8 = (java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray7;
        java.util.Iterator[] iteratorArray10 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray11 = (java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray10;
        java.util.Iterator[][] iteratorArray13 = new java.util.Iterator[4][];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[][] objEntryItorArray14 = (java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[][]) iteratorArray13;
        objEntryItorArray14[0] = objEntryItorArray2;
        objEntryItorArray14[1] = objEntryItorArray5;
        objEntryItorArray14[2] = objEntryItorArray8;
        objEntryItorArray14[3] = objEntryItorArray11;
        java.lang.Boolean[][] booleanArray23 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray37 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray44 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray51 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray52 = new java.lang.Boolean[][] { booleanArray30, booleanArray37, booleanArray44, booleanArray51 };
        java.lang.Boolean[][] booleanArray53 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray52);
        java.util.Map<java.lang.Object, java.lang.Object> objMap54 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray23);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet55 = objMap54.entrySet();
        objEntrySet55.clear();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList57 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        float[] floatArray61 = new float[] { (short) 100, 0, 10 };
        float[] floatArray64 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray64);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.contains(floatArray64, (float) 0);
        float[] floatArray69 = org.apache.commons.lang3.ArrayUtils.add(floatArray64, 10.0f);
        float[] floatArray70 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray61, floatArray64);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.contains(floatArray64, (float) (byte) 10);
        boolean boolean73 = objEntryList57.equals((java.lang.Object) boolean72);
        boolean boolean74 = objEntrySet55.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList57);
        objEntryList57.clear();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList76 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor77 = objEntryList76.iterator();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry78 = null;
        boolean boolean79 = objEntryList76.add(objEntry78);
        java.lang.Object[] objArray80 = objEntryList76.toArray();
        boolean boolean81 = objEntryList57.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList76);
        java.util.Iterator[] iteratorArray83 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray84 = (java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray83;
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray85 = org.apache.commons.lang3.ArrayUtils.clone((java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray83);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray88 = org.apache.commons.lang3.ArrayUtils.subarray(objEntryItorArray85, 7, 0);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray89 = objEntryList57.toArray(objEntryItorArray85);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[][] objEntryItorArray90 = org.apache.commons.lang3.ArrayUtils.add(objEntryItorArray14, objEntryItorArray89);
        java.util.Iterator[] iteratorArray93 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray94 = (java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray93;
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray95 = org.apache.commons.lang3.ArrayUtils.clone((java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) iteratorArray93);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryItorArray98 = org.apache.commons.lang3.ArrayUtils.subarray(objEntryItorArray95, 7, 0);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[][] objEntryItorArray99 = org.apache.commons.lang3.ArrayUtils.add(objEntryItorArray90, (int) (byte) 1, objEntryItorArray98);
        org.junit.Assert.assertNotNull(iteratorArray1);
        org.junit.Assert.assertNotNull(objEntryItorArray2);
        org.junit.Assert.assertNotNull(iteratorArray4);
        org.junit.Assert.assertNotNull(objEntryItorArray5);
        org.junit.Assert.assertNotNull(iteratorArray7);
        org.junit.Assert.assertNotNull(objEntryItorArray8);
        org.junit.Assert.assertNotNull(iteratorArray10);
        org.junit.Assert.assertNotNull(objEntryItorArray11);
        org.junit.Assert.assertNotNull(iteratorArray13);
        org.junit.Assert.assertNotNull(objEntryItorArray14);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(objMap54);
        org.junit.Assert.assertNotNull(objEntrySet55);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objEntryItor77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[null]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(iteratorArray83);
        org.junit.Assert.assertNotNull(objEntryItorArray84);
        org.junit.Assert.assertNotNull(objEntryItorArray85);
        org.junit.Assert.assertNotNull(objEntryItorArray88);
        org.junit.Assert.assertNotNull(objEntryItorArray89);
        org.junit.Assert.assertNotNull(objEntryItorArray90);
        org.junit.Assert.assertNotNull(iteratorArray93);
        org.junit.Assert.assertNotNull(objEntryItorArray94);
        org.junit.Assert.assertNotNull(objEntryItorArray95);
        org.junit.Assert.assertNotNull(objEntryItorArray98);
        org.junit.Assert.assertNotNull(objEntryItorArray99);
    }

    @Test
    public void test08774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08774");
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int8 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray6);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray6);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray10, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, -1, 10, 100, 0]");
    }

    @Test
    public void test08775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08775");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, (double) (byte) 10);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) (byte) 0, (int) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test08776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08776");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) (byte) 100);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(shortArray2, (short) 1);
        short[] shortArray7 = new short[] {};
        java.lang.Short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray7);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray8, (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray10, (short) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray2, shortArray13);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) 0);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray2);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.remove(shortArray2, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
    }

    @Test
    public void test08777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08777");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.addAll(strArray5, strArray9);
        java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray5);
        java.lang.Character[] charArray17 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17, ' ');
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((java.lang.Object[]) strArray5, (java.lang.Object[]) charArray20);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray20, '#');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray23);
        java.lang.Object obj25 = null;
        java.lang.Boolean[][] booleanArray26 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray33 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray40 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray47 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray55 = new java.lang.Boolean[][] { booleanArray33, booleanArray40, booleanArray47, booleanArray54 };
        java.lang.Boolean[][] booleanArray56 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray26, booleanArray55);
        java.util.Map<java.lang.Object, java.lang.Object> objMap57 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray26);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet58 = objMap57.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList59 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean60 = objEntrySet58.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList59);
        boolean boolean62 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(obj25, (java.lang.Object) objEntrySet58, true);
        java.lang.Character[] charArray68 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray68, 'a');
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.add(charArray70, '#');
        java.lang.Character[] charArray73 = org.apache.commons.lang3.ArrayUtils.toObject(charArray72);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray72, 'a');
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.add(charArray72, '#');
        boolean boolean78 = objEntrySet58.contains((java.lang.Object) charArray77);
        java.lang.Character[] charArray84 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray86 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray84, 'a');
        char[] charArray88 = org.apache.commons.lang3.ArrayUtils.add(charArray86, '#');
        char[] charArray91 = org.apache.commons.lang3.ArrayUtils.add(charArray88, 4, '#');
        int int93 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray91, '4');
        char[] charArray95 = org.apache.commons.lang3.ArrayUtils.add(charArray91, '4');
        char[] charArray96 = org.apache.commons.lang3.ArrayUtils.addAll(charArray77, charArray91);
        boolean boolean97 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray24, charArray96);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(objMap57);
        org.junit.Assert.assertNotNull(objEntrySet58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a a ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a a ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a,  , a,  , #, #, #]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "a a ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "a a ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[a,  , a,  , #, #, #]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), "a a ###4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), "a a ###4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[a,  , a,  , #, #, #, 4]");
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), "a a ###a a ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), "a a ###a a ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[a,  , a,  , #, #, #, a,  , a,  , #, #, #]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test08778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08778");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray9 = new short[] {};
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (short) -1);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray13, (int) (short) -1, 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray16);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08779");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean35 = objEntryList33.remove((java.lang.Object) byteArray34);
        boolean boolean36 = objEntrySet32.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream37 = objEntrySet32.stream();
        int int38 = objEntrySet32.size();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor39 = objEntrySet32.iterator();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEntryStream37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objEntryItor39);
    }

    @Test
    public void test08780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08780");
        long[] longArray0 = new long[] {};
        long[] longArray1 = new long[] {};
        long[][] longArray2 = new long[][] { longArray0, longArray1 };
        long[][][] longArray3 = new long[][][] { longArray2 };
        long[][][][] longArray4 = new long[][][][] { longArray3 };
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 1 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) (byte) 100);
        short[] shortArray11 = new short[] {};
        java.lang.Short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray11);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray10, shortArray11);
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) 1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15, (short) (byte) 100);
        short[] shortArray20 = new short[] {};
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray20);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray20);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray13, shortArray20);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray13);
        long[][][][] longArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray4, (java.lang.Object) boolean24);
        java.lang.Boolean[][] booleanArray26 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray33 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray40 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray47 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray55 = new java.lang.Boolean[][] { booleanArray33, booleanArray40, booleanArray47, booleanArray54 };
        java.lang.Boolean[][] booleanArray56 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray26, booleanArray55);
        java.util.Map<java.lang.Object, java.lang.Object> objMap57 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray26);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet58 = objMap57.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList59 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean60 = objEntrySet58.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList59);
        int[] intArray65 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray66 = org.apache.commons.lang3.ArrayUtils.clone(intArray65);
        int[] intArray68 = org.apache.commons.lang3.ArrayUtils.add(intArray65, (int) 'a');
        int[] intArray73 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray74 = org.apache.commons.lang3.ArrayUtils.clone(intArray73);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray74);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray68, intArray74);
        boolean boolean77 = objEntrySet58.remove((java.lang.Object) intArray68);
        int[] intArray80 = org.apache.commons.lang3.ArrayUtils.subarray(intArray68, 10, (int) (byte) 10);
        int[] intArray82 = org.apache.commons.lang3.ArrayUtils.add(intArray80, (int) (byte) 1);
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray4, (java.lang.Object) intArray82);
        int[] intArray85 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray82, 0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(objMap57);
        org.junit.Assert.assertNotNull(objEntrySet58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[1]");
    }

    @Test
    public void test08781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08781");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray7);
        java.lang.Character[] charArray15 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, ' ');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray7, charArray17);
        java.lang.Character[] charArray25 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray25, ' ');
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray7, charArray28);
        double[] doubleArray34 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray34);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.add(doubleArray34, (double) (byte) 10);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.add(doubleArray34, 0.0d);
        char[] charArray41 = new char[] { 'a' };
        java.lang.Character[] charArray42 = org.apache.commons.lang3.ArrayUtils.toObject(charArray41);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 0.0d, (java.lang.Object) charArray41);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.clone(charArray41);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray28, charArray41);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray41);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray41);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray47, 'a');
        java.lang.Character[] charArray55 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray55, ' ');
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray55, '#');
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.clone(charArray59);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray59, ' ');
        java.lang.Character[] charArray68 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray68, 'a');
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.add(charArray70, '#');
        char[] charArray73 = org.apache.commons.lang3.ArrayUtils.addAll(charArray59, charArray72);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray72);
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.subarray(charArray72, (int) (byte) -1, 100);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray72);
        char[] charArray80 = org.apache.commons.lang3.ArrayUtils.add(charArray72, ' ');
        int int83 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray72, 'a', 6);
        char[] charArray84 = org.apache.commons.lang3.ArrayUtils.addAll(charArray47, charArray72);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[ , 4, 4, a, 4, a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "a a ## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "a a ## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[a,  , a,  , #, #,  ]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "aa a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "aa a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[a, a,  , a,  , #, #]");
    }

    @Test
    public void test08782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08782");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 10);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100, (int) (byte) 1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray2);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray8, 1, (int) (short) 0);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.add(shortArray8, (short) 100);
        java.lang.Short[] shortArray16 = new java.lang.Short[] { (short) 1 };
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray16);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray16);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray16, (short) (byte) 100);
        short[] shortArray21 = new short[] {};
        java.lang.Short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray21);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray20, shortArray21);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(shortArray23, (short) 100);
        java.lang.Short[] shortArray27 = new java.lang.Short[] { (short) 1 };
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray27);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray27, (short) (byte) 100);
        short[] shortArray32 = new short[] {};
        java.lang.Short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray32);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray31, shortArray32);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray31, 4, (-1));
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray37, (int) (byte) -1, (int) '4');
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.clone(shortArray37);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray23, shortArray37);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray43, (short) (byte) 10);
        short[] shortArray47 = null;
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray43, shortArray47);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 100]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[]");
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08783");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0L, 0);
        double[] doubleArray13 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray13);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray13, (double) (byte) 10);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray13, (double) 0L, 0);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray13, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray13);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray3);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 9, (int) (byte) 0);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test08784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08784");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray6, (double) 10.0f);
        double[] doubleArray12 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (double) (byte) 10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 0L, 0);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray6, doubleArray12);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray23, (double) 3, 2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test08785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08785");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((long) (byte) 10, (long) (byte) 10);
        java.lang.Byte[] byteArray23 = new java.lang.Byte[] { (byte) 1 };
        java.lang.Byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder25 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder25.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean29 = equalsBuilder28.isEquals();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray35 = org.apache.commons.lang3.ArrayUtils.addAll(strArray30, strArray34);
        java.lang.String[] strArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray30);
        java.lang.Character[] charArray42 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, ' ');
        java.lang.Character[] charArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder28.append((java.lang.Object[]) strArray30, (java.lang.Object[]) charArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder21.append((java.lang.Object[]) byteArray23, (java.lang.Object[]) strArray30);
        java.lang.Byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23);
        java.lang.Byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray48);
        int int50 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray48);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray48);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray51, (byte) -1);
        java.lang.Byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray53);
        java.lang.Byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray54);
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray55);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
    }

    @Test
    public void test08786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08786");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(false, true);
        java.lang.Float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray4);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray5, (float) 'a');
        float[] floatArray10 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 5);
        float[] floatArray17 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray17);
        java.lang.Character[] charArray24 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray24, 'a');
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray17, (java.lang.Object) 'a');
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray17, (int) (byte) 1, (int) (byte) 1);
        float[] floatArray33 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray33);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(floatArray33, (float) 0);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.add(floatArray33, 10.0f);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(floatArray33, (float) (-1));
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray33);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray33);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray33);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray10, floatArray33);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.add(floatArray45, (float) ' ');
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray47, 0, (int) (short) 100);
        float[] floatArray51 = null;
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray47, floatArray51);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder3.append(floatArray7, floatArray47);
        long[] longArray59 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.clone(longArray59);
        java.lang.Long[] longArray61 = org.apache.commons.lang3.ArrayUtils.toObject(longArray60);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.clone(longArray60);
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.add(longArray62, (long) (short) 0);
        int int66 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray64, (long) '4');
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray64);
        int int70 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray64, (long) (byte) 0, 7);
        long[] longArray74 = new long[] { 4, 'a', (byte) 0 };
        long[] longArray76 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray74, (long) 'a');
        long[] longArray78 = org.apache.commons.lang3.ArrayUtils.remove(longArray76, (int) (byte) 1);
        long[] longArray79 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray78);
        long[] longArray81 = org.apache.commons.lang3.ArrayUtils.add(longArray79, (long) (short) 1);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray79);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder83 = equalsBuilder53.append(longArray64, longArray79);
        equalsBuilder53.reset();
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[1.0, -1.0, 32.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[1.0, -1.0, 32.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[4, 97, 0]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray76), "[4, 0]");
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[4]");
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[4]");
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[4, 1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(equalsBuilder83);
    }

    @Test
    public void test08787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08787");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder5 = equalsBuilder0.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder8 = equalsBuilder0.append((double) 0.0f, (double) (-1));
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(equalsBuilder5);
        org.junit.Assert.assertNotNull(equalsBuilder8);
    }

    @Test
    public void test08788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08788");
        int[] intArray3 = new int[] { '#', (byte) -1, (short) 0 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (int) '#', (int) (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray3, (int) (byte) 1);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray9, (-1));
        int[] intArray16 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.clone(intArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray9, intArray16);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray16, (int) (byte) -1, (int) 'a');
        int[] intArray26 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.clone(intArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray27);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray16, intArray27);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.add(intArray30, (int) (byte) 0, 2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[35, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, -1, -1, 0, 0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2, 100, -1, -1, 0, 0, -1, -1, 100]");
    }

    @Test
    public void test08789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08789");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray13 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        java.lang.Long[] longArray15 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.clone(longArray14);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.addAll(longArray6, longArray16);
        int[] intArray22 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray22);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        boolean boolean26 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) longArray16, (java.lang.Object) intArray24, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray16);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray16);
        long[] longArray34 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.clone(longArray34);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.add(longArray35, (int) (short) 1, 0L);
        long[] longArray39 = null;
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray38, longArray39);
        long[] longArray41 = null;
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray38, longArray41);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.clone(longArray38);
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray16, longArray38);
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray38);
        int int46 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) longArray38);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[32, 0, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[32, 0, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[32, 100, 10, 10, 1, 32, 0, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[32, 0, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
    }

    @Test
    public void test08790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08790");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) ' ');
        java.lang.Object obj7 = null;
        java.lang.Object[] objArray8 = org.apache.commons.lang3.ArrayUtils.add((java.lang.Object[]) doubleArray4, obj7);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) 0);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, 0.0d);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) 3);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray12, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[0.0, 10.0, 100.0, null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[0.0, 10.0, 100.0, null]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
    }

    @Test
    public void test08791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08791");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.add(intArray4, (int) 'a');
        int[] intArray12 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.clone(intArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray7);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7);
        int[] intArray22 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray22);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.addAll(intArray7, intArray22);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray22, (int) ' ');
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray22, 1);
        int[] intArray35 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.clone(intArray35);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray35);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray22, intArray37);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.subarray(intArray37, 9, (int) (byte) 100);
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.add(intArray37, 2, 13);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray37, (int) (short) 10, 1);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray37, 7, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100, -1, -1, 0, 97, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[100, -1, -1, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[100, -1, 13, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test08792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08792");
        java.lang.CharSequence[][] charSequenceArray0 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][] charSequenceArray1 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][][] charSequenceArray2 = new java.lang.CharSequence[][][] { charSequenceArray0, charSequenceArray1 };
        java.lang.CharSequence[][][][] charSequenceArray3 = new java.lang.CharSequence[][][][] { charSequenceArray2 };
        java.lang.CharSequence[][] charSequenceArray4 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][] charSequenceArray5 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[][][] charSequenceArray6 = new java.lang.CharSequence[][][] { charSequenceArray4, charSequenceArray5 };
        java.lang.CharSequence[][][][] charSequenceArray7 = new java.lang.CharSequence[][][][] { charSequenceArray6 };
        java.lang.CharSequence[][][][][] charSequenceArray8 = new java.lang.CharSequence[][][][][] { charSequenceArray3, charSequenceArray7 };
        java.lang.CharSequence[][][][][] charSequenceArray9 = org.apache.commons.lang3.ArrayUtils.clone(charSequenceArray8);
        java.lang.CharSequence[][][][][] charSequenceArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charSequenceArray8, 11, 10);
        org.junit.Assert.assertNotNull(charSequenceArray0);
        org.junit.Assert.assertNotNull(charSequenceArray1);
        org.junit.Assert.assertNotNull(charSequenceArray2);
        org.junit.Assert.assertNotNull(charSequenceArray3);
        org.junit.Assert.assertNotNull(charSequenceArray4);
        org.junit.Assert.assertNotNull(charSequenceArray5);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertNotNull(charSequenceArray7);
        org.junit.Assert.assertNotNull(charSequenceArray8);
        org.junit.Assert.assertNotNull(charSequenceArray9);
        org.junit.Assert.assertNotNull(charSequenceArray12);
    }

    @Test
    public void test08793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08793");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean34 = objEntrySet32.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor35 = objEntryList33.iterator();
        boolean[] booleanArray40 = new boolean[] { false, false, false, false };
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray40, false);
        java.lang.Boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray40);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray45);
        boolean boolean47 = objEntryList33.remove((java.lang.Object) booleanArray45);
        int int48 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) booleanArray45);
        boolean[] booleanArray49 = null;
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray45, booleanArray49);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray50);
        boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray50, true);
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray53, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objEntryItor35);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, false, false]");
    }

    @Test
    public void test08794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08794");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 10, 3, 10 };
        java.lang.Integer[] intArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray3);
        java.lang.Integer[] intArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, 13);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, 3, 10]");
    }

    @Test
    public void test08795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08795");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) 0);
        java.lang.Short[] shortArray12 = new java.lang.Short[] { (short) 1 };
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) (byte) 100);
        short[] shortArray17 = new short[] {};
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray17);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray16, 4, (-1));
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray10, shortArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray22, (short) -1);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test08796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08796");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray2 = null;
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray1, byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(byteArray1, (byte) 100);
        java.lang.Byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test08797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08797");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) 10);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray4, 7, (int) 'a');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray4);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.add(shortArray4, (short) (byte) 10);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.remove(shortArray10, 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.add(shortArray10, (-1), (short) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10]");
    }

    @Test
    public void test08798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08798");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        java.lang.Short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        java.lang.Short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray4);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray5);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertNotNull(shortArray5);
    }

    @Test
    public void test08799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08799");
        int[] intArray0 = new int[] {};
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.add(intArray0, 0, 100);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray3);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray3);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray3);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray8);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray9);
        java.lang.Integer[] intArray11 = org.apache.commons.lang3.ArrayUtils.toObject(intArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray9);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08800");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 10);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100, (int) (byte) 1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray2);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray8);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray8, 1, (int) (short) 0);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray12, (short) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray14, (short) 0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test08801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08801");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder5 = equalsBuilder0.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder8 = equalsBuilder5.append((long) (short) 10, (long) '#');
        boolean boolean9 = equalsBuilder5.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder12 = equalsBuilder5.append((short) (byte) 10, (short) (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder15 = equalsBuilder12.append(true, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder12.append((float) (short) -1, (float) 1);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(equalsBuilder5);
        org.junit.Assert.assertNotNull(equalsBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(equalsBuilder12);
        org.junit.Assert.assertNotNull(equalsBuilder15);
        org.junit.Assert.assertNotNull(equalsBuilder18);
    }

    @Test
    public void test08802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08802");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray26);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) 'a');
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray26);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (long) 3);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.add(longArray59, 0L);
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.add(longArray61, 6, (long) 13);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1, 3]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[32, 100, 10, 10, 1, 3, 0]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[32, 100, 10, 10, 1, 3, 13, 0]");
    }

    @Test
    public void test08803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08803");
        short[] shortArray0 = null;
        short[] shortArray5 = new short[] { (byte) 0, (byte) 1, (short) -1, (byte) -1 };
        java.lang.Short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray5);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray5, (int) (short) 1, 100);
        java.lang.Short[] shortArray11 = new java.lang.Short[] { (short) 1 };
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray11);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray11, (short) (byte) 100);
        short[] shortArray16 = new short[] {};
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray16);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray16);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray18, (short) 0);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.add(shortArray18, (short) (byte) -1);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray22);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray0, shortArray9);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray0, (short) 10);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, -1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test08804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08804");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Character[] charArray9 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, 'a');
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray2, (java.lang.Object) 'a');
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 3);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, 1.0f, (int) (byte) 100);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray2);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.remove(floatArray2, 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) 9, (int) (short) 10);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0, 3.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test08805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08805");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        float[] floatArray4 = new float[] { (short) 100, 0, 10 };
        float[] floatArray7 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (float) 0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, 10.0f);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray7);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (float) (byte) 10);
        boolean boolean16 = objEntryList0.equals((java.lang.Object) boolean15);
        boolean boolean17 = objEntryList0.isEmpty();
        java.lang.Object[] objArray18 = objEntryList0.toArray();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream19 = objEntryList0.parallelStream();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream20 = objEntryList0.stream();
        java.util.AbstractList[] abstractListArray22 = new java.util.AbstractList[1];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryListArray23 = (java.util.AbstractList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) abstractListArray22;
        objEntryListArray23[0] = objEntryList0;
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList26 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor27 = objEntryList26.iterator();
        java.lang.String[] strArray28 = new java.lang.String[] {};
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray33 = org.apache.commons.lang3.ArrayUtils.addAll(strArray28, strArray32);
        java.lang.Comparable<java.lang.String>[] strComparableArray34 = objEntryList26.toArray((java.lang.Comparable<java.lang.String>[]) strArray28);
        java.lang.Boolean[][] booleanArray35 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray42 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray49 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray56 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray63 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray64 = new java.lang.Boolean[][] { booleanArray42, booleanArray49, booleanArray56, booleanArray63 };
        java.lang.Boolean[][] booleanArray65 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray35, booleanArray64);
        java.util.Map<java.lang.Object, java.lang.Object> objMap66 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray35);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet67 = objMap66.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList68 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean70 = objEntryList68.remove((java.lang.Object) byteArray69);
        boolean boolean71 = objEntrySet67.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList68);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor72 = objEntrySet67.iterator();
        java.lang.Object[] objArray73 = objEntrySet67.toArray();
        boolean boolean75 = objEntrySet67.remove((java.lang.Object) '4');
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList76 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor77 = objEntryList76.iterator();
        java.lang.String[] strArray78 = new java.lang.String[] {};
        java.lang.String[] strArray82 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray83 = org.apache.commons.lang3.ArrayUtils.addAll(strArray78, strArray82);
        java.lang.Comparable<java.lang.String>[] strComparableArray84 = objEntryList76.toArray((java.lang.Comparable<java.lang.String>[]) strArray78);
        boolean boolean85 = objEntrySet67.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList76);
        boolean boolean86 = objEntryList26.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList76);
        java.util.AbstractList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryListArray87 = org.apache.commons.lang3.ArrayUtils.add(objEntryListArray23, (java.util.AbstractList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList26);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isNotEmpty((java.lang.Iterable<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) objEntryListArray87);
        java.util.AbstractList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryListArray89 = org.apache.commons.lang3.ArrayUtils.clone(objEntryListArray87);
        java.util.List<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryListArray90 = org.apache.commons.lang3.ArrayUtils.toArray((java.util.List<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) objEntryListArray87);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objEntryStream19);
        org.junit.Assert.assertNotNull(objEntryStream20);
        org.junit.Assert.assertNotNull(abstractListArray22);
        org.junit.Assert.assertNotNull(objEntryListArray23);
        org.junit.Assert.assertNotNull(objEntryItor27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strComparableArray34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertNotNull(objMap66);
        org.junit.Assert.assertNotNull(objEntrySet67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objEntryItor72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objEntryItor77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strComparableArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objEntryListArray87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(objEntryListArray89);
        org.junit.Assert.assertNotNull(objEntryListArray90);
    }

    @Test
    public void test08806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08806");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) 1 };
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray10);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) (byte) 100);
        short[] shortArray15 = new short[] {};
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray14, shortArray15);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray18, (short) (byte) 10);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.add(shortArray18, (short) (byte) 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray18, (short) (byte) -1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray18);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.add(shortArray18, (short) (byte) -1);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray18);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(shortArray18, (short) 0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, -1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08807");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        java.lang.Short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) 100);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray5, (int) (short) 100, 3);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray8, (short) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test08808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08808");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray8);
        java.lang.Character[] charArray15 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, ' ');
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray17);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray17);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray17);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray8);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.subarray(charArray22, 11, (int) '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4a44 4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4a44 4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, a, 4, 4,  , 4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
    }

    @Test
    public void test08809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08809");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        byte[] byteArray2 = null;
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray1, byteArray2);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray1, (byte) 1);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray5, (byte) -1);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(byteArray5, (byte) 10);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray5, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test08810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08810");
        java.lang.Byte[] byteArray4 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray4, (byte) 100);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7);
        java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) -1);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7, (byte) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray7);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.add(byteArray16, 11, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100, 1, 100]");
    }

    @Test
    public void test08811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08811");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) (byte) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 4);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test08812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08812");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor1 = objEntryList0.iterator();
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.addAll(strArray2, strArray6);
        java.lang.Comparable<java.lang.String>[] strComparableArray8 = objEntryList0.toArray((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Object[] objArray9 = objEntryList0.toArray();
        java.lang.Boolean[][] booleanArray10 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray24 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray38 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray39 = new java.lang.Boolean[][] { booleanArray17, booleanArray24, booleanArray31, booleanArray38 };
        java.lang.Boolean[][] booleanArray40 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray39);
        java.util.Map<java.lang.Object, java.lang.Object> objMap41 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray10);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = objMap41.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList43 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean45 = objEntryList43.remove((java.lang.Object) byteArray44);
        boolean boolean46 = objEntrySet42.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList43);
        java.lang.Boolean[][] booleanArray47 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray61 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray68 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray75 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray76 = new java.lang.Boolean[][] { booleanArray54, booleanArray61, booleanArray68, booleanArray75 };
        java.lang.Boolean[][] booleanArray77 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray47, booleanArray76);
        java.util.Map<java.lang.Object, java.lang.Object> objMap78 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray47);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet79 = objMap78.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList80 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray81 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean82 = objEntryList80.remove((java.lang.Object) byteArray81);
        boolean boolean83 = objEntrySet79.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList80);
        boolean boolean84 = objEntrySet42.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList80);
        boolean boolean85 = objEntryList0.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet42);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream86 = objEntrySet42.stream();
        org.junit.Assert.assertNotNull(objEntryItor1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strComparableArray8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(objMap41);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertNotNull(objMap78);
        org.junit.Assert.assertNotNull(objEntrySet79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objEntryStream86);
    }

    @Test
    public void test08813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08813");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, 0.0d);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (-1), (int) (short) 10, (double) (-1.0f));
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray3, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 10L, 2, (-1.0d));
        double[] doubleArray22 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.add(doubleArray22, (double) (byte) 10);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray25, (double) 10.0f);
        double[] doubleArray31 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.add(doubleArray31, (double) (byte) 10);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) 0L, 0);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray31);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray31);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray31, (double) (byte) -1);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) (short) 1);
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray31, 2, (int) (byte) 100);
        double[] doubleArray54 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray54);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.add(doubleArray54, (double) (byte) 10);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray57, (double) 10.0f);
        double[] doubleArray63 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray63);
        double[] doubleArray66 = org.apache.commons.lang3.ArrayUtils.add(doubleArray63, (double) (byte) 10);
        int int69 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray63, (double) 0L, 0);
        double[] doubleArray70 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray63);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray63, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray74 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray57, doubleArray63);
        double[] doubleArray76 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray63, (double) (byte) -1);
        int int80 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray76, (double) '4', 7, (double) (short) 0);
        int int82 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray76, (double) 0L);
        int int85 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray76, (double) 10L, (double) 100.0f);
        double[] doubleArray86 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray76);
        int int90 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray76, (double) (byte) 10, 5, (double) 4);
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray31, doubleArray76);
        int int95 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) 0.0f, (int) '#', (double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0, 100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test08814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08814");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, 10.0f);
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray2, 7, (int) (short) 100);
        int int11 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray2);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.remove(floatArray2, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test08815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08815");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder4 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder4.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray8 = new double[] {};
        double[] doubleArray12 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray12, (double) (byte) 10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 0L, 0);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder23 = equalsBuilder4.append(doubleArray8, doubleArray12);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder26 = equalsBuilder4.append((byte) 100, (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder29 = equalsBuilder26.append('a', '4');
        int[] intArray32 = new int[] { 1, (byte) 1 };
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.add(intArray32, (int) (short) 0, (int) '4');
        int[] intArray39 = new int[] { 'a', 0, 1 };
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = equalsBuilder29.append(intArray32, intArray39);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder42 = equalsBuilder0.append(intArray39, intArray41);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray41);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder23);
        org.junit.Assert.assertNotNull(equalsBuilder26);
        org.junit.Assert.assertNotNull(equalsBuilder29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[52, 1, 1]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[97, 0, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder40);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test08816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08816");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, 10.0f);
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (int) (byte) 0, (float) 100);
        float[] floatArray14 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray14);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray15);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray15);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, 0.0f);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, 0.0f);
        float[] floatArray28 = new float[] { 10.0f, 100, (short) -1, (short) 0, 100L, (short) 10 };
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray28);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray17, floatArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray17);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray17);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray17);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[100.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0, 100.0, -1.0, 0.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, 100.0, -1.0, 0.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0, 100.0, -1.0, 0.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 1.0, 10.0]");
    }

    @Test
    public void test08817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08817");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray4);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, false);
        boolean[] booleanArray18 = new boolean[] { false, false, false, false };
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray18);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray18, false);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.add(booleanArray18, true);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray18);
        java.lang.Boolean[][] booleanArray25 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray32 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray39 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray46 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray53 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray54 = new java.lang.Boolean[][] { booleanArray32, booleanArray39, booleanArray46, booleanArray53 };
        java.lang.Boolean[][] booleanArray55 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray25, booleanArray54);
        java.util.Map<java.lang.Object, java.lang.Object> objMap56 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray25);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = objMap56.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList58 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean59 = objEntrySet57.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList58);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor60 = objEntryList58.iterator();
        boolean[] booleanArray65 = new boolean[] { false, false, false, false };
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray65);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray65, false);
        java.lang.Boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray65);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray65);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray70);
        boolean boolean72 = objEntryList58.remove((java.lang.Object) booleanArray70);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.add(booleanArray70, false);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray74, false);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray74);
        int int80 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray24, false, (int) (byte) 1);
        boolean[] booleanArray81 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray13, booleanArray24);
        boolean[] booleanArray83 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray24, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(objMap56);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objEntryItor60);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray81), "[false, false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray83), "[false, false, false]");
    }

    @Test
    public void test08818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08818");
        double[] doubleArray0 = null;
        double[] doubleArray4 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray4);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.add(doubleArray4, (double) (byte) 10);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray4, (double) 0L, 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray4, (double) (short) -1, (int) (byte) -1);
        java.lang.Double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray4);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14, (double) 1);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray16);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray16);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) (short) 100, (double) 10.0f);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) (-1L));
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray24, 11, (int) (byte) -1);
        double[] doubleArray31 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.add(doubleArray31, (double) (byte) 10);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.add(doubleArray31, 0.0d);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray31);
        double[] doubleArray41 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray41);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.add(doubleArray41, (double) (byte) 10);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray44, (double) 10.0f);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray44);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.add(doubleArray47, (double) 1.0f);
        java.lang.Double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray49);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray31, doubleArray49);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray51, 100.0d);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray51, (double) 0, (int) (short) -1, (double) 100L);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray51, (double) (short) 0, 13, (double) 0.0f);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray24, doubleArray51);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray62, 10.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0, 0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
    }

    @Test
    public void test08819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08819");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray6);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray2);
        float[] floatArray15 = new float[] { (short) 100, 0, 10 };
        float[] floatArray18 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray18);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) 0);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, 10.0f);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray18);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray18);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray18);
        float[] floatArray33 = new float[] { (short) 100, 0, 10 };
        float[] floatArray36 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(floatArray36, (float) 0);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.add(floatArray36, 10.0f);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray33, floatArray36);
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray36);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray36, (float) 3, 11);
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.clone(floatArray36);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray36, 0.0f, 0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test08820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08820");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray3);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (byte) 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray10, (byte) -1);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray10, (byte) 100, 9);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 10, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test08821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08821");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray9 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray12 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder0.append(doubleArray9, doubleArray12);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder15 = equalsBuilder0.appendSuper(true);
        java.lang.Character[] charArray21 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray21);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21, 'a');
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray24);
        java.lang.Character[] charArray31 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray31, 'a');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.add(charArray33, '#');
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.remove(charArray33, (int) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder0.append(charArray25, charArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder0.append((short) (byte) 10, (short) (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder0.append((long) (short) 10, (long) ' ');
        boolean[] booleanArray45 = null;
        boolean[] booleanArray50 = new boolean[] { false, false, false, false };
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray50);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray50, false);
        java.lang.Boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray50);
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray50);
        java.lang.Boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray50);
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray56);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray56, true);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray59);
        boolean[] booleanArray65 = new boolean[] { false, false, false, false };
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray65);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray65, false);
        java.lang.Boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray65);
        boolean[] booleanArray70 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray65);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray65);
        boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray65);
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray59, booleanArray65);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray65);
        boolean[] booleanArray77 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray65, (int) (byte) -1, (int) (short) 1);
        boolean[] booleanArray80 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray65, (int) (byte) 0, (int) (byte) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder81 = equalsBuilder0.append(booleanArray45, booleanArray65);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder84 = equalsBuilder81.append((short) (byte) 0, (short) (byte) 1);
        boolean boolean85 = equalsBuilder81.isEquals();
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(equalsBuilder15);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray72), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray77), "[false]");
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(equalsBuilder81);
        org.junit.Assert.assertNotNull(equalsBuilder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test08822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08822");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray13, (int) (short) 0, 100);
        boolean[] booleanArray21 = new boolean[] { false, false, false, false };
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray21, false);
        java.lang.Boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray21);
        java.lang.Boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27);
        boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27, true);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray30);
        boolean[] booleanArray36 = new boolean[] { false, false, false, false };
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray36, false);
        java.lang.Boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray36);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray36);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray36);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray36);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray30, booleanArray36);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray36);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray36);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, true);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray13);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray49);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray49, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08823");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Character[] charArray9 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, 'a');
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray2, (java.lang.Object) 'a');
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 3);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) ' ');
        boolean[] booleanArray22 = new boolean[] { false, false, false, false };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, false);
        java.lang.Boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray22);
        java.lang.Boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        java.lang.Short[] shortArray30 = new java.lang.Short[] { (short) 1 };
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30, (short) (byte) 100);
        short[] shortArray35 = new short[] {};
        java.lang.Short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray35);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray35);
        float[] floatArray40 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(floatArray40, (float) 0);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, 10.0f);
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray40);
        boolean boolean48 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray34, (java.lang.Object) floatArray46, false);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray28, (java.lang.Object[]) floatArray46);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray28, false);
        java.lang.Boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray28);
        java.lang.Character[] charArray58 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray58, ' ');
        java.lang.Character[] charArray61 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray58);
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61);
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray64, false, 10);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray64, true);
        java.lang.Character[] charArray75 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray75, ' ');
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray77);
        java.lang.String[] strArray79 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isNotEmpty((java.lang.Comparable<java.lang.String>[]) strArray79);
        java.lang.String[] strArray81 = org.apache.commons.lang3.ArrayUtils.clone(strArray79);
        java.lang.String[] strArray82 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray81);
        java.lang.String[] strArray86 = new java.lang.String[] { "{}", "", "{}" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        boolean boolean89 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray78, (java.lang.Object) strArray82, (java.util.Collection<java.lang.String>) strList87);
        boolean boolean90 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray63, (java.lang.Object) booleanArray64, (java.util.Collection<java.lang.String>) strList87);
        boolean boolean91 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) floatArray2, (java.lang.Object) booleanArray52, (java.util.Collection<java.lang.String>) strList87);
        float[] floatArray93 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) (-1));
        boolean boolean94 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray93);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray97 = org.apache.commons.lang3.ArrayUtils.add(floatArray93, (int) (byte) -1, (float) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(floatArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray93), "[-1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test08824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08824");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder3.append((byte) 10, (byte) 0);
        java.lang.Character[] charArray13 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, 'a');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray13, ' ');
        java.lang.Character[] charArray23 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray23, 'a');
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray25, '#');
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.subarray(charArray25, (int) (byte) -1, (int) '#');
        java.lang.Character[] charArray36 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray36);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray36, 'a');
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.clone(charArray39);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.addAll(charArray25, charArray39);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray39, 'a');
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.clone(charArray39);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.addAll(charArray17, charArray44);
        java.lang.Character[] charArray51 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, ' ');
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, '#');
        java.lang.Character[] charArray61 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray61);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61, 'a');
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray55, charArray64);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray64, 'a', (int) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder69 = equalsBuilder7.append(charArray44, charArray64);
        int int71 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray64, '#');
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray64, '4');
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[4, #, #,  ]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test08825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08825");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, (long) (byte) 100);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, (long) 8, (int) (short) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test08826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08826");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder5 = equalsBuilder0.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder8 = equalsBuilder5.append((long) (short) 10, (long) '#');
        boolean boolean9 = equalsBuilder8.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder11 = equalsBuilder8.appendSuper(false);
        java.lang.Boolean[][] booleanArray12 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray19 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray26 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray33 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray40 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray41 = new java.lang.Boolean[][] { booleanArray19, booleanArray26, booleanArray33, booleanArray40 };
        java.lang.Boolean[][] booleanArray42 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray12, booleanArray41);
        java.util.Map<java.lang.Object, java.lang.Object> objMap43 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray12);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = objMap43.entrySet();
        java.util.Set<java.lang.Object> objSet45 = objMap43.keySet();
        float[] floatArray48 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray48);
        java.lang.Character[] charArray55 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray55, 'a');
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray48, (java.lang.Object) 'a');
        float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray48, (int) (byte) 1, (int) (byte) 1);
        float[] floatArray64 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray64);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.contains(floatArray64, (float) 0);
        float[] floatArray69 = org.apache.commons.lang3.ArrayUtils.add(floatArray64, 10.0f);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.contains(floatArray64, (float) (-1));
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray64);
        float[] floatArray73 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray48, floatArray64);
        java.lang.Float[] floatArray74 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray73);
        java.lang.Object obj75 = objMap43.get((java.lang.Object) floatArray74);
        boolean[] booleanArray80 = new boolean[] { false, false, false, false };
        boolean[] booleanArray81 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray80);
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray80, false);
        java.lang.Boolean[] booleanArray84 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray80);
        boolean[] booleanArray86 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray80, false);
        float[] floatArray90 = new float[] { 1L, 100L, 100 };
        int int93 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray90, (float) (-1L), (int) (short) 100);
        java.lang.Float[] floatArray94 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray90);
        java.lang.Object obj95 = objMap43.put((java.lang.Object) booleanArray86, (java.lang.Object) floatArray94);
        int int97 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray86, true);
        boolean boolean98 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) equalsBuilder8, (java.lang.Object) true);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(equalsBuilder5);
        org.junit.Assert.assertNotNull(equalsBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(equalsBuilder11);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(objMap43);
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertNotNull(objSet45);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[]");
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(floatArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray81), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(booleanArray84);
        org.junit.Assert.assertNotNull(booleanArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray86), "[false, false, false]");
        org.junit.Assert.assertNotNull(floatArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray90), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(floatArray94);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test08827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08827");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray9);
        java.lang.Boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray9);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.add(booleanArray9, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false, true]");
    }

    @Test
    public void test08828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08828");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 100.0d, 1.0d, 10.0d, (-1.0d), 100.0d };
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '4');
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray10, (double) 10.0f, (double) (-1.0f));
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray10, (double) (byte) 10, (double) 0.0f);
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray10);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray17, (double) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, -1.0, 10.0, 1.0, 100.0, -1.0]");
    }

    @Test
    public void test08829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08829");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) 10);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray12);
        java.lang.String str15 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray12, "{0.0,10.0,100.0,10.0}");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{1,10,10,10,0}" + "'", str15, "{1,10,10,10,0}");
    }

    @Test
    public void test08830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08830");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.Set<java.lang.Object> objSet33 = objMap31.keySet();
        java.util.Set<java.lang.Object> objSet34 = objMap31.keySet();
        double[] doubleArray40 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray40);
        double[] doubleArray45 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray45);
        double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.add(doubleArray45, (double) (byte) 10);
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.add(doubleArray45, 0.0d);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray40, doubleArray45);
        boolean boolean52 = objMap31.containsKey((java.lang.Object) doubleArray40);
        java.lang.Boolean[][] booleanArray53 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray60 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray67 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray74 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray81 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray82 = new java.lang.Boolean[][] { booleanArray60, booleanArray67, booleanArray74, booleanArray81 };
        java.lang.Boolean[][] booleanArray83 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray53, booleanArray82);
        java.util.Map<java.lang.Object, java.lang.Object> objMap84 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray53);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet85 = objMap84.entrySet();
        objMap84.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet87 = objMap84.entrySet();
        objMap84.clear();
        java.util.Set<java.lang.Object> objSet89 = objMap84.keySet();
        objMap31.putAll(objMap84);
        boolean boolean91 = objMap31.isEmpty();
        objMap31.clear();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(objSet33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0, 10.0, -1.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertNotNull(booleanArray82);
        org.junit.Assert.assertNotNull(booleanArray83);
        org.junit.Assert.assertNotNull(objMap84);
        org.junit.Assert.assertNotNull(objEntrySet85);
        org.junit.Assert.assertNotNull(objEntrySet87);
        org.junit.Assert.assertNotNull(objSet89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test08831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08831");
        char[] charArray1 = new char[] { 'a' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray2);
        float[] floatArray7 = new float[] { (short) 100, 0, 10 };
        float[] floatArray10 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, (float) 0);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, 10.0f);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray7, floatArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray3, (java.lang.Object) floatArray10);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3, '#');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3);
        java.lang.Character[] charArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray3);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3, 'a');
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray28);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[a]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[a]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[a]");
    }

    @Test
    public void test08832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08832");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) 10);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        byte[] byteArray11 = null;
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray11);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder16 = equalsBuilder13.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray21 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray21);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.add(doubleArray21, (double) (byte) 10);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, (double) 0L, 0);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray21);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray21, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder32 = equalsBuilder13.append(doubleArray17, doubleArray21);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray37 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray37);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.add(doubleArray37, (double) (byte) 10);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray40, (double) 10.0f);
        double[] doubleArray46 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray46);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.add(doubleArray46, (double) (byte) 10);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray46, (double) 0L, 0);
        double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray46);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray46, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray40, doubleArray46);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder58 = equalsBuilder32.append(doubleArray33, doubleArray46);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray59);
        byte[] byteArray61 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.add(byteArray61, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder64 = equalsBuilder58.append(byteArray59, byteArray61);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray11, byteArray61);
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray66);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray11, byteArray66);
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray66);
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.clone(byteArray66);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray66);
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray75 = org.apache.commons.lang3.ArrayUtils.add(byteArray72, (int) (byte) 0, (byte) 100);
        int int78 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray75, (byte) 1, 0);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray66, byteArray75);
        byte[] byteArray81 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray66, (byte) 10);
        byte[] byteArray84 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray81, (int) (short) 100, (int) '4');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
    }

    @Test
    public void test08833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08833");
        double[] doubleArray0 = null;
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) 10L, (int) (byte) 0, (double) (-1.0f));
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, 0.0d);
        double[] doubleArray11 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray11);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, (double) (byte) 10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) (short) 0, (int) ' ', (double) 1L);
        double[] doubleArray22 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.add(doubleArray22, (double) (byte) 10);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray22, (double) 0L, 0);
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray22);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray22, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.add(doubleArray22, (double) 4);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder38 = equalsBuilder35.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray39 = new double[] {};
        double[] doubleArray43 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray43);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.add(doubleArray43, (double) (byte) 10);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray43, (double) 0L, 0);
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray43);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray43, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder54 = equalsBuilder35.append(doubleArray39, doubleArray43);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 'a', (int) '4');
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray22, doubleArray39);
        double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.add(doubleArray22, 0, (double) 100);
        double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray22);
        double[] doubleArray63 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray11, doubleArray22);
        double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray1, doubleArray22);
        int int67 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) (short) 0, (double) 2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0, 100.0, 4.0]");
        org.junit.Assert.assertNotNull(equalsBuilder38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test08834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08834");
        int[] intArray3 = new int[] { '#', (byte) -1, (short) 0 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (int) '#', (int) (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray3, (int) (byte) 1);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray14 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.clone(intArray14);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) 'a');
        int[] intArray22 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray23);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray17);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.addAll(intArray9, intArray27);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray27, 2, 4);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.subarray(intArray27, 4, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[35, -1, 0, 100, -1, -1, 0, 97]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
    }

    @Test
    public void test08835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08835");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        boolean[] booleanArray14 = new boolean[] { false, false, false, false };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray14);
        boolean[] booleanArray24 = new boolean[] { false, true, true, true };
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, true, (int) (short) 100);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray25);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray25, 1);
        boolean[] booleanArray36 = new boolean[] { false, false, false, false };
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray36);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray36, false);
        java.lang.Boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray36);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray36);
        java.lang.Boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray36);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray42);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray42, true);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray42, false);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray47, false);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray25, booleanArray47);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray47);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[false, true, true, true, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, false, false, false]");
    }

    @Test
    public void test08836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08836");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor1 = objEntryList0.iterator();
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.addAll(strArray2, strArray6);
        java.lang.Comparable<java.lang.String>[] strComparableArray8 = objEntryList0.toArray((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.reflect.Type[][][] typeArray9 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][] typeArray10 = new java.lang.reflect.Type[][] {};
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(typeArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(typeArray10);
        java.lang.reflect.Type[][][] typeArray13 = org.apache.commons.lang3.ArrayUtils.add(typeArray9, typeArray10);
        boolean boolean14 = objEntryList0.remove((java.lang.Object) typeArray13);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor15 = objEntryList0.iterator();
        short[][][][][] shortArray16 = new short[][][][][] {};
        short[][][][][] shortArray17 = org.apache.commons.lang3.ArrayUtils.clone(shortArray16);
        short[][][][][] shortArray18 = objEntryList0.toArray(shortArray17);
        int int19 = objEntryList0.size();
        int[] intArray24 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.clone(intArray24);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray24, (int) 'a');
        int[] intArray32 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.clone(intArray32);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray27, intArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray33, 0);
        int[] intArray42 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.clone(intArray42);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray42);
        java.lang.Integer[] intArray45 = org.apache.commons.lang3.ArrayUtils.toObject(intArray42);
        int[] intArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray42);
        float[] floatArray50 = new float[] { 1L, 100L, 100 };
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray50, (float) (-1L), (int) (short) 100);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray50, (float) 'a', (int) (byte) 10);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray42, (java.lang.Object) floatArray50);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.add(intArray42, 4);
        int int60 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) intArray59);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray33, intArray59);
        int int63 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray33, (int) (byte) 0);
        boolean boolean64 = objEntryList0.remove((java.lang.Object) intArray33);
        org.junit.Assert.assertNotNull(objEntryItor1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strComparableArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objEntryItor15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[100, -1, -1, 0, 4]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08837");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) -1);
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 10, (int) (short) -1);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray25, (byte) 10);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(byteArray25, (byte) 100);
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray38, (byte) 10, (int) (short) -1);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray38);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 1, (int) ' ');
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray25, byteArray38);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder47.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean51 = equalsBuilder50.isEquals();
        java.lang.String[] strArray52 = new java.lang.String[] {};
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray57 = org.apache.commons.lang3.ArrayUtils.addAll(strArray52, strArray56);
        java.lang.String[] strArray58 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray52);
        java.lang.Character[] charArray64 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray64, ' ');
        java.lang.Character[] charArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray64);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder68 = equalsBuilder50.append((java.lang.Object[]) strArray52, (java.lang.Object[]) charArray67);
        java.lang.String str70 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) strArray52, "{32,100,10,10,1}");
        java.lang.String[] strArray72 = org.apache.commons.lang3.ArrayUtils.add(strArray52, "");
        boolean boolean73 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) (byte) -1, (java.lang.Object) byteArray25, strArray52);
        int int75 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 10);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 10, 0, 0, 10]");
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertNotNull(equalsBuilder68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{}" + "'", str70, "{}");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test08838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08838");
        byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, (byte) -1);
        java.lang.Byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray2);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray2);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test08839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08839");
        java.lang.Character[] charArray5 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder10 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder10.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean14 = equalsBuilder13.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder17 = equalsBuilder13.append((byte) 10, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder20 = equalsBuilder17.append((byte) 100, (byte) -1);
        java.lang.Character[] charArray26 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray26, ' ');
        java.lang.Character[] charArray34 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray34, ' ');
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray34, '#');
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.clone(charArray38);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray38);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder17.append(charArray28, charArray38);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray28);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, '4');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(equalsBuilder17);
        org.junit.Assert.assertNotNull(equalsBuilder20);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test08840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08840");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) 0);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray10, (int) ' ', 0);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.clone(shortArray13);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray14, (short) 0, (int) (short) 0);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray14, (short) 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray14, (short) (byte) -1, (int) (byte) -1);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test08841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08841");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray4);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = org.apache.commons.lang3.ArrayUtils.remove(intArray9, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[100, -1, -1, 0]");
    }

    @Test
    public void test08842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08842");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder7 = equalsBuilder3.append((byte) 10, (byte) 0);
        java.lang.Boolean boolean8 = equalsBuilder3.build();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder11 = equalsBuilder3.append('a', 'a');
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder14 = equalsBuilder3.append(true, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder15 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder15.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder18.append((float) (short) 100, (float) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder18.append((short) 1, (short) (byte) -1);
        long[] longArray30 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray30);
        java.lang.Long[] longArray32 = org.apache.commons.lang3.ArrayUtils.toObject(longArray31);
        long[] longArray38 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.clone(longArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray31, longArray39);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder41.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray50 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.clone(longArray50);
        long[] longArray57 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray58 = org.apache.commons.lang3.ArrayUtils.clone(longArray57);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder44.append(longArray51, longArray57);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.add(longArray51, (int) (byte) 0, (long) 2);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray51);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder64 = equalsBuilder24.append(longArray39, longArray63);
        java.lang.Long[] longArray65 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray66 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray65);
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray65);
        long[] longArray70 = org.apache.commons.lang3.ArrayUtils.subarray(longArray67, (int) (short) -1, (int) '#');
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray67);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray39, longArray67);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.add(longArray39, (long) (short) 0);
        long[] longArray75 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray39);
        long[] longArray81 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray82 = org.apache.commons.lang3.ArrayUtils.clone(longArray81);
        java.lang.Long[] longArray83 = org.apache.commons.lang3.ArrayUtils.toObject(longArray82);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray82);
        long[] longArray86 = org.apache.commons.lang3.ArrayUtils.add(longArray82, 0L);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder87 = equalsBuilder3.append(longArray39, longArray82);
        long[] longArray91 = new long[] { 4, 'a', (byte) 0 };
        long[] longArray93 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray91, (long) 'a');
        long[] longArray94 = null;
        long[] longArray95 = org.apache.commons.lang3.ArrayUtils.addAll(longArray93, longArray94);
        long[] longArray96 = org.apache.commons.lang3.ArrayUtils.clone(longArray95);
        long[] longArray97 = org.apache.commons.lang3.ArrayUtils.addAll(longArray82, longArray96);
        java.lang.Long[] longArray98 = org.apache.commons.lang3.ArrayUtils.toObject(longArray82);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(equalsBuilder7);
        org.junit.Assert.assertEquals("'" + boolean8 + "' != '" + false + "'", boolean8, false);
        org.junit.Assert.assertNotNull(equalsBuilder11);
        org.junit.Assert.assertNotNull(equalsBuilder14);
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[2, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder64);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[]");
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[]");
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray75), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[1, 10, 10, 100, 32]");
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertNotNull(longArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray86), "[1, 10, 10, 100, 32, 0]");
        org.junit.Assert.assertNotNull(equalsBuilder87);
        org.junit.Assert.assertNotNull(longArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray91), "[4, 97, 0]");
        org.junit.Assert.assertNotNull(longArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray93), "[4, 0]");
        org.junit.Assert.assertNotNull(longArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray95), "[4, 0]");
        org.junit.Assert.assertNotNull(longArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray96), "[4, 0]");
        org.junit.Assert.assertNotNull(longArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray97), "[1, 10, 10, 100, 32, 4, 0]");
        org.junit.Assert.assertNotNull(longArray98);
    }

    @Test
    public void test08843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08843");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray24 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray24);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray24, (double) (byte) 10);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray27, (double) 10.0f);
        double[] doubleArray33 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.add(doubleArray33, (double) (byte) 10);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray33, (double) 0L, 0);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray33);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray27, doubleArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder45 = equalsBuilder19.append(doubleArray20, doubleArray33);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray46);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder51 = equalsBuilder45.append(byteArray46, byteArray48);
        java.lang.Boolean boolean52 = equalsBuilder45.build();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder55 = equalsBuilder45.append((long) (short) 1, (long) 7);
        java.lang.Character[] charArray56 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
        java.lang.Character[] charArray57 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray56);
        java.lang.Integer[] intArray61 = new java.lang.Integer[] { 10, 3, 10 };
        java.lang.Integer[] intArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray61);
        int[] intArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray62, (int) (byte) -1);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray62);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder55.append((java.lang.Object[]) charArray57, (java.lang.Object[]) intArray62);
        char[] charArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray57);
        java.util.Map<java.lang.Object, java.lang.Object> objMap68 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) charArray57);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder51);
        org.junit.Assert.assertEquals("'" + boolean52 + "' != '" + false + "'", boolean52, false);
        org.junit.Assert.assertNotNull(equalsBuilder55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[10, 3, 10]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 3, 10]");
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[]");
        org.junit.Assert.assertNotNull(objMap68);
    }

    @Test
    public void test08844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08844");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) 0);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) (byte) 10);
        java.lang.Short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray8);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray8, (short) (byte) -1);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray8, (short) 1);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray8, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test08845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08845");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((long) ' ', (long) (short) 10);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        java.lang.Character[] charArray33 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray33, ' ');
        java.lang.Character[] charArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder22.append((java.lang.Object[]) shortArray24, (java.lang.Object[]) charArray36);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder39 = equalsBuilder37.appendSuper(true);
        boolean[] booleanArray44 = new boolean[] { false, false, false, false };
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray44);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray44, false);
        java.lang.Boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray44);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder52 = equalsBuilder49.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean53 = equalsBuilder52.isEquals();
        java.lang.String[] strArray54 = new java.lang.String[] {};
        java.lang.String[] strArray58 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray59 = org.apache.commons.lang3.ArrayUtils.addAll(strArray54, strArray58);
        java.lang.String[] strArray60 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray54);
        java.lang.Character[] charArray66 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray66, ' ');
        java.lang.Character[] charArray69 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray66);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder70 = equalsBuilder52.append((java.lang.Object[]) strArray54, (java.lang.Object[]) charArray69);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder71 = equalsBuilder39.append((java.lang.Object) booleanArray44, (java.lang.Object) equalsBuilder52);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray44, true);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray44, true);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray44);
        int int79 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray44, true, 8);
        boolean[] booleanArray80 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray44);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder39);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertNotNull(equalsBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertNotNull(equalsBuilder70);
        org.junit.Assert.assertNotNull(equalsBuilder71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray80), "[false, false, false, false]");
    }

    @Test
    public void test08846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08846");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 10, (int) (short) -1);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray3, (byte) 10);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray3, (byte) 100);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 10, (int) (short) -1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 1, (int) ' ');
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray3, byteArray16);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.clone(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray16, (int) 'a', (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 10, 0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 10]");
    }

    @Test
    public void test08847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08847");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.subarray(longArray6, (int) (short) 10, (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray6, (long) (-1));
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.add(longArray11, 5, (long) 10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) (short) 10, (int) (short) 10);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 100, 10, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test08848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08848");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray6);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.clone(floatArray6);
        float[] floatArray15 = new float[] { (short) 100, 0, 10 };
        float[] floatArray18 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray18);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.contains(floatArray18, (float) 0);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, 10.0f);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray15, floatArray18);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray15);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray25);
        java.lang.Boolean[][] booleanArray27 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray34 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray48 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray55 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray56 = new java.lang.Boolean[][] { booleanArray34, booleanArray41, booleanArray48, booleanArray55 };
        java.lang.Boolean[][] booleanArray57 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray27, booleanArray56);
        java.util.Map<java.lang.Object, java.lang.Object> objMap58 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray27);
        java.lang.Short[] shortArray61 = new java.lang.Short[] { (short) 1 };
        short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray61);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray61, (short) 10);
        java.lang.Object obj65 = objMap58.replace((java.lang.Object) 2, (java.lang.Object) shortArray64);
        boolean[] booleanArray70 = new boolean[] { false, true, true, true };
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray70);
        boolean boolean72 = objMap58.containsKey((java.lang.Object) booleanArray70);
        java.lang.Object obj73 = null;
        float[] floatArray76 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray77 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray76);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.contains(floatArray76, (float) 0);
        float[] floatArray81 = org.apache.commons.lang3.ArrayUtils.add(floatArray76, 10.0f);
        java.lang.Float[] floatArray82 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray76);
        java.lang.Object obj83 = objMap58.put(obj73, (java.lang.Object) floatArray76);
        float[] floatArray85 = org.apache.commons.lang3.ArrayUtils.add(floatArray76, (float) (-1L));
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray26, floatArray85);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray26);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 1.0, 100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 1.0, 100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(objMap58);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1]");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(booleanArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray70), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(floatArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray76), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[-1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test08849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08849");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, false, 10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, true);
        java.lang.Character[] charArray22 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray22, ' ');
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray24);
        java.lang.String[] strArray26 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isNotEmpty((java.lang.Comparable<java.lang.String>[]) strArray26);
        java.lang.String[] strArray28 = org.apache.commons.lang3.ArrayUtils.clone(strArray26);
        java.lang.String[] strArray29 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "{}", "", "{}" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray25, (java.lang.Object) strArray29, (java.util.Collection<java.lang.String>) strList34);
        boolean boolean37 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray10, (java.lang.Object) booleanArray11, (java.util.Collection<java.lang.String>) strList34);
        java.lang.Short[] shortArray39 = new java.lang.Short[] { (short) 1 };
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray39);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray39, (short) (byte) 100);
        short[] shortArray44 = new short[] {};
        java.lang.Short[] shortArray45 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray44);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray43, shortArray44);
        short[] shortArray47 = new short[] {};
        java.lang.Short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray47);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray46, shortArray47);
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.add(shortArray47, (short) -1);
        java.lang.Short[] shortArray53 = new java.lang.Short[] { (short) 1 };
        short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray53);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray53);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray53, (short) (byte) 100);
        short[] shortArray58 = new short[] {};
        java.lang.Short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray58);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray57, shortArray58);
        java.lang.Short[] shortArray62 = new java.lang.Short[] { (short) 1 };
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray62);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray62);
        short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray62, (short) (byte) 100);
        short[] shortArray67 = new short[] {};
        java.lang.Short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray67);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray66, shortArray67);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray60, shortArray67);
        short[] shortArray72 = org.apache.commons.lang3.ArrayUtils.add(shortArray70, (short) (byte) 10);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray47, shortArray70);
        short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray73);
        boolean boolean76 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) strList34, (java.lang.Object) shortArray73, true);
        java.lang.Short[] shortArray77 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray73);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray73, (short) 10);
        short[] shortArray80 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray73);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.add(shortArray73, 2, (short) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[1]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[-1]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[1]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[1]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[1]");
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[1]");
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[1]");
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[1]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[1]");
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray72), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[1]");
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray74), "[1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[1]");
        org.junit.Assert.assertNotNull(shortArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray80), "[1]");
    }

    @Test
    public void test08850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08850");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray9 = new short[] {};
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (short) -1);
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) 1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15, (short) (byte) 100);
        short[] shortArray20 = new short[] {};
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray20);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray20);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray24);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) (byte) 100);
        short[] shortArray29 = new short[] {};
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray28, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray29);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray32, (short) (byte) 10);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray32);
        java.lang.Short[] shortArray37 = new java.lang.Short[] { (short) 1 };
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray37);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray37);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray37, (short) (byte) 100);
        short[] shortArray42 = new short[] {};
        java.lang.Short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray42);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray41, shortArray42);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray44, (short) 0);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray44, (short) (byte) 10);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray44, (short) -1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray44);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray44, (short) 0);
        java.lang.Short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray53);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54);
        java.lang.Short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray54);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray57);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.add(shortArray57, (int) (short) 1, (short) 10);
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.add(shortArray61, (short) (byte) 10);
        java.lang.Short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray63);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.contains(shortArray63, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[1]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1]");
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[1, 10, 10]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test08851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08851");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        java.lang.Boolean[][] booleanArray39 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray46 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray53 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray60 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray67 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray68 = new java.lang.Boolean[][] { booleanArray46, booleanArray53, booleanArray60, booleanArray67 };
        java.lang.Boolean[][] booleanArray69 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray39, booleanArray68);
        java.util.Map<java.lang.Object, java.lang.Object> objMap70 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray39);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet71 = objMap70.entrySet();
        java.util.Set<java.lang.Object> objSet72 = objMap70.keySet();
        objMap31.putAll(objMap70);
        java.util.Collection<java.lang.Object> objCollection74 = objMap31.values();
        java.util.Collection<java.lang.Object> objCollection75 = objMap31.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet76 = objMap31.entrySet();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertNotNull(objMap70);
        org.junit.Assert.assertNotNull(objEntrySet71);
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertNotNull(objCollection75);
        org.junit.Assert.assertNotNull(objEntrySet76);
    }

    @Test
    public void test08852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08852");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 1L, 10L, 0L, (-1L), (-1L), (-1L) };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (short) 10);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        java.lang.String[] strArray13 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray14 = org.apache.commons.lang3.ArrayUtils.addAll(strArray9, strArray13);
        java.lang.String[] strArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray13);
        byte[] byteArray16 = null;
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray16);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 10, (int) (short) -1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray21, (byte) 10);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray16, byteArray21);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 0, 3);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 1);
        boolean boolean33 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) strArray15, (java.lang.Object) int32);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray6, (java.lang.Object) strArray15);
        java.lang.Long[] longArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray6);
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray35, (long) ' ');
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray35, (long) (byte) 1);
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray35);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 10, 0, -1, -1, -1]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[1, 10, 0, -1, -1, -1]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[1, 10, 0, -1, -1, -1]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[1, 10, 0, -1, -1, -1]");
    }

    @Test
    public void test08853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08853");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((long) (byte) 10, (long) (byte) 10);
        java.lang.Byte[] byteArray23 = new java.lang.Byte[] { (byte) 1 };
        java.lang.Byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder25 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder25.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean29 = equalsBuilder28.isEquals();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray35 = org.apache.commons.lang3.ArrayUtils.addAll(strArray30, strArray34);
        java.lang.String[] strArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray30);
        java.lang.Character[] charArray42 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, ' ');
        java.lang.Character[] charArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder28.append((java.lang.Object[]) strArray30, (java.lang.Object[]) charArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder21.append((java.lang.Object[]) byteArray23, (java.lang.Object[]) strArray30);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray23);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (byte) -1);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.clone(byteArray50);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, -1]");
    }

    @Test
    public void test08854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08854");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean34 = objEntrySet32.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor35 = objEntryList33.iterator();
        boolean[] booleanArray40 = new boolean[] { false, false, false, false };
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray40, false);
        java.lang.Boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray40);
        boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray40);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray45);
        boolean boolean47 = objEntryList33.remove((java.lang.Object) booleanArray45);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.add(booleanArray45, false);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray49, false, 0);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray49, true);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray54, true);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray58 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray54, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 11, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objEntryItor35);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test08855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08855");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8);
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        java.lang.Character[] charArray16 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray16);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, 'a');
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.clone(charArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, ' ');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray19);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray19, ' ');
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.clone(charArray25);
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.add(charArray25, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 44a44## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 44a44## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, 4, a, 4, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4##a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4##a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, #, #, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4##a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4##a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, #, #, a, #]");
    }

    @Test
    public void test08856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08856");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 10, (int) (short) -1);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray3, (byte) 10);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray3, (byte) 100);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 10, (int) (short) -1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 1, (int) ' ');
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray3, byteArray16);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        java.lang.Byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray3, byteArray25);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.add(byteArray3, (byte) 10);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.clone(byteArray3);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray31);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.clone(byteArray31);
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray31);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray31, (byte) 100, 3);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.add(byteArray31, (byte) -1);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray30, byteArray31);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 10, 0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 10, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 10]");
    }

    @Test
    public void test08857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08857");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        float[] floatArray4 = new float[] { (short) 100, 0, 10 };
        float[] floatArray7 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray7);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (float) 0);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, 10.0f);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray7);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(floatArray7, (float) (byte) 10);
        boolean boolean16 = objEntryList0.equals((java.lang.Object) boolean15);
        java.lang.Boolean[][] booleanArray17 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray24 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray38 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray45 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray46 = new java.lang.Boolean[][] { booleanArray24, booleanArray31, booleanArray38, booleanArray45 };
        java.lang.Boolean[][] booleanArray47 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray17, booleanArray46);
        java.util.Map<java.lang.Object, java.lang.Object> objMap48 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray17);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = objMap48.entrySet();
        java.lang.Boolean[][] booleanArray50 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray57 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray64 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray71 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray78 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray79 = new java.lang.Boolean[][] { booleanArray57, booleanArray64, booleanArray71, booleanArray78 };
        java.lang.Boolean[][] booleanArray80 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray50, booleanArray79);
        java.util.Map<java.lang.Object, java.lang.Object> objMap81 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray50);
        int[] intArray84 = new int[] { 1, (byte) 1 };
        int[] intArray87 = org.apache.commons.lang3.ArrayUtils.add(intArray84, (int) (short) 0, (int) '4');
        java.lang.Object obj88 = objMap48.getOrDefault((java.lang.Object) booleanArray50, (java.lang.Object) intArray87);
        java.lang.Cloneable[] cloneableArray89 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Cloneable[]) booleanArray50);
        java.lang.Boolean[][] booleanArray90 = objEntryList0.toArray(booleanArray50);
        objEntryList0.clear();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream92 = objEntryList0.stream();
        java.util.Spliterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySpliterator93 = objEntryList0.spliterator();
        boolean boolean94 = objEntryList0.isEmpty();
        objEntryList0.clear();
        boolean boolean96 = objEntryList0.isEmpty();
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(objMap48);
        org.junit.Assert.assertNotNull(objEntrySet49);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertNotNull(booleanArray79);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertNotNull(objMap81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[52, 1, 1]");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertNotNull(cloneableArray89);
        org.junit.Assert.assertNotNull(booleanArray90);
        org.junit.Assert.assertNotNull(objEntryStream92);
        org.junit.Assert.assertNotNull(objEntrySpliterator93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test08858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08858");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.lang.Character[] charArray38 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, 'a');
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.add(charArray40, '#');
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.remove(charArray40, (int) (short) 0);
        java.lang.Object obj45 = objMap31.remove((java.lang.Object) charArray44);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = objMap31.entrySet();
        java.lang.Boolean[][] booleanArray47 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray61 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray68 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray75 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray76 = new java.lang.Boolean[][] { booleanArray54, booleanArray61, booleanArray68, booleanArray75 };
        java.lang.Boolean[][] booleanArray77 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray47, booleanArray76);
        java.util.Map<java.lang.Object, java.lang.Object> objMap78 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray47);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet79 = objMap78.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList80 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray81 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean82 = objEntryList80.remove((java.lang.Object) byteArray81);
        boolean boolean83 = objEntrySet79.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList80);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor84 = objEntrySet79.iterator();
        boolean boolean85 = objEntrySet46.remove((java.lang.Object) objEntrySet79);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream86 = objEntrySet79.parallelStream();
        java.lang.Object[] objArray87 = objEntrySet79.toArray();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor88 = objEntrySet79.iterator();
        boolean boolean89 = objEntrySet79.isEmpty();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , a,  , #]");
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertNotNull(booleanArray68);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertNotNull(objMap78);
        org.junit.Assert.assertNotNull(objEntrySet79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objEntryItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objEntryStream86);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertNotNull(objEntryItor88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test08859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08859");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) 1 };
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray10);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) (byte) 100);
        short[] shortArray15 = new short[] {};
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray14, shortArray15);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray15);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray15, (int) (byte) -1, (int) (byte) 100);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.add(shortArray15, (short) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[0]");
    }

    @Test
    public void test08860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08860");
        java.util.RandomAccess[] randomAccessArray0 = null;
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList1 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        float[] floatArray5 = new float[] { (short) 100, 0, 10 };
        float[] floatArray8 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (float) 0);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, 10.0f);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray8);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.contains(floatArray8, (float) (byte) 10);
        boolean boolean17 = objEntryList1.equals((java.lang.Object) boolean16);
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray18, (double) (-1.0f));
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray20, (int) ' ', 10);
        boolean boolean24 = objEntryList1.contains((java.lang.Object) doubleArray20);
        java.util.RandomAccess[] randomAccessArray25 = org.apache.commons.lang3.ArrayUtils.add(randomAccessArray0, (java.util.RandomAccess) objEntryList1);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor26 = objEntryList1.iterator();
        java.lang.Object[] objArray27 = objEntryList1.toArray();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList28 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean30 = objEntryList28.remove((java.lang.Object) byteArray29);
        boolean[] booleanArray35 = new boolean[] { false, false, false, false };
        boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray35);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray35, false);
        java.lang.Boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray35);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray35, true, 0);
        boolean boolean43 = objEntryList28.contains((java.lang.Object) int42);
        java.lang.Class<?>[] wildcardClassArray44 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.Type[] typeArray45 = objEntryList28.toArray((java.lang.reflect.Type[]) wildcardClassArray44);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream46 = objEntryList28.stream();
        boolean boolean47 = objEntryList1.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList28);
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry48 = null;
        boolean boolean49 = objEntryList1.add(objEntry48);
        float[] floatArray52 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray52);
        java.lang.Float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray53);
        float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray53);
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.add(floatArray55, 0.0f);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray55, (float) 5, (int) ' ');
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray55, 3, 100);
        float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray63, (float) 100L);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray65);
        boolean boolean67 = objEntryList1.equals((java.lang.Object) boolean66);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(randomAccessArray25);
        org.junit.Assert.assertNotNull(objEntryItor26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(objEntryStream46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test08861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08861");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        double[] doubleArray36 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray36);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.add(doubleArray36, (double) (byte) 10);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray39, (double) 10.0f);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 1L);
        java.lang.Object obj44 = objMap31.get((java.lang.Object) 1L);
        java.lang.Byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray45);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(byteArray46, (byte) 10);
        boolean boolean49 = objMap31.containsValue((java.lang.Object) (byte) 10);
        int[] intArray54 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.clone(intArray54);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray55);
        java.lang.Integer[] intArray57 = org.apache.commons.lang3.ArrayUtils.toObject(intArray55);
        boolean boolean58 = objMap31.containsValue((java.lang.Object) intArray55);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(intArray55, 0);
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.add(intArray55, 1, 5);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.add(intArray55, 13);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 5, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, -1, -1, 100, 13]");
    }

    @Test
    public void test08862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08862");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, ' ');
        java.lang.Character[] charArray18 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, 'a');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.add(charArray20, '#');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray22);
        java.lang.Character[] charArray30 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray30, ' ');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray30, '#');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.clone(charArray34);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray34, ' ');
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray34);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray34, 'a');
        char[] charArray42 = new char[] { 'a' };
        java.lang.Character[] charArray43 = org.apache.commons.lang3.ArrayUtils.toObject(charArray42);
        java.lang.Character[] charArray44 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray43);
        float[] floatArray48 = new float[] { (short) 100, 0, 10 };
        float[] floatArray51 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray51);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.contains(floatArray51, (float) 0);
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.add(floatArray51, 10.0f);
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray48, floatArray51);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray51);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(floatArray51, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray51);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray44, (java.lang.Object) floatArray51);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, 'a');
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, '4');
        char[] charArray68 = new char[] { 'a' };
        java.lang.Character[] charArray69 = org.apache.commons.lang3.ArrayUtils.toObject(charArray68);
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray68);
        java.lang.Character[] charArray76 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray76, 'a');
        int int81 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray78, 'a', (-1));
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray68, charArray78);
        int int85 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray68, '4', 0);
        char[] charArray86 = org.apache.commons.lang3.ArrayUtils.addAll(charArray66, charArray68);
        char[] charArray87 = org.apache.commons.lang3.ArrayUtils.addAll(charArray40, charArray66);
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.contains(charArray66, 'a');
        char[] charArray90 = null;
        char[] charArray91 = org.apache.commons.lang3.ArrayUtils.addAll(charArray66, charArray90);
        boolean boolean92 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray22, charArray91);
        boolean boolean93 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray22);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, 4, a, 4, a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " 44a4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " 44a4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , 4, 4, a, 4, a]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[a]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[a, a]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), " 44a4aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), " 44a4aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[ , 4, 4, a, 4, a, a]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[a]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test08863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08863");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 10L);
        boolean[] booleanArray12 = new boolean[] { false, false, false, false };
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray12);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray12, false);
        java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray12);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray12);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray12);
        java.lang.Short[] shortArray20 = new java.lang.Short[] { (short) 1 };
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray20);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray20);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray20, (short) (byte) 100);
        short[] shortArray25 = new short[] {};
        java.lang.Short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray25);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray25);
        float[] floatArray30 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray30);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.contains(floatArray30, (float) 0);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.add(floatArray30, 10.0f);
        java.lang.Float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray30);
        boolean boolean38 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray24, (java.lang.Object) floatArray36, false);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray18, (java.lang.Object[]) floatArray36);
        java.lang.Float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray36);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray40);
        java.lang.Float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray40);
        float[] floatArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray40, (float) (byte) 100);
        float[] floatArray47 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray47);
        java.lang.Character[] charArray54 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray54, 'a');
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray47, (java.lang.Object) 'a');
        float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray47, (int) (byte) 1, (int) (byte) 1);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray47, (float) (short) 10, 2);
        float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray47);
        float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray44, floatArray64);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray65);
        float[] floatArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray65, (float) (byte) -1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray64), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[1.0, -1.0, 1.0]");
    }

    @Test
    public void test08864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08864");
        byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, (int) (byte) 0, (byte) 100);
        byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.add(byteArray3, (byte) 0);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray5);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.clone(byteArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray6);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test08865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08865");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.add(intArray4, (int) 'a');
        int[] intArray12 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.clone(intArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray7);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7);
        int[] intArray22 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray22);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray22);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.addAll(intArray7, intArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray25);
        java.lang.Integer[] intArray27 = org.apache.commons.lang3.ArrayUtils.toObject(intArray25);
        java.lang.Integer[] intArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray27);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray28);
        int[] intArray34 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.clone(intArray34);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray35, 10);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, -1, -1, 100, 97, 0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, -1, -1, 100, 97, 0, -1, -1, 100]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test08866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08866");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        java.lang.Boolean[] booleanArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        java.lang.Boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray0, (java.lang.Object[]) booleanArray2);
        java.lang.Boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray2);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray5, true, 5);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray5);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray9, false);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray9, false);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08867");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        double[] doubleArray15 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray15);
        boolean boolean17 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray9, (java.lang.Object) doubleArray15);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray15, 3, 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (byte) 10, (double) ' ');
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray20, (int) (short) 0, (int) (byte) 0);
        double[] doubleArray32 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray32);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        java.lang.Object obj35 = null;
        boolean boolean37 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray34, obj35, false);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray34, (double) 3);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray39);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray26, (double) (short) -1);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) '4', (double) (byte) 1);
        java.lang.Double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray26);
        java.lang.Double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray46);
        java.lang.Object[] objArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) doubleArray47);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
    }

    @Test
    public void test08868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08868");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Character[] charArray9 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, 'a');
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray2, (java.lang.Object) 'a');
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) 3);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) ' ');
        boolean[] booleanArray22 = new boolean[] { false, false, false, false };
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, false);
        java.lang.Boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray22);
        java.lang.Boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        java.lang.Short[] shortArray30 = new java.lang.Short[] { (short) 1 };
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30, (short) (byte) 100);
        short[] shortArray35 = new short[] {};
        java.lang.Short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray35);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray35);
        float[] floatArray40 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray40);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(floatArray40, (float) 0);
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, 10.0f);
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray40);
        boolean boolean48 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray34, (java.lang.Object) floatArray46, false);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray28, (java.lang.Object[]) floatArray46);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray28, false);
        java.lang.Boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray28);
        java.lang.Character[] charArray58 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray58, ' ');
        java.lang.Character[] charArray61 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray58);
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61);
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        int int67 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray64, false, 10);
        int int69 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray64, true);
        java.lang.Character[] charArray75 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray75, ' ');
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray77);
        java.lang.String[] strArray79 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isNotEmpty((java.lang.Comparable<java.lang.String>[]) strArray79);
        java.lang.String[] strArray81 = org.apache.commons.lang3.ArrayUtils.clone(strArray79);
        java.lang.String[] strArray82 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray81);
        java.lang.String[] strArray86 = new java.lang.String[] { "{}", "", "{}" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        boolean boolean89 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray78, (java.lang.Object) strArray82, (java.util.Collection<java.lang.String>) strList87);
        boolean boolean90 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray63, (java.lang.Object) booleanArray64, (java.util.Collection<java.lang.String>) strList87);
        boolean boolean91 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) floatArray2, (java.lang.Object) booleanArray52, (java.util.Collection<java.lang.String>) strList87);
        float[] floatArray93 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) (-1));
        boolean boolean94 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray93);
        float[] floatArray96 = org.apache.commons.lang3.ArrayUtils.add(floatArray93, (float) 2);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(floatArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray93), "[-1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(floatArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray96), "[-1.0, 1.0, -1.0, 2.0]");
    }

    @Test
    public void test08869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08869");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor1 = objEntryList0.iterator();
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray6 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.addAll(strArray2, strArray6);
        java.lang.Comparable<java.lang.String>[] strComparableArray8 = objEntryList0.toArray((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Boolean[][] booleanArray9 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray16 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray23 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray37 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray38 = new java.lang.Boolean[][] { booleanArray16, booleanArray23, booleanArray30, booleanArray37 };
        java.lang.Boolean[][] booleanArray39 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray9, booleanArray38);
        java.util.Map<java.lang.Object, java.lang.Object> objMap40 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray9);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet41 = objMap40.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList42 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean44 = objEntryList42.remove((java.lang.Object) byteArray43);
        boolean boolean45 = objEntrySet41.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList42);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor46 = objEntrySet41.iterator();
        java.lang.Object[] objArray47 = objEntrySet41.toArray();
        boolean boolean49 = objEntrySet41.remove((java.lang.Object) '4');
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList50 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor51 = objEntryList50.iterator();
        java.lang.String[] strArray52 = new java.lang.String[] {};
        java.lang.String[] strArray56 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray57 = org.apache.commons.lang3.ArrayUtils.addAll(strArray52, strArray56);
        java.lang.Comparable<java.lang.String>[] strComparableArray58 = objEntryList50.toArray((java.lang.Comparable<java.lang.String>[]) strArray52);
        boolean boolean59 = objEntrySet41.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList50);
        boolean boolean60 = objEntryList0.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList50);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream61 = objEntryList50.parallelStream();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry62 = null;
        boolean boolean63 = objEntryList50.add(objEntry62);
        org.junit.Assert.assertNotNull(objEntryItor1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strComparableArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(objMap40);
        org.junit.Assert.assertNotNull(objEntrySet41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objEntryItor46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objEntryItor51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strComparableArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objEntryStream61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test08870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08870");
        float[] floatArray3 = new float[] { (short) 100, 0, 10 };
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, 10.0f);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray6);
        float[] floatArray15 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(floatArray15, (float) 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 10.0f);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray15);
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray22);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22, (float) (short) 100);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22);
        java.lang.Float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray22);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray27);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 1.0]");
    }

    @Test
    public void test08871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08871");
        boolean[] booleanArray0 = null;
        double[] doubleArray4 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray5, (java.lang.Object) ' ');
        boolean[] booleanArray12 = new boolean[] { false, true, true, true };
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray5, (java.lang.Object) booleanArray13, (int) (byte) 10);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, true);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray17);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray18, false);
        java.lang.Boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray18);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray21, false);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.add(byteArray24, (int) (byte) 0, (byte) 100);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray24, 0, (int) '4');
        boolean boolean32 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray23, (java.lang.Object) byteArray30, true);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray23);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test08872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08872");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((long) (byte) 10, (long) (byte) 10);
        java.lang.Byte[] byteArray23 = new java.lang.Byte[] { (byte) 1 };
        java.lang.Byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder25 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder25.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean29 = equalsBuilder28.isEquals();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray35 = org.apache.commons.lang3.ArrayUtils.addAll(strArray30, strArray34);
        java.lang.String[] strArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray30);
        java.lang.Character[] charArray42 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, ' ');
        java.lang.Character[] charArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder28.append((java.lang.Object[]) strArray30, (java.lang.Object[]) charArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder21.append((java.lang.Object[]) byteArray23, (java.lang.Object[]) strArray30);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray23);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray48, (byte) 1);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray48, (byte) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray52);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray52);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray52);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(byteArray55, (byte) -1);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test08873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08873");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((long) ' ', (long) (short) 10);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        java.lang.Character[] charArray33 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray33, ' ');
        java.lang.Character[] charArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder22.append((java.lang.Object[]) shortArray24, (java.lang.Object[]) charArray36);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = equalsBuilder37.append((double) (byte) 100, (double) 100.0f);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder37.append((byte) 100, (byte) 10);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder43.append(false, false);
        float[] floatArray49 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray49);
        java.lang.Character[] charArray56 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray56, 'a');
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray49, (java.lang.Object) 'a');
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray49, (int) (byte) 1, (int) (byte) 1);
        float[] floatArray65 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray66 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray65);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(floatArray65, (float) 0);
        float[] floatArray70 = org.apache.commons.lang3.ArrayUtils.add(floatArray65, 10.0f);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.contains(floatArray65, (float) (-1));
        boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray65);
        float[] floatArray74 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray49, floatArray65);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray65, (float) 7);
        float[] floatArray79 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray80 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray79);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.contains(floatArray79, (float) 0);
        float[] floatArray84 = org.apache.commons.lang3.ArrayUtils.add(floatArray79, 10.0f);
        boolean boolean86 = org.apache.commons.lang3.ArrayUtils.contains(floatArray79, (float) (-1));
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray79);
        float[] floatArray88 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray79);
        float[] floatArray89 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray79);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder90 = equalsBuilder43.append(floatArray65, floatArray79);
        boolean boolean91 = equalsBuilder90.isEquals();
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder40);
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(floatArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(floatArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray79), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(floatArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray84), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(floatArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray88), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(equalsBuilder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test08874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08874");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        byte[] byteArray7 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 10, (int) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray7);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray7, (byte) 1, (int) ' ');
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 10);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray21);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.add(byteArray26, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder0.append(byteArray7, byteArray26);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, 2, (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.add(byteArray33, (int) (byte) 100, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, 10]");
    }

    @Test
    public void test08875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08875");
        double[] doubleArray0 = null;
        double[] doubleArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray1, (double) 10L, (int) (byte) 0, (double) (-1.0f));
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray1, 0.0d);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray1, (double) 10);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray9, (double) 5, (double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test08876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08876");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, false);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, false, 0);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, true, (int) (short) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test08877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08877");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, (int) (byte) -1, (int) '#');
        java.lang.Character[] charArray18 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray18);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, 'a');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray21);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray7, 1, '4');
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 3, ' ');
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(charArray26, '#');
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray26);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "# a 4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "# a 4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#,  , a,  , 4, a]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a4  a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a4  a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, 4,  ,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "# a 4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "# a 4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#,  , a,  , 4, a]");
    }

    @Test
    public void test08878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08878");
        char[] charArray1 = new char[] { 'a' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray2);
        float[] floatArray7 = new float[] { (short) 100, 0, 10 };
        float[] floatArray10 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, (float) 0);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, 10.0f);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray7, floatArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(floatArray10, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray3, (java.lang.Object) floatArray10);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3, '#');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(charArray25, 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[a]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[a]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test08879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08879");
        int[] intArray3 = new int[] { '#', (byte) -1, (short) 0 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (int) '#', (int) (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray3, (int) (byte) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray3, 4);
        int[] intArray15 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.clone(intArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray15);
        java.lang.Integer[] intArray18 = org.apache.commons.lang3.ArrayUtils.toObject(intArray15);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray15);
        float[] floatArray23 = new float[] { 1L, 100L, 100 };
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray23, (float) (-1L), (int) (short) 100);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray23, (float) 'a', (int) (byte) 10);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray15, (java.lang.Object) floatArray23);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.add(intArray15, 4);
        int[] intArray33 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray15);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray33, 6);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[100, -1, -1, 0, 4]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[35, -1, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test08880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08880");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        boolean[] booleanArray14 = new boolean[] { false, false, false, false };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray14);
        boolean[] booleanArray24 = new boolean[] { false, true, true, true };
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, true, (int) (short) 100);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray25);
        java.lang.Boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray30);
    }

    @Test
    public void test08881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08881");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray7);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray7);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray7);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, (-1.0d));
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) 5);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08882");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((long) (byte) 10, (long) (byte) 10);
        java.lang.Byte[] byteArray23 = new java.lang.Byte[] { (byte) 1 };
        java.lang.Byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder25 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder28 = equalsBuilder25.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean29 = equalsBuilder28.isEquals();
        java.lang.String[] strArray30 = new java.lang.String[] {};
        java.lang.String[] strArray34 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray35 = org.apache.commons.lang3.ArrayUtils.addAll(strArray30, strArray34);
        java.lang.String[] strArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray30);
        java.lang.Character[] charArray42 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42, ' ');
        java.lang.Character[] charArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder28.append((java.lang.Object[]) strArray30, (java.lang.Object[]) charArray45);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder21.append((java.lang.Object[]) byteArray23, (java.lang.Object[]) strArray30);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray23);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray48, (byte) 1);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray48, (byte) 10);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray52);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray52);
        byte[] byteArray55 = null;
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray52, byteArray55);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(equalsBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08883");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray13 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray14);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        java.lang.Short[] shortArray18 = new java.lang.Short[] { (short) 1 };
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray18);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray18);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray18, (short) (byte) 100);
        short[] shortArray23 = new short[] {};
        java.lang.Short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray23);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray23);
        float[] floatArray28 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray28);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(floatArray28, (float) 0);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray28, 10.0f);
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray28);
        boolean boolean36 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray22, (java.lang.Object) floatArray34, false);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray16, (java.lang.Object) floatArray34);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) '4');
        java.lang.Long[] longArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray16);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        double[] doubleArray45 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray45);
        double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.add(doubleArray45, (double) (byte) 10);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray45, (double) 0L, 0);
        double[] doubleArray52 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray45);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray45, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.add(doubleArray45, (double) 4);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder58 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder61 = equalsBuilder58.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray62 = new double[] {};
        double[] doubleArray66 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray66);
        double[] doubleArray69 = org.apache.commons.lang3.ArrayUtils.add(doubleArray66, (double) (byte) 10);
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray66, (double) 0L, 0);
        double[] doubleArray73 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray66);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray66, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder77 = equalsBuilder58.append(doubleArray62, doubleArray66);
        int int80 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray62, (double) 'a', (int) '4');
        double[] doubleArray81 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray45, doubleArray62);
        double[] doubleArray84 = org.apache.commons.lang3.ArrayUtils.add(doubleArray45, 0, (double) 100);
        double[] doubleArray85 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray45);
        java.lang.Double[] doubleArray86 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray85);
        java.lang.Double[] doubleArray87 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray86);
        java.lang.Object[] objArray88 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) doubleArray86);
        java.lang.Double[] doubleArray89 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray86);
        double[] doubleArray90 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray86);
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) longArray40, (java.lang.Object[]) doubleArray86);
        boolean boolean92 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) doubleArray86);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 10.0, 100.0, 4.0]");
        org.junit.Assert.assertNotNull(equalsBuilder61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test08884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08884");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) ' ');
        boolean[] booleanArray11 = new boolean[] { false, true, true, true };
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) booleanArray12, (int) (byte) 10);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4, (double) '4');
        java.lang.Double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
    }

    @Test
    public void test08885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08885");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((long) ' ', (long) (short) 10);
        boolean[] booleanArray27 = new boolean[] { false, true, true, true };
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray27);
        boolean[] booleanArray33 = new boolean[] { false, false, false, false };
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray33);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray33, false);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.add(booleanArray33, true);
        boolean[] booleanArray43 = new boolean[] { false, false, false, false };
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray43, false);
        java.lang.Boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray43);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray33, booleanArray43);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder49 = equalsBuilder0.append(booleanArray28, booleanArray33);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray28, true, 1);
        boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray28);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray28);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(equalsBuilder49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08886");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray4);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray4);
        float[] floatArray12 = new float[] { 1L, 100L, 100 };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) (-1L), (int) (short) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, (float) 'a', (int) (byte) 10);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray4, (java.lang.Object) floatArray12);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.add(intArray4, 4);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.subarray(intArray21, 100, (int) (short) 100);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray24, (int) (byte) -1);
        int[] intArray31 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.clone(intArray31);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray31, 100);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.addAll(intArray24, intArray34);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray24, (int) 'a');
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray24);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.subarray(intArray24, 8, (int) (short) 1);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[1.0, 100.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, -1, -1, 0, 4]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[]");
    }

    @Test
    public void test08887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08887");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        double[] doubleArray15 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray15);
        boolean boolean17 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray9, (java.lang.Object) doubleArray15);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray15, 3, 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (byte) 10, (double) ' ');
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray20, (int) (short) 0, (int) (byte) 0);
        double[] doubleArray32 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray32);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        java.lang.Object obj35 = null;
        boolean boolean37 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray34, obj35, false);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray34, (double) 3);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray26, doubleArray39);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray26, (double) (short) -1);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) '4', (double) (byte) 1);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) ' ');
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (-1.0d), 1, 100.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.add(doubleArray26, (int) (short) 10, (double) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test08888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08888");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray26);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) 7, 4);
        long[] longArray63 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.clone(longArray63);
        java.lang.Long[] longArray65 = org.apache.commons.lang3.ArrayUtils.toObject(longArray64);
        long[] longArray71 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray72 = org.apache.commons.lang3.ArrayUtils.clone(longArray71);
        java.lang.Long[] longArray73 = org.apache.commons.lang3.ArrayUtils.toObject(longArray72);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.clone(longArray72);
        long[] longArray75 = org.apache.commons.lang3.ArrayUtils.addAll(longArray64, longArray74);
        long[] longArray76 = org.apache.commons.lang3.ArrayUtils.addAll(longArray26, longArray75);
        java.lang.Long[] longArray77 = org.apache.commons.lang3.ArrayUtils.toObject(longArray76);
        java.lang.Long[] longArray78 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray79 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray78);
        long[] longArray80 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray78);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray80);
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.contains(longArray80, (long) 10);
        long[] longArray84 = org.apache.commons.lang3.ArrayUtils.addAll(longArray76, longArray80);
        int int87 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray76, 100L, 7);
        long[] longArray89 = org.apache.commons.lang3.ArrayUtils.remove(longArray76, 0);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray89);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray75), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray76), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertNotNull(longArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(longArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray84), "[32, 100, 10, 10, 1, 32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 11 + "'", int87 == 11);
        org.junit.Assert.assertNotNull(longArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray89), "[100, 10, 10, 1, 32, 100, 10, 10, 1, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test08889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08889");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, true);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray13);
        boolean[] booleanArray19 = new boolean[] { false, false, false, false };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray19);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray19, false);
        java.lang.Boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray19);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray19);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray19);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray19);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray19);
        java.lang.Boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        java.lang.Boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray19, true, (int) 'a');
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray19, false, 13);
        boolean[] booleanArray41 = new boolean[] { false, false, false, false };
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray41);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray41, false);
        java.lang.Boolean[] booleanArray45 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray41);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray41);
        java.lang.Boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray41);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray47);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray47, true);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray50);
        boolean[] booleanArray56 = new boolean[] { false, false, false, false };
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray56);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray56, false);
        java.lang.Boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray56);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray56);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray56);
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray56);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray50, booleanArray56);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray56);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray19, booleanArray56);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test08890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08890");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 4);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray4);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test08891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08891");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((byte) 100, (byte) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder23 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder26 = equalsBuilder23.append(true, true);
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray30, (byte) 10, (int) (short) -1);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray30);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray30, (byte) 1, (int) ' ');
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 10);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray30, byteArray44);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.add(byteArray49, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder23.append(byteArray30, byteArray49);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray54);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray54, 100, (int) (short) 1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder59 = equalsBuilder0.append(byteArray49, byteArray54);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder62 = equalsBuilder59.append(2, 9);
        java.lang.Boolean boolean63 = equalsBuilder62.build();
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(equalsBuilder26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder59);
        org.junit.Assert.assertNotNull(equalsBuilder62);
        org.junit.Assert.assertEquals("'" + boolean63 + "' != '" + false + "'", boolean63, false);
    }

    @Test
    public void test08892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08892");
        java.util.stream.Stream[] streamArray1 = new java.util.stream.Stream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray2 = (java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[]) streamArray1;
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray5 = org.apache.commons.lang3.ArrayUtils.subarray(objEntryStreamArray2, 100, 0);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>>[] objEntryStreamArray6 = org.apache.commons.lang3.ArrayUtils.clone(objEntryStreamArray2);
        java.lang.Boolean[][] booleanArray7 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray36 = new java.lang.Boolean[][] { booleanArray14, booleanArray21, booleanArray28, booleanArray35 };
        java.lang.Boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray36);
        java.util.Map<java.lang.Object, java.lang.Object> objMap38 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray37);
        int[] intArray43 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray44 = org.apache.commons.lang3.ArrayUtils.clone(intArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray44, (int) (short) 0);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray44, (int) '#');
        boolean[] booleanArray53 = new boolean[] { false, true, true, true };
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray53);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray53);
        boolean[] booleanArray56 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray53);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray53, (int) ' ', 11);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray59);
        boolean boolean61 = objMap38.remove((java.lang.Object) intArray48, (java.lang.Object) booleanArray59);
        boolean[] booleanArray64 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray59, (int) (short) 1, (int) 'a');
        boolean[] booleanArray66 = org.apache.commons.lang3.ArrayUtils.add(booleanArray59, false);
        java.lang.AutoCloseable[] autoCloseableArray67 = org.apache.commons.lang3.ArrayUtils.removeElement((java.lang.AutoCloseable[]) objEntryStreamArray2, (java.lang.Object) false);
        java.lang.String str69 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) objEntryStreamArray2, "{-1.0,1.0}");
        org.junit.Assert.assertNotNull(streamArray1);
        org.junit.Assert.assertNotNull(objEntryStreamArray2);
        org.junit.Assert.assertNotNull(objEntryStreamArray5);
        org.junit.Assert.assertNotNull(objEntryStreamArray6);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(objMap38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray56), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[]");
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[false]");
        org.junit.Assert.assertNotNull(autoCloseableArray67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
    }

    @Test
    public void test08893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08893");
        java.lang.Integer[] intArray1 = new java.lang.Integer[] { 0 };
        java.lang.Integer[] intArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray1);
        java.lang.Character[] charArray8 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8, ' ');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray8, '#');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray2, (java.lang.Object) '#', (int) (short) 100);
        java.lang.Integer[] intArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray2);
        java.lang.Integer[] intArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray2);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray16, (int) '4');
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray16, 9);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
    }

    @Test
    public void test08894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08894");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean35 = objEntryList33.remove((java.lang.Object) byteArray34);
        boolean boolean36 = objEntrySet32.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.lang.Object[] objArray37 = objEntryList33.toArray();
        java.lang.Object[] objArray38 = objEntryList33.toArray();
        objEntryList33.clear();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder40 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder43 = equalsBuilder40.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray49 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray49);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray49);
        double[] doubleArray52 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder40.append(doubleArray49, doubleArray52);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder55 = equalsBuilder40.appendSuper(true);
        java.lang.Character[] charArray61 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray62 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray61);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61, 'a');
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.clone(charArray64);
        java.lang.Character[] charArray71 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray71, 'a');
        char[] charArray75 = org.apache.commons.lang3.ArrayUtils.add(charArray73, '#');
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.remove(charArray73, (int) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder78 = equalsBuilder40.append(charArray65, charArray73);
        boolean boolean79 = objEntryList33.remove((java.lang.Object) charArray65);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream80 = objEntryList33.stream();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder43);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertNotNull(equalsBuilder55);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , a,  , #]");
        org.junit.Assert.assertNotNull(equalsBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEntryStream80);
    }

    @Test
    public void test08895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08895");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (byte) 0, (long) 2);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray10);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray10, (long) 2);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray10, 100L);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray10, (long) '4', 0);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.add(longArray10, (int) (short) 1, (long) 9);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[2, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[32, 9, 100, 10, 10, 1]");
    }

    @Test
    public void test08896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08896");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray5, (short) 100);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test08897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08897");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (short) 0, (int) ' ', (double) 1L);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 'a');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) 2, (double) 2);
        double[] doubleArray19 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray19);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray19, (double) (byte) 10);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray19, (double) 0L, 0);
        double[] doubleArray29 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray29);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.add(doubleArray29, (double) (byte) 10);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, (double) 0L, 0);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray29);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray29, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray29);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray19);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray41, (double) 1.0f);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 100L, 100.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
    }

    @Test
    public void test08898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08898");
        long[] longArray4 = new long[] { (byte) -1, '4', 10, 1 };
        long[][] longArray5 = new long[][] { longArray4 };
        long[] longArray11 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.clone(longArray11);
        java.lang.Long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toObject(longArray12);
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.add(longArray14, (long) (short) 0);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        long[] longArray23 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.clone(longArray23);
        java.lang.Long[] longArray25 = org.apache.commons.lang3.ArrayUtils.toObject(longArray24);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray24);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (long) (short) 0);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray17, longArray26);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray17, (long) 10);
        long[][] longArray32 = org.apache.commons.lang3.ArrayUtils.add(longArray5, longArray31);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.clone(longArray31);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray33, 1L, 100);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 52, 10, 1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[32, 100, 10, 10, 1, 0, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[32, 100, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
    }

    @Test
    public void test08899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08899");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        double[] doubleArray15 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray15);
        boolean boolean17 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray9, (java.lang.Object) doubleArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray9);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray9, false);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.add(booleanArray20, true);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false, false, false]");
    }

    @Test
    public void test08900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08900");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0L, 0);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, 10.0d);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, 100.0d, (double) 10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test08901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08901");
        double[] doubleArray5 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray5);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray11 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray11);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, (double) (byte) 10);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) 0L, 0);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (short) -1, (int) (byte) -1);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, (double) 2);
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.add(doubleArray22, 0.0d);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray24, (double) 4);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray24, (double) 100L, (int) (byte) 100);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.add(doubleArray24, (double) 2);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray7, doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) (short) 10, (double) 1L);
        java.lang.Double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray7);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray36, (double) 1.0f);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray36, (double) 10.0f);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray40, 10.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray40, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 10.0, 100.0, 2.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0, 2.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 10.0, 100.0, 2.0, 0.0, 2.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test08902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08902");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 1L, 10L, 0L, (-1L), (-1L), (-1L) };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (short) 10);
        java.lang.String[] strArray9 = new java.lang.String[] {};
        java.lang.String[] strArray13 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray14 = org.apache.commons.lang3.ArrayUtils.addAll(strArray9, strArray13);
        java.lang.String[] strArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray13);
        byte[] byteArray16 = null;
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray16);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 10, (int) (short) -1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray21, (byte) 10);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray16, byteArray21);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 0, 3);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray21, (byte) 1);
        boolean boolean33 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) strArray15, (java.lang.Object) int32);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray6, (java.lang.Object) strArray15);
        java.lang.Long[] longArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray6);
        java.lang.Float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray37);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray6, (java.lang.Object) floatArray37);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray37, 10.0f);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 10, 0, -1, -1, -1]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
    }

    @Test
    public void test08903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08903");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) ' ');
        boolean[] booleanArray11 = new boolean[] { false, true, true, true };
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) booleanArray12, (int) (byte) 10);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.add(booleanArray12, false);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray12, false);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, true, true, true, false]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08904");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray10);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false]");
    }

    @Test
    public void test08905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08905");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 100.0d, 1.0d, 10.0d, (-1.0d), 100.0d };
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
    }

    @Test
    public void test08906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08906");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray0, 4, (int) (byte) 1);
        org.junit.Assert.assertNull(booleanArray3);
    }

    @Test
    public void test08907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08907");
        byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, (int) (byte) 0, (byte) 100);
        java.lang.Byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray0);
        java.io.Serializable[] serializableArray5 = org.apache.commons.lang3.ArrayUtils.clone((java.io.Serializable[]) byteArray4);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder6 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder9 = equalsBuilder6.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder12 = equalsBuilder9.append((float) (short) 100, (float) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder15 = equalsBuilder9.append((short) 1, (short) (byte) -1);
        long[] longArray21 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.clone(longArray21);
        java.lang.Long[] longArray23 = org.apache.commons.lang3.ArrayUtils.toObject(longArray22);
        long[] longArray29 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray22, longArray30);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder32 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder32.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        long[] longArray48 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.clone(longArray48);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder35.append(longArray42, longArray48);
        long[] longArray53 = org.apache.commons.lang3.ArrayUtils.add(longArray42, (int) (byte) 0, (long) 2);
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray42);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder55 = equalsBuilder15.append(longArray30, longArray54);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray4, (java.lang.Object) equalsBuilder55, (int) (byte) 0);
        byte[] byteArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray64 = new java.lang.Byte[] { (byte) -1, (byte) 100, (byte) 1, (byte) 100 };
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray64, (byte) 100);
        java.lang.Byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray66);
        byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray67);
        java.lang.Byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray67);
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray67);
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray70, (byte) 10);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList73 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray74 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean75 = objEntryList73.remove((java.lang.Object) byteArray74);
        byte[] byteArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray74, (byte) 1);
        byte[] byteArray78 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray74);
        byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray78);
        byte[] byteArray80 = org.apache.commons.lang3.ArrayUtils.clone(byteArray79);
        byte[] byteArray81 = org.apache.commons.lang3.ArrayUtils.clone(byteArray80);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray70, byteArray81);
        byte[] byteArray83 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray59, byteArray70);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(serializableArray5);
        org.junit.Assert.assertNotNull(equalsBuilder9);
        org.junit.Assert.assertNotNull(equalsBuilder12);
        org.junit.Assert.assertNotNull(equalsBuilder15);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[2, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-1, 100, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, 100, 1, 100]");
    }

    @Test
    public void test08908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08908");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 10);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, 1, (short) (byte) -1);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray2);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray2, 6, (int) '4');
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray2);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray12);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1]");
    }

    @Test
    public void test08909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08909");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray0, (short) 0);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray0, (short) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray0);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test08910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08910");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) (-1), (int) (byte) -1);
        long[] longArray58 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (long) (-1));
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray58);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray59);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(longArray59, (long) 11);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 100, 10, 10, 1, -1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test08911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08911");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        java.lang.Float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray3);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, 0.0f);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 5, (int) ' ');
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray5, 3, 100);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray13, (float) 100L);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray15);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) (short) 0);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray15, 0, (int) 'a');
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (int) (byte) 0, (-1.0f));
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray24, (float) (-1));
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[0.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[]");
    }

    @Test
    public void test08912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08912");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        java.lang.Boolean[] booleanArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        java.lang.Boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray0, (java.lang.Object[]) booleanArray2);
        java.lang.Boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray2);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[]");
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
    }

    @Test
    public void test08913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08913");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray7);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray7);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, (double) 10.0f);
        java.lang.Double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray7);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, (double) 1L);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray14);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray15, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
    }

    @Test
    public void test08914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08914");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.lang.Boolean[][] booleanArray33 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray40 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray47 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray54 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray61 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray62 = new java.lang.Boolean[][] { booleanArray40, booleanArray47, booleanArray54, booleanArray61 };
        java.lang.Boolean[][] booleanArray63 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray33, booleanArray62);
        java.util.Map<java.lang.Object, java.lang.Object> objMap64 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray33);
        int[] intArray67 = new int[] { 1, (byte) 1 };
        int[] intArray70 = org.apache.commons.lang3.ArrayUtils.add(intArray67, (int) (short) 0, (int) '4');
        java.lang.Object obj71 = objMap31.getOrDefault((java.lang.Object) booleanArray33, (java.lang.Object) intArray70);
        java.lang.Cloneable[] cloneableArray72 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Cloneable[]) booleanArray33);
        java.lang.Short[] shortArray74 = new java.lang.Short[] { (short) 1 };
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray74);
        int int76 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) cloneableArray72, (java.lang.Object) shortArray74);
        short[] shortArray78 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray74, (short) (byte) 10);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertNotNull(objMap64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[52, 1, 1]");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(cloneableArray72);
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[1]");
    }

    @Test
    public void test08915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08915");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Object[] objArray1 = objEntryList0.toArray();
        objEntryList0.clear();
        float[] floatArray5 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        float[] floatArray9 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(floatArray9, (float) 0);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray9);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray5);
        float[] floatArray18 = new float[] { (short) 100, 0, 10 };
        float[] floatArray21 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(floatArray21, (float) 0);
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, 10.0f);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray21);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray21);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(floatArray21, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray21);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray21);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(floatArray5);
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        boolean boolean35 = objEntryList0.equals((java.lang.Object) floatArray34);
        java.lang.Boolean[][] booleanArray36 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray43 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray50 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray57 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray64 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray65 = new java.lang.Boolean[][] { booleanArray43, booleanArray50, booleanArray57, booleanArray64 };
        java.lang.Boolean[][] booleanArray66 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray36, booleanArray65);
        java.util.Map<java.lang.Object, java.lang.Object> objMap67 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray36);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet68 = objMap67.entrySet();
        objMap67.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet70 = objMap67.entrySet();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream71 = objEntrySet70.parallelStream();
        int int72 = objEntrySet70.size();
        java.lang.Object[] objArray73 = objEntrySet70.toArray();
        boolean boolean74 = objEntryList0.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet70);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[-1.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(objMap67);
        org.junit.Assert.assertNotNull(objEntrySet68);
        org.junit.Assert.assertNotNull(objEntrySet70);
        org.junit.Assert.assertNotNull(objEntryStream71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test08916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08916");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray4, 100);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.clone(intArray7);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, -1, 0]");
    }

    @Test
    public void test08917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08917");
        java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0);
        double[] doubleArray5 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray5);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        boolean boolean10 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray1, (java.lang.Object) doubleArray8, true);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray1, (int) (byte) 10, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test08918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08918");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 10);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100, (int) (byte) 1);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.clone(shortArray2);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray2, (short) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray10, 13, (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 13, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1]");
    }

    @Test
    public void test08919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08919");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        java.lang.Short[] shortArray12 = new java.lang.Short[] { (short) 1 };
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray12);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray12, (short) (byte) 100);
        short[] shortArray17 = new short[] {};
        java.lang.Short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray17);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray17);
        float[] floatArray22 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(floatArray22, (float) 0);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, 10.0f);
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        boolean boolean30 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray16, (java.lang.Object) floatArray28, false);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray10, (java.lang.Object[]) floatArray28);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray32, false);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test08920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08920");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        java.lang.Character[] charArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertNotNull(charArray12);
    }

    @Test
    public void test08921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08921");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray9, (double) 0.0f);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, (double) (byte) 10);
        java.lang.Double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray9);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14, 0.0d);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test08922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08922");
        byte[] byteArray0 = null;
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1);
        byte[] byteArray3 = null;
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray2, byteArray3);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray2, (byte) 1);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) -1);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) 10);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray6, (int) (byte) 0, (byte) 100);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 10);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray0, byteArray6);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray6, (int) 'a', 100);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test08923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08923");
        double[] doubleArray0 = null;
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray0, (-1.0d), (int) (byte) 0, (double) (byte) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test08924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08924");
        int[] intArray0 = new int[] {};
        int[] intArray3 = org.apache.commons.lang3.ArrayUtils.add(intArray0, 0, 100);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray3);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray3);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray3);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray3, (int) ' ');
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(intArray3, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray0), "[]");
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08925");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((byte) 100, (byte) 1);
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray28 = org.apache.commons.lang3.ArrayUtils.addAll(strArray23, strArray27);
        java.lang.Short[] shortArray30 = new java.lang.Short[] { (short) 1 };
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30, (short) (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder35 = equalsBuilder0.append((java.lang.Object[]) strArray28, (java.lang.Object[]) shortArray30);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray30);
        java.lang.String str38 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray30);
        java.lang.Short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray30);
        java.lang.Short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray39);
        float[] floatArray43 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray44 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray43);
        java.lang.Float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray44);
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray44);
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, 0.0f);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, 0.0f);
        float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray50, (int) (byte) 0, 2);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray50);
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.add(floatArray50, (float) 1L);
        java.lang.String[] strArray57 = new java.lang.String[] {};
        java.lang.String[] strArray61 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray62 = org.apache.commons.lang3.ArrayUtils.addAll(strArray57, strArray61);
        java.lang.String[] strArray63 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray61);
        boolean boolean64 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray40, (java.lang.Object) floatArray56, strArray63);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1]");
        org.junit.Assert.assertNotNull(equalsBuilder35);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{1}" + "'", str38, "{1}");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0, 1.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[0.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[0.0, 1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08926");
        java.lang.Double[][][][][][][] doubleArray0 = null;
        java.lang.Double[][][][] doubleArray1 = new java.lang.Double[][][][] {};
        java.lang.Double[][][][][] doubleArray2 = new java.lang.Double[][][][][] { doubleArray1 };
        java.lang.Double[][][][] doubleArray3 = new java.lang.Double[][][][] {};
        java.lang.Double[][][][][] doubleArray4 = new java.lang.Double[][][][][] { doubleArray3 };
        java.lang.Double[][][][] doubleArray5 = new java.lang.Double[][][][] {};
        java.lang.Double[][][][][] doubleArray6 = new java.lang.Double[][][][][] { doubleArray5 };
        java.lang.Double[][][][] doubleArray7 = new java.lang.Double[][][][] {};
        java.lang.Double[][][][][] doubleArray8 = new java.lang.Double[][][][][] { doubleArray7 };
        java.lang.Double[][][][] doubleArray9 = new java.lang.Double[][][][] {};
        java.lang.Double[][][][][] doubleArray10 = new java.lang.Double[][][][][] { doubleArray9 };
        java.lang.Double[][][][][][] doubleArray11 = new java.lang.Double[][][][][][] { doubleArray2, doubleArray4, doubleArray6, doubleArray8, doubleArray10 };
        java.lang.Character[] charArray17 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17, ' ');
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17, '#');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray21, ' ');
        java.lang.Character[] charArray30 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray30, 'a');
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.add(charArray32, '#');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.addAll(charArray21, charArray34);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray21, ' ');
        java.lang.Character[] charArray44 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, ' ');
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, '#');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.clone(charArray48);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray48, ' ');
        java.lang.Character[] charArray57 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray57, ' ');
        char[] charArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray57, '#');
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.clone(charArray61);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.addAll(charArray48, charArray62);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray63, 'a');
        char[] charArray66 = org.apache.commons.lang3.ArrayUtils.addAll(charArray21, charArray63);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.contains(charArray63, 'a');
        java.lang.Double[][][][][][] doubleArray69 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray11, (java.lang.Object) boolean68);
        java.lang.Double[][][][][][] doubleArray70 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray11);
        java.lang.Double[][][][][][][] doubleArray72 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " 44a4a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , 4, 4, a, 4, a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , 4, 4, a, 4,  , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " 44a4 44a4 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " 44a4 44a4 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , 4, 4, a, 4,  , 4, 4, a, 4,  , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray72);
    }

    @Test
    public void test08927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08927");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 100.0d, 1.0d, 10.0d, (-1.0d), 100.0d };
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray10, (double) (short) 0, (int) (short) -1, (double) (short) 10);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08928");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        java.lang.Short[] shortArray5 = new java.lang.Short[] { (short) 1 };
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray5);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray5);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray5, (short) (byte) 100);
        short[] shortArray10 = new short[] {};
        java.lang.Short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray10);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray10);
        java.lang.Short[] shortArray14 = new java.lang.Short[] { (short) 1 };
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 100);
        short[] shortArray19 = new short[] {};
        java.lang.Short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray19);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray18, shortArray19);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray12, shortArray19);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.add(shortArray22, (short) (byte) 10);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.add(shortArray22, (short) (byte) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray22);
        java.lang.Short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray3);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) 100);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 100]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08929");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray7);
        java.lang.Character[] charArray15 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, ' ');
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray17);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray7, charArray17);
        java.lang.Character[] charArray25 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray25, ' ');
        char[] charArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray27);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray7, charArray28);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray28, '4', 100);
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.add(charArray28, '#');
        char[] charArray37 = new char[] { 'a' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray37);
        java.lang.Character[] charArray45 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray45, 'a');
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray47, 'a', (-1));
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray37, charArray47);
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray47);
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.addAll(charArray35, charArray52);
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray53, '#');
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.subarray(charArray53, (int) (short) 100, 0);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4a44 #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4a44 #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, a, 4, 4,  , #]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "4a44 #a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "4a44 #a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[4, a, 4, 4,  , #, a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "4a44 a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "4a44 a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[4, a, 4, 4,  , a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[]");
    }

    @Test
    public void test08930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08930");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray9, 4, '#');
        java.lang.Character[] charArray18 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, 'a');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, ' ');
        java.lang.Character[] charArray28 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray28, 'a');
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray30, '#');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.subarray(charArray30, (int) (byte) -1, (int) '#');
        java.lang.Character[] charArray41 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray42 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray41);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray41, 'a');
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.clone(charArray44);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.addAll(charArray30, charArray44);
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray44, 'a');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.clone(charArray44);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.addAll(charArray22, charArray49);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.clone(charArray50);
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.addAll(charArray9, charArray50);
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray9);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a a ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a a ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , a,  , #, #, #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "4## ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "4## ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[4, #, #,  ]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "a a ##a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "a a ##a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[a,  , a,  , #, #, a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a,  , a,  , #, #]");
    }

    @Test
    public void test08931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08931");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        objMap31.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet40 = objMap31.entrySet();
        java.lang.Object obj41 = null;
        boolean boolean42 = objMap31.containsValue(obj41);
        float[] floatArray45 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray45);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(floatArray45, (float) 0);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.add(floatArray45, 10.0f);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.contains(floatArray45, (float) (-1));
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray45);
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray45);
        float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray45);
        java.lang.Character[] charArray61 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61, 'a');
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.add(charArray63, '#');
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.add(charArray65, 4, '#');
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.subarray(charArray68, 100, (int) 'a');
        char[] charArray74 = org.apache.commons.lang3.ArrayUtils.subarray(charArray71, 5, 2);
        java.lang.Object obj75 = objMap31.getOrDefault((java.lang.Object) floatArray55, (java.lang.Object) 2);
        java.lang.Object obj76 = null;
        boolean boolean77 = objMap31.containsKey(obj76);
        objMap31.clear();
        boolean boolean80 = objMap31.containsValue((java.lang.Object) "true");
        boolean boolean81 = objMap31.isEmpty();
        java.lang.Object obj82 = null;
        java.lang.Object obj83 = objMap31.remove(obj82);
        objMap31.clear();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objEntrySet40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "a a ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "a a ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a,  , a,  , #, #, #]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[]");
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + 2 + "'", obj75, 2);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test08932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08932");
        short[] shortArray4 = new short[] { (byte) 0, (byte) 1, (short) -1, (byte) -1 };
        java.lang.Short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) 1, 100);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) -1);
        java.lang.Short[] shortArray14 = new java.lang.Short[] { (short) 1 };
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 100);
        short[] shortArray19 = new short[] {};
        java.lang.Short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray19);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray18, shortArray19);
        short[] shortArray22 = new short[] {};
        java.lang.Short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray22);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray21, shortArray22);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray21);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray25, 1, 11);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray28, (short) (byte) 0, (int) 'a');
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.remove(shortArray28, (int) (byte) 0);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray28, (short) -1);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray28);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[0, 1, -1, -1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[0, 1, -1, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[-1, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test08933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08933");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        double[] doubleArray24 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray24);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray24, (double) (byte) 10);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray27, (double) 10.0f);
        double[] doubleArray33 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.add(doubleArray33, (double) (byte) 10);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray33, (double) 0L, 0);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray33);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray33, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray27, doubleArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder45 = equalsBuilder19.append(doubleArray20, doubleArray33);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray46);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder51 = equalsBuilder45.append(byteArray46, byteArray48);
        short[] shortArray52 = null;
        java.lang.Short[] shortArray54 = new java.lang.Short[] { (short) 1 };
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray54);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray54, (short) (byte) 100);
        short[] shortArray59 = new short[] {};
        java.lang.Short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray59);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray58, shortArray59);
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray59, (short) (byte) 10, (int) (byte) 10);
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray59);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder51.append(shortArray52, shortArray59);
        equalsBuilder51.reset();
        long[] longArray73 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.clone(longArray73);
        java.lang.Long[] longArray75 = org.apache.commons.lang3.ArrayUtils.toObject(longArray74);
        long[] longArray76 = org.apache.commons.lang3.ArrayUtils.clone(longArray74);
        java.lang.Long[] longArray77 = org.apache.commons.lang3.ArrayUtils.toObject(longArray74);
        long[] longArray79 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray77, (long) (short) 1);
        long[] longArray81 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray77, (long) '4');
        long[] longArray82 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray77);
        boolean boolean83 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) equalsBuilder51, (java.lang.Object) longArray77);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder86 = equalsBuilder51.append((-1), 7);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder89 = equalsBuilder51.append(false, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder92 = equalsBuilder89.append(10.0f, 0.0f);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(equalsBuilder45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertNotNull(equalsBuilder51);
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[1]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[]");
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[]");
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray73), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray76), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(equalsBuilder86);
        org.junit.Assert.assertNotNull(equalsBuilder89);
        org.junit.Assert.assertNotNull(equalsBuilder92);
    }

    @Test
    public void test08934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08934");
        float[] floatArray3 = new float[] { (short) 100, 0, 10 };
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, 10.0f);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray6);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray6);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray6);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) (byte) 1);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, (float) '4');
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray6, (float) 7);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder23 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder26 = equalsBuilder23.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean27 = equalsBuilder26.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder26.append((byte) 10, (byte) 0);
        java.lang.Boolean boolean31 = equalsBuilder26.build();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder34 = equalsBuilder26.append(true, false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder34.append(true, false);
        float[] floatArray41 = new float[] { (short) 100, 0, 10 };
        float[] floatArray44 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray44);
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(floatArray44, (float) 0);
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.add(floatArray44, 10.0f);
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray41, floatArray44);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray44);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(floatArray44, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray44);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.contains(floatArray44, (float) (byte) 1);
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray44, (float) 4);
        java.lang.Float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray60 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray59);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray60, (float) 'a');
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray62, (float) 5);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder65 = equalsBuilder37.append(floatArray44, floatArray62);
        float[] floatArray68 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray44, (int) '#', 11);
        float[] floatArray70 = org.apache.commons.lang3.ArrayUtils.add(floatArray68, (float) 10L);
        float[] floatArray71 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray70);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0, 52.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(equalsBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertEquals("'" + boolean31 + "' != '" + false + "'", boolean31, false);
        org.junit.Assert.assertNotNull(equalsBuilder34);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertNotNull(floatArray60);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(equalsBuilder65);
        org.junit.Assert.assertNotNull(floatArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray68), "[]");
        org.junit.Assert.assertNotNull(floatArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray71), "[-1.0, 1.0, 10.0]");
    }

    @Test
    public void test08935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08935");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        java.lang.Boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray10);
        java.lang.Character[] charArray17 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17, 'a');
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, 'a', (-1));
        java.lang.Character[] charArray28 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray28, ' ');
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray28, '#');
        java.lang.Character[] charArray38 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray39 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray38);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, 'a');
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray32, charArray41);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray32);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) booleanArray11, (java.lang.Object) charArray32);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray32);
        java.lang.Character[] charArray46 = org.apache.commons.lang3.ArrayUtils.toObject(charArray45);
        java.lang.Object obj47 = null;
        java.lang.Character[] charArray53 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray53);
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray53, '4');
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray53, ' ');
        java.lang.String[] strArray59 = new java.lang.String[] {};
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray64 = org.apache.commons.lang3.ArrayUtils.addAll(strArray59, strArray63);
        java.lang.String[] strArray65 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray59);
        java.lang.String[] strArray66 = org.apache.commons.lang3.ArrayUtils.toArray(strArray65);
        java.lang.String[] strArray67 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray65);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) strArray67);
        boolean boolean69 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals(obj47, (java.lang.Object) charArray53, strArray67);
        char[] charArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray53, '#');
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray46, (java.lang.Object) '#', (-1));
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "a a # 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "a a # 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a,  , a,  , #,  , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test08936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08936");
        java.lang.CharSequence[][] charSequenceArray0 = new java.lang.CharSequence[][] {};
        java.lang.CharSequence[] charSequenceArray6 = new java.lang.CharSequence[] { "", "hi!", "hi!", "", "" };
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "", "hi!", "hi!", "", "" };
        java.lang.CharSequence[] charSequenceArray18 = new java.lang.CharSequence[] { "", "hi!", "hi!", "", "" };
        java.lang.CharSequence[] charSequenceArray24 = new java.lang.CharSequence[] { "", "hi!", "hi!", "", "" };
        java.lang.CharSequence[][] charSequenceArray25 = new java.lang.CharSequence[][] { charSequenceArray6, charSequenceArray12, charSequenceArray18, charSequenceArray24 };
        java.lang.CharSequence[][] charSequenceArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charSequenceArray0, charSequenceArray25);
        java.lang.Boolean[][] booleanArray27 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray34 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray41 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray48 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray55 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray56 = new java.lang.Boolean[][] { booleanArray34, booleanArray41, booleanArray48, booleanArray55 };
        java.lang.Boolean[][] booleanArray57 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray27, booleanArray56);
        java.util.Map<java.lang.Object, java.lang.Object> objMap58 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray27);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = objMap58.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList60 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        boolean boolean61 = objEntrySet59.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList60);
        int[] intArray66 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray67 = org.apache.commons.lang3.ArrayUtils.clone(intArray66);
        int[] intArray69 = org.apache.commons.lang3.ArrayUtils.add(intArray66, (int) 'a');
        int[] intArray74 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray75 = org.apache.commons.lang3.ArrayUtils.clone(intArray74);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray75);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray69, intArray75);
        boolean boolean78 = objEntrySet59.remove((java.lang.Object) intArray69);
        int[] intArray79 = org.apache.commons.lang3.ArrayUtils.clone(intArray69);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray79);
        int[] intArray83 = new int[] { 1, (byte) 1 };
        int[] intArray86 = org.apache.commons.lang3.ArrayUtils.add(intArray83, (int) (short) 0, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray83);
        java.lang.Integer[] intArray88 = org.apache.commons.lang3.ArrayUtils.toObject(intArray83);
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray79, intArray83);
        int int90 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charSequenceArray25, (java.lang.Object) intArray79);
        int[] intArray91 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray79);
        int[] intArray93 = org.apache.commons.lang3.ArrayUtils.add(intArray79, 9);
        org.junit.Assert.assertNotNull(charSequenceArray0);
        org.junit.Assert.assertNotNull(charSequenceArray6);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertNotNull(charSequenceArray18);
        org.junit.Assert.assertNotNull(charSequenceArray24);
        org.junit.Assert.assertNotNull(charSequenceArray25);
        org.junit.Assert.assertNotNull(charSequenceArray26);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray56);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertNotNull(objMap58);
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[1, 1]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[52, 1, 1]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[100, -1, -1, 0, 97, 9]");
    }

    @Test
    public void test08937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08937");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean35 = objEntryList33.remove((java.lang.Object) byteArray34);
        boolean boolean36 = objEntrySet32.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor37 = objEntrySet32.iterator();
        java.lang.Object[] objArray38 = objEntrySet32.toArray();
        boolean boolean40 = objEntrySet32.remove((java.lang.Object) '4');
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList41 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor42 = objEntryList41.iterator();
        java.lang.String[] strArray43 = new java.lang.String[] {};
        java.lang.String[] strArray47 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray48 = org.apache.commons.lang3.ArrayUtils.addAll(strArray43, strArray47);
        java.lang.Comparable<java.lang.String>[] strComparableArray49 = objEntryList41.toArray((java.lang.Comparable<java.lang.String>[]) strArray43);
        boolean boolean50 = objEntrySet32.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList41);
        objEntrySet32.clear();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList52 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean54 = objEntryList52.remove((java.lang.Object) byteArray53);
        java.lang.reflect.Type[] typeArray55 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray57 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray59 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray60 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray61 = new java.lang.reflect.Type[][] { typeArray55, typeArray56, typeArray57, typeArray58, typeArray59, typeArray60 };
        java.lang.reflect.Type[][] typeArray62 = objEntryList52.toArray(typeArray61);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder63 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder66 = equalsBuilder63.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray67 = new double[] {};
        double[] doubleArray71 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray72 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray71);
        double[] doubleArray74 = org.apache.commons.lang3.ArrayUtils.add(doubleArray71, (double) (byte) 10);
        int int77 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray71, (double) 0L, 0);
        double[] doubleArray78 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray71);
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray71, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder82 = equalsBuilder63.append(doubleArray67, doubleArray71);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder85 = equalsBuilder63.append((long) ' ', (long) (short) 10);
        boolean boolean86 = objEntryList52.equals((java.lang.Object) equalsBuilder63);
        boolean boolean87 = objEntrySet32.addAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList52);
        objEntryList52.clear();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry89 = null;
        boolean boolean90 = objEntryList52.add(objEntry89);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEntryItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objEntryItor42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strComparableArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(equalsBuilder66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder82);
        org.junit.Assert.assertNotNull(equalsBuilder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test08938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08938");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.add(booleanArray11, 0, true);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray11);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray11);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, false, (int) (byte) -1);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray11, 1);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray11);
        boolean[] booleanArray27 = new boolean[] { false, false, false, false };
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray27);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray22, booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test08939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08939");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean2 = objEntryList0.remove((java.lang.Object) byteArray1);
        long[] longArray8 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toObject(longArray9);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray11, (long) (short) 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray13, (long) '4');
        boolean boolean16 = objEntryList0.contains((java.lang.Object) int15);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList17 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList18 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor19 = objEntryList18.iterator();
        java.lang.String[] strArray20 = new java.lang.String[] {};
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray25 = org.apache.commons.lang3.ArrayUtils.addAll(strArray20, strArray24);
        java.lang.Comparable<java.lang.String>[] strComparableArray26 = objEntryList18.toArray((java.lang.Comparable<java.lang.String>[]) strArray20);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream27 = objEntryList18.parallelStream();
        boolean boolean28 = objEntryList17.addAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList18);
        boolean boolean29 = objEntryList0.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList18);
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream30 = objEntryList0.stream();
        double[] doubleArray34 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray34);
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.add(doubleArray34, (double) (byte) 10);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray34, (double) 0L, 0);
        double[] doubleArray44 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray44);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.add(doubleArray44, (double) (byte) 10);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray44, (double) 0L, 0);
        double[] doubleArray51 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray44);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray44, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray34, doubleArray44);
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray34);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray56, (double) 1.0f);
        double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.add(doubleArray56, (int) (short) 1, (double) 100L);
        boolean boolean62 = objEntryList0.contains((java.lang.Object) (short) 1);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor63 = objEntryList0.iterator();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objEntryItor19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strComparableArray26);
        org.junit.Assert.assertNotNull(objEntryStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objEntryStream30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 100.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objEntryItor63);
    }

    @Test
    public void test08940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08940");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean4 = equalsBuilder3.isEquals();
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.addAll(strArray5, strArray9);
        java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray5);
        java.lang.Character[] charArray17 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray17, ' ');
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray17);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((java.lang.Object[]) strArray5, (java.lang.Object[]) charArray20);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder24 = equalsBuilder3.append((int) (short) -1, 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder26 = equalsBuilder24.appendSuper(false);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder29 = equalsBuilder24.append((double) 1, (double) (byte) 1);
        java.lang.Boolean boolean30 = equalsBuilder24.build();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder33 = equalsBuilder24.append((long) 3, (long) '4');
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(equalsBuilder24);
        org.junit.Assert.assertNotNull(equalsBuilder26);
        org.junit.Assert.assertNotNull(equalsBuilder29);
        org.junit.Assert.assertEquals("'" + boolean30 + "' != '" + false + "'", boolean30, false);
        org.junit.Assert.assertNotNull(equalsBuilder33);
    }

    @Test
    public void test08941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08941");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 10);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray2, (short) 100, (int) (byte) 1);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(shortArray2, (short) (byte) 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray2, (short) (byte) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) (byte) 10);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.add(shortArray2, (short) (byte) 1);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(shortArray2, (short) 0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08942");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) ' ');
        boolean[] booleanArray11 = new boolean[] { false, true, true, true };
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray4, (java.lang.Object) booleanArray12, (int) (byte) 10);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.add(booleanArray12, true);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray16, 2);
        boolean[] booleanArray23 = new boolean[] { false, false, false, false };
        boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray23);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        java.lang.Boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray23);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray23, false);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray16, booleanArray29);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray16);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray31, true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false, true, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[false, true, true, true, true]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test08943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08943");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray9 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.clone(longArray9);
        long[] longArray16 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder18 = equalsBuilder3.append(longArray10, longArray16);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder21 = equalsBuilder3.append((double) 100.0f, (double) 1.0f);
        long[] longArray27 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.clone(longArray27);
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toObject(longArray28);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.add(longArray30, (long) (short) 0);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray32);
        long[] longArray38 = new long[] { (byte) -1, '4', 10, 1 };
        long[][] longArray39 = new long[][] { longArray38 };
        long[] longArray45 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.clone(longArray45);
        java.lang.Long[] longArray47 = org.apache.commons.lang3.ArrayUtils.toObject(longArray46);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray46);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.add(longArray48, (long) (short) 0);
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.clone(longArray50);
        long[] longArray57 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray58 = org.apache.commons.lang3.ArrayUtils.clone(longArray57);
        java.lang.Long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toObject(longArray58);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.clone(longArray58);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.add(longArray60, (long) (short) 0);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.addAll(longArray51, longArray60);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray51, (long) 10);
        long[][] longArray66 = org.apache.commons.lang3.ArrayUtils.add(longArray39, longArray65);
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.clone(longArray65);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder68 = equalsBuilder21.append(longArray32, longArray65);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder71 = equalsBuilder21.append((byte) 0, (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder74 = equalsBuilder71.append((float) 6, (float) (short) 0);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder18);
        org.junit.Assert.assertNotNull(equalsBuilder21);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, 52, 10, 1]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[32, 100, 10, 10, 1, 0, 32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[32, 100, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[32, 100, 10, 1, 0]");
        org.junit.Assert.assertNotNull(equalsBuilder68);
        org.junit.Assert.assertNotNull(equalsBuilder71);
        org.junit.Assert.assertNotNull(equalsBuilder74);
    }

    @Test
    public void test08944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08944");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray0, (byte) 10);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test08945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08945");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray6, (short) (byte) 10, (int) (byte) 10);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, (short) (byte) -1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray6, (short) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray6, (short) (byte) 1, (int) 'a');
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test08946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08946");
        char[][][] charArray0 = new char[][][] {};
        char[][][] charArray1 = new char[][][] {};
        char[][][] charArray2 = new char[][][] {};
        char[][][] charArray3 = new char[][][] {};
        char[][][] charArray4 = new char[][][] {};
        char[][][] charArray5 = new char[][][] {};
        char[][][][] charArray6 = new char[][][][] { charArray0, charArray1, charArray2, charArray3, charArray4, charArray5 };
        char[][][][] charArray7 = org.apache.commons.lang3.ArrayUtils.clone(charArray6);
        // The following exception was thrown during execution in test generation
        try {
            char[][][][] charArray9 = org.apache.commons.lang3.ArrayUtils.remove(charArray6, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
    }

    @Test
    public void test08947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08947");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, (int) (byte) -1, (int) '#');
        java.lang.Character[] charArray18 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray18);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, 'a');
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray21);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray7, 1, '4');
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray26);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray26, 3, ' ');
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(charArray26, '#');
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(charArray26, 'a');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a a #4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a a #4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , a,  , #, 4, #, #,  , a]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a4 a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a4 a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, 4,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a4  a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a4  a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a, 4,  ,  , a,  , #]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test08948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08948");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0L, 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (short) -1, (int) (byte) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) (byte) 10);
        java.lang.Short[] shortArray16 = new java.lang.Short[] { (short) 1 };
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray16);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray16);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray16);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray16, (short) 0);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "{false,false,false,false}" };
        boolean boolean26 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray3, (java.lang.Object) shortArray21, strArray25);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) '#', (int) (byte) 1, (double) '#');
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray3, (double) (byte) 1);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (byte) 1, 10, (double) 0);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test08949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08949");
        char[] charArray1 = new char[] { 'a' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray4);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[a]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[a]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08950");
        long[] longArray5 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray6 = org.apache.commons.lang3.ArrayUtils.clone(longArray5);
        java.lang.Long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toObject(longArray6);
        long[] longArray13 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray6, longArray14);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toObject(longArray14);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray16);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17);
        java.lang.Long[] longArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray17);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray19);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, (long) 1, 1);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.subarray(longArray20, (int) (byte) 100, (int) ' ');
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray26, (long) 5, 8);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray26, (int) (short) 0, 8);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray34 = org.apache.commons.lang3.ArrayUtils.remove(longArray32, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
    }

    @Test
    public void test08951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08951");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((long) ' ', (long) (short) 10);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        java.lang.Character[] charArray33 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray33, ' ');
        java.lang.Character[] charArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder22.append((java.lang.Object[]) shortArray24, (java.lang.Object[]) charArray36);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder39 = equalsBuilder37.appendSuper(true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder42 = equalsBuilder39.append((byte) 100, (byte) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder39.appendSuper(false);
        java.lang.Object obj45 = null;
        float[] floatArray48 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray48);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray48);
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray48, 0.0f);
        java.lang.Float[] floatArray53 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        java.lang.Float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray53);
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray54, (float) 'a');
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray52, floatArray56);
        float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray52, (float) 1);
        float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray52, (float) 2);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder62 = equalsBuilder39.append(obj45, (java.lang.Object) 2);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder65 = equalsBuilder39.append((long) 1, (long) (short) 1);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertNotNull(equalsBuilder39);
        org.junit.Assert.assertNotNull(equalsBuilder42);
        org.junit.Assert.assertNotNull(equalsBuilder44);
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[1.0, -1.0]");
        org.junit.Assert.assertNotNull(equalsBuilder62);
        org.junit.Assert.assertNotNull(equalsBuilder65);
    }

    @Test
    public void test08952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08952");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        short[] shortArray9 = new short[] {};
        java.lang.Short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (short) -1);
        java.lang.Short[] shortArray15 = new java.lang.Short[] { (short) 1 };
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray15, (short) (byte) 100);
        short[] shortArray20 = new short[] {};
        java.lang.Short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray20);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray19, shortArray20);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray24);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24, (short) (byte) 100);
        short[] shortArray29 = new short[] {};
        java.lang.Short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray29);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray28, shortArray29);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray29);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray32, (short) (byte) 10);
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray32);
        short[] shortArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray35);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray35, (short) 0);
        java.lang.Short[] shortArray40 = new java.lang.Short[] { (short) 1 };
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray40);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray40);
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray40, (short) (byte) 100);
        short[] shortArray45 = new short[] {};
        java.lang.Short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray45);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray44, shortArray45);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(shortArray47, (short) 100);
        short[] shortArray50 = null;
        java.lang.Short[] shortArray52 = new java.lang.Short[] { (short) 1 };
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray52);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray52);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray52, (short) (byte) 100);
        short[] shortArray57 = new short[] {};
        java.lang.Short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray57);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray56, shortArray57);
        java.lang.Short[] shortArray61 = new java.lang.Short[] { (short) 1 };
        short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray61);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray61);
        short[] shortArray65 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray61, (short) (byte) 100);
        short[] shortArray66 = new short[] {};
        java.lang.Short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray66);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray65, shortArray66);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray59, shortArray66);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray50, shortArray69);
        java.lang.Short[] shortArray72 = new java.lang.Short[] { (short) 1 };
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray72);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray73, (short) 10);
        int int78 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray73, (short) 100, (int) (byte) 1);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray73);
        short[] shortArray80 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray50, shortArray73);
        boolean boolean81 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray47, shortArray50);
        short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray35, shortArray47);
        short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.clone(shortArray35);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[1]");
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[1]");
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[1]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1]");
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[1]");
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[]");
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[1]");
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[1]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[1]");
        org.junit.Assert.assertNotNull(shortArray72);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[1]");
        org.junit.Assert.assertNotNull(shortArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray80), "[1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[1]");
    }

    @Test
    public void test08953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08953");
        java.lang.Character[] charArray5 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, 'a');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#');
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.remove(charArray9, 2);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray11, 'a');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray11);
        java.lang.Character[] charArray21 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21, ' ');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray23);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, ' ', 5);
        java.lang.Character[] charArray34 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray34, ' ');
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray34, ' ');
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray23, charArray38);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.clone(charArray23);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.addAll(charArray15, charArray23);
        java.lang.Byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray42);
        double[] doubleArray47 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray47);
        double[] doubleArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray48);
        java.lang.Double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray48);
        boolean boolean52 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) byteArray43, (java.lang.Object) doubleArray50, true);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) charArray15, (java.lang.Object) doubleArray50);
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.remove(charArray15, (int) (byte) 0);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.contains(charArray55, '#');
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "a  ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "a  ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[a,  ,  , #, #]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "a  ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "a  ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[a,  ,  , #, #]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a  ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a  ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a,  ,  , #, #]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a  ##4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a  ##4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a,  ,  , #, #, 4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "  ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "  ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ ,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test08954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08954");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.Set<java.lang.Object> objSet33 = objMap31.keySet();
        java.util.Set<java.lang.Object> objSet34 = objMap31.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = objMap31.entrySet();
        boolean boolean36 = objEntrySet35.isEmpty();
        int int37 = objEntrySet35.size();
        java.util.Spliterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySpliterator38 = objEntrySet35.spliterator();
        objEntrySet35.clear();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor40 = objEntrySet35.iterator();
        java.lang.Float[] floatArray44 = new java.lang.Float[] { 10.0f, 0.0f, 0.0f };
        java.lang.Float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray44);
        java.lang.Float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray45);
        float[] floatArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray45);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray47, (float) 2, 1);
        boolean boolean51 = objEntrySet35.equals((java.lang.Object) 2);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(objSet33);
        org.junit.Assert.assertNotNull(objSet34);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objEntrySpliterator38);
        org.junit.Assert.assertNotNull(objEntryItor40);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertNotNull(floatArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[10.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08955");
        int[][] intArray0 = new int[][] {};
        int[][] intArray1 = org.apache.commons.lang3.ArrayUtils.toArray(intArray0);
        int[] intArray6 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.clone(intArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray7);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, (int) ' ', (int) (byte) 100);
        int[][] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray0, intArray7);
        int[] intArray16 = new int[] { '#', (byte) -1, (short) 0 };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.subarray(intArray16, (int) '#', (int) (short) 0);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray16, (int) (byte) 1);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.clone(intArray16);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(intArray22, (-1));
        int[] intArray29 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.clone(intArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray22, intArray29);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray29, (int) (byte) -1, (int) 'a');
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.addAll(intArray7, intArray29);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.add(intArray35, 5, (int) (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray38);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[35, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[100, -1, -1, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, -1, -1, 100, 100, 0, -1, -1, 100]");
    }

    @Test
    public void test08956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08956");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        double[] doubleArray36 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray36);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.add(doubleArray36, (double) (byte) 10);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray39, (double) 10.0f);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 1L);
        java.lang.Object obj44 = objMap31.get((java.lang.Object) 1L);
        java.lang.Byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray45);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(byteArray46, (byte) 10);
        boolean boolean49 = objMap31.containsValue((java.lang.Object) (byte) 10);
        int[] intArray54 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.clone(intArray54);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray55);
        java.lang.Integer[] intArray57 = org.apache.commons.lang3.ArrayUtils.toObject(intArray55);
        boolean boolean58 = objMap31.containsValue((java.lang.Object) intArray55);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray55);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray55, 10);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray55, 0, 3);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
    }

    @Test
    public void test08957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08957");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray10, false);
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false);
        boolean[] booleanArray20 = new boolean[] { false, false, false, false };
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        java.lang.Boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray20);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray20);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray20);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray20);
        boolean[] booleanArray33 = new boolean[] { false, false, false, false, true };
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray20, booleanArray33);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, (int) ' ');
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray33);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray33, (int) (byte) 0);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray33);
        java.lang.Short[] shortArray43 = new java.lang.Short[] { (short) 1 };
        short[] shortArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray43);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray43);
        short[] shortArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray43, (short) (byte) 100);
        short[] shortArray48 = new short[] {};
        java.lang.Short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray48);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray47, shortArray48);
        java.lang.Short[] shortArray52 = new java.lang.Short[] { (short) 1 };
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray52);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray52);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray52, (short) -1);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray48, shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray48);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(shortArray48);
        java.lang.Short[] shortArray61 = new java.lang.Short[] { (short) 1 };
        short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray61);
        short[] shortArray63 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray61);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.contains(shortArray63, (short) (byte) -1);
        java.lang.Short[] shortArray66 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray63);
        java.lang.Object obj67 = null;
        java.lang.Character[] charArray73 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray75 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray73, ' ');
        char[] charArray76 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray75);
        java.lang.String[] strArray77 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isNotEmpty((java.lang.Comparable<java.lang.String>[]) strArray77);
        java.lang.String[] strArray79 = org.apache.commons.lang3.ArrayUtils.clone(strArray77);
        java.lang.String[] strArray80 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray79);
        java.lang.String[] strArray84 = new java.lang.String[] { "{}", "", "{}" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        boolean boolean87 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) charArray76, (java.lang.Object) strArray80, (java.util.Collection<java.lang.String>) strList85);
        boolean boolean88 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) shortArray63, obj67, (java.util.Collection<java.lang.String>) strList85);
        boolean boolean89 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray41, (java.lang.Object) boolean59, (java.util.Collection<java.lang.String>) strList85);
        boolean[] booleanArray91 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray41, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, false, false, false, false, false, true]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1]");
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[1]");
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[1]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1]");
        org.junit.Assert.assertNotNull(shortArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray63), "[1]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(booleanArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray91), "[false, false, false, false]");
    }

    @Test
    public void test08958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08958");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray9 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray12 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder13 = equalsBuilder0.append(doubleArray9, doubleArray12);
        java.lang.Boolean[][] booleanArray14 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray42 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray43 = new java.lang.Boolean[][] { booleanArray21, booleanArray28, booleanArray35, booleanArray42 };
        java.lang.Boolean[][] booleanArray44 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray14, booleanArray43);
        java.lang.Boolean[][] booleanArray45 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray52 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray59 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray66 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray73 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray74 = new java.lang.Boolean[][] { booleanArray52, booleanArray59, booleanArray66, booleanArray73 };
        java.lang.Boolean[][] booleanArray75 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray45, booleanArray74);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder76 = equalsBuilder0.append((java.lang.Object[]) booleanArray43, (java.lang.Object[]) booleanArray45);
        equalsBuilder0.reset();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder80 = equalsBuilder0.append((double) '4', (double) 2);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder83 = equalsBuilder80.append(10, 5);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder86 = equalsBuilder80.append(false, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder89 = equalsBuilder80.append('4', 'a');
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(equalsBuilder13);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertNotNull(equalsBuilder76);
        org.junit.Assert.assertNotNull(equalsBuilder80);
        org.junit.Assert.assertNotNull(equalsBuilder83);
        org.junit.Assert.assertNotNull(equalsBuilder86);
        org.junit.Assert.assertNotNull(equalsBuilder89);
    }

    @Test
    public void test08959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08959");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray3);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray3);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder9 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder12 = equalsBuilder9.append(true, true);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 10, (int) (short) -1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 1, (int) ' ');
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray30, (byte) 10);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray16, byteArray30);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY;
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.add(byteArray35, (int) (byte) 0, (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder39 = equalsBuilder9.append(byteArray16, byteArray35);
        java.lang.Byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray35);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray35);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, 100, (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 10]");
        org.junit.Assert.assertNotNull(equalsBuilder12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 10, 1, 10, 10, 10, 10, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100]");
        org.junit.Assert.assertNotNull(equalsBuilder39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 10]");
    }

    @Test
    public void test08960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08960");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean2 = objEntryList0.remove((java.lang.Object) byteArray1);
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray9 = new java.lang.reflect.Type[][] { typeArray3, typeArray4, typeArray5, typeArray6, typeArray7, typeArray8 };
        java.lang.reflect.Type[][] typeArray10 = objEntryList0.toArray(typeArray9);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList11 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Object[] objArray12 = objEntryList11.toArray();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList13 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean15 = objEntryList13.remove((java.lang.Object) byteArray14);
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry16 = null;
        boolean boolean17 = objEntryList13.add(objEntry16);
        boolean boolean18 = objEntryList11.addAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList13);
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList19 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean21 = objEntryList19.remove((java.lang.Object) byteArray20);
        boolean boolean22 = objEntryList13.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList19);
        java.lang.Boolean[][] booleanArray23 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray30 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray37 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray44 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray51 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray52 = new java.lang.Boolean[][] { booleanArray30, booleanArray37, booleanArray44, booleanArray51 };
        java.lang.Boolean[][] booleanArray53 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray52);
        java.util.Map<java.lang.Object, java.lang.Object> objMap54 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray23);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet55 = objMap54.entrySet();
        objMap54.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = objMap54.entrySet();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream58 = objEntrySet57.parallelStream();
        boolean boolean59 = objEntryList19.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet57);
        boolean boolean60 = objEntryList0.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList19);
        java.util.Spliterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySpliterator61 = objEntryList19.spliterator();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry62 = null;
        boolean boolean63 = objEntryList19.add(objEntry62);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor64 = objEntryList19.iterator();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(objMap54);
        org.junit.Assert.assertNotNull(objEntrySet55);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertNotNull(objEntryStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objEntrySpliterator61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objEntryItor64);
    }

    @Test
    public void test08961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08961");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        boolean[] booleanArray14 = new boolean[] { false, false, false, false };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray14);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20);
        java.lang.Boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray21);
        boolean[] booleanArray28 = new boolean[] { false, false, false, false };
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray28);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray28, false);
        java.lang.Boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray28);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray28);
        java.lang.Boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray28);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray34);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray34, true);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray37);
        boolean[] booleanArray43 = new boolean[] { false, false, false, false };
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray43);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray43, false);
        java.lang.Boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray43);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray43);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray43);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray43);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray37, booleanArray43);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray43);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray43, true);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray54, true, 2);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray54, (int) (byte) -1, 0);
        boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray60);
        boolean[] booleanArray63 = org.apache.commons.lang3.ArrayUtils.add(booleanArray60, false);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray63, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray63), "[false]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test08962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08962");
        short[] shortArray0 = new short[] {};
        java.lang.Short[] shortArray1 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray0);
        short[] shortArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) 1);
        java.lang.Short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray1);
        java.lang.Short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray4);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray4, (short) (byte) 100);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray4);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.remove(shortArray8, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[]");
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[]");
    }

    @Test
    public void test08963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08963");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        double[] doubleArray36 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray36);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.add(doubleArray36, (double) (byte) 10);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray39, (double) 10.0f);
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) 1L);
        java.lang.Object obj44 = objMap31.get((java.lang.Object) 1L);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = objMap31.entrySet();
        java.lang.Object obj46 = null;
        java.lang.Object obj47 = objMap31.remove(obj46);
        boolean boolean48 = objMap31.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = objMap31.entrySet();
        java.lang.Object obj50 = null;
        java.lang.Object obj51 = objMap31.remove(obj50);
        java.lang.Boolean[][] booleanArray52 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray59 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray66 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray73 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray80 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray81 = new java.lang.Boolean[][] { booleanArray59, booleanArray66, booleanArray73, booleanArray80 };
        java.lang.Boolean[][] booleanArray82 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray52, booleanArray81);
        java.util.Map<java.lang.Object, java.lang.Object> objMap83 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray52);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet84 = objMap83.entrySet();
        objMap83.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet86 = objMap83.entrySet();
        objMap83.clear();
        objMap31.putAll(objMap83);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objEntrySet49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertNotNull(booleanArray73);
        org.junit.Assert.assertNotNull(booleanArray80);
        org.junit.Assert.assertNotNull(booleanArray81);
        org.junit.Assert.assertNotNull(booleanArray82);
        org.junit.Assert.assertNotNull(objMap83);
        org.junit.Assert.assertNotNull(objEntrySet84);
        org.junit.Assert.assertNotNull(objEntrySet86);
    }

    @Test
    public void test08964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08964");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray6, (double) 10.0f);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray6);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, (double) 1.0f);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray9);
        double[] doubleArray18 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray18);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray18);
        java.lang.Object obj21 = null;
        boolean boolean23 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) doubleArray20, obj21, false);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray20, (double) 3);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray25);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08965");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = objMap31.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList33 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean35 = objEntryList33.remove((java.lang.Object) byteArray34);
        boolean boolean36 = objEntrySet32.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList33);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor37 = objEntrySet32.iterator();
        java.lang.Object[] objArray38 = objEntrySet32.toArray();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream39 = objEntrySet32.parallelStream();
        int int40 = objEntrySet32.size();
        objEntrySet32.clear();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objEntryItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objEntryStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test08966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08966");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray5, (short) 100);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) -1);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
    }

    @Test
    public void test08967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08967");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test08968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08968");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append(true, true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder6 = equalsBuilder3.append((float) (short) 100, (float) (short) 0);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder9 = equalsBuilder3.append((short) 1, (short) (byte) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder12 = equalsBuilder9.append((double) (-1.0f), (double) (byte) 100);
        boolean boolean13 = equalsBuilder9.isEquals();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList14 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean16 = objEntryList14.remove((java.lang.Object) byteArray15);
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry17 = null;
        boolean boolean18 = objEntryList14.add(objEntry17);
        java.lang.Object[] objArray19 = objEntryList14.toArray();
        int[] intArray24 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.clone(intArray24);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray24);
        boolean boolean27 = objEntryList14.equals((java.lang.Object) intArray26);
        java.lang.Integer[] intArray32 = new java.lang.Integer[] { 4, 4, (-1), 0 };
        java.lang.Integer[] intArray33 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray32);
        boolean[] booleanArray38 = new boolean[] { false, false, false, false };
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray38);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray38, false);
        java.lang.Boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray38);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray33, (java.lang.Object) booleanArray42, (int) '#');
        int[] intArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray33);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.add(intArray45, 3, (int) (byte) 100);
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.clone(intArray48);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray49);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.clone(intArray49);
        int[] intArray52 = org.apache.commons.lang3.ArrayUtils.clone(intArray51);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder9.append(intArray26, intArray52);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(equalsBuilder6);
        org.junit.Assert.assertNotNull(equalsBuilder9);
        org.junit.Assert.assertNotNull(equalsBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[null]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[4, 4, -1, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[4, 4, -1, 100, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 100, -1, 4, 4]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 100, -1, 4, 4]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 100, -1, 4, 4]");
        org.junit.Assert.assertNotNull(equalsBuilder53);
    }

    @Test
    public void test08969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08969");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        java.lang.Character[] charArray15 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray18);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray20, '4');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray24 = org.apache.commons.lang3.ArrayUtils.remove(charArray22, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, 4, a, 4]");
    }

    @Test
    public void test08970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08970");
        double[] doubleArray5 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray5);
        double[] doubleArray10 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray10);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.add(doubleArray10, (double) (byte) 10);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.add(doubleArray10, 0.0d);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) 100.0f);
        java.lang.Double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray16);
        java.lang.Double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 10.0, -1.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test08971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08971");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        boolean[] booleanArray9 = new boolean[] { false, false, false, false };
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray9, false);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.add(booleanArray9, true);
        double[] doubleArray20 = new double[] { 0L, 10L, 10.0d, (short) -1, 10L };
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray20);
        boolean boolean22 = org.apache.commons.lang3.builder.EqualsBuilder.reflectionEquals((java.lang.Object) booleanArray14, (java.lang.Object) doubleArray20);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray14);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray14, false, 10);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray14);
        boolean[] booleanArray33 = new boolean[] { false, false, false, false };
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray33);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray33, false);
        java.lang.Boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray33);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray33);
        java.lang.Boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray33);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray39);
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray39, true);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray42);
        boolean[] booleanArray48 = new boolean[] { false, false, false, false };
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray48);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray48, false);
        java.lang.Boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray48);
        boolean[] booleanArray53 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray48);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray48);
        boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray48);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray42, booleanArray48);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray48);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray48, true);
        boolean[] booleanArray64 = new boolean[] { false, false, false, false };
        boolean[] booleanArray65 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray64);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray64, false);
        boolean[] booleanArray69 = org.apache.commons.lang3.ArrayUtils.add(booleanArray64, true);
        boolean[] booleanArray74 = new boolean[] { false, false, false, false };
        boolean[] booleanArray75 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray74);
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray74, false);
        java.lang.Boolean[] booleanArray78 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray74);
        boolean[] booleanArray79 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray64, booleanArray74);
        boolean[] booleanArray84 = new boolean[] { false, true, true, true };
        boolean[] booleanArray85 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray84);
        int int88 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray85, true, (int) (short) 100);
        boolean[] booleanArray89 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray64, booleanArray85);
        boolean[] booleanArray91 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray85, 1);
        boolean[] booleanArray92 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray59, booleanArray85);
        boolean[] booleanArray95 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray85, 0, (int) (short) 1);
        boolean[] booleanArray97 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray95, true);
        boolean[] booleanArray98 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray14, booleanArray97);
        boolean boolean99 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false, false, false, false]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0, 10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray53), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray55), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray64), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray65), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray69), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray75), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertNotNull(booleanArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray79), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray84), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray85), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(booleanArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray89), "[false, false, false, false, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray91), "[false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray92), "[false, false, false, false, false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray95), "[false]");
        org.junit.Assert.assertNotNull(booleanArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray97), "[false]");
        org.junit.Assert.assertNotNull(booleanArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray98), "[true, false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test08972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08972");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Object[] objArray1 = objEntryList0.toArray();
        int int2 = objEntryList0.size();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList3 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor4 = objEntryList3.iterator();
        java.util.Map.Entry<java.lang.Object, java.lang.Object> objEntry5 = null;
        boolean boolean6 = objEntryList3.add(objEntry5);
        java.lang.Boolean[][] booleanArray7 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray35 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray36 = new java.lang.Boolean[][] { booleanArray14, booleanArray21, booleanArray28, booleanArray35 };
        java.lang.Boolean[][] booleanArray37 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray36);
        java.util.Map<java.lang.Object, java.lang.Object> objMap38 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray7);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet39 = objMap38.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList40 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean42 = objEntryList40.remove((java.lang.Object) byteArray41);
        boolean boolean43 = objEntrySet39.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList40);
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor44 = objEntrySet39.iterator();
        boolean boolean45 = objEntryList3.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet39);
        int int46 = objEntryList3.size();
        boolean boolean47 = objEntryList0.containsAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList3);
        java.lang.Object[] objArray48 = objEntryList3.toArray();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(objEntryItor4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertNotNull(booleanArray36);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(objMap38);
        org.junit.Assert.assertNotNull(objEntrySet39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEntryItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[null]");
    }

    @Test
    public void test08973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08973");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) -1 };
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) -1 };
        byte[][] byteArray6 = new byte[][] { byteArray2, byteArray5 };
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) -1 };
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) -1 };
        byte[][] byteArray13 = new byte[][] { byteArray9, byteArray12 };
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) -1 };
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) -1 };
        byte[][] byteArray20 = new byte[][] { byteArray16, byteArray19 };
        byte[][][] byteArray21 = new byte[][][] { byteArray6, byteArray13, byteArray20 };
        java.lang.Object obj22 = null;
        byte[][][] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray21, obj22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) byteArray23);
        byte[][][] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (short) 100, 5);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray23);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test08974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08974");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) 1 };
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray10);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) -1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray6, shortArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(shortArray6, (short) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray6, 1, (short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08975");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray4);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7);
        long[] longArray15 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.clone(longArray15);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray16);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.clone(longArray16);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.add(longArray18, (long) (short) 0);
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray18, (long) 10);
        long[] longArray23 = null;
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray24);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.add(longArray24, (int) (byte) 0, (long) (short) 100);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray22, longArray28);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray22);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray7, (java.lang.Object) longArray30, (int) (byte) -1);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray30);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[32, 100, 10, 10, 1, 0]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[32, 100, 10, 10, 1, 10]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[100]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[32, 100, 10, 10, 1, 10, 100]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[32, 100, 10, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test08976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08976");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        long[] longArray25 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.clone(longArray25);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray26, longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        java.lang.Long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        long[] longArray49 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray42, longArray50);
        java.lang.Long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toObject(longArray50);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder53 = equalsBuilder19.append(longArray26, longArray50);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray26);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) 'a');
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(longArray26);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray26, (long) (short) 1);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray26);
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertNotNull(equalsBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[32, 100, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test08977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08977");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, true);
        boolean[] booleanArray14 = new boolean[] { false, false, false, false };
        boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray14, false);
        java.lang.Boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray14);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray14);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, false, false]");
    }

    @Test
    public void test08978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08978");
        char[] charArray0 = null;
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder1 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder4 = equalsBuilder1.append((double) (byte) 1, (double) (byte) 0);
        boolean boolean5 = equalsBuilder4.isEquals();
        java.lang.String[] strArray6 = new java.lang.String[] {};
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.addAll(strArray6, strArray10);
        java.lang.String[] strArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray6);
        java.lang.Character[] charArray18 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray18, ' ');
        java.lang.Character[] charArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray18);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder4.append((java.lang.Object[]) strArray6, (java.lang.Object[]) charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray21);
        java.lang.Character[] charArray24 = org.apache.commons.lang3.ArrayUtils.toObject(charArray23);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray24);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray25, '4', (int) (short) 10);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray25, 'a', 5);
        java.lang.Character[] charArray37 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray37, 'a');
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.add(charArray39, '#');
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.remove(charArray41, 2);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray43);
        char[] charArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray44);
        java.lang.Character[] charArray51 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, 'a');
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray51, ' ');
        char[] charArray56 = null;
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.addAll(charArray55, charArray56);
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.addAll(charArray44, charArray57);
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray57);
        java.lang.Character[] charArray65 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray65, ' ');
        char[] charArray68 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray67);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray67);
        java.lang.Character[] charArray75 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray75, ' ');
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray77);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray67, charArray77);
        java.lang.Character[] charArray85 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray87 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray85, ' ');
        char[] charArray88 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray87);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray88);
        boolean boolean90 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray67, charArray88);
        char[] charArray91 = org.apache.commons.lang3.ArrayUtils.clone(charArray67);
        boolean boolean92 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray59, charArray67);
        boolean boolean93 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray25, charArray59);
        char[] charArray94 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray59);
        org.junit.Assert.assertNotNull(equalsBuilder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a,  , a,  , #, #]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "a  ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "a  ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a,  ,  , #, #]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "a  ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "a  ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a,  ,  , #, #]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a  ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a  ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  ,  , #, #]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "a  ##a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "a  ##a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a,  ,  , #, #, a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "4a44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "4a44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[4, a, 4, 4,  ]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray94), "[a,  , a,  , #]");
    }

    @Test
    public void test08979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08979");
        float[] floatArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) 7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test08980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08980");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test08981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08981");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 10, (int) (short) -1);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray3, (byte) 10);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray3, (byte) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray3, (byte) 100);
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 10 };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray16, (byte) 10, (int) (short) -1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 1, (int) ' ');
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray3, byteArray16);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 10, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test08982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08982");
        java.lang.Byte[][][] byteArray0 = new java.lang.Byte[][][] {};
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList1 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.util.Iterator<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryItor2 = objEntryList1.iterator();
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray8 = org.apache.commons.lang3.ArrayUtils.addAll(strArray3, strArray7);
        java.lang.Comparable<java.lang.String>[] strComparableArray9 = objEntryList1.toArray((java.lang.Comparable<java.lang.String>[]) strArray3);
        java.lang.Object[] objArray10 = objEntryList1.toArray();
        java.lang.Boolean[][] booleanArray11 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray18 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray25 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray32 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray39 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray40 = new java.lang.Boolean[][] { booleanArray18, booleanArray25, booleanArray32, booleanArray39 };
        java.lang.Boolean[][] booleanArray41 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        java.util.Map<java.lang.Object, java.lang.Object> objMap42 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray11);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = objMap42.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList44 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean46 = objEntryList44.remove((java.lang.Object) byteArray45);
        boolean boolean47 = objEntrySet43.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList44);
        java.lang.Boolean[][] booleanArray48 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray55 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray62 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray69 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray76 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray77 = new java.lang.Boolean[][] { booleanArray55, booleanArray62, booleanArray69, booleanArray76 };
        java.lang.Boolean[][] booleanArray78 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray48, booleanArray77);
        java.util.Map<java.lang.Object, java.lang.Object> objMap79 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray48);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet80 = objMap79.entrySet();
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList81 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray82 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean83 = objEntryList81.remove((java.lang.Object) byteArray82);
        boolean boolean84 = objEntrySet80.retainAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList81);
        boolean boolean85 = objEntrySet43.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntryList81);
        boolean boolean86 = objEntryList1.removeAll((java.util.Collection<java.util.Map.Entry<java.lang.Object, java.lang.Object>>) objEntrySet43);
        java.lang.Byte[][] byteArray87 = new java.lang.Byte[][] {};
        java.lang.Byte[][] byteArray88 = objEntrySet43.toArray(byteArray87);
        java.lang.Byte[][][] byteArray89 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Byte[][][] byteArray91 = org.apache.commons.lang3.ArrayUtils.remove(byteArray0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(objEntryItor2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strComparableArray9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(objMap42);
        org.junit.Assert.assertNotNull(objEntrySet43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertNotNull(booleanArray69);
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertNotNull(objMap79);
        org.junit.Assert.assertNotNull(objEntrySet80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertNotNull(byteArray89);
    }

    @Test
    public void test08983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08983");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray3, (double) 100, 0, (double) (short) 10);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 100L, (double) 8);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray3);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 8, (double) 4);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test08984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08984");
        int[] intArray4 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray4);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        java.lang.Object[] objArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) intArray7);
        java.lang.Integer[] intArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray11);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[100, -1, -1, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, -1, -1, 0]");
    }

    @Test
    public void test08985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08985");
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder0 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder3 = equalsBuilder0.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray8 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (double) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0L, 0);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray8);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder19 = equalsBuilder0.append(doubleArray4, doubleArray8);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder22 = equalsBuilder0.append((long) ' ', (long) (short) 10);
        java.lang.Short[] shortArray24 = new java.lang.Short[] { (short) 1 };
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray24);
        java.lang.Character[] charArray33 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray33, ' ');
        java.lang.Character[] charArray36 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray33);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder37 = equalsBuilder22.append((java.lang.Object[]) shortArray24, (java.lang.Object[]) charArray36);
        boolean boolean38 = equalsBuilder22.isEquals();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder41 = equalsBuilder22.append((short) 100, (short) (byte) 100);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder44 = equalsBuilder41.append('a', 'a');
        org.junit.Assert.assertNotNull(equalsBuilder3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder19);
        org.junit.Assert.assertNotNull(equalsBuilder22);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(equalsBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(equalsBuilder41);
        org.junit.Assert.assertNotNull(equalsBuilder44);
    }

    @Test
    public void test08986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08986");
        int[] intArray3 = new int[] { '#', (byte) -1, (short) 0 };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (int) '#', (int) (short) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray3, (int) (byte) 1);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray3);
        int[] intArray14 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.clone(intArray14);
        int[] intArray17 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) 'a');
        int[] intArray22 = new int[] { 100, (short) -1, (short) -1, (short) 0 };
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.clone(intArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray17, intArray23);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray17);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray17);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.addAll(intArray9, intArray27);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.subarray(intArray28, (int) (short) 100, 7);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.add(intArray31, 0, 8);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[35, -1, 0]");
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, -1, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[35, -1, 0, 100, -1, -1, 0, 97]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[8]");
    }

    @Test
    public void test08987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08987");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, false);
        java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray13);
    }

    @Test
    public void test08988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08988");
        java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 1 };
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray1);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1, (short) (byte) 100);
        short[] shortArray6 = new short[] {};
        java.lang.Short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray5, shortArray6);
        java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) 1 };
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray10);
        short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) (byte) 100);
        short[] shortArray15 = new short[] {};
        java.lang.Short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray15);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray14, shortArray15);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray18, (short) (byte) 10);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray20, 2, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray23, (int) (short) -1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.add(shortArray23, 3, (short) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[]");
    }

    @Test
    public void test08989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08989");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        java.lang.Double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray4);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Boolean[][] booleanArray10 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray24 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray31 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray38 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray39 = new java.lang.Boolean[][] { booleanArray17, booleanArray24, booleanArray31, booleanArray38 };
        java.lang.Boolean[][] booleanArray40 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray39);
        java.util.Map<java.lang.Object, java.lang.Object> objMap41 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray10);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = objMap41.entrySet();
        java.util.Set<java.lang.Object> objSet43 = objMap41.keySet();
        java.util.Set<java.lang.Object> objSet44 = objMap41.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = objMap41.entrySet();
        int int46 = objMap41.size();
        java.lang.Short[] shortArray48 = new java.lang.Short[] { (short) 1 };
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray48);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray48);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray48, (short) (byte) 100);
        short[] shortArray53 = new short[] {};
        java.lang.Short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray53);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray52, shortArray53);
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray53, (short) (byte) 10, (int) (byte) 10);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(shortArray53);
        int[] intArray60 = new int[] {};
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.add(intArray60, 0, 100);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(intArray63);
        int[] intArray65 = org.apache.commons.lang3.ArrayUtils.clone(intArray63);
        java.lang.String str67 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray65, "{32,100,10,10,1}");
        boolean boolean68 = objMap41.remove((java.lang.Object) shortArray53, (java.lang.Object) intArray65);
        java.lang.Object obj69 = null;
        java.lang.Object obj70 = null;
        java.lang.Object obj71 = objMap41.putIfAbsent(obj69, obj70);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet72 = objMap41.entrySet();
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray9, (java.lang.Object) objMap41);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertNotNull(objMap41);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNotNull(objSet43);
        org.junit.Assert.assertNotNull(objSet44);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[1]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[]");
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[100]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "{100}" + "'", str67, "{100}");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(objEntrySet72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test08990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08990");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 100.0d, 1.0d, 10.0d, (-1.0d), 100.0d };
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray9);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (short) 100, (double) 10);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (byte) -1, (double) 5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test08991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08991");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, (double) (byte) 10);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) (short) 0, (int) ' ', (double) 1L);
        double[] doubleArray14 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, (double) (byte) 10);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) 0L, 0);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, (double) 4);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder27 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder27.append((double) (byte) 1, (double) (byte) 0);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray35 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray35);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.add(doubleArray35, (double) (byte) 10);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray35, (double) 0L, 0);
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray35);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray35, (double) (byte) 0, (int) (short) -1);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder46 = equalsBuilder27.append(doubleArray31, doubleArray35);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) 'a', (int) '4');
        double[] doubleArray50 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        double[] doubleArray53 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, 0, (double) 100);
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray14);
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray3, doubleArray14);
        int int57 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 0.0d);
        int int60 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 0.0f, (int) ' ');
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray14);
        double[] doubleArray64 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray14, 11, (int) (byte) -1);
        java.lang.Double[] doubleArray65 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 10.0, 100.0, 4.0]");
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(equalsBuilder46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 10.0, 100.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray65);
    }

    @Test
    public void test08992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08992");
        float[] floatArray2 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray2);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray3);
        java.lang.Object[] objArray5 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.Object[]) floatArray3);
        java.lang.Byte[] byteArray12 = new java.lang.Byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 10, (byte) 100, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12);
        java.lang.Object[] objArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) byteArray12);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) objArray5, (java.lang.Object) byteArray12);
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray12);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray12);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray21);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[-1.0, 1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 100, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 100, 10, -1, 1]");
    }

    @Test
    public void test08993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08993");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 100.0d, 1.0d, 10.0d, (-1.0d), 100.0d };
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(doubleArray6);
        java.lang.Object[] objArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[-1.0, 100.0, 1.0, 10.0, -1.0, 100.0]");
    }

    @Test
    public void test08994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08994");
        float[] floatArray3 = new float[] { (short) 100, 0, 10 };
        float[] floatArray6 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) 0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, 10.0f);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray6);
        float[] floatArray15 = new float[] { (-1), (short) 1 };
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(floatArray15, (float) 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, 10.0f);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray15);
        java.lang.Float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray15);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) floatArray22);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22, (float) (short) 100);
        java.lang.Float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray22);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray22, (float) 1L);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.remove(floatArray28, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[100.0, 0.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[100.0, 0.0, 10.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[-1.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0, 1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0, 1.0]");
    }

    @Test
    public void test08995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08995");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] { "", "", "hi!" };
        java.lang.String[] strArray5 = org.apache.commons.lang3.ArrayUtils.addAll(strArray0, strArray4);
        java.lang.String[] strArray6 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray0);
        java.lang.Character[] charArray12 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray12, ' ');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray12, '#');
        java.lang.Character[] charArray22 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray22);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray22, 'a');
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray16, charArray25);
        java.lang.Character[] charArray27 = org.apache.commons.lang3.ArrayUtils.toObject(charArray16);
        java.lang.Object[] objArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) charArray27);
        java.lang.Class<?>[] wildcardClassArray29 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray30 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.reflect.GenericDeclaration[]) wildcardClassArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(objArray28, (java.lang.Object) genericDeclarationArray30);
        java.util.Map<java.lang.Object, java.lang.Object> objMap32 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) genericDeclarationArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray6, (java.lang.Object) objMap32);
        java.lang.String[] strArray34 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray6);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(wildcardClassArray29);
        org.junit.Assert.assertNotNull(genericDeclarationArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objMap32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strArray34);
    }

    @Test
    public void test08996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08996");
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', '4', '4', 'a', '4' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, ' ');
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5, '#');
        java.lang.Character[] charArray15 = new java.lang.Character[] { '4', '#', '#', ' ', 'a' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray9, charArray18);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9);
        java.lang.Object[] objArray21 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) charArray20);
        java.lang.Class<?>[] wildcardClassArray22 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray23 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.reflect.GenericDeclaration[]) wildcardClassArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(objArray21, (java.lang.Object) genericDeclarationArray23);
        java.util.Map<java.lang.Object, java.lang.Object> objMap25 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) genericDeclarationArray23);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder27 = new org.apache.commons.lang3.builder.EqualsBuilder();
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder30 = equalsBuilder27.append((double) (byte) 1, (double) (byte) 0);
        long[] longArray36 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        long[] longArray43 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.clone(longArray43);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder45 = equalsBuilder30.append(longArray37, longArray43);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder47 = equalsBuilder30.appendSuper(true);
        org.apache.commons.lang3.builder.EqualsBuilder equalsBuilder50 = equalsBuilder30.append((float) 10L, (float) (short) 10);
        java.lang.Object obj51 = objMap25.replace((java.lang.Object) 0, (java.lang.Object) 10L);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet52 = objMap25.entrySet();
        int int53 = objMap25.size();
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 44a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4## a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, #, #,  , a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[ , 4, 4, a, 4]");
        org.junit.Assert.assertNotNull(wildcardClassArray22);
        org.junit.Assert.assertNotNull(genericDeclarationArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objMap25);
        org.junit.Assert.assertNotNull(equalsBuilder30);
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(equalsBuilder45);
        org.junit.Assert.assertNotNull(equalsBuilder47);
        org.junit.Assert.assertNotNull(equalsBuilder50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objEntrySet52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test08997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08997");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(typeArray0);
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(typeArray0);
        java.lang.reflect.Type[][] typeArray3 = org.apache.commons.lang3.ArrayUtils.toArray(typeArray0);
        double[] doubleArray7 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray7);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.add(doubleArray7, (double) (byte) 10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray10, (double) 10.0f);
        double[] doubleArray16 = new double[] { 0, 10L, (short) 100 };
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray16);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.add(doubleArray16, (double) (byte) 10);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) 0L, 0);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) (byte) 0, (int) (short) -1);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray10, doubleArray16);
        long[] longArray33 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        java.lang.Long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toObject(longArray34);
        long[] longArray41 = new long[] { ' ', 100L, 10, (byte) 10, (short) 1 };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.clone(longArray41);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray34, longArray42);
        java.lang.Long[] longArray44 = org.apache.commons.lang3.ArrayUtils.toObject(longArray42);
        java.lang.Long[] longArray45 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray44);
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray16, (java.lang.Object) longArray45);
        long[] longArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray45);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Object[]) longArray45);
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray45);
        java.lang.Long[] longArray50 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray45);
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray45);
        java.lang.reflect.Type[][] typeArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(typeArray3, (java.lang.Object) longArray51);
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray51, (long) 8);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 10.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 10.0, 100.0, 10.0, 0.0, 10.0, 100.0]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[32, 100, 10, 10, 1]");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[32, 100, 10, 10, 1]");
    }

    @Test
    public void test08998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08998");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        java.lang.Character[] charArray44 = new java.lang.Character[] { 'a', ' ', 'a', ' ', '#' };
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray44, 'a');
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.add(charArray46, '#');
        boolean boolean49 = objMap31.equals((java.lang.Object) '#');
        java.util.Set<java.lang.Object> objSet50 = objMap31.keySet();
        objMap31.clear();
        int int52 = objMap31.size();
        java.util.Collection<java.lang.Object> objCollection53 = objMap31.values();
        int int54 = objMap31.size();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a,  , a,  , #]");
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "a a ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[a,  , a,  , #, #]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objSet50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test08999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08999");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray14 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray21 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[] booleanArray28 = new java.lang.Boolean[] { true, true, false, false, false, false };
        java.lang.Boolean[][] booleanArray29 = new java.lang.Boolean[][] { booleanArray7, booleanArray14, booleanArray21, booleanArray28 };
        java.lang.Boolean[][] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray29);
        java.util.Map<java.lang.Object, java.lang.Object> objMap31 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        java.lang.Short[] shortArray34 = new java.lang.Short[] { (short) 1 };
        short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray34, (short) 10);
        java.lang.Object obj38 = objMap31.replace((java.lang.Object) 2, (java.lang.Object) shortArray37);
        boolean[] booleanArray43 = new boolean[] { false, true, true, true };
        boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray43);
        boolean boolean45 = objMap31.containsKey((java.lang.Object) booleanArray43);
        boolean boolean46 = objMap31.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet47 = objMap31.entrySet();
        java.util.stream.Stream<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryStream48 = objEntrySet47.stream();
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray30);
        org.junit.Assert.assertNotNull(objMap31);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1]");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[false, true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objEntrySet47);
        org.junit.Assert.assertNotNull(objEntryStream48);
    }

    @Test
    public void test09000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test09000");
        java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntryList0 = new java.util.ArrayList<java.util.Map.Entry<java.lang.Object, java.lang.Object>>();
        java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
        boolean boolean2 = objEntryList0.remove((java.lang.Object) byteArray1);
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) byteArray1);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 100, 11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }
}


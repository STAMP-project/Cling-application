import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest28 {

    public static boolean debug = false;

    @Test
    public void test14001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14001");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayScript(locale3);
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale0.getDisplayScript(locale6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale6);
        calendar8.set(3, (int) (byte) -1, (-3600000), 0, 1645455690, 901);
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Calendar calendar17 = builder16.build();
        java.util.Calendar.Builder builder22 = builder16.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder27 = builder22.setTimeOfDay(901, 54092146, 59, 5);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("years");
        boolean boolean30 = timeZone29.observesDaylightTime();
        java.util.Calendar.Builder builder31 = builder27.setTimeZone(timeZone29);
        calendar8.setTimeZone(timeZone29);
        timeZone29.setRawOffset(54159477);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=54159477,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=-1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=-3600000,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=1645455690,SECOND=901,MILLISECOND=610,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test14002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14002");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.setFirstDayOfWeek(5);
        calendar0.setMinimalDaysInFirstWeek(54098460);
        int int8 = calendar0.getMinimum(0);
        java.util.Date date9 = calendar0.getTime();
        long long10 = calendar0.getTimeInMillis();
        calendar0.set(54161953, 985, 292278994, (int) '4', 32772);
        calendar0.set(365, (int) (byte) -1, 50586, 6, 11, 0);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology25 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.era();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = dateTimeField28.getDifference(1645455916865L, (long) 50598);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-46280915339355,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=54098460,ERA=1,YEAR=503,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=151,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=11,SECOND=0,MILLISECOND=645,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 21 15:08:35 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645456115645L + "'", long10 == 1645456115645L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test14003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14003");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(21125322, 21417, 78, 21206333);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21125322 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14004");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = mutableDateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        long long9 = dateTimeZone4.getMillisKeepLocal(dateTimeZone7, (long) 10);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, dateTimeZone4);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 10, dateTimeZone4);
        long long15 = dateTimeZone4.convertLocalToUTC((long) 19, false, (long) 32772);
        java.lang.String str16 = dateTimeZone4.getID();
        long long18 = dateTimeZone4.nextTransition((long) 50584);
        long long20 = dateTimeZone4.nextTransition(1645455775286L);
        int int22 = dateTimeZone4.getStandardOffset(2087103986793L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-108719981L) + "'", long15 == (-108719981L));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+30:12" + "'", str16, "+30:12");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 50584L + "'", long18 == 50584L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645455775286L + "'", long20 == 1645455775286L);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 108720000 + "'", int22 == 108720000);
    }

    @Test
    public void test14005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14005");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(20);
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = localTime11.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.LocalTime.Property property16 = localTime14.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = property16.addNoWrapToCopy(54121897);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test14006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14006");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.yearOfCentury();
        long long8 = dateTimeField5.addWrapField((long) 276, 50563683);
        org.joda.time.DurationField durationField9 = dateTimeField5.getLeapDurationField();
        int int11 = dateTimeField5.getMaximumValue((long) 75660000);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-536457599724L) + "'", long8 == (-536457599724L));
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 99 + "'", int11 == 99);
    }

    @Test
    public void test14007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14007");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate4 = localDate1.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        int int6 = property5.getMaximumValueOverall();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.minuteOfDay();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj0, chronology9);
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours(54112806);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.junit.Assert.assertNotNull(localDate1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2922789 + "'", int6 == 2922789);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test14008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14008");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale1.getDisplayScript(locale4);
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = locale1.getDisplayScript(locale7);
        java.lang.String str9 = locale0.getDisplayLanguage(locale7);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale10.getDisplayScript(locale11);
        java.lang.String str14 = locale7.getDisplayCountry(locale10);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale10);
        java.util.Date date17 = new java.util.Date((long) 6);
        date17.setMinutes(54146);
        java.time.Instant instant20 = date17.toInstant();
        calendar15.setTime(date17);
        calendar15.add(4, 54263665);
        // The following exception was thrown during execution in test generation
        try {
            calendar15.roll(2023, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English" + "'", str9, "English");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United Kingdom" + "'", str14, "United Kingdom");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=32818667840760006,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1041952,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=68,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=26,SECOND=0,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 07 14:26:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test14009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14009");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(21, 0, 54134385);
        java.util.Calendar.Builder builder9 = builder4.setTimeOfDay(2060, 408, 21185074, (-292278994));
        java.util.Calendar.Builder builder14 = builder9.setTimeOfDay(0, 121, 50813, 79);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("years");
        boolean boolean19 = timeZone18.observesDaylightTime();
        boolean boolean20 = timeZone16.hasSameRules(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        timeZone16.setRawOffset(69);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone16);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone16);
        java.util.TimeZone timeZone26 = calendar25.getTimeZone();
        java.util.Calendar.Builder builder27 = builder14.setTimeZone(timeZone26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder30 = builder14.setWeekDefinition(21248754, 68460100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645456115786,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=35,MILLISECOND=855,ZONE_OFFSET=69,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645456115786,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=35,MILLISECOND=855,ZONE_OFFSET=69,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test14010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14010");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.millisOfDay();
        java.lang.String str6 = mutableDateTime3.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        int int7 = mutableDateTime3.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.secondOfMinute();
        org.joda.time.Chronology chronology9 = mutableDateTime3.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.months();
        boolean boolean11 = dateTimeFieldType0.isSupported(chronology9);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusMonths(0);
        org.joda.time.LocalDate.Property property17 = localDate16.year();
        int int18 = localDate16.size();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime20.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime23.getZone();
        long long26 = dateTimeZone21.getMillisKeepLocal(dateTimeZone24, (long) 10);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime27.property(dateTimeFieldType28);
        org.joda.time.LocalDate localDate30 = dateTime27.toLocalDate();
        long long32 = chronology9.set((org.joda.time.ReadablePartial) localDate30, 2074L);
        int int33 = localDate30.getMonthOfYear();
        org.joda.time.LocalDate.Property property34 = localDate30.monthOfYear();
        int int35 = localDate30.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate30.toDateTimeAtCurrentTime(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str6, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645401602074L + "'", long32 == 1645401602074L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test14011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14011");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMinimumValueOverall();
        org.joda.time.LocalDate localDate7 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property4.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime14.getZone();
        long long17 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 10);
        java.lang.String str18 = dateTimeZone15.toString();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        int int21 = dateTime19.getDayOfYear();
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours(2922789);
        int int24 = property4.getDifference((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate25 = property4.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = localDate25.withDayOfWeek(56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "centuryOfEra" + "'", str5, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+30:12" + "'", str18, "+30:12");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test14012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14012");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.toLanguageTag();
        boolean boolean18 = localDate4.equals((java.lang.Object) str17);
        org.joda.time.LocalDate localDate20 = localDate4.minusWeeks(0);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, 12);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.DateTime dateTime27 = property26.withMaximumValue();
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now();
        int int29 = localDate28.getDayOfMonth();
        org.joda.time.LocalDate localDate31 = localDate28.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property32 = localDate31.centuryOfEra();
        int int33 = property32.getMaximumValueOverall();
        org.joda.time.LocalDate localDate34 = property32.roundFloorCopy();
        org.joda.time.DateTime dateTime35 = localDate34.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime27.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.centuryOfEra();
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        int int40 = localDate39.getDayOfMonth();
        org.joda.time.LocalDate localDate42 = localDate39.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime43 = localDate39.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = localDate44.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate44.plusMonths(0);
        org.joda.time.LocalDate.Property property49 = localDate48.year();
        int int50 = localDate48.size();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime52.getZone();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime55.getZone();
        long long58 = dateTimeZone53.getMillisKeepLocal(dateTimeZone56, (long) 10);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtMidnight(dateTimeZone56);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property61 = dateTime59.property(dateTimeFieldType60);
        int int62 = localDate39.get(dateTimeFieldType60);
        org.joda.time.LocalDate.Property property63 = localDate39.dayOfMonth();
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("hi!");
        int int66 = property63.getMaximumTextLength(locale65);
        java.util.Locale locale67 = java.util.Locale.UK;
        java.util.Locale locale68 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.util.Locale locale70 = java.util.Locale.KOREA;
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale70.getDisplayScript(locale71);
        java.lang.String str73 = locale68.getDisplayScript(locale71);
        java.util.Locale locale74 = java.util.Locale.UK;
        java.lang.String str75 = locale68.getDisplayScript(locale74);
        java.lang.String str76 = locale67.getDisplayLanguage(locale74);
        java.lang.String str77 = locale67.getDisplayLanguage();
        java.lang.String str78 = locale65.getDisplayName(locale67);
        int int79 = dateTimeField38.getMaximumShortTextLength(locale65);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko-KR" + "'", str17, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2922789 + "'", int33 == 2922789);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDate39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "English" + "'", str76, "English");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English" + "'", str77, "English");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
    }

    @Test
    public void test14013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14013");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 54113901);
        int int2 = localDate1.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test14014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14014");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 54121);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour(892);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 892 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14015");
        java.util.Date date5 = new java.util.Date(100, 4, 6, 0, 21);
        date5.setYear(111);
        long long8 = date5.getTime();
        date5.setMonth(32769);
        java.util.Date date14 = new java.util.Date(16, 3, 1645455690);
        int int15 = date14.getSeconds();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromDateFields(date14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.fromDateFields(date14);
        java.lang.String str18 = date14.toLocaleString();
        int int19 = date5.compareTo(date14);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Oct 06 00:21:00 GMT 4741");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1304641260000L + "'", long8 == 1304641260000L);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Nov 28 00:00:00 GMT 4507020");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "4507020/11/28 0:00:00" + "'", str18, "4507020/11/28 0:00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test14016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14016");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        org.joda.time.LocalDate localDate7 = localDate4.minusYears(8);
        int int8 = localDate7.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
    }

    @Test
    public void test14017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14017");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate4 = localDate1.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        boolean boolean8 = mutableDateTime6.isAfter((long) 21);
        boolean boolean10 = mutableDateTime6.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        mutableDateTime6.setZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate1.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime0.withFields((org.joda.time.ReadablePartial) localDate1);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths(6);
        org.joda.time.DateTime dateTime20 = dateTime16.plusMinutes((int) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear(21141567);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime20.withMinuteOfHour(652);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 652 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test14018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14018");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusWeeks(54089980);
        int int9 = localDateTime8.getMillisOfDay();
        int int10 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusDays(21301676);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withMillisOfSecond((int) (byte) 10);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456115938,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=35,MILLISECOND=938,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54515938 + "'", int9 == 54515938);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test14019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14019");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone4 = mutableDateTime3.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        long long9 = dateTimeZone4.getMillisKeepLocal(dateTimeZone7, (long) 10);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(1647097300888L, dateTimeZone4);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = localDate12.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate12.plusMonths(0);
        org.joda.time.LocalDate.Property property17 = localDate16.year();
        int int18 = localDate16.size();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime20.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime23.getZone();
        long long26 = dateTimeZone21.getMillisKeepLocal(dateTimeZone24, (long) 10);
        org.joda.time.DateTime dateTime27 = localDate16.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.DateTime dateTime29 = dateTime27.minusDays(0);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        org.joda.time.DateTime dateTime33 = dateTime31.withMillisOfDay(112);
        boolean boolean34 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime36 = dateTime33.withDayOfYear(57);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test14020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14020");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Canada");
    }

    @Test
    public void test14021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14021");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = dateTimeField5.getAsText(7, locale7);
        long long10 = dateTimeField5.roundHalfCeiling((long) ' ');
        long long13 = dateTimeField5.addWrapField(4617325004652314L, 859);
        java.lang.String str15 = dateTimeField5.getAsShortText(1645455973562L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "7" + "'", str8, "7");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4617325005511314L + "'", long13 == 4617325005511314L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "54373" + "'", str15, "54373");
    }

    @Test
    public void test14022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14022");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(76835, 108720000, 62, 791);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 76835 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14023");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTime();
        mutableDateTime1.addDays(19);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMonths(21);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime1.add(readablePeriod10);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        int int13 = localDate12.getDayOfMonth();
        org.joda.time.LocalDate localDate15 = localDate12.plusYears((int) (byte) 100);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime18.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        long long24 = dateTimeZone19.getMillisKeepLocal(dateTimeZone22, (long) 10);
        java.lang.String str25 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay((int) (short) 10);
        boolean boolean29 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime31 = dateTime26.plus(0L);
        org.joda.time.DateTime.Property property32 = dateTime26.secondOfMinute();
        org.joda.time.DateTime dateTime33 = property32.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property32.getFieldType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+30:12" + "'", str25, "+30:12");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
    }

    @Test
    public void test14024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14024");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfMinute();
        int int4 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfDay();
        java.lang.String str9 = mutableDateTime6.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        int int10 = mutableDateTime6.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.secondOfMinute();
        org.joda.time.Chronology chronology12 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime1.toMutableDateTime(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType14.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.years();
        java.lang.String str23 = durationFieldType22.toString();
        boolean boolean24 = localTime21.isSupported(durationFieldType22);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime27 = localTime21.withFieldAdded(durationFieldType25, 32772);
        org.joda.time.LocalTime.Property property28 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime30 = localTime21.minusMinutes(2922789);
        java.util.Locale locale32 = java.util.Locale.UK;
        java.util.Locale locale33 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale35.getDisplayScript(locale36);
        java.lang.String str38 = locale33.getDisplayScript(locale36);
        java.util.Locale locale39 = java.util.Locale.UK;
        java.lang.String str40 = locale33.getDisplayScript(locale39);
        java.lang.String str41 = locale32.getDisplayLanguage(locale39);
        java.lang.String str42 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localTime30, (int) ' ', locale32);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.years();
        java.lang.String str46 = durationFieldType45.toString();
        boolean boolean47 = localTime44.isSupported(durationFieldType45);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime50 = localTime44.withFieldAdded(durationFieldType48, 32772);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.lang.String str53 = locale51.getDisplayScript(locale52);
        java.lang.String str54 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localTime50, locale52);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.years();
        java.lang.String str58 = durationFieldType57.toString();
        boolean boolean59 = localTime56.isSupported(durationFieldType57);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime62 = localTime56.withFieldAdded(durationFieldType60, 32772);
        org.joda.time.LocalTime.Property property63 = localTime56.hourOfDay();
        org.joda.time.LocalTime localTime64 = property63.roundCeilingCopy();
        org.joda.time.LocalTime localTime65 = property63.withMinimumValue();
        org.joda.time.LocalTime localTime66 = property63.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime68 = localTime66.plusHours(11);
        org.joda.time.LocalTime localTime70 = localTime68.minusMinutes((-1));
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalTime localTime72 = localTime68.plus(readablePeriod71);
        java.util.Locale locale74 = new java.util.Locale("Property[millisOfDay]");
        java.lang.String str75 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localTime68, locale74);
        int int76 = mutableDateTime1.get(dateTimeField19);
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.parse("2022-02-21T14:02:50.892-01:00");
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        mutableDateTime78.add(readablePeriod79);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime78);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        mutableDateTime1.add(readablePeriod82);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(43627680);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43627680 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 76836 + "'", int4 == 76836);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str9, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "years" + "'", str23, "years");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "32" + "'", str42, "32");
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "years" + "'", str46, "years");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "years" + "'", str58, "years");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertEquals(locale74.toString(), "property[millisofday]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0" + "'", str75, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 36 + "'", int76 == 36);
        org.junit.Assert.assertNotNull(mutableDateTime78);
    }

    @Test
    public void test14025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14025");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusHours(2922789);
        int int9 = localDateTime1.getValue(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withMillisOfDay(54417100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime1.withHourOfDay(54218359);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54218359 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116083,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=83,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test14026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14026");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (short) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant5 = instant2.withDurationAdded(readableDuration3, (int) (short) 0);
        boolean boolean7 = instant2.isBefore((long) 5);
        java.util.Date date8 = instant2.toDate();
        java.lang.String str9 = date8.toLocaleString();
        java.lang.String str10 = date8.toLocaleString();
        date8.setDate(69);
        int int13 = date8.getMonth();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Mar 10 00:00:00 GMT 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970/01/01 0:00:00" + "'", str9, "1970/01/01 0:00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970/01/01 0:00:00" + "'", str10, "1970/01/01 0:00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test14027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14027");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        boolean boolean11 = mutableDateTime9.isAfter((long) 21);
        boolean boolean13 = mutableDateTime9.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        mutableDateTime9.setZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localTime1.toDateTimeToday(dateTimeZone16);
        org.joda.time.LocalTime localTime20 = localTime1.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime23 = localTime1.withPeriodAdded(readablePeriod21, 54107938);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime23.minus(readablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test14028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14028");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfCentury(15);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(54107938);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116127,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=127,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test14029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14029");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra(19);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(19L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfWeek(54101692);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54101692 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116143,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=143,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test14030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14030");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.minus(readableDuration2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant3.minus(readableDuration4);
        long long6 = instant5.getMillis();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant5.withDurationAdded(readableDuration7, 54206558);
        org.joda.time.Instant instant11 = instant5.plus(75382025L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis((-292275054));
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(dateTimeZone13);
        java.lang.String str15 = dateTimeZone13.toString();
        org.joda.time.MutableDateTime mutableDateTime16 = instant5.toMutableDateTime(dateTimeZone13);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-81:11:15.054" + "'", str15, "-81:11:15.054");
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test14031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14031");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(4801075200000L);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readablePeriod2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withEra((-54148677));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -54148677 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test14032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14032");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter4.getParser();
        boolean boolean6 = dateTimeFormatter4.isParser();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        int int9 = calendar7.getGreatestMinimum((int) (byte) 0);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) calendar7);
        java.lang.String str12 = calendar7.getCalendarType();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        boolean boolean16 = mutableDateTime14.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime14.toMutableDateTime();
        mutableDateTime14.addDays(19);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime14.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.roundHalfFloor();
        boolean boolean23 = calendar7.before((java.lang.Object) mutableDateTime22);
        int int26 = dateTimeFormatter4.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime22, "AM", 21209466);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        boolean boolean30 = mutableDateTime28.isAfter((long) 21);
        boolean boolean32 = mutableDateTime28.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        mutableDateTime28.setZone(dateTimeZone35);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.lang.String str40 = locale38.getDisplayScript(locale39);
        java.lang.String str41 = locale38.getDisplayScript();
        java.lang.String str42 = dateTimeZone35.getShortName((long) 13, locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter4.withZone(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645456116219,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=219,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gregory" + "'", str12, "gregory");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-21209467) + "'", int26 == (-21209467));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+30:12" + "'", str42, "+30:12");
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test14033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14033");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        java.lang.StringBuffer stringBuffer5 = null;
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = localDate6.toInterval(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate6.plusMonths(0);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        java.lang.String str12 = property11.toString();
        org.joda.time.LocalDate localDate13 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = localDate13.withYear((int) (short) -1);
        org.joda.time.LocalDate.Property property16 = localDate15.year();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.LocalDate localDate18 = property16.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer5, (org.joda.time.ReadablePartial) localDate18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimePrinter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[weekOfWeekyear]" + "'", str12, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test14034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14034");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.shortTime();
        java.lang.String str11 = localDateTime9.toString(dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.lang.String str13 = localDateTime9.toString(dateTimeFormatter12);
        int int14 = localDateTime9.getCenturyOfEra();
        int int15 = localDateTime9.getWeekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.minus(readablePeriod16);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116250,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=250,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "15:08" + "'", str11, "15:08");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "21 June 0130 15:08:36 " + "'", str13, "21 June 0130 15:08:36 ");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 25 + "'", int15 == 25);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test14035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14035");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Date date2 = calendar0.getTime();
        int int3 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.setMinimalDaysInFirstWeek(21);
        calendar0.setFirstDayOfWeek(54185283);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        java.time.Instant instant9 = calendar0.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = calendar0.getMaximum(2139);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2139");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116260,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=54185283,minimalDaysInFirstWeek=21,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=260,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 15:08:36 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test14036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14036");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Date date2 = calendar1.getTime();
        calendar1.set((int) (short) 0, 6055, 54096794, 11, 674, 54100989);
        int int11 = calendar1.getLeastMaximum(0);
        boolean boolean12 = calendar1.isWeekDateSupported();
        java.lang.Object obj13 = calendar1.clone();
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=6055,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=54096794,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=11,MINUTE=674,SECOND=54100989,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=6055,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=54096794,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=11,MINUTE=674,SECOND=54100989,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=6055,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=54096794,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=11,MINUTE=674,SECOND=54100989,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=6055,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=54096794,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=11,MINUTE=674,SECOND=54100989,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14037");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMinutes((int) (byte) 1);
        int int6 = localDateTime5.getDayOfWeek();
        int int7 = localDateTime5.getDayOfWeek();
        int int8 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        int int12 = localDateTime10.getDayOfMonth();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromCalendarFields(calendar13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMinutes((int) (byte) 1);
        int int19 = localDateTime18.getYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.year();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.withPeriodAdded(readablePeriod21, 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withField(dateTimeFieldType25, 54301560);
        boolean boolean28 = localDateTime10.isSupported(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116285,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=285,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645456116285,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=285,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test14038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14038");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime((-16), 54106068, 0, 50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test14039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14039");
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType5.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfDay();
        org.joda.time.Chronology chronology14 = chronology8.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(54096794, 21224, 54439834, 901, 50557, chronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 901 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test14040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14040");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        boolean boolean11 = mutableDateTime9.isAfter((long) 21);
        boolean boolean13 = mutableDateTime9.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        mutableDateTime9.setZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localTime1.toDateTimeToday(dateTimeZone16);
        org.joda.time.LocalTime localTime20 = localTime1.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime23 = localTime1.withPeriodAdded(readablePeriod21, 54107938);
        org.joda.time.Chronology chronology24 = localTime1.getChronology();
        java.lang.String str25 = localTime1.toString();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "06:12:00.100" + "'", str25, "06:12:00.100");
    }

    @Test
    public void test14041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14041");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale6 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withLocale(locale6);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter5.getParser();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.era();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime14.getZone();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime14.add(readableDuration16, 0);
        mutableDateTime12.setTime((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology20 = mutableDateTime12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter5.withChronology(chronology20);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate22.toInterval(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate22.plusMonths(0);
        org.joda.time.LocalDate.Property property27 = localDate26.year();
        org.joda.time.LocalDate localDate28 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate29 = property27.getLocalDate();
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        int int31 = localDate30.getDayOfMonth();
        org.joda.time.LocalDate localDate33 = localDate30.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        boolean boolean37 = mutableDateTime35.isAfter((long) 21);
        boolean boolean39 = mutableDateTime35.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime41.getZone();
        mutableDateTime35.setZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate30.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate48 = localDate46.withWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime51.getZone();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = mutableDateTime54.getZone();
        long long57 = dateTimeZone52.getMillisKeepLocal(dateTimeZone55, (long) 10);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(10L, dateTimeZone52);
        long long60 = dateTimeZone52.nextTransition((long) 12);
        org.joda.time.DateTime dateTime61 = localDate46.toDateTimeAtMidnight(dateTimeZone52);
        long long63 = dateTimeZone42.getMillisKeepLocal(dateTimeZone52, (long) '#');
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime65 = localDate29.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(dateTimeZone66);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.era();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime67.year();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone70);
        boolean boolean73 = mutableDateTime71.isAfter((long) 21);
        boolean boolean75 = mutableDateTime71.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(dateTimeZone76);
        org.joda.time.DateTimeZone dateTimeZone78 = mutableDateTime77.getZone();
        mutableDateTime71.setZone(dateTimeZone78);
        mutableDateTime67.setZoneRetainFields(dateTimeZone78);
        org.joda.time.DateTime dateTime81 = dateTime65.withZone(dateTimeZone78);
        org.joda.time.Chronology chronology82 = chronology20.withZone(dateTimeZone78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter0.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField84 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = chronology20.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 12L + "'", long60 == 12L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 35L + "'", long63 == 35L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test14042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14042");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-18T05:55:59.464-81:11:15.054");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test14043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14043");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 2922);
        org.joda.time.LocalTime localTime3 = localTime1.plusSeconds(50587477);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.years();
        java.lang.String str7 = durationFieldType6.toString();
        boolean boolean8 = localTime5.isSupported(durationFieldType6);
        org.joda.time.LocalTime localTime10 = localTime5.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime.Property property11 = localTime5.millisOfDay();
        org.joda.time.LocalTime localTime12 = property11.roundFloorCopy();
        org.joda.time.LocalTime localTime14 = property11.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime15 = property11.getLocalTime();
        org.joda.time.LocalTime localTime16 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = property11.roundCeilingCopy();
        org.joda.time.LocalTime localTime18 = localTime1.withFields((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(1L);
        int int21 = mutableDateTime20.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.era();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableDateTime23.add(readablePeriod25, (int) (byte) 100);
        mutableDateTime20.setTime((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType29.getField(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.hourOfDay();
        org.joda.time.DurationField durationField36 = dateTimeField35.getLeapDurationField();
        int int37 = mutableDateTime23.get(dateTimeField35);
        long long40 = dateTimeField35.add((long) 14, 1645455690);
        long long43 = dateTimeField35.add(0L, 54101692);
        long long45 = dateTimeField35.remainder((long) 32);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime47.getZone();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(dateTimeZone48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getDurationType();
        boolean boolean53 = localTime50.isSupported(durationFieldType52);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology58 = localTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType55.getField(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.secondOfDay();
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.lang.String str63 = dateTimeField60.getAsText(7, locale62);
        java.lang.String str64 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localTime50, 0, locale62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(dateTimeZone65);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.millisOfDay();
        java.lang.String str69 = mutableDateTime66.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        int int70 = mutableDateTime66.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime66.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime73 = property71.add(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime76 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology77 = localTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType74.getField(chronology77);
        org.joda.time.DateTimeField dateTimeField79 = chronology77.secondOfDay();
        java.lang.String str81 = dateTimeField79.getAsShortText(10L);
        long long83 = dateTimeField79.roundHalfEven((long) 1);
        boolean boolean84 = dateTimeField79.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = dateTimeField79.getType();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType85.getRangeDurationType();
        mutableDateTime73.set(dateTimeFieldType85, 1439);
        boolean boolean89 = localTime50.isSupported(dateTimeFieldType85);
        org.joda.time.LocalTime localTime91 = localTime18.withField(dateTimeFieldType85, 276);
        org.joda.time.DurationFieldType durationFieldType92 = dateTimeFieldType85.getDurationType();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "years" + "'", str7, "years");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNull(durationField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 5923640484000014L + "'", long40 == 5923640484000014L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 194766091200000L + "'", long43 == 194766091200000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "7" + "'", str63, "7");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str69, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(durationFieldType92);
    }

    @Test
    public void test14044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14044");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property8.addCopy(19);
        org.joda.time.LocalTime localTime13 = localTime11.withHourOfDay(8);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale16 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withLocale(locale16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        boolean boolean21 = mutableDateTime19.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime19.toMutableDateTime();
        mutableDateTime19.addDays(19);
        java.lang.String str25 = dateTimeFormatter15.print((org.joda.time.ReadableInstant) mutableDateTime19);
        java.lang.String str26 = localTime13.toString(dateTimeFormatter15);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime31.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        long long37 = dateTimeZone32.getMillisKeepLocal(dateTimeZone35, (long) 10);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(10L, dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(1647097300888L, dateTimeZone32);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) 50400019L, dateTimeZone32);
        java.lang.String str41 = dateTimeZone32.toString();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(dateTimeZone32);
        java.lang.String str43 = dateTimeFormatter15.print((org.joda.time.ReadablePartial) localTime42);
        java.util.Locale locale44 = dateTimeFormatter15.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTimeFormatter15.parseDateTime("java.io.IOException: eng");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.io.IOException: eng\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "21:20" + "'", str25, "21:20");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "08:12" + "'", str26, "08:12");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+30:12" + "'", str41, "+30:12");
        org.junit.Assert.assertNotNull(localTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "21:20" + "'", str43, "21:20");
        org.junit.Assert.assertNull(locale44);
    }

    @Test
    public void test14045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14045");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (byte) -1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        int int11 = localDateTime10.getDayOfWeek();
        java.lang.String str12 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minus(readableDuration13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minus(readablePeriod15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withDate(54477604, 908, 50814600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 908 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456116457,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=457,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "01/01/01 00:00" + "'", str12, "01/01/01 00:00");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test14046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14046");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(chronology3);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        long long9 = chronology3.add(readablePeriod6, (long) 48, 2122);
        org.joda.time.DurationField durationField10 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology3.add(readablePeriod12, (long) 776, 9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) (-267), chronology3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 48L + "'", long9 == 48L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 776L + "'", long15 == 776L);
    }

    @Test
    public void test14047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14047");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay((long) 20, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeZone dateTimeZone7 = chronology4.getZone();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.dayOfMonth();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("");
        java.lang.String str12 = dateTimeField8.getAsShortText(0, locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter0.withLocale(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType15.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.halfdayOfDay();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("years");
        boolean boolean26 = timeZone25.observesDaylightTime();
        boolean boolean27 = timeZone23.hasSameRules(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.Chronology chronology29 = chronology18.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(472L, chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter13.withChronology(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test14048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14048");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property8.roundCeilingCopy();
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        java.lang.String str12 = property11.toString();
        org.joda.time.LocalTime localTime14 = property11.addCopy(1960);
        org.joda.time.LocalTime localTime16 = property11.addWrapFieldToCopy(54143548);
        org.joda.time.LocalTime localTime17 = property11.roundHalfCeilingCopy();
        int int18 = property11.get();
        org.joda.time.LocalTime localTime19 = property11.roundCeilingCopy();
        org.joda.time.LocalTime localTime20 = property11.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime22 = localTime20.minus(readablePeriod21);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[millisOfDay]" + "'", str12, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 25200000 + "'", int18 == 25200000);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test14049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14049");
        java.lang.Throwable throwable0 = null;
        java.io.IOException iOException1 = new java.io.IOException(throwable0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException2);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test14050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14050");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Date date2 = calendar1.getTime();
        calendar1.set((int) (short) 0, 6055, 54096794, 11, 674, 54100989);
        calendar1.clear();
        calendar1.set(352, 0, 54096794, 1439, 54185283, 21);
        calendar1.clear();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(888, 363, 2060);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 2060");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test14051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14051");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        mutableDateTime1.setZone(dateTimeZone8);
        mutableDateTime1.addMillis(10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        mutableDateTime13.setMillis(1645455816284L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setDayOfMonth(2021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2021 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test14052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14052");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = localDate4.toInterval(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate4.plusMonths(0);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        int int10 = localDate8.size();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        long long18 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone16);
        int int20 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) dateTime19);
        mutableDateTime1.add((long) 21226);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test14053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14053");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 292278994);
    }

    @Test
    public void test14054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14054");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("12:48:59.934");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test14055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14055");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(19);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths((-1));
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(54121897);
        int int17 = dateTime14.getMonthOfYear();
        org.joda.time.DateTime.Property property18 = dateTime14.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime14.withYearOfEra(985);
        org.joda.time.DateTime dateTime22 = dateTime14.withYear(54286483);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test14056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14056");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(20);
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean16 = localTime14.equals((java.lang.Object) dateTimeFieldType15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType17.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType15.getField(chronology20);
        org.joda.time.LocalTime localTime26 = localTime11.withField(dateTimeFieldType15, 9);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology29.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.clockhourOfHalfday();
        boolean boolean34 = dateTimeFieldType15.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField35 = chronology29.clockhourOfDay();
        org.joda.time.DurationField durationField36 = chronology29.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology29.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long45 = chronology29.getDateTimeMillis(54328019, 54404070, 365, 903, 54397765, 54421456, 62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 903 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test14057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14057");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekyear();
        org.joda.time.DurationField durationField6 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology2.halfdays();
        org.joda.time.DurationField durationField10 = chronology2.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology2.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test14058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14058");
        java.io.IOException iOException1 = new java.io.IOException("2190-09-21T15:04:40.944Z");
    }

    @Test
    public void test14059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14059");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property8.withMinimumValue();
        org.joda.time.LocalTime localTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property8.roundHalfFloorCopy();
        java.lang.String str13 = property8.getAsShortText();
        org.joda.time.LocalTime localTime14 = property8.getLocalTime();
        org.joda.time.LocalTime localTime16 = property8.addCopy((long) 397);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "6" + "'", str13, "6");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test14060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14060");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(13);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        java.lang.String str11 = durationFieldType10.toString();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime15 = localTime9.withFieldAdded(durationFieldType13, 32772);
        java.lang.String str16 = durationFieldType13.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType17.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.hourOfDay();
        boolean boolean24 = durationFieldType13.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.weekyearOfCentury();
        java.util.Locale locale29 = new java.util.Locale("21 June 0130 15:01:38 ", "en_GB");
        java.lang.String str30 = dateTimeField25.getAsShortText((int) '4', locale29);
        java.util.Locale locale31 = locale29.stripExtensions();
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter7.withLocale(locale29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter33.withPivotYear(21143839);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.parse("-7424-05-08T00:05:17.385", dateTimeFormatter35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-7424-05-08T00:05:17.385\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "years" + "'", str11, "years");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "halfdays" + "'", str16, "halfdays");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale29.toString(), "21 june 0130 15:01:38 _EN_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "52" + "'", str30, "52");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "21 june 0130 15:01:38 _EN_GB");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test14061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14061");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYear((int) (short) -1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime16 = property13.addWrapFieldToCopy(54125286);
        boolean boolean17 = property13.isLeap();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116695,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=695,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test14062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14062");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusMillis(54101869);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfEvenCopy();
        int int11 = localDateTime10.getMinuteOfHour();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116705,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=705,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14063");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate localDate6 = localDate4.plusDays((int) (byte) 1);
        int int7 = localDate6.getYear();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate8.toInterval(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate8.plusMonths(0);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        int int14 = localDate12.size();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime16.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime19.getZone();
        long long22 = dateTimeZone17.getMillisKeepLocal(dateTimeZone20, (long) 10);
        org.joda.time.DateTime dateTime23 = localDate12.toDateTimeAtMidnight(dateTimeZone20);
        org.joda.time.LocalDate localDate25 = localDate12.plusWeeks(54143548);
        boolean boolean26 = localDate6.equals((java.lang.Object) localDate12);
        org.joda.time.LocalDate localDate28 = localDate6.withDayOfYear(98);
        org.joda.time.LocalDate localDate30 = localDate28.plusMonths(54417100);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test14064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14064");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean3 = localTime1.equals((java.lang.Object) dateTimeFieldType2);
        int int4 = localTime1.size();
        int int5 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime localTime7 = localTime1.plusSeconds(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(54271415);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54271415 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test14065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14065");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = localDate4.toInterval(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate4.plusMonths(0);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        int int10 = localDate8.size();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        long long18 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone16);
        int int20 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate21 = dateTime19.toLocalDate();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime19.millisOfSecond();
        org.joda.time.DateTime dateTime25 = property23.setCopy("100");
        org.joda.time.DateTime dateTime26 = property23.roundFloorCopy();
        org.joda.time.DateTime dateTime28 = property23.addWrapFieldToCopy(54131539);
        org.joda.time.DateTime dateTime30 = property23.setCopy(43);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test14066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14066");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(0L);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean5 = localTime3.equals((java.lang.Object) dateTimeFieldType4);
        int int7 = localTime3.getValue((int) (byte) 0);
        org.joda.time.LocalTime localTime8 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str9 = localTime8.toString();
        int int10 = localTime8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.000" + "'", str9, "00:00:00.000");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test14067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14067");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 292278994);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusYears(14);
        int int8 = localDateTime7.size();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withPeriodAdded(readablePeriod14, (int) (short) 100);
        int[] intArray17 = localDateTime16.getValues();
        int int18 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMonths(54089980);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withDurationAdded(readableDuration21, 7);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645456116766,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=766,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456116766,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=766,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 10, 3, 54516766]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test14068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14068");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMinutes((int) (byte) 1);
        int int6 = localDateTime5.getYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusMinutes(50567056);
        int int10 = localDateTime5.getEra();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116783,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=783,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test14069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14069");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime5.getZone();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime5.add(readableDuration7, 0);
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.setWeekyear(52);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        int int14 = localDate13.getDayOfMonth();
        org.joda.time.LocalDate localDate16 = localDate13.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        boolean boolean20 = mutableDateTime18.isAfter((long) 21);
        boolean boolean22 = mutableDateTime18.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime24.getZone();
        mutableDateTime18.setZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate13.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate31 = localDate29.withWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime37.getZone();
        long long40 = dateTimeZone35.getMillisKeepLocal(dateTimeZone38, (long) 10);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(10L, dateTimeZone35);
        long long43 = dateTimeZone35.nextTransition((long) 12);
        org.joda.time.DateTime dateTime44 = localDate29.toDateTimeAtMidnight(dateTimeZone35);
        long long46 = dateTimeZone25.getMillisKeepLocal(dateTimeZone35, (long) '#');
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime5.toMutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = localDate50.toString("2022-02-18T05:57:18.793-81:11:15.054");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 12L + "'", long43 == 12L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 35L + "'", long46 == 35L);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test14070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14070");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        int int5 = property4.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.util.Locale locale7 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale7.getDisplayScript(locale10);
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale7.getDisplayScript(locale13);
        java.lang.String str15 = locale6.getDisplayLanguage(locale13);
        java.util.Locale.setDefault(locale6);
        int int17 = property4.getMaximumTextLength(locale6);
        java.util.Locale locale18 = java.util.Locale.UK;
        java.util.Locale locale19 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = locale19.getDisplayScript(locale22);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale19.getDisplayScript(locale25);
        java.lang.String str27 = locale18.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(locale18);
        int int29 = property4.getMaximumShortTextLength(locale18);
        org.joda.time.LocalDate localDate30 = property4.withMaximumValue();
        int int31 = localDate30.size();
        org.joda.time.LocalDate.Property property32 = localDate30.dayOfYear();
        org.joda.time.LocalDate localDate33 = property32.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2922789 + "'", int5 == 2922789);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English" + "'", str27, "English");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test14071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14071");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) '4', 54092146, 54104989, 7);
        java.util.Calendar calendar6 = builder5.build();
        calendar6.setLenient(true);
        calendar6.clear();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(1L);
        int int12 = mutableDateTime11.getCenturyOfEra();
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar calendar14 = mutableDateTime11.toCalendar(locale13);
        java.lang.String str15 = locale13.getISO3Country();
        java.lang.Object obj16 = locale13.clone();
        boolean boolean17 = calendar6.after(obj16);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.roll(21228022, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GBR" + "'", str15, "GBR");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "en_GB");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "en_GB");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test14072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14072");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.Interval interval4 = localDate3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        long long12 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (long) 10);
        java.lang.String str13 = dateTimeZone7.toString();
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(40);
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears(2021);
        org.joda.time.DateTime.Property property21 = dateTime18.millisOfDay();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+30:12" + "'", str13, "+30:12");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test14073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14073");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.shortTime();
        java.lang.String str11 = localDateTime9.toString(dateTimeFormatter10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.lang.String str13 = localDateTime9.toString(dateTimeFormatter12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter14.getPrinter();
        java.lang.String str17 = dateTimeFormatter14.print((long) 21156);
        java.lang.Appendable appendable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(appendable18, (long) 76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456116840,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=36,MILLISECOND=840,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "15:08" + "'", str11, "15:08");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "21 June 0130 15:08:36 " + "'", str13, "21 June 0130 15:08:36 ");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimePrinter15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "01 January 1970 00:00:21 +00:00" + "'", str17, "01 January 1970 00:00:21 +00:00");
    }

    @Test
    public void test14074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14074");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(3);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate4.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.Interval interval11 = localDate9.toInterval(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate9.plusMonths(0);
        org.joda.time.LocalDate.Property property14 = localDate13.year();
        int int15 = localDate13.size();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime17.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime20.getZone();
        long long23 = dateTimeZone18.getMillisKeepLocal(dateTimeZone21, (long) 10);
        org.joda.time.DateTime dateTime24 = localDate13.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        int int27 = localDate4.get(dateTimeFieldType25);
        org.joda.time.LocalDate.Property property28 = localDate4.dayOfMonth();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("hi!");
        int int31 = property28.getMaximumTextLength(locale30);
        java.lang.String str32 = localDate2.toString("2022-02-21", locale30);
        java.lang.String str33 = localDate2.toString();
        org.joda.time.LocalDate localDate35 = localDate2.withMonthOfYear(7);
        int int36 = localDate2.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate38 = localDate2.minus(readablePeriod37);
        int int39 = localDate2.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = localDate2.withDayOfMonth(54472382);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54472382 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-21" + "'", str32, "2022-02-21");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0003-02-18" + "'", str33, "0003-02-18");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
    }

    @Test
    public void test14075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14075");
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = localDate6.toInterval(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate6.plusMonths(0);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        int int12 = localDate10.size();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime14.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime17.getZone();
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 10);
        org.joda.time.DateTime dateTime21 = localDate10.toDateTimeAtMidnight(dateTimeZone18);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale22.toLanguageTag();
        boolean boolean24 = localDate10.equals((java.lang.Object) str23);
        org.joda.time.LocalDate localDate26 = localDate10.minusWeeks(0);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate29 = localDate26.withPeriodAdded(readablePeriod27, 12);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime33 = property32.withMaximumValue();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now();
        int int35 = localDate34.getDayOfMonth();
        org.joda.time.LocalDate localDate37 = localDate34.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property38 = localDate37.centuryOfEra();
        int int39 = property38.getMaximumValueOverall();
        org.joda.time.LocalDate localDate40 = property38.roundFloorCopy();
        org.joda.time.DateTime dateTime41 = localDate40.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime33.withChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.centuryOfEra();
        java.lang.String str45 = chronology42.toString();
        org.joda.time.Chronology chronology46 = chronology42.withUTC();
        org.joda.time.DurationField durationField47 = chronology46.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(21264550, 54419220, 24, 54117389, 120, 21227, chronology46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54117389 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ko-KR" + "'", str23, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2922789 + "'", int39 == 2922789);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[+30:12]" + "'", str45, "ISOChronology[+30:12]");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test14076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14076");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        int int4 = dateTimeZone2.getStandardOffset(0L);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("years");
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        boolean boolean9 = timeZone7.observesDaylightTime();
        java.time.ZoneId zoneId10 = timeZone7.toZoneId();
        int int12 = timeZone7.getOffset((long) 50573406);
        int int13 = timeZone7.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 108720000 + "'", int4 == 108720000);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test14077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14077");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.toLanguageTag();
        boolean boolean18 = localDate4.equals((java.lang.Object) str17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        boolean boolean20 = localDate4.equals((java.lang.Object) dateTime19);
        org.joda.time.LocalDate.Property property21 = localDate4.weekyear();
        java.lang.String str22 = property21.toString();
        org.joda.time.LocalDate localDate23 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property24 = localDate23.era();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko-KR" + "'", str17, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[weekyear]" + "'", str22, "Property[weekyear]");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test14078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14078");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.lang.String str2 = locale1.toLanguageTag();
        boolean boolean3 = locale1.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        long long11 = dateTimeZone6.getMillisKeepLocal(dateTimeZone9, (long) 10);
        java.lang.String str12 = dateTimeZone6.toString();
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale14.getDisplayCountry(locale16);
        java.lang.String str18 = dateTimeZone6.getName((long) 54089980, locale16);
        java.lang.String str19 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale1.getDisplayVariant(locale16);
        java.util.Set<java.lang.String> strSet21 = locale1.getUnicodeLocaleKeys();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        int int24 = localDate23.getDayOfMonth();
        org.joda.time.LocalDate localDate26 = localDate23.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        boolean boolean30 = mutableDateTime28.isAfter((long) 21);
        boolean boolean32 = mutableDateTime28.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        mutableDateTime28.setZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate23.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime22.withFields((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTime dateTime40 = dateTime38.withHourOfDay(0);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfCentury();
        boolean boolean42 = strSet21.contains((java.lang.Object) property41);
        java.lang.Object[] objArray43 = strSet21.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko-KR" + "'", str2, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+30:12" + "'", str12, "+30:12");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ko-KR" + "'", str15, "ko-KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str17, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+30:12" + "'", str18, "+30:12");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean" + "'", str19, "Korean");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(localDate23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
    }

    @Test
    public void test14079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14079");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        boolean boolean1 = mutableDateTime0.isAfterNow();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        long long12 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (long) 10);
        boolean boolean13 = dateTimeZone10.isFixed();
        mutableDateTime0.setZoneRetainFields(dateTimeZone10);
        int int15 = mutableDateTime0.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime0.getZone();
        long long18 = dateTimeZone16.nextTransition((-31079083724946L));
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone16);
        int int20 = dateTime19.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime19.withSecondOfMinute(21383298);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21383298 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-31079083724946L) + "'", long18 == (-31079083724946L));
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
    }

    @Test
    public void test14080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14080");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.centuryOfEra();
        long long11 = dateTimeField9.roundCeiling(3142821614000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4102444800000L + "'", long11 == 4102444800000L);
    }

    @Test
    public void test14081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14081");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate4.minus(readablePeriod6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) '4');
        boolean boolean11 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        int int14 = localDate13.getDayOfMonth();
        org.joda.time.LocalDate localDate16 = localDate13.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property17 = localDate16.centuryOfEra();
        int int18 = property17.getMaximumValueOverall();
        org.joda.time.LocalDate localDate19 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate21 = localDate19.minusDays(12);
        org.joda.time.LocalDate localDate23 = localDate19.withWeekyear(10);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        int int26 = property12.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2922789 + "'", int18 == 2922789);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test14082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14082");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.era();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate4.plusYears((int) (byte) 100);
        org.joda.time.Interval interval8 = localDate7.toInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime10.getZone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime13.getZone();
        long long16 = dateTimeZone11.getMillisKeepLocal(dateTimeZone14, (long) 10);
        java.lang.String str17 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime18 = localDate7.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime2.toMutableDateTime(dateTimeZone11);
        java.lang.String str20 = mutableDateTime19.toString();
        java.lang.String str21 = mutableDateTime19.toString();
        long long22 = mutableDateTime19.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.property(dateTimeFieldType23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale26 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withLocale(locale26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        boolean boolean31 = mutableDateTime29.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime29.toMutableDateTime();
        mutableDateTime29.addDays(19);
        java.lang.String str35 = dateTimeFormatter25.print((org.joda.time.ReadableInstant) mutableDateTime29);
        boolean boolean36 = mutableDateTime19.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime19.setMillis((long) 54107938);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime40.getZone();
        long long43 = dateTimeZone41.previousTransition((-431366460000L));
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime46.getZone();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime49.getZone();
        long long52 = dateTimeZone47.getMillisKeepLocal(dateTimeZone50, (long) 10);
        java.lang.String str53 = dateTimeZone47.toString();
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.lang.String str56 = locale55.toLanguageTag();
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.lang.String str58 = locale55.getDisplayCountry(locale57);
        java.lang.String str59 = dateTimeZone47.getName((long) 54089980, locale57);
        java.lang.String str60 = locale57.getDisplayLanguage();
        java.lang.String str61 = locale57.getScript();
        java.lang.String str62 = dateTimeZone41.getName((long) 52, locale57);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone41);
        boolean boolean65 = dateTimeZone41.isStandardOffset((long) 20);
        long long67 = dateTimeZone41.convertUTCToLocal(1707456419852529298L);
        mutableDateTime19.setZoneRetainFields(dateTimeZone41);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(2380791384193590000L, dateTimeZone41);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+30:12" + "'", str17, "+30:12");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T21:20:37.006+30:12" + "'", str20, "2022-02-22T21:20:37.006+30:12");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T21:20:37.006+30:12" + "'", str21, "2022-02-22T21:20:37.006+30:12");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645456117006L + "'", long22 == 1645456117006L);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mutableDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "21:20" + "'", str35, "21:20");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-431366460000L) + "'", long43 == (-431366460000L));
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+30:12" + "'", str53, "+30:12");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ko-KR" + "'", str56, "ko-KR");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str58, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+30:12" + "'", str59, "+30:12");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Korean" + "'", str60, "Korean");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+30:12" + "'", str62, "+30:12");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1707456419961249298L + "'", long67 == 1707456419961249298L);
    }

    @Test
    public void test14083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14083");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        long long6 = property5.remainder();
        org.joda.time.LocalTime localTime7 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime9 = property5.getLocalTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 37049L + "'", long6 == 37049L);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test14084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14084");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        long long7 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) 10);
        java.lang.String str8 = dateTimeZone5.toString();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone5);
        java.util.TimeZone timeZone10 = dateTimeZone5.toTimeZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone10);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone.setDefault(timeZone13);
        calendar11.setTimeZone(timeZone13);
        boolean boolean16 = timeZone13.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+30:12" + "'", str8, "+30:12");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645456117058,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=37,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test14085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14085");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        mutableDateTime1.setMillis(12L);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.getMutableDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test14086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14086");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property16.addToCopy((int) 'u');
        org.joda.time.DateTime dateTime21 = property16.setCopy("54130113");
        org.joda.time.DateTime dateTime24 = dateTime21.withDurationAdded(957572460000L, 6048836);
        org.joda.time.DateTime dateTime26 = dateTime21.withYearOfEra(54189888);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology29.weeks();
        org.joda.time.DateTime dateTime33 = dateTime21.toDateTime(chronology29);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMonths(4512155);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test14087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14087");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        int int4 = dateTimeZone2.getStandardOffset(0L);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone2);
        long long9 = dateTimeZone2.adjustOffset((long) 948, true);
        java.lang.String str11 = dateTimeZone2.getName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 108720000 + "'", int4 == 108720000);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 948L + "'", long9 == 948L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+30:12" + "'", str11, "+30:12");
    }

    @Test
    public void test14088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14088");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("0");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear(48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withZone(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType11.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfDay();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser19);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter22.withZone(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType27.getField(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfDay();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(chronology30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter22.withChronology(chronology30);
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatter34.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser35);
        java.io.Writer writer38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType40.getField(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.halfdayOfDay();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone50 = java.util.TimeZone.getTimeZone("years");
        boolean boolean51 = timeZone50.observesDaylightTime();
        boolean boolean52 = timeZone48.hasSameRules(timeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.Chronology chronology54 = chronology43.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(2922L, dateTimeZone53);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(dateTimeZone53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = org.joda.time.format.DateTimeFormat.forPattern("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 00:00:00 ");
        java.util.Locale locale59 = java.util.Locale.UK;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.lang.String str64 = locale62.getDisplayScript(locale63);
        java.lang.String str65 = locale60.getDisplayScript(locale63);
        java.util.Locale locale66 = java.util.Locale.UK;
        java.lang.String str67 = locale60.getDisplayScript(locale66);
        java.lang.String str68 = locale59.getDisplayLanguage(locale66);
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.util.Locale locale70 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet71 = locale70.getExtensionKeys();
        java.lang.String str72 = locale69.getDisplayScript(locale70);
        java.lang.String str73 = locale66.getDisplayCountry(locale69);
        java.util.Locale locale74 = java.util.Locale.UK;
        java.lang.String str75 = locale69.getDisplayScript(locale74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter58.withLocale(locale74);
        java.lang.String str77 = locale74.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter5.printTo(writer38, (org.joda.time.ReadablePartial) localTime56, locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeParser35);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "English" + "'", str68, "English");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "United Kingdom" + "'", str73, "United Kingdom");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English" + "'", str77, "English");
    }

    @Test
    public void test14089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14089");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean3 = localTime1.equals((java.lang.Object) dateTimeFieldType2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType4.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType2.getField(chronology7);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology7);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.minuteOfHour();
        mutableDateTime15.addWeeks((int) 'u');
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test14090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14090");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        mutableDateTime1.setZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = dateTimeZone8.getShortName((long) 13, locale11);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds(0);
        boolean boolean22 = dateTimeZone8.isLocalDateTimeGap(localDateTime19);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.monthOfYear();
        int int26 = localDateTime24.getEra();
        int int27 = localDateTime24.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+30:12" + "'", str15, "+30:12");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645456117243,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=37,MILLISECOND=243,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test14091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14091");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setWeekyear(20);
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) property4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test14092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14092");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone9);
        long long14 = dateTimeZone9.convertLocalToUTC((long) 0, true, (long) 32772);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.millisOfDay();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = property19.getAsText(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale22.toLanguageTag();
        boolean boolean24 = locale22.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime26.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime29.getZone();
        long long32 = dateTimeZone27.getMillisKeepLocal(dateTimeZone30, (long) 10);
        java.lang.String str33 = dateTimeZone27.toString();
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale35.toLanguageTag();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale35.getDisplayCountry(locale37);
        java.lang.String str39 = dateTimeZone27.getName((long) 54089980, locale37);
        java.lang.String str40 = locale37.getDisplayLanguage();
        java.lang.String str41 = locale22.getDisplayVariant(locale37);
        java.util.Set<java.lang.String> strSet42 = locale22.getUnicodeLocaleKeys();
        java.lang.String str43 = locale20.getDisplayName(locale22);
        java.lang.String str44 = locale22.getISO3Country();
        java.lang.String str45 = dateTimeZone9.getName(4168340760L, locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime46 = property5.set("21-Feb-2022 15:06:23", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"21-Feb-2022 15:06:23\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-108720000L) + "'", long14 == (-108720000L));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "76837263" + "'", str21, "76837263");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ko-KR" + "'", str23, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+30:12" + "'", str33, "+30:12");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ko-KR" + "'", str36, "ko-KR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str38, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+30:12" + "'", str39, "+30:12");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Korean" + "'", str40, "Korean");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str43, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "KOR" + "'", str44, "KOR");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+30:12" + "'", str45, "+30:12");
    }

    @Test
    public void test14093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14093");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours(32772);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.months();
        mutableDateTime4.add(durationFieldType6, 2023);
        boolean boolean9 = localTime3.isSupported(durationFieldType6);
        org.joda.time.LocalTime localTime11 = localTime3.plusMillis(2021);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test14094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14094");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean3 = localTime1.equals((java.lang.Object) dateTimeFieldType2);
        int int5 = localTime1.getValue((int) (byte) 0);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        java.lang.String str9 = durationFieldType8.toString();
        boolean boolean10 = localTime7.isSupported(durationFieldType8);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime13 = localTime7.withFieldAdded(durationFieldType11, 32772);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean17 = localTime15.equals((java.lang.Object) dateTimeFieldType16);
        org.joda.time.LocalTime.Property property18 = localTime7.property(dateTimeFieldType16);
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        int int20 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.years();
        java.lang.String str25 = durationFieldType24.toString();
        boolean boolean26 = localTime23.isSupported(durationFieldType24);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime29 = localTime23.withFieldAdded(durationFieldType27, 32772);
        org.joda.time.LocalTime.Property property30 = localTime23.hourOfDay();
        org.joda.time.LocalTime localTime32 = localTime23.minusMinutes(2922789);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology35);
        boolean boolean37 = localTime23.equals((java.lang.Object) chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology35.hourOfDay();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromMillisOfDay(50400019L, chronology35);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.years();
        java.lang.String str46 = durationFieldType45.toString();
        boolean boolean47 = localTime44.isSupported(durationFieldType45);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime50 = localTime44.withFieldAdded(durationFieldType48, 32772);
        org.joda.time.LocalTime.Property property51 = localTime44.hourOfDay();
        org.joda.time.LocalTime localTime52 = property51.roundCeilingCopy();
        org.joda.time.LocalTime localTime54 = property51.addCopy(19);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean58 = localTime56.equals((java.lang.Object) dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology62 = localTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType59.getField(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType57.getField(chronology62);
        boolean boolean67 = localTime54.isSupported(dateTimeFieldType57);
        java.lang.String str68 = dateTimeFieldType57.toString();
        org.joda.time.LocalTime.Property property69 = localTime42.property(dateTimeFieldType57);
        org.joda.time.LocalTime.Property property70 = localTime19.property(dateTimeFieldType57);
        org.joda.time.LocalTime localTime71 = property70.roundHalfEvenCopy();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("9 Nov 2023 16:37:45 GMT");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime75 = property70.setCopy("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 8:58:21 AM ", locale74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"? ?, ???? 8:58:21 AM \" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "years" + "'", str9, "years");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "years" + "'", str25, "years");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "years" + "'", str46, "years");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hourOfDay" + "'", str68, "hourOfDay");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
    }

    @Test
    public void test14095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14095");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getRangeDurationType();
        boolean boolean13 = localTime1.isSupported(durationFieldType12);
        int int14 = localTime1.getSecondOfMinute();
        org.joda.time.LocalTime localTime16 = localTime1.minusHours(182);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test14096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14096");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) '4', 54092146, 54104989, 7);
        java.util.Calendar.Builder builder10 = builder5.setTimeOfDay(54112697, 54244114, 54151367, 54374);
        java.util.Calendar.Builder builder14 = builder5.setWeekDate(888, 53, 414);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test14097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14097");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType1.getField(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfDay();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.millisOfSecond();
        org.joda.time.Chronology chronology11 = chronology4.withUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology4.getZone();
        org.joda.time.DurationField durationField13 = chronology4.months();
        org.joda.time.DurationField durationField14 = chronology4.years();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(129907488L, chronology4);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test14098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14098");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property16.addToCopy((int) 'u');
        org.joda.time.DateTime.Property property20 = dateTime19.centuryOfEra();
        org.joda.time.LocalDate localDate21 = dateTime19.toLocalDate();
        org.joda.time.DateTime dateTime23 = dateTime19.plusMonths((int) (byte) -1);
        org.joda.time.DateTime dateTime26 = dateTime19.withDurationAdded((long) (byte) 10, 50568445);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = localDate27.toInterval(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate27.plusMonths(0);
        org.joda.time.LocalDate.Property property32 = localDate31.year();
        int int33 = localDate31.size();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime35.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime38.getZone();
        long long41 = dateTimeZone36.getMillisKeepLocal(dateTimeZone39, (long) 10);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtMidnight(dateTimeZone39);
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale43.toLanguageTag();
        boolean boolean45 = localDate31.equals((java.lang.Object) str44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        boolean boolean47 = localDate31.equals((java.lang.Object) dateTime46);
        org.joda.time.DateMidnight dateMidnight48 = localDate31.toDateMidnight();
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Interval interval51 = localDate49.toInterval(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = localDate49.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate localDate55 = localDate49.minusMonths(10);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = localDate56.toInterval(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = localDate56.plusMonths(0);
        org.joda.time.LocalDate.Property property61 = localDate60.year();
        org.joda.time.LocalDate localDate63 = localDate60.minusYears(8);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean65 = localDate63.isSupported(durationFieldType64);
        boolean boolean66 = localDate49.isSupported(durationFieldType64);
        org.joda.time.LocalDate localDate68 = localDate31.withFieldAdded(durationFieldType64, 54092654);
        org.joda.time.DateTime dateTime70 = dateTime19.withFieldAdded(durationFieldType64, 21153144);
        int int71 = dateTime70.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ko-KR" + "'", str44, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 21155283 + "'", int71 == 21155283);
    }

    @Test
    public void test14099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14099");
        java.lang.Object obj0 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        java.lang.String str4 = durationFieldType3.toString();
        boolean boolean5 = localTime2.isSupported(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, 32772);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = localTime2.minusMinutes(2922789);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology14);
        boolean boolean16 = localTime2.equals((java.lang.Object) chronology14);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(obj0, chronology14);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology14);
        org.joda.time.LocalTime localTime20 = localTime18.plusHours(54149362);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = localTime20.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "years" + "'", str4, "years");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test14100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14100");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3, 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.era();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13, 0);
        mutableDateTime9.setTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.era();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        int int21 = localDate20.getDayOfMonth();
        org.joda.time.LocalDate localDate23 = localDate20.plusYears((int) (byte) 100);
        org.joda.time.Interval interval24 = localDate23.toInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime26.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime29.getZone();
        long long32 = dateTimeZone27.getMillisKeepLocal(dateTimeZone30, (long) 10);
        java.lang.String str33 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime18.toMutableDateTime(dateTimeZone27);
        mutableDateTime18.addDays(0);
        int int38 = mutableDateTime18.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableDateTime18.add(readablePeriod39, 5);
        boolean boolean42 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.Chronology chronology43 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfDay();
        mutableDateTime1.setChronology(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+30:12" + "'", str33, "+30:12");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test14101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14101");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType5.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfDay();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter12.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter12.getParser();
        java.lang.Appendable appendable15 = null;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusMinutes((int) (byte) 1);
        int int22 = localDateTime21.getYear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.year();
        org.joda.time.LocalDateTime localDateTime25 = property23.addWrapFieldToCopy(54134385);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(appendable15, (org.joda.time.ReadablePartial) localDateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeParser13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645456117411,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=37,MILLISECOND=411,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test14102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14102");
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis((long) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, (int) (short) 0);
        boolean boolean12 = instant7.isBefore((long) 5);
        java.util.Date date13 = instant7.toDate();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant7.withDurationAdded(readableDuration14, (int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear(13);
        java.lang.String str20 = instant7.toString(dateTimeFormatter17);
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter17.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatter17.getPrinter();
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.weekyears();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekyear();
        org.joda.time.DurationField durationField29 = chronology25.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology25.add(readablePeriod31, 1699547866000L, (-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter17.withChronology(chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(21199508, 54419220, 75600, 21211879, 21126, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21211879 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "01 January 1970 00:00:00 +00:00" + "'", str20, "01 January 1970 00:00:00 +00:00");
        org.junit.Assert.assertNotNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1699547866000L + "'", long34 == 1699547866000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test14103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14103");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("DateTimeField[year]");
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("seconds");
        java.util.Locale.Builder builder12 = builder7.setLanguage("");
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.toLanguageTag();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale16.getDisplayCountry(locale18);
        java.lang.String str20 = locale14.getDisplayCountry(locale16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime22.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime25.getZone();
        long long28 = dateTimeZone23.getMillisKeepLocal(dateTimeZone26, (long) 10);
        java.lang.String str29 = dateTimeZone23.toString();
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = locale31.toLanguageTag();
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.lang.String str34 = locale31.getDisplayCountry(locale33);
        java.lang.String str35 = dateTimeZone23.getName((long) 54089980, locale33);
        java.lang.String str36 = locale33.getDisplayLanguage();
        java.lang.String str37 = locale16.getDisplayName(locale33);
        java.util.Locale.Builder builder38 = builder12.setLocale(locale33);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        int int40 = localDate39.getDayOfMonth();
        org.joda.time.LocalDate localDate42 = localDate39.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime43 = localDate39.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = localDate44.toInterval(dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate44.plusMonths(0);
        org.joda.time.LocalDate.Property property49 = localDate48.year();
        int int50 = localDate48.size();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime52.getZone();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime55.getZone();
        long long58 = dateTimeZone53.getMillisKeepLocal(dateTimeZone56, (long) 10);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtMidnight(dateTimeZone56);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property61 = dateTime59.property(dateTimeFieldType60);
        int int62 = localDate39.get(dateTimeFieldType60);
        org.joda.time.LocalDate.Property property63 = localDate39.dayOfMonth();
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("hi!");
        int int66 = property63.getMaximumTextLength(locale65);
        java.util.Locale locale67 = java.util.Locale.UK;
        java.util.Locale locale68 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.util.Locale locale70 = java.util.Locale.KOREA;
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = locale70.getDisplayScript(locale71);
        java.lang.String str73 = locale68.getDisplayScript(locale71);
        java.util.Locale locale74 = java.util.Locale.UK;
        java.lang.String str75 = locale68.getDisplayScript(locale74);
        java.lang.String str76 = locale67.getDisplayLanguage(locale74);
        java.lang.String str77 = locale67.getDisplayLanguage();
        java.lang.String str78 = locale65.getDisplayName(locale67);
        java.lang.String str79 = locale33.getDisplayCountry(locale67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = timeZone1.getDisplayName(true, 292278993, locale67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 292278993");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko-KR" + "'", str17, "ko-KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str19, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str20, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+30:12" + "'", str29, "+30:12");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ko-KR" + "'", str32, "ko-KR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str34, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+30:12" + "'", str35, "+30:12");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Korean" + "'", str36, "Korean");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str37, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(localDate39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "English" + "'", str76, "English");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English" + "'", str77, "English");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "South Korea" + "'", str79, "South Korea");
    }

    @Test
    public void test14104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14104");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(612, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 612 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14105");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime4.withMillis((long) 20);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekyear(54126);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond(20);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test14106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14106");
        java.lang.Throwable throwable0 = null;
        java.io.IOException iOException1 = new java.io.IOException(throwable0);
        java.io.IOException iOException3 = new java.io.IOException("Property[weekOfWeekyear]");
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.Throwable throwable7 = null;
        java.io.IOException iOException8 = new java.io.IOException(throwable7);
        java.io.IOException iOException10 = new java.io.IOException("Property[weekOfWeekyear]");
        iOException8.addSuppressed((java.lang.Throwable) iOException10);
        java.lang.Throwable throwable13 = null;
        java.io.IOException iOException14 = new java.io.IOException(throwable13);
        java.io.IOException iOException15 = new java.io.IOException("", (java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.lang.Throwable throwable17 = null;
        java.io.IOException iOException18 = new java.io.IOException(throwable17);
        java.io.IOException iOException20 = new java.io.IOException("Property[weekOfWeekyear]");
        iOException18.addSuppressed((java.lang.Throwable) iOException20);
        java.lang.Throwable[] throwableArray22 = iOException20.getSuppressed();
        iOException15.addSuppressed((java.lang.Throwable) iOException20);
        iOException10.addSuppressed((java.lang.Throwable) iOException15);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.io.IOException iOException26 = new java.io.IOException("01:52:13.046", (java.lang.Throwable) iOException15);
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException15);
        iOException3.addSuppressed((java.lang.Throwable) iOException15);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        int int30 = localDate29.getDayOfMonth();
        org.joda.time.LocalDate localDate32 = localDate29.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property33 = localDate32.centuryOfEra();
        int int34 = property33.getMaximumValueOverall();
        org.joda.time.LocalDate localDate35 = property33.roundFloorCopy();
        org.joda.time.LocalDate localDate37 = localDate35.minusDays(12);
        org.joda.time.LocalDate localDate39 = localDate35.withWeekyear(10);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate42 = localDate39.withPeriodAdded(readablePeriod40, 2922789);
        org.joda.time.LocalDate.Property property43 = localDate39.monthOfYear();
        org.joda.time.LocalDate localDate45 = localDate39.withWeekyear(54125287);
        java.lang.Throwable throwable46 = null;
        java.io.IOException iOException47 = new java.io.IOException(throwable46);
        java.io.IOException iOException48 = new java.io.IOException((java.lang.Throwable) iOException47);
        boolean boolean49 = localDate39.equals((java.lang.Object) iOException47);
        java.lang.Throwable throwable50 = null;
        java.io.IOException iOException51 = new java.io.IOException(throwable50);
        java.io.IOException iOException53 = new java.io.IOException("Property[weekOfWeekyear]");
        iOException51.addSuppressed((java.lang.Throwable) iOException53);
        java.io.IOException iOException55 = new java.io.IOException((java.lang.Throwable) iOException53);
        iOException47.addSuppressed((java.lang.Throwable) iOException53);
        java.lang.Throwable throwable58 = null;
        java.io.IOException iOException59 = new java.io.IOException(throwable58);
        java.io.IOException iOException60 = new java.io.IOException("", (java.lang.Throwable) iOException59);
        java.io.IOException iOException61 = new java.io.IOException((java.lang.Throwable) iOException60);
        java.lang.Throwable throwable62 = null;
        java.io.IOException iOException63 = new java.io.IOException(throwable62);
        java.io.IOException iOException65 = new java.io.IOException("Property[weekOfWeekyear]");
        iOException63.addSuppressed((java.lang.Throwable) iOException65);
        java.lang.Throwable[] throwableArray67 = iOException65.getSuppressed();
        iOException60.addSuppressed((java.lang.Throwable) iOException65);
        iOException53.addSuppressed((java.lang.Throwable) iOException65);
        iOException15.addSuppressed((java.lang.Throwable) iOException65);
        java.lang.String str71 = iOException15.toString();
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(localDate29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2922789 + "'", int34 == 2922789);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "java.io.IOException: " + "'", str71, "java.io.IOException: ");
    }

    @Test
    public void test14107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14107");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property8.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = property8.addNoWrapToCopy(224);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test14108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14108");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMinutes((int) (byte) 1);
        int int6 = localDateTime5.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusMillis(23155);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(54243426);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withEra(21242491);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21242491 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456117499,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=37,MILLISECOND=499,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test14109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14109");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = localDate5.toInterval(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate5.plusMonths(0);
        org.joda.time.LocalDate.Property property10 = localDate9.year();
        int int11 = localDate9.size();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime13.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime16.getZone();
        long long19 = dateTimeZone14.getMillisKeepLocal(dateTimeZone17, (long) 10);
        org.joda.time.DateTime dateTime20 = localDate9.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        int int23 = localDate0.get(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = localDate24.toInterval(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate24.plusMonths(0);
        org.joda.time.LocalDate.Property property29 = localDate28.weekOfWeekyear();
        java.lang.String str30 = property29.toString();
        org.joda.time.LocalDate localDate31 = property29.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean33 = localDate31.isSupported(dateTimeFieldType32);
        org.joda.time.LocalDate.Property property34 = localDate0.property(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight35 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate37 = localDate0.minusDays(54092654);
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[weekOfWeekyear]" + "'", str30, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test14110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14110");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(21, 1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 19, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfYear(14);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis(2030);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDayOfMonth(44541985);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 44541985 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test14111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14111");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) '4', 54092146, 54104989, 7);
        java.util.Calendar calendar6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar6.get(54161953);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54161953");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=3299820949007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2074,MONTH=6,WEEK_OF_YEAR=30,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=207,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=55,SECOND=49,MILLISECOND=7,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14112");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = localDate4.toInterval(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate4.plusMonths(0);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        int int10 = localDate8.size();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        long long18 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone16);
        int int20 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate21 = dateTime19.toLocalDate();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime19.millisOfSecond();
        boolean boolean24 = property23.isLeap();
        org.joda.time.DateTime dateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property23.getFieldType();
        java.lang.String str27 = property23.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = property23.setCopy("4510305-01-01T00:00:00.000-81:11:15.054");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"4510305-01-01T00:00:00.000-81:11:15.054\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "millisOfSecond" + "'", str27, "millisOfSecond");
    }

    @Test
    public void test14113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14113");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.toLanguageTag();
        boolean boolean18 = localDate4.equals((java.lang.Object) str17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        boolean boolean20 = localDate4.equals((java.lang.Object) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property22 = dateTime21.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime21.withEra(21224);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21224 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko-KR" + "'", str17, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test14114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14114");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 7);
        int int9 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.setWeekyear(54127);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime8.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = property12.set("21-Feb-2022 15:06:52");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"21-Feb-2022 15:06:52\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2922789 + "'", int5 == 2922789);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14115");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.util.Locale.setDefault(category1, locale2);
        boolean boolean6 = strSet0.contains((java.lang.Object) category1);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder9 = builder7.setLocale(locale8);
        java.util.Locale locale10 = locale8.stripExtensions();
        java.util.Locale.setDefault(category1, locale10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime13.getZone();
        long long16 = dateTimeZone14.previousTransition((-431366460000L));
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime19.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime22.getZone();
        long long25 = dateTimeZone20.getMillisKeepLocal(dateTimeZone23, (long) 10);
        java.lang.String str26 = dateTimeZone20.toString();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale28.getDisplayCountry(locale30);
        java.lang.String str32 = dateTimeZone20.getName((long) 54089980, locale30);
        java.lang.String str33 = locale30.getDisplayLanguage();
        java.lang.String str34 = locale30.getScript();
        java.lang.String str35 = dateTimeZone14.getName((long) 52, locale30);
        java.util.Locale.setDefault(category1, locale30);
        java.lang.String str37 = locale30.getISO3Language();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-431366460000L) + "'", long16 == (-431366460000L));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+30:12" + "'", str26, "+30:12");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ko-KR" + "'", str29, "ko-KR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str31, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+30:12" + "'", str32, "+30:12");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Korean" + "'", str33, "Korean");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+30:12" + "'", str35, "+30:12");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "kor" + "'", str37, "kor");
    }

    @Test
    public void test14116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14116");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(6241);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test14117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14117");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.toLanguageTag();
        boolean boolean18 = localDate4.equals((java.lang.Object) str17);
        org.joda.time.LocalDate localDate20 = localDate4.minusWeeks(0);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate20.withPeriodAdded(readablePeriod21, 12);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.DateTime dateTime27 = property26.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        long long29 = property26.remainder();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko-KR" + "'", str17, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1891237693L + "'", long29 == 1891237693L);
    }

    @Test
    public void test14118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14118");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readableDuration6);
        int int8 = localDateTime5.getHourOfDay();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime();
        int int10 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withCenturyOfEra(126);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456117763,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=37,MILLISECOND=763,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test14119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14119");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.withDurationAdded((long) 10, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType7.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.hourOfDay();
        java.lang.String str14 = chronology10.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology10.getZone();
        long long18 = dateTimeZone15.adjustOffset((long) (byte) 0, false);
        org.joda.time.DateTime dateTime19 = dateTime1.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime.Property property20 = dateTime1.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test14120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14120");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        int int2 = mutableDateTime1.getRoundingMode();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime6 = property3.set("21 June 0130 15:04:16 ");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"21 June 0130 15:04:16 \" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test14121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14121");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.Interval interval4 = localDate3.toInterval();
        org.joda.time.Chronology chronology5 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.centuryOfEra();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        int int8 = localDate7.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate7.plus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        long long18 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        java.lang.String str19 = dateTimeZone13.toString();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.lang.String str24 = locale21.getDisplayCountry(locale23);
        java.lang.String str25 = dateTimeZone13.getName((long) 54089980, locale23);
        boolean boolean27 = dateTimeZone13.isStandardOffset((long) 14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.DateTime dateTime29 = localDate10.toDateTimeAtCurrentTime(dateTimeZone13);
        boolean boolean30 = dateTimeZone13.isFixed();
        org.joda.time.Chronology chronology31 = chronology5.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField32 = chronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = chronology5.millisOfDay();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+30:12" + "'", str19, "+30:12");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ko-KR" + "'", str22, "ko-KR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str24, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+30:12" + "'", str25, "+30:12");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test14122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14122");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) (-3600000));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        boolean boolean6 = mutableDateTime4.isAfter((long) 21);
        org.joda.time.Instant instant7 = mutableDateTime4.toInstant();
        mutableDateTime4.addMinutes(32769);
        int int12 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "01/01/70 15:01", 8);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime4.monthOfYear();
        java.lang.String str14 = property13.getAsShortText();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusYears(14);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withDurationAdded(readableDuration21, 20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.minusWeeks((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.withMonthOfYear(5);
        int int30 = localDateTime16.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime16.minus(readableDuration31);
        int int33 = property13.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-9) + "'", int12 == (-9));
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Mar" + "'", str14, "Mar");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645456117883,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=37,MILLISECOND=883,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test14123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14123");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundCeilingCopy();
        java.lang.String str11 = localDateTime10.toString();
        java.lang.Object obj12 = null;
        boolean boolean13 = localDateTime10.equals(obj12);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456117931,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=37,MILLISECOND=931,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2023-01-02T00:00:00.000" + "'", str11, "2023-01-02T00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14124");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("21225100");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test14125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14125");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        int int8 = localDate7.getMonthOfYear();
        org.joda.time.LocalDate localDate10 = localDate7.minusMonths(55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDate10.getFieldType(21361933);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 21361933");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test14126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14126");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusYears((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDateTime8.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = localDateTime8.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(169);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds(0);
        int int21 = localDateTime20.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.era();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.years();
        mutableDateTime23.add(durationFieldType25, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.withFieldAdded(durationFieldType25, (int) 'a');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks((-75382309));
        org.joda.time.DateTime dateTime32 = dateTime12.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456117984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=37,MILLISECOND=984,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645456117984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=37,MILLISECOND=984,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 54517984 + "'", int21 == 54517984);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test14127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14127");
        java.util.Locale locale1 = new java.util.Locale("1969-12-31T23:00:00.001-01:00");
        java.lang.String str2 = locale1.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "1969-12-31t23:00:00.001-01:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14128");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(19);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        java.util.Locale locale16 = new java.util.Locale("2022-02-21T14:02:48.112-01:00", "seconds");
        int int17 = property12.getMaximumTextLength(locale16);
        org.joda.time.DateTime dateTime19 = property12.addWrapFieldToCopy(54247488);
        org.joda.time.DateTime dateTime20 = property12.roundFloorCopy();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals(locale16.toString(), "2022-02-21t14:02:48.112-01:00_SECONDS");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test14129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14129");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property4.setCopy(19);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withMillisOfDay(4);
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis(60);
        int int18 = localDateTime17.getCenturyOfEra();
        int int19 = localDateTime17.getHourOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456118026,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=26,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
    }

    @Test
    public void test14130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14130");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundCeilingCopy();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test14131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14131");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate4.minus(readablePeriod6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) '4');
        boolean boolean11 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withLocale(locale13);
        java.lang.String str15 = localDate8.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, 54100989);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate18.withWeekyear(20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) localDate18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd" + "'", str15, "\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test14132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14132");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromCalendarFields(calendar5);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields(calendar5);
        java.lang.String str8 = calendar5.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645984080000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=27,DAY_OF_YEAR=58,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=48,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.util.GregorianCalendar[time=1645984080000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=27,DAY_OF_YEAR=58,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=48,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str8, "java.util.GregorianCalendar[time=1645984080000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=27,DAY_OF_YEAR=58,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=48,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14133");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        java.lang.String str7 = chronology3.toString();
        org.joda.time.Chronology chronology8 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.year();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test14134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14134");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        mutableDateTime1.setTime((long) 19);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14135");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("01/01/01 00:00");
        java.util.Locale locale2 = dateTimeFormatter1.getLocale();
        java.lang.Appendable appendable3 = null;
        org.joda.time.ReadablePartial readablePartial4 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter1.printTo(appendable3, readablePartial4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNull(locale2);
    }

    @Test
    public void test14136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14136");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1L);
        int int2 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.era();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime4.add(readablePeriod6, (int) (byte) 100);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType10.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfDay();
        org.joda.time.DurationField durationField17 = dateTimeField16.getLeapDurationField();
        int int18 = mutableDateTime4.get(dateTimeField16);
        mutableDateTime4.addHours(54092146);
        mutableDateTime4.setMillis((long) ' ');
        int int23 = mutableDateTime4.getRoundingMode();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime4.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime4.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime4.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime4.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test14137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14137");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        boolean boolean4 = mutableDateTime1.isAfterNow();
        mutableDateTime1.add((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType7.getDurationType();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.property(dateTimeFieldType7);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(1L);
        int int13 = mutableDateTime12.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.era();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime15.add(readablePeriod17, (int) (byte) 100);
        mutableDateTime12.setTime((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.addMillis((int) 'x');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfYear" + "'", str8, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test14138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14138");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 0);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 1645455690);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(54113901);
        int int8 = localDateTime7.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
    }

    @Test
    public void test14139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14139");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        long long7 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = instant6.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setDayOfWeek(442);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 442 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test14140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14140");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.DateTime dateTime8 = localTime1.toDateTimeToday();
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfCentury();
        org.joda.time.DateTime.Property property11 = dateTime8.dayOfYear();
        org.joda.time.DateTime.Property property12 = dateTime8.yearOfEra();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14141");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        boolean boolean4 = mutableDateTime1.isAfterNow();
        mutableDateTime1.add((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType7.getDurationType();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.property(dateTimeFieldType7);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withPeriodAdded(readablePeriod16, (int) (short) 100);
        int[] intArray19 = localDateTime18.getValues();
        org.joda.time.Chronology chronology20 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology20);
        org.joda.time.Chronology chronology23 = chronology20.withUTC();
        mutableDateTime1.setChronology(chronology23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval27 = property26.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfYear" + "'", str8, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645456118295,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=295,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(intArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 10, 3, 54518295]");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test14142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14142");
        java.util.Locale locale2 = new java.util.Locale("43627105", "Property[millisOfDay]");
        org.junit.Assert.assertEquals(locale2.toString(), "43627105_PROPERTY[MILLISOFDAY]");
    }

    @Test
    public void test14143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14143");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime5.getZone();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime5.add(readableDuration7, 0);
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.setWeekyear(52);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        int int14 = localDate13.getDayOfMonth();
        org.joda.time.LocalDate localDate16 = localDate13.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        boolean boolean20 = mutableDateTime18.isAfter((long) 21);
        boolean boolean22 = mutableDateTime18.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime24.getZone();
        mutableDateTime18.setZone(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate13.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate31 = localDate29.withWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime37.getZone();
        long long40 = dateTimeZone35.getMillisKeepLocal(dateTimeZone38, (long) 10);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(10L, dateTimeZone35);
        long long43 = dateTimeZone35.nextTransition((long) 12);
        org.joda.time.DateTime dateTime44 = localDate29.toDateTimeAtMidnight(dateTimeZone35);
        long long46 = dateTimeZone25.getMillisKeepLocal(dateTimeZone35, (long) '#');
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime5.toMutableDateTime(dateTimeZone25);
        mutableDateTime48.addMonths((int) '#');
        java.lang.String str51 = mutableDateTime48.toString();
        mutableDateTime48.addMonths(54);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime48.dayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 12L + "'", long43 == 12L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 35L + "'", long46 == 35L);
        org.junit.Assert.assertNotNull(mutableDateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0055-01-20T21:20:38.314+30:12" + "'", str51, "0055-01-20T21:20:38.314+30:12");
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test14144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14144");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        int int5 = property4.getMaximumValueOverall();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.util.Locale locale7 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale7.getDisplayScript(locale10);
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale7.getDisplayScript(locale13);
        java.lang.String str15 = locale6.getDisplayLanguage(locale13);
        java.util.Locale.setDefault(locale6);
        int int17 = property4.getMaximumTextLength(locale6);
        java.util.Locale locale18 = java.util.Locale.UK;
        java.util.Locale locale19 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = locale19.getDisplayScript(locale22);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale19.getDisplayScript(locale25);
        java.lang.String str27 = locale18.getDisplayLanguage(locale25);
        java.util.Locale.setDefault(locale18);
        int int29 = property4.getMaximumShortTextLength(locale18);
        org.joda.time.DateTimeField dateTimeField30 = property4.getField();
        org.joda.time.LocalDate localDate31 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate33 = property4.addToCopy(50584);
        int int34 = localDate33.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2922789 + "'", int5 == 2922789);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English" + "'", str27, "English");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 53 + "'", int34 == 53);
    }

    @Test
    public void test14145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14145");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder10 = builder6.setDate(111, 901, (int) '4');
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.LocalDate localDate14 = localDate11.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        boolean boolean18 = mutableDateTime16.isAfter((long) 21);
        boolean boolean20 = mutableDateTime16.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime22.getZone();
        mutableDateTime16.setZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDate11.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate29 = localDate27.withWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime32.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime35.getZone();
        long long38 = dateTimeZone33.getMillisKeepLocal(dateTimeZone36, (long) 10);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(10L, dateTimeZone33);
        long long41 = dateTimeZone33.nextTransition((long) 12);
        org.joda.time.DateTime dateTime42 = localDate27.toDateTimeAtMidnight(dateTimeZone33);
        long long44 = dateTimeZone23.getMillisKeepLocal(dateTimeZone33, (long) '#');
        java.util.TimeZone timeZone45 = dateTimeZone33.toTimeZone();
        java.util.Calendar.Builder builder46 = builder6.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder50 = builder46.setDate(54139, 2922, 54112806);
        java.util.Calendar.Builder builder54 = builder46.setWeekDate(54134252, 2, 365);
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.lang.String str56 = locale55.toLanguageTag();
        boolean boolean57 = locale55.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime59.getZone();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime62.getZone();
        long long65 = dateTimeZone60.getMillisKeepLocal(dateTimeZone63, (long) 10);
        java.lang.String str66 = dateTimeZone60.toString();
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.lang.String str69 = locale68.toLanguageTag();
        java.util.Locale locale70 = java.util.Locale.KOREA;
        java.lang.String str71 = locale68.getDisplayCountry(locale70);
        java.lang.String str72 = dateTimeZone60.getName((long) 54089980, locale70);
        java.lang.String str73 = locale70.getDisplayLanguage();
        java.lang.String str74 = locale55.getDisplayVariant(locale70);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(locale55);
        calendar75.set(54112697, 6048836, 1380, (int) (short) 0, 54136);
        java.util.TimeZone timeZone82 = calendar75.getTimeZone();
        java.util.Calendar.Builder builder83 = builder54.setTimeZone(timeZone82);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 12L + "'", long41 == 12L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 35L + "'", long44 == 35L);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ko-KR" + "'", str56, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+30:12" + "'", str66, "+30:12");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ko-KR" + "'", str69, "ko-KR");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str71, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+30:12" + "'", str72, "+30:12");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Korean" + "'", str73, "Korean");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=54112697,MONTH=6048836,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1380,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=54136,SECOND=38,MILLISECOND=367,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone82);
        org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test14146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14146");
        java.util.Date date5 = new java.util.Date(378, 985, 21264, 54384976, 21247976);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Nov 28 04:56:00 GMT 8662");
    }

    @Test
    public void test14147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14147");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.Chronology chronology9 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withWeekyear(54146192);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(54121897);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plus(readableDuration14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear(1921);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1921 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456118438,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=438,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 10, 3, 54518438]");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test14148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14148");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMinimumValueOverall();
        org.joda.time.LocalDate localDate7 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property4.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        org.joda.time.LocalDate localDate11 = property4.addWrapFieldToCopy(82800100);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localDate11.getValue(21206333);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 21206333");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "centuryOfEra" + "'", str5, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test14149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14149");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean3 = localTime1.equals((java.lang.Object) dateTimeFieldType2);
        int int5 = localTime1.getValue((int) (byte) 0);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        java.lang.String str9 = durationFieldType8.toString();
        boolean boolean10 = localTime7.isSupported(durationFieldType8);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime13 = localTime7.withFieldAdded(durationFieldType11, 32772);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean17 = localTime15.equals((java.lang.Object) dateTimeFieldType16);
        org.joda.time.LocalTime.Property property18 = localTime7.property(dateTimeFieldType16);
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        int int20 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.DateTime dateTime21 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMonths(674);
        org.joda.time.DateTime.Property property24 = dateTime23.year();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "years" + "'", str9, "years");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test14150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14150");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 0);
        long long4 = dateTimeZone2.convertUTCToLocal(1L);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.withYear(3600000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599999L) + "'", long4 == (-3599999L));
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test14151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14151");
        java.io.IOException iOException1 = new java.io.IOException("00:00:00.036");
    }

    @Test
    public void test14152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14152");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 10);
        int int11 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusMonths(54134004);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusMinutes(2922);
        int int18 = localDateTime10.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.withDurationAdded(readableDuration19, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(960);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456118550,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=550,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54518550 + "'", int11 == 54518550);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test14153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14153");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.secondOfDay();
        long long9 = mutableDateTime7.getMillis();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutableDateTime10.add(durationFieldType12, 2023);
        java.lang.String str15 = durationFieldType12.toString();
        java.lang.String str16 = durationFieldType12.getName();
        mutableDateTime7.add(durationFieldType12, 28);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645456118566L + "'", long9 == 1645456118566L);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "months" + "'", str15, "months");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "months" + "'", str16, "months");
    }

    @Test
    public void test14154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14154");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder10 = builder6.setDate(111, 901, (int) '4');
        java.util.Calendar.Builder builder14 = builder10.setDate((int) 'a', (int) 'u', 16);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("00:00:00.000");
        java.time.ZoneId zoneId17 = timeZone16.toZoneId();
        java.util.Calendar.Builder builder18 = builder14.setTimeZone(timeZone16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder21 = builder14.setWeekDefinition(54195531, 996);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test14155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14155");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeekYear();
        calendar0.setFirstDayOfWeek(54110417);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar4);
        boolean boolean6 = calendar4.isWeekDateSupported();
        calendar4.setFirstDayOfWeek(5);
        calendar4.setMinimalDaysInFirstWeek((-1));
        java.util.Date date16 = new java.util.Date(100, 4, 6, 0, 21);
        int int17 = date16.getYear();
        calendar4.setTime(date16);
        calendar0.setTime(date16);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar0.getActualMaximum(76834);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 76834");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=957572460000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=54110417,minimalDaysInFirstWeek=4,ERA=1,YEAR=2000,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=127,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=957572460000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=-1,ERA=1,YEAR=2000,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=127,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals(date16.toString(), "Sat May 06 00:21:00 GMT 2000");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test14156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14156");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.set(985);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 0, dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime7.copy();
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.add((long) 50578855);
        mutableDateTime7.addMonths(21232179);
        java.util.Date date15 = new java.util.Date((-3600000L));
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromDateFields(date15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime18.getZone();
        long long21 = dateTimeZone19.previousTransition((-431366460000L));
        java.lang.String str23 = dateTimeZone19.getNameKey((long) (byte) 10);
        org.joda.time.Interval interval24 = localDate16.toInterval(dateTimeZone19);
        java.lang.String str26 = dateTimeZone19.getName((long) 21235014);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(276);
        long long30 = dateTimeZone19.getMillisKeepLocal(dateTimeZone28, 36275968667000L);
        mutableDateTime7.setZone(dateTimeZone28);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertEquals(date15.toString(), "Wed Dec 31 23:00:00 GMT 1969");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-431366460000L) + "'", long21 == (-431366460000L));
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(interval24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+30:12" + "'", str26, "+30:12");
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 36275083787000L + "'", long30 == 36275083787000L);
    }

    @Test
    public void test14157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14157");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(2922789);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology13);
        boolean boolean15 = localTime1.equals((java.lang.Object) chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 0);
        java.lang.String str22 = dateTimeZone20.getShortName((long) 1645455690);
        int int24 = dateTimeZone20.getOffset((long) 3);
        org.joda.time.Chronology chronology25 = chronology13.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology25);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Calendar calendar32 = builder31.build();
        calendar32.clear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType34.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.hourOfDay();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(chronology37);
        boolean boolean43 = calendar32.before((java.lang.Object) chronology37);
        mutableDateTime30.setChronology(chronology37);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-01:00" + "'", str22, "-01:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3600000) + "'", int24 == (-3600000));
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test14158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14158");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.addWrapField((-1));
        java.lang.String str6 = mutableDateTime5.toString();
        mutableDateTime5.addYears(54139233);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setMinuteOfHour(54489695);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54489695 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-0001-01-01T00:00:00.000+30:12" + "'", str6, "-0001-01-01T00:00:00.000+30:12");
    }

    @Test
    public void test14159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14159");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMinutes(2122);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMillis(54096794);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMillis(21);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) 100);
        boolean boolean14 = localDateTime7.equals((java.lang.Object) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(54161953);
        org.joda.time.LocalDateTime localDateTime19 = property15.addToCopy(21133);
        org.joda.time.LocalDateTime localDateTime21 = property15.setCopy(1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfSecond();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusWeeks(100);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plus(readablePeriod31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears(54092146);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.era();
        org.joda.time.LocalDateTime localDateTime36 = property35.roundHalfFloorCopy();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = property35.getAsText(locale37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = property22.setCopy("21 Feb 2022 15:02:18 GMT", locale37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"21 Feb 2022 15:02:18 GMT\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456118711,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=711,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645456118711,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=711,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u516c\u5143" + "'", str38, "\u516c\u5143");
    }

    @Test
    public void test14160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14160");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Date date2 = calendar0.getTime();
        int int3 = calendar0.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone4 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        long long12 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (long) 10);
        java.lang.String str13 = dateTimeZone10.toString();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone10);
        java.util.TimeZone timeZone15 = dateTimeZone10.toTimeZone();
        java.lang.String str16 = timeZone15.getID();
        boolean boolean17 = timeZone15.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone15);
        boolean boolean19 = timeZone4.hasSameRules(timeZone15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) timeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: sun.util.calendar.ZoneInfo");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456118741,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=741,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 15:08:38 GMT 2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+30:12" + "'", str13, "+30:12");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GMT" + "'", str16, "GMT");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test14161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14161");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        int[] intArray5 = localTime3.getValues();
        java.util.Calendar.Builder builder6 = builder0.setFields(intArray5);
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay(674, (int) (byte) -1, 54113409);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder10.setWeekDefinition(21198913, 54107140);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test14162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14162");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        boolean boolean4 = mutableDateTime1.isAfterNow();
        boolean boolean5 = mutableDateTime1.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(21, 1);
        mutableDateTime1.setZoneRetainFields(dateTimeZone8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime1.add(readablePeriod10, (int) ' ');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.minuteOfDay();
        long long14 = property13.remainder();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 38766L + "'", long14 == 38766L);
    }

    @Test
    public void test14163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14163");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 4);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(1L);
        int int4 = mutableDateTime3.getRoundingMode();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime3.year();
        mutableDateTime3.addHours(40);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusSeconds(0);
        int int14 = localDateTime13.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withFieldAdded(durationFieldType16, (int) (byte) 1);
        org.joda.time.DateTime dateTime19 = localDateTime13.toDateTime();
        boolean boolean20 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime3.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime3.getZone();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.dayOfYear();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = mutableDateTime1.get(dateTimeFieldType25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645456118777,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=777,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 54518777 + "'", int14 == 54518777);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14164");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 54117389);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfSecond();
        org.joda.time.DateTime dateTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test14165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14165");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusWeeks(100);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withDurationAdded(readableDuration7, 14);
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.plusMillis(2122);
        org.joda.time.LocalDateTime.Property property13 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy(21153143);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456118862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test14166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14166");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        boolean boolean1 = mutableDateTime0.isAfterNow();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2, (int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        long long12 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (long) 10);
        boolean boolean13 = dateTimeZone10.isFixed();
        mutableDateTime0.setZoneRetainFields(dateTimeZone10);
        java.util.TimeZone timeZone15 = dateTimeZone10.toTimeZone();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.fromCalendarFields(calendar17);
        boolean boolean19 = calendar17.isWeekDateSupported();
        calendar17.setFirstDayOfWeek(5);
        calendar17.setMinimalDaysInFirstWeek(54098460);
        java.util.TimeZone timeZone24 = calendar17.getTimeZone();
        timeZone24.setRawOffset(8);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        calendar16.setTimeZone(timeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645456118875,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=8,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=875,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645456118875,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=8,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=54098460,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=875,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone27);
    }

    @Test
    public void test14167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14167");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(2922789);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology13);
        boolean boolean15 = localTime1.equals((java.lang.Object) chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = chronology13.getDateTimeMillis(54263665, 996, 0, 60236);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 996 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14168");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) '4', 54092146, 54104989, 7);
        java.util.Calendar.Builder builder9 = builder5.setTimeOfDay(121, 15, (int) (short) 1);
        java.util.Calendar.Builder builder13 = builder5.setTimeOfDay(54100989, 54155219, 6055);
        java.util.Calendar calendar14 = builder5.build();
        java.util.Calendar.Builder builder18 = builder5.setTimeOfDay(431506, 45, 362);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder20 = builder5.setInstant((long) 54477604);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=198012879595000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=8244,MONTH=9,WEEK_OF_YEAR=41,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=285,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=39,SECOND=55,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test14169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14169");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale1.getDisplayScript(locale4);
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = locale1.getDisplayScript(locale7);
        java.lang.String str9 = locale0.getDisplayLanguage(locale7);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale10.getDisplayScript(locale11);
        java.lang.String str14 = locale7.getDisplayCountry(locale10);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale10);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        calendar15.setFirstDayOfWeek(50578855);
        long long19 = calendar15.getTimeInMillis();
        int int20 = calendar15.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English" + "'", str9, "English");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United Kingdom" + "'", str14, "United Kingdom");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645456118917,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=50578855,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=917,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645456118917L + "'", long19 == 1645456118917L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test14170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14170");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears(14);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromCalendarFields(calendar13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusYears(14);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withDurationAdded(readableDuration19, 20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.minusWeeks((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str25 = dateTimeFieldType24.toString();
        int int26 = localDateTime14.get(dateTimeFieldType24);
        boolean boolean27 = localDateTime11.isSupported(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456118950,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=950,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645456118950,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=38,MILLISECOND=950,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "minuteOfHour" + "'", str25, "minuteOfHour");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test14171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14171");
        java.util.Date date5 = new java.util.Date(100, 4, 6, 0, 21);
        java.util.Date date6 = new java.util.Date();
        boolean boolean7 = date5.before(date6);
        java.lang.String str8 = date5.toGMTString();
        date5.setHours(123);
        int int11 = date5.getSeconds();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu May 11 03:21:00 GMT 2000");
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 15:08:38 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6 May 2000 00:21:00 GMT" + "'", str8, "6 May 2000 00:21:00 GMT");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14172");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property16.addToCopy(7);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds(54142876);
        org.joda.time.LocalDate localDate22 = dateTime21.toLocalDate();
        int int23 = localDate22.getDayOfYear();
        org.joda.time.LocalDate localDate25 = localDate22.minusWeeks(54096794);
        org.joda.time.LocalDate localDate27 = localDate25.withYearOfEra(153158);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 21161);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.millisOfDay();
        java.lang.String str34 = mutableDateTime31.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        int int35 = mutableDateTime31.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime38 = property36.add(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType39.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfDay();
        java.lang.String str46 = dateTimeField44.getAsShortText(10L);
        long long48 = dateTimeField44.roundHalfEven((long) 1);
        boolean boolean49 = dateTimeField44.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField44.getType();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getRangeDurationType();
        mutableDateTime38.set(dateTimeFieldType50, 1439);
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutableDateTime38.add(readableDuration54, 21245713);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(1L);
        int int59 = mutableDateTime58.getCenturyOfEra();
        mutableDateTime58.setMillisOfDay(5);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime58.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime63 = property62.roundHalfFloor();
        boolean boolean64 = mutableDateTime38.isAfter((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.DateTime dateTime65 = localTime29.toDateTime((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.Instant instant66 = org.joda.time.Instant.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean68 = instant66.isSupported(dateTimeFieldType67);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType67.getDurationType();
        int int70 = dateTime65.get(dateTimeFieldType67);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = localDate27.get(dateTimeFieldType67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 157 + "'", int23 == 157);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str34, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 19 + "'", int59 == 19);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationFieldType69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
    }

    @Test
    public void test14173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14173");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property16.addToCopy(7);
        org.joda.time.DateTime dateTime21 = property16.addWrapFieldToCopy((int) '4');
        org.joda.time.DateTime dateTime22 = property16.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime24.getZone();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.secondOfMinute();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime24.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime31.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        long long37 = dateTimeZone32.getMillisKeepLocal(dateTimeZone35, (long) 10);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(10L, dateTimeZone32);
        int int40 = dateTimeZone32.getStandardOffset((long) 40);
        mutableDateTime24.setZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime42 = dateTime22.withZone(dateTimeZone32);
        long long44 = dateTimeZone32.previousTransition(19428L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 108720000 + "'", int40 == 108720000);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 19428L + "'", long44 == 19428L);
    }

    @Test
    public void test14174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14174");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        java.util.Locale locale4 = dateTimeFormatter0.getLocale();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromCalendarFields(calendar12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str19 = dateTimeFieldType18.toString();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType18.getDurationType();
        boolean boolean21 = localDateTime15.isSupported(durationFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withCenturyOfEra((int) 'u');
        boolean boolean24 = dateTimeZone11.isLocalDateTimeGap(localDateTime15);
        org.joda.time.Chronology chronology25 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology25);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime.Property property28 = dateTime26.centuryOfEra();
        org.joda.time.DateTime dateTime29 = property28.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime29.withMillisOfSecond(54480262);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54480262 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456119055,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=55,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfYear" + "'", str19, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14175");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readablePeriod2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusSeconds(75600100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = property7.setCopy("2022-02-21T15:08:13.897");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:08:13.897\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456119071,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=71,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test14176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14176");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        calendar0.clear(13);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.shortTime();
        java.lang.String str15 = localDateTime13.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.monthOfYear();
        boolean boolean17 = calendar0.before((java.lang.Object) property16);
        java.time.Instant instant18 = calendar0.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = calendar0.getLeastMaximum(1922);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1922");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456080080,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=?,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456119080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "15:08" + "'", str15, "15:08");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant18);
    }

    @Test
    public void test14177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14177");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        java.lang.String str6 = property5.getAsShortText();
        org.joda.time.LocalDate localDate7 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property5.roundFloorCopy();
        org.joda.time.Interval interval9 = localDate8.toInterval();
        int int10 = localDate8.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate12 = localDate8.withYearOfEra(151);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8" + "'", str6, "8");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test14178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14178");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property8.addCopy(19);
        org.joda.time.LocalTime localTime13 = property8.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime15 = localTime13.minusHours(21145813);
        org.joda.time.LocalTime localTime17 = localTime15.plusHours(21239705);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test14179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14179");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(19);
        org.joda.time.Chronology chronology11 = localTime1.getChronology();
        org.joda.time.Chronology chronology12 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        long long17 = dateTimeField14.addWrapField((long) 362, 48);
        java.util.Locale locale19 = new java.util.Locale("2019-11-04");
        boolean boolean20 = locale19.hasExtensions();
        int int21 = dateTimeField14.getMaximumShortTextLength(locale19);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 362L + "'", long17 == 362L);
        org.junit.Assert.assertEquals(locale19.toString(), "2019-11-04");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test14180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14180");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(54096794);
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        boolean boolean9 = localDateTime7.equals((java.lang.Object) nameProvider8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusHours(54303307);
        int int17 = localDateTime16.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.hourOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456119186,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=186,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14181");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(chronology2);
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology2);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14182");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(19);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14183");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1L);
        int int2 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.era();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime4.add(readablePeriod6, (int) (byte) 100);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType10.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfDay();
        org.joda.time.DurationField durationField17 = dateTimeField16.getLeapDurationField();
        int int18 = mutableDateTime4.get(dateTimeField16);
        mutableDateTime4.addHours(54092146);
        mutableDateTime4.setMillis((long) ' ');
        int int23 = mutableDateTime4.getRoundingMode();
        int int24 = mutableDateTime4.getMinuteOfHour();
        boolean boolean26 = mutableDateTime4.isAfter(1640995201501L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test14184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14184");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.LocalDate localDate18 = dateTime15.toLocalDate();
        org.joda.time.DateTime.Property property19 = dateTime15.era();
        java.lang.String str20 = property19.getAsString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
    }

    @Test
    public void test14185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14185");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property16.addToCopy((int) 'u');
        org.joda.time.DateTime dateTime20 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property21 = dateTime20.monthOfYear();
        org.joda.time.DateTime dateTime23 = dateTime20.plusYears(350);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test14186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14186");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        int int4 = localDate3.getDayOfMonth();
        org.joda.time.LocalDate localDate6 = localDate3.plusYears((int) (byte) 100);
        org.joda.time.Interval interval7 = localDate6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        long long15 = dateTimeZone10.getMillisKeepLocal(dateTimeZone13, (long) 10);
        java.lang.String str16 = dateTimeZone10.toString();
        org.joda.time.DateTime dateTime17 = localDate6.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime1.toMutableDateTime(dateTimeZone10);
        java.lang.String str19 = mutableDateTime18.toString();
        java.lang.String str20 = mutableDateTime18.toString();
        long long21 = mutableDateTime18.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.property(dateTimeFieldType22);
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property23.roundHalfCeiling();
        java.lang.String str27 = property23.getAsText();
        org.joda.time.MutableDateTime mutableDateTime29 = property23.addWrapField(54285537);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime29.setDayOfWeek((-50563));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -50563 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+30:12" + "'", str16, "+30:12");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T21:20:39.379+30:12" + "'", str19, "2022-02-22T21:20:39.379+30:12");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T21:20:39.379+30:12" + "'", str20, "2022-02-22T21:20:39.379+30:12");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645456119379L + "'", long21 == 1645456119379L);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "21" + "'", str27, "21");
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test14187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14187");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.Chronology chronology5 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfDay();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.DurationField durationField8 = chronology5.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfYear();
        long long11 = dateTimeField9.roundHalfEven(1645456003710L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645488000000L + "'", long11 == 1645488000000L);
    }

    @Test
    public void test14188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14188");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(20);
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean16 = localTime14.equals((java.lang.Object) dateTimeFieldType15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType17.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType15.getField(chronology20);
        org.joda.time.LocalTime localTime26 = localTime11.withField(dateTimeFieldType15, 9);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology29.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.clockhourOfHalfday();
        boolean boolean34 = dateTimeFieldType15.isSupported(chronology29);
        org.joda.time.Chronology chronology35 = chronology29.withUTC();
        org.joda.time.DurationField durationField36 = chronology29.weeks();
        org.joda.time.DateTimeField dateTimeField37 = chronology29.monthOfYear();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test14189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14189");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = localDate4.toInterval(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate4.plusMonths(0);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        int int10 = localDate8.size();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        long long18 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone16);
        int int20 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate21 = dateTime19.toLocalDate();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime19.millisOfSecond();
        boolean boolean24 = property23.isLeap();
        org.joda.time.DateTime dateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime26 = property23.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property27 = dateTime26.weekyear();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test14190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14190");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(54247440, 6525046, 54207100, 10, 965, 54405);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 965 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14191");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Date date2 = calendar0.getTime();
        int int3 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = localDate4.toInterval(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate4.plusMonths(0);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        int int10 = localDate8.size();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        long long18 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.months();
        mutableDateTime22.add(durationFieldType24, 2023);
        int int27 = dateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        boolean boolean28 = calendar0.before((java.lang.Object) mutableDateTime22);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setHourOfDay(54458628);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54458628 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456119482,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=482,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 15:08:39 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test14192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14192");
        java.util.Date date5 = new java.util.Date((int) (byte) 0, 52, 2122, 4871, 54126208);
        int int6 = date5.getDay();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Aug 08 14:28:00 GMT 2013");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test14193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14193");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(19);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        int int15 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime16 = property12.withMaximumValue();
        int int17 = dateTime16.getHourOfDay();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test14194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14194");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        java.lang.String str6 = property5.toString();
        org.joda.time.LocalDate localDate7 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate7.getChronology();
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfCentury();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDate12.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[weekOfWeekyear]" + "'", str6, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test14195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14195");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfYear();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        org.joda.time.LocalDate localDate9 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.era();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime15.add(readableDuration17, 0);
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime13.era();
        mutableDateTime13.addHours(54104989);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        int int25 = localDate24.getDayOfMonth();
        org.joda.time.LocalDate localDate27 = localDate24.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        boolean boolean31 = mutableDateTime29.isAfter((long) 21);
        boolean boolean33 = mutableDateTime29.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime35.getZone();
        mutableDateTime29.setZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate24.toDateTimeAtStartOfDay(dateTimeZone36);
        mutableDateTime13.setZoneRetainFields(dateTimeZone36);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = localDate9.toDateTimeAtCurrentTime(dateTimeZone36);
        long long45 = dateTimeZone36.convertLocalToUTC((long) 76834939, false, (long) 1256);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2922789 + "'", int5 == 2922789);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-31885061L) + "'", long45 == (-31885061L));
    }

    @Test
    public void test14196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14196");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusWeeks(100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusYears(54092146);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra((-54204316));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -54204316 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456119542,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=542,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test14197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14197");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.era();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        mutableDateTime8.add(durationFieldType10, (int) (short) 1);
        org.joda.time.Chronology chronology13 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(21239705, 54284157, 54191062, 21204037, 44541985, 54412316, 2074, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21204037 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test14198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14198");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.DateTime dateTime8 = localTime1.toDateTimeToday();
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        int int12 = dateTime11.getYearOfCentury();
        org.joda.time.Instant instant13 = dateTime11.toInstant();
        org.joda.time.DateTime dateTime14 = instant13.toDateTimeISO();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test14199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14199");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property16.addToCopy((int) 'u');
        org.joda.time.DateTime dateTime21 = property16.setCopy(19);
        org.joda.time.DateTime dateTime23 = property16.addToCopy(3);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.plus(readablePeriod25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime24.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime24.withMillis((long) 54429);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test14200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14200");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        long long10 = dateTimeZone5.getMillisKeepLocal(dateTimeZone8, (long) 10);
        java.lang.String str11 = dateTimeZone5.toString();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.lang.String str17 = dateTimeZone5.getName((long) 54089980, locale15);
        java.lang.String str18 = locale15.getDisplayLanguage();
        java.lang.String str19 = locale0.getDisplayVariant(locale15);
        java.util.Set<java.lang.String> strSet20 = locale0.getUnicodeLocaleKeys();
        int int21 = strSet20.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = strSet20.add("2022-02-21T15:05:43.737");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ko-KR" + "'", str1, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+30:12" + "'", str11, "+30:12");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ko-KR" + "'", str14, "ko-KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str16, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+30:12" + "'", str17, "+30:12");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Korean" + "'", str18, "Korean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test14201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14201");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        int int4 = dateTimePrinter3.estimatePrintedLength();
        int int5 = dateTimePrinter3.estimatePrintedLength();
        int int6 = dateTimePrinter3.estimatePrintedLength();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortTime();
        java.lang.String str18 = localDateTime16.toString(dateTimeFormatter17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.lang.String str20 = localDateTime16.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter19.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser22);
        int int24 = dateTimePrinter3.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) (-3600000));
        boolean boolean28 = dateTimeFormatter27.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter27.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withPivotYear(13);
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter30.withLocale(locale33);
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatter34.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withPivotYear(13);
        org.joda.time.format.DateTimeParser dateTimeParser40 = dateTimeFormatter37.getParser();
        int int41 = dateTimeParser40.estimateParsedLength();
        int int42 = dateTimeParser40.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser40);
        int int45 = dateTimePrinter3.estimatePrintedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimePrinter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40 + "'", int5 == 40);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645456119627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=627,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "15:08" + "'", str18, "15:08");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "21 June 0130 15:08:39 " + "'", str20, "21 June 0130 15:08:39 ");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeParser22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 40 + "'", int24 == 40);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeParser35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeParser40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 40 + "'", int41 == 40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 40 + "'", int42 == 40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 40 + "'", int45 == 40);
    }

    @Test
    public void test14202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14202");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property8.withMinimumValue();
        org.joda.time.LocalTime localTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property8.roundHalfFloorCopy();
        java.lang.String str13 = property8.getAsShortText();
        org.joda.time.LocalTime localTime15 = property8.addCopy(279);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) property8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "6" + "'", str13, "6");
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test14203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14203");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.toLanguageTag();
        boolean boolean18 = localDate4.equals((java.lang.Object) str17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        boolean boolean20 = localDate4.equals((java.lang.Object) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property22 = dateTime21.weekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMonths(54216962);
        org.joda.time.DateTime dateTime26 = dateTime21.minusMillis(54149362);
        org.joda.time.DateTime.Property property27 = dateTime21.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko-KR" + "'", str17, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test14204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14204");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        java.util.Locale locale4 = dateTimeFormatter0.getLocale();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DurationField durationField11 = chronology7.seconds();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology7.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test14205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14205");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        int int4 = localDateTime1.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks(970);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMinuteOfHour(0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456119766,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=766,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 54519766 + "'", int4 == 54519766);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test14206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14206");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime10.getZone();
        long long13 = dateTimeZone8.getMillisKeepLocal(dateTimeZone11, (long) 10);
        org.joda.time.DateMidnight dateMidnight14 = localDate4.toDateMidnight(dateTimeZone8);
        int int15 = dateMidnight14.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight14.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.hourOfDay();
        int int18 = mutableDateTime16.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add((long) 21162);
        int int22 = mutableDateTime21.getYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
    }

    @Test
    public void test14207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14207");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        org.joda.time.DurationField durationField7 = chronology3.weeks();
        org.joda.time.DurationField durationField8 = chronology3.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.weekyearOfCentury();
        java.lang.String str10 = dateTimeField9.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField9.getType();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        java.lang.String str15 = durationFieldType14.toString();
        boolean boolean16 = localTime13.isSupported(durationFieldType14);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime19 = localTime13.withFieldAdded(durationFieldType17, 32772);
        org.joda.time.LocalTime.Property property20 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime21 = property20.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalTime localTime23 = localTime21.minus(readablePeriod22);
        org.joda.time.LocalTime localTime25 = localTime23.minusHours(7);
        int int26 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localTime23);
        java.lang.String str27 = dateTimeField9.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekyearOfCentury" + "'", str10, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "years" + "'", str15, "years");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 99 + "'", int26 == 99);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str27, "DateTimeField[weekyearOfCentury]");
    }

    @Test
    public void test14208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14208");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.LocalTime localTime6 = localTime1.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime.Property property7 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        java.lang.String str13 = durationFieldType12.toString();
        boolean boolean14 = localTime11.isSupported(durationFieldType12);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime17 = localTime11.withFieldAdded(durationFieldType15, 32772);
        org.joda.time.LocalTime.Property property18 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalTime localTime21 = property18.addCopy(19);
        org.joda.time.LocalTime localTime23 = property18.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime24 = property18.getLocalTime();
        org.joda.time.LocalTime localTime26 = localTime24.plusMinutes(14);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale30.toLanguageTag();
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale30.getDisplayCountry(locale32);
        java.lang.String str34 = locale28.getDisplayCountry(locale30);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime36.getZone();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime39.getZone();
        long long42 = dateTimeZone37.getMillisKeepLocal(dateTimeZone40, (long) 10);
        java.lang.String str43 = dateTimeZone37.toString();
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.lang.String str46 = locale45.toLanguageTag();
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.lang.String str48 = locale45.getDisplayCountry(locale47);
        java.lang.String str49 = dateTimeZone37.getName((long) 54089980, locale47);
        java.lang.String str50 = locale47.getDisplayLanguage();
        java.lang.String str51 = locale30.getDisplayName(locale47);
        java.lang.String str52 = locale30.toLanguageTag();
        java.lang.String str53 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localTime26, locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology58 = localTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType55.getField(chronology58);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = locale60.getDisplayScript(locale61);
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.lang.String str64 = locale63.toLanguageTag();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = locale63.getDisplayCountry(locale65);
        java.lang.String str67 = locale61.getDisplayCountry(locale63);
        int int68 = dateTimeField59.getMaximumTextLength(locale61);
        java.lang.String str69 = dateTimeField9.getAsText(1645459200000L, locale61);
        boolean boolean71 = dateTimeField9.isLeap((long) 53);
        int int72 = dateTimeField9.getMaximumValue();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "years" + "'", str13, "years");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ko-KR" + "'", str31, "ko-KR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str33, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str34, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+30:12" + "'", str43, "+30:12");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ko-KR" + "'", str46, "ko-KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str48, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+30:12" + "'", str49, "+30:12");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Korean" + "'", str50, "Korean");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str51, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ko-KR" + "'", str52, "ko-KR");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "23160100" + "'", str53, "23160100");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ko-KR" + "'", str64, "ko-KR");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str66, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str67, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "57600000" + "'", str69, "57600000");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 86399999 + "'", int72 == 86399999);
    }

    @Test
    public void test14209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14209");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.lang.String str8 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet12, filteringMode13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.util.Set<java.lang.String> strSet24 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale25.toLanguageTag();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale25.getDisplayCountry(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale21, locale27, locale30 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale36.getDisplayScript(locale37);
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet40 = locale36.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet40);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList41, filteringMode42);
        boolean boolean44 = strSet12.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream45 = languageRangeList16.parallelStream();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology49 = localTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType46.getField(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfDay();
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.lang.String str54 = dateTimeField51.getAsText(7, locale53);
        java.util.Locale locale55 = java.util.Locale.UK;
        java.util.Locale locale56 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet57 = locale56.getExtensionKeys();
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.lang.String str60 = locale58.getDisplayScript(locale59);
        java.lang.String str61 = locale56.getDisplayScript(locale59);
        java.util.Locale locale62 = java.util.Locale.UK;
        java.lang.String str63 = locale56.getDisplayScript(locale62);
        java.lang.String str64 = locale55.getDisplayLanguage(locale62);
        java.lang.String str65 = locale53.getDisplayVariant(locale62);
        java.util.Set<java.lang.String> strSet66 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet66);
        java.util.Locale locale68 = java.util.Locale.UK;
        java.util.Locale locale69 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.util.Locale locale72 = java.util.Locale.KOREA;
        java.lang.String str73 = locale71.getDisplayScript(locale72);
        java.lang.String str74 = locale69.getDisplayScript(locale72);
        java.util.Locale locale75 = java.util.Locale.UK;
        java.lang.String str76 = locale69.getDisplayScript(locale75);
        java.lang.String str77 = locale68.getDisplayLanguage(locale75);
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.util.Locale locale79 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet80 = locale79.getExtensionKeys();
        java.lang.String str81 = locale78.getDisplayScript(locale79);
        java.lang.String str82 = locale75.getDisplayCountry(locale78);
        java.util.Locale locale83 = locale75.stripExtensions();
        java.util.Set<java.lang.String> strSet84 = locale75.getUnicodeLocaleKeys();
        java.lang.Object[] objArray85 = strSet84.toArray();
        boolean boolean86 = strSet84.isEmpty();
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet84);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream88 = languageRangeList16.parallelStream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream89 = languageRangeList16.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + filteringMode13 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode13.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ko-KR" + "'", str26, "ko-KR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str28, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode42.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(languageRangeStream45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "7" + "'", str54, "7");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English" + "'", str64, "English");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English" + "'", str77, "English");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "United Kingdom" + "'", str82, "United Kingdom");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(languageRangeStream88);
        org.junit.Assert.assertNotNull(languageRangeStream89);
    }

    @Test
    public void test14210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14210");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.Chronology chronology10 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology3.hourOfHalfday();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromCalendarFields(calendar12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusYears((int) '#');
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = property18.setCopy(0);
        org.joda.time.LocalDateTime localDateTime23 = property18.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear(13);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter26.getParser();
        java.util.Locale locale30 = dateTimeFormatter26.getLocale();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter26.withChronology(chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = chronology33.getZone();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.fromCalendarFields(calendar38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusSeconds(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str45 = dateTimeFieldType44.toString();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getDurationType();
        boolean boolean47 = localDateTime41.isSupported(durationFieldType46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.withCenturyOfEra((int) 'u');
        boolean boolean50 = dateTimeZone37.isLocalDateTimeGap(localDateTime41);
        org.joda.time.Chronology chronology51 = localDateTime41.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.years();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now(chronology51);
        int[] intArray54 = localDateTime53.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = org.joda.time.format.DateTimeFormat.forPattern("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 00:00:00 ");
        java.util.Locale locale58 = java.util.Locale.UK;
        java.util.Locale locale59 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet60 = locale59.getExtensionKeys();
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.lang.String str63 = locale61.getDisplayScript(locale62);
        java.lang.String str64 = locale59.getDisplayScript(locale62);
        java.util.Locale locale65 = java.util.Locale.UK;
        java.lang.String str66 = locale59.getDisplayScript(locale65);
        java.lang.String str67 = locale58.getDisplayLanguage(locale65);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.util.Locale locale69 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet70 = locale69.getExtensionKeys();
        java.lang.String str71 = locale68.getDisplayScript(locale69);
        java.lang.String str72 = locale65.getDisplayCountry(locale68);
        java.util.Locale locale73 = java.util.Locale.UK;
        java.lang.String str74 = locale68.getDisplayScript(locale73);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter57.withLocale(locale73);
        java.util.Locale.setDefault(locale73);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray77 = dateTimeField11.set((org.joda.time.ReadablePartial) localDateTime23, 21144229, intArray54, "", locale73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for hourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456119897,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=897,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeParser29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645456119897,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=897,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "dayOfYear" + "'", str45, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2022, 2, 21, 54519897]");
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English" + "'", str67, "English");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "United Kingdom" + "'", str72, "United Kingdom");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
    }

    @Test
    public void test14211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14211");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = mutableDateTime2.getZone();
        long long5 = dateTimeZone3.previousTransition((-431366460000L));
        java.lang.String str7 = dateTimeZone3.getNameKey((long) (byte) 10);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(1645455743309L, dateTimeZone3);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-431366460000L) + "'", long5 == (-431366460000L));
// flaky:         org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test14212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14212");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(19);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(0L);
        int int15 = property12.getLeapAmount();
        org.joda.time.DateTime dateTime17 = property12.setCopy(55);
        org.joda.time.DateTime dateTime18 = property12.withMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test14213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14213");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        calendar5.setLenient(true);
        calendar5.set(54110417, 54092146, (-1), 1645455690, 54107938);
        calendar5.set((int) 'x', 2922789, 19);
        int int18 = calendar5.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = calendar5.get(54271415);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54271415");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=13554858531480000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=431506,MONTH=4,WEEK_OF_YEAR=20,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=135,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=58,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test14214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14214");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.yearOfEra();
        mutableDateTime0.setChronology(chronology3);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundFloor();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.Chronology chronology10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) property7, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test14215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14215");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property4.setCopy(19);
        org.joda.time.LocalDateTime localDateTime7 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property4.addToCopy(54112806);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours(12);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfDay(54149119);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields(calendar14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusWeeks(100);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withDurationAdded(readableDuration21, 14);
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.withFields(readablePartial24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime17.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime17.plus(readablePeriod27);
        int int29 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        mutableDateTime31.setMinuteOfDay(100);
        boolean boolean34 = mutableDateTime31.isAfterNow();
        mutableDateTime31.add((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str38 = dateTimeFieldType37.toString();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getDurationType();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime31.property(dateTimeFieldType37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType37.getField(chronology41);
        boolean boolean43 = localDateTime28.isSupported(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456119987,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=987,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645456119987,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=39,MILLISECOND=987,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "dayOfYear" + "'", str38, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test14216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14216");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        int int4 = dateTimeZone2.getStandardOffset(0L);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("years");
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        boolean boolean9 = timeZone7.observesDaylightTime();
        timeZone7.setID("2022-02-21T15:04:13.644");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withLocale(locale13);
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale13.getDisplayScript(locale15);
        java.lang.String str17 = locale13.getISO3Country();
        java.lang.String str18 = timeZone7.getDisplayName(locale13);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 108720000 + "'", int4 == 108720000);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "GBR" + "'", str17, "GBR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT+00:00" + "'", str18, "GMT+00:00");
    }

    @Test
    public void test14217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14217");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((-33), 898, 43624808, 54191062, 54517984, 939);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54191062 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14218");
        java.util.Locale locale2 = new java.util.Locale("21 June 0130 15:01:38 ", "en_GB");
        java.lang.String str3 = locale2.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "21 june 0130 15:01:38 _EN_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test14219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14219");
        java.util.Date date7 = new java.util.Date();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date7);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(54113462, 49, 0, 19725046, 54511481, (int) (byte) 1, (-54142137), chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19725046 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 15:08:40 GMT 2022");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test14220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14220");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMinutes((int) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.hours();
        boolean boolean7 = localDateTime5.isSupported(durationFieldType6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks(2025);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456120131,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=131,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14221");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.era();
        int int9 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456120139,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=139,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14222");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder8 = builder0.setLenient(false);
        java.util.Date date14 = new java.util.Date(100, 4, 6, 0, 21);
        java.util.Date date15 = new java.util.Date();
        boolean boolean16 = date14.before(date15);
        int int17 = date14.getTimezoneOffset();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromCalendarFields(calendar18);
        boolean boolean20 = calendar18.isWeekDateSupported();
        calendar18.setFirstDayOfWeek(5);
        calendar18.setMinimalDaysInFirstWeek((-1));
        java.util.Date date30 = new java.util.Date(100, 4, 6, 0, 21);
        int int31 = date30.getYear();
        calendar18.setTime(date30);
        boolean boolean33 = date14.after(date30);
        java.util.Date date39 = new java.util.Date(100, 4, 6, 0, 21);
        int int40 = date39.getMonth();
        boolean boolean41 = date14.after(date39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder42 = builder8.setInstant(date39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Sat May 06 00:21:00 GMT 2000");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Feb 21 15:08:40 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=957572460000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=-1,ERA=1,YEAR=2000,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=127,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=21,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Sat May 06 00:21:00 GMT 2000");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Sat May 06 00:21:00 GMT 2000");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test14223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14223");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("21 February 2022 15:02:18 +00:00", (double) 1645456086717L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.645456086717E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14224");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfMinute();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = mutableDateTime1.toString("8", locale5);
        java.lang.String str7 = locale5.getDisplayName();
        java.lang.String str8 = locale5.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "8" + "'", str6, "8");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "French (France)" + "'", str7, "French (France)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test14225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14225");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 54106168);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTime1.withSecondOfMinute(54426000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54426000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1273 + "'", int2 == 1273);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test14226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14226");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate4.minus(readablePeriod6);
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra(32772);
        org.joda.time.LocalDate localDate11 = localDate9.withMonthOfYear(12);
        org.joda.time.LocalDate localDate13 = localDate9.withWeekyear(54113409);
        int int14 = localDate9.size();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test14227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14227");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        int int19 = localDate18.getDayOfMonth();
        org.joda.time.LocalDate localDate21 = localDate18.plusYears((int) (byte) 100);
        org.joda.time.Interval interval22 = localDate21.toInterval();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime24.getZone();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime27.getZone();
        long long30 = dateTimeZone25.getMillisKeepLocal(dateTimeZone28, (long) 10);
        java.lang.String str31 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime32 = localDate21.toDateTimeAtMidnight(dateTimeZone25);
        long long34 = dateTimeZone25.convertUTCToLocal((-87L));
        long long36 = dateTimeZone25.convertUTCToLocal(100L);
        org.joda.time.DateTime dateTime37 = dateTime17.withZoneRetainFields(dateTimeZone25);
        int int38 = dateTime37.getEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+30:12" + "'", str31, "+30:12");
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 108719913L + "'", long34 == 108719913L);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 108720100L + "'", long36 == 108720100L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test14228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14228");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate4.minus(readablePeriod6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) '4');
        boolean boolean11 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withLocale(locale13);
        java.lang.String str15 = localDate8.toString(dateTimeFormatter12);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate18 = localDate8.withPeriodAdded(readablePeriod16, 54100989);
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths(54117498);
        org.joda.time.LocalDate localDate22 = localDate20.minusWeeks(1256);
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfEra();
        java.lang.String str24 = localDate22.toString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ufffd\ufffd\ufffd\ufffd" + "'", str15, "\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "4511789-07-26" + "'", str24, "4511789-07-26");
    }

    @Test
    public void test14229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14229");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        strSet3.clear();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        int int6 = localDate5.getDayOfMonth();
        org.joda.time.LocalDate localDate8 = localDate5.plusYears((int) (byte) 100);
        org.joda.time.Interval interval9 = localDate8.toInterval();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime14.getZone();
        long long17 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 10);
        java.lang.String str18 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfEvenCopy();
        boolean boolean22 = strSet3.contains((java.lang.Object) dateTime21);
        java.util.Iterator<java.lang.String> strItor23 = strSet3.iterator();
        java.util.Collection<java.util.Locale.LanguageRange> languageRangeCollection24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = strSet3.removeAll(languageRangeCollection24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(localDate5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+30:12" + "'", str18, "+30:12");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strItor23);
    }

    @Test
    public void test14230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14230");
        java.util.Date date3 = new java.util.Date(21144578, 87642, 0);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Jun 30 00:00:00 GMT 21153781");
    }

    @Test
    public void test14231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14231");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.era();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        mutableDateTime2.add(durationFieldType4, (int) (short) 1);
        mutableDateTime0.add(durationFieldType4, 54127);
        boolean boolean10 = mutableDateTime0.isBefore((long) 54285980);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableDateTime0.add(readablePeriod11);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test14232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14232");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType4.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        java.lang.String str13 = durationFieldType12.toString();
        boolean boolean14 = localTime11.isSupported(durationFieldType12);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime17 = localTime11.withFieldAdded(durationFieldType15, 32772);
        org.joda.time.LocalTime.Property property18 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime11.minusMinutes(2922789);
        java.util.Locale locale22 = java.util.Locale.UK;
        java.util.Locale locale23 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        java.lang.String str28 = locale23.getDisplayScript(locale26);
        java.util.Locale locale29 = java.util.Locale.UK;
        java.lang.String str30 = locale23.getDisplayScript(locale29);
        java.lang.String str31 = locale22.getDisplayLanguage(locale29);
        java.lang.String str32 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime20, (int) ' ', locale22);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale22);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder37 = builder3.setExtension('u', "2022-02-18T05:52:28.684-81:11:15.054");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 18T05:52:28.684 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "years" + "'", str13, "years");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "32" + "'", str32, "32");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645456120282,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=282,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test14233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14233");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder10 = builder6.setDate(111, 901, (int) '4');
        java.util.Calendar.Builder builder14 = builder10.setDate((int) 'a', (int) 'u', 16);
        java.util.Calendar.Builder builder18 = builder14.setDate(0, 21178, 2355);
        java.util.Calendar.Builder builder22 = builder18.setWeekDate(19725046, 2025, 50598);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        boolean boolean24 = calendar23.isWeekDateSupported();
        java.util.Date date25 = calendar23.getTime();
        int int26 = calendar23.getMinimalDaysInFirstWeek();
        calendar23.setMinimalDaysInFirstWeek(21);
        calendar23.setFirstDayOfWeek(54185283);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.fromCalendarFields(calendar23);
        java.util.Date date32 = localDate31.toDate();
        date32.setHours(32769);
        int int35 = date32.getDay();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder36 = builder18.setInstant(date32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645456120296,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=54185283,minimalDaysInFirstWeek=21,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=296,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Mon Feb 21 15:08:40 GMT 2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Mon Nov 17 09:00:00 GMT 2025");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test14234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14234");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(chronology2);
        org.joda.time.DurationField durationField5 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime7.withMonthOfYear(21208);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21208 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test14235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14235");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("0");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone7);
    }

    @Test
    public void test14236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14236");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property8.withMinimumValue();
        org.joda.time.LocalTime localTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property8.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = property8.addWrapFieldToCopy(54117498);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime16.getZone();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime16.secondOfMinute();
        long long19 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.dayOfMonth();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-457064L) + "'", long19 == (-457064L));
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test14237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14237");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(0);
        int int6 = localDateTime5.getMillisOfDay();
        int int7 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusYears(50);
        org.joda.time.DateTime dateTime10 = localDateTime5.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(45);
        int int13 = dateTime10.getHourOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456120366,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=366,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54520366 + "'", int6 == 54520366);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
    }

    @Test
    public void test14238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14238");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("years");
        boolean boolean4 = timeZone3.observesDaylightTime();
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType7.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfDay();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = dateTimeField12.getAsText(7, locale14);
        boolean boolean17 = dateTimeField12.isLeap((long) 54117498);
        java.util.Locale locale18 = java.util.Locale.UK;
        java.util.Locale locale19 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = locale19.getDisplayScript(locale22);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale19.getDisplayScript(locale25);
        java.lang.String str27 = locale18.getDisplayLanguage(locale25);
        java.lang.String str28 = locale18.getDisplayLanguage();
        int int29 = dateTimeField12.getMaximumTextLength(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType30.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfDay();
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.lang.String str38 = dateTimeField35.getAsText(7, locale37);
        java.util.Locale locale39 = java.util.Locale.UK;
        java.util.Locale locale40 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.lang.String str44 = locale42.getDisplayScript(locale43);
        java.lang.String str45 = locale40.getDisplayScript(locale43);
        java.util.Locale locale46 = java.util.Locale.UK;
        java.lang.String str47 = locale40.getDisplayScript(locale46);
        java.lang.String str48 = locale39.getDisplayLanguage(locale46);
        java.lang.String str49 = locale37.getDisplayVariant(locale46);
        java.util.Locale locale52 = new java.util.Locale("21 June 0130 15:01:38 ", "en_GB");
        java.lang.String str53 = locale37.getDisplayLanguage(locale52);
        java.lang.String str54 = locale37.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet55 = locale37.getExtensionKeys();
        int int56 = dateTimeField12.getMaximumShortTextLength(locale37);
        java.lang.String str57 = timeZone1.getDisplayName(locale37);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645456120384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "7" + "'", str15, "7");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English" + "'", str27, "English");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "7" + "'", str38, "7");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English" + "'", str48, "English");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals(locale52.toString(), "21 june 0130 15:01:38 _EN_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "French" + "'", str53, "French");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Heure de Greenwich" + "'", str57, "Heure de Greenwich");
    }

    @Test
    public void test14239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14239");
        java.util.Date date0 = new java.util.Date();
        java.lang.String str1 = date0.toLocaleString();
        java.lang.String str2 = date0.toGMTString();
        date0.setYear(14);
        java.lang.String str5 = date0.toGMTString();
        int int6 = date0.getMonth();
        int int7 = date0.getMinutes();
        int int8 = date0.getDate();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Sat Feb 21 15:08:40 GMT 1914");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "21-Feb-2022 15:08:40" + "'", str1, "21-Feb-2022 15:08:40");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "21 Feb 2022 15:08:40 GMT" + "'", str2, "21 Feb 2022 15:08:40 GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "21 Feb 1914 15:08:40 GMT" + "'", str5, "21 Feb 1914 15:08:40 GMT");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21 + "'", int8 == 21);
    }

    @Test
    public void test14240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14240");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        long long7 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) 10);
        java.lang.String str8 = dateTimeZone5.toString();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone5);
        java.util.TimeZone timeZone10 = dateTimeZone5.toTimeZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone10);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("years");
        boolean boolean16 = timeZone15.observesDaylightTime();
        boolean boolean17 = timeZone13.hasSameRules(timeZone15);
        calendar11.setTimeZone(timeZone13);
        int int20 = calendar11.getMaximum(12);
        calendar11.roll(0, 46);
        // The following exception was thrown during execution in test generation
        try {
            calendar11.clear(1921);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+30:12" + "'", str8, "+30:12");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=427,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
    }

    @Test
    public void test14241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14241");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("04 May 150236 05:56:53 -81:11:15.054");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=04 may 150236 05:56:53 -81:11:15.054");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14242");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        boolean boolean4 = mutableDateTime1.isAfterNow();
        mutableDateTime1.add((long) 'a');
        boolean boolean7 = mutableDateTime1.isAfterNow();
        mutableDateTime1.addMonths(54107140);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfFloor();
        org.joda.time.DurationField durationField12 = property10.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundCeiling();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test14243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14243");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        boolean boolean6 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType7.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.minuteOfDay();
        org.joda.time.DurationField durationField18 = chronology10.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology10.weekOfWeekyear();
        long long22 = dateTimeField19.add((long) 100, 54129298);
        long long25 = dateTimeField19.add(54256493L, 35040);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32737399430400100L + "'", long22 == 32737399430400100L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 21192246256493L + "'", long25 == 21192246256493L);
    }

    @Test
    public void test14244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14244");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(21220);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14245");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay((long) 20, chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.dayOfMonth();
        int int6 = dateTimeField5.getMinimumValue();
        java.lang.String str8 = dateTimeField5.getAsText((long) 54151367);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType9.getField(chronology12);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.lang.String str18 = locale17.toLanguageTag();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale17.getDisplayCountry(locale19);
        java.lang.String str21 = locale15.getDisplayCountry(locale17);
        int int22 = dateTimeField13.getMaximumTextLength(locale15);
        java.lang.String str23 = locale15.getVariant();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        java.lang.String str27 = durationFieldType26.toString();
        boolean boolean28 = localTime25.isSupported(durationFieldType26);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime31 = localTime25.withFieldAdded(durationFieldType29, 32772);
        org.joda.time.LocalTime.Property property32 = localTime25.hourOfDay();
        org.joda.time.LocalTime localTime33 = property32.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalTime localTime35 = localTime33.minus(readablePeriod34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis((long) (short) 100);
        org.joda.time.Instant instant39 = instant38.toInstant();
        boolean boolean40 = localTime35.equals((java.lang.Object) instant38);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getTimeZone("years");
        boolean boolean44 = timeZone43.observesDaylightTime();
        java.util.Locale locale45 = java.util.Locale.UK;
        java.util.Locale locale46 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.lang.String str50 = locale48.getDisplayScript(locale49);
        java.lang.String str51 = locale46.getDisplayScript(locale49);
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = locale46.getDisplayScript(locale52);
        java.lang.String str54 = locale45.getDisplayLanguage(locale52);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone43, locale45);
        java.lang.String str56 = localTime35.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", locale45);
        java.lang.String str57 = locale15.getDisplayName(locale45);
        java.util.Set<java.lang.String> strSet58 = locale15.getUnicodeLocaleKeys();
        int int59 = dateTimeField5.getMaximumShortTextLength(locale15);
        long long61 = dateTimeField5.roundHalfFloor(215547663879123L);
        int int63 = dateTimeField5.get((long) 2039);
        java.lang.String str64 = dateTimeField5.toString();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ko-KR" + "'", str18, "ko-KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str20, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str21, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "years" + "'", str27, "years");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English" + "'", str54, "English");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645456120504,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=504,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str56, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Korean (South Korea)" + "'", str57, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 215547696000000L + "'", long61 == 215547696000000L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str64, "DateTimeField[dayOfMonth]");
    }

    @Test
    public void test14246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14246");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.era();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.year();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        boolean boolean11 = mutableDateTime9.isAfter((long) 21);
        boolean boolean13 = mutableDateTime9.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        mutableDateTime9.setZone(dateTimeZone16);
        mutableDateTime5.setZoneRetainFields(dateTimeZone16);
        long long20 = dateTimeZone16.previousTransition(0L);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(dateTimeZone16);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.years();
        java.lang.String str26 = durationFieldType25.toString();
        boolean boolean27 = localTime24.isSupported(durationFieldType25);
        org.joda.time.LocalTime localTime29 = localTime24.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime.Property property30 = localTime24.millisOfDay();
        org.joda.time.LocalTime localTime31 = property30.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.years();
        java.lang.String str36 = durationFieldType35.toString();
        boolean boolean37 = localTime34.isSupported(durationFieldType35);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime40 = localTime34.withFieldAdded(durationFieldType38, 32772);
        org.joda.time.LocalTime.Property property41 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime42 = property41.roundCeilingCopy();
        org.joda.time.LocalTime localTime44 = property41.addCopy(19);
        org.joda.time.LocalTime localTime46 = property41.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime47 = property41.getLocalTime();
        org.joda.time.LocalTime localTime49 = localTime47.plusMinutes(14);
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.lang.String str52 = locale50.getDisplayScript(locale51);
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.lang.String str54 = locale53.toLanguageTag();
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.lang.String str56 = locale53.getDisplayCountry(locale55);
        java.lang.String str57 = locale51.getDisplayCountry(locale53);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime59.getZone();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime62.getZone();
        long long65 = dateTimeZone60.getMillisKeepLocal(dateTimeZone63, (long) 10);
        java.lang.String str66 = dateTimeZone60.toString();
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.lang.String str69 = locale68.toLanguageTag();
        java.util.Locale locale70 = java.util.Locale.KOREA;
        java.lang.String str71 = locale68.getDisplayCountry(locale70);
        java.lang.String str72 = dateTimeZone60.getName((long) 54089980, locale70);
        java.lang.String str73 = locale70.getDisplayLanguage();
        java.lang.String str74 = locale53.getDisplayName(locale70);
        java.lang.String str75 = locale53.toLanguageTag();
        java.lang.String str76 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localTime49, locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime80 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology81 = localTime80.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType78.getField(chronology81);
        java.util.Locale locale83 = java.util.Locale.KOREA;
        java.util.Locale locale84 = java.util.Locale.KOREA;
        java.lang.String str85 = locale83.getDisplayScript(locale84);
        java.util.Locale locale86 = java.util.Locale.KOREA;
        java.lang.String str87 = locale86.toLanguageTag();
        java.util.Locale locale88 = java.util.Locale.KOREA;
        java.lang.String str89 = locale86.getDisplayCountry(locale88);
        java.lang.String str90 = locale84.getDisplayCountry(locale86);
        int int91 = dateTimeField82.getMaximumTextLength(locale84);
        java.lang.String str92 = dateTimeField32.getAsText(1645459200000L, locale84);
        java.lang.String str93 = dateTimeZone16.getShortName((long) (short) 0, locale84);
        java.lang.String str95 = dateTimeZone16.getName(54113472L);
        org.joda.time.MutableDateTime mutableDateTime96 = new org.joda.time.MutableDateTime((java.lang.Object) calendar3, dateTimeZone16);
        org.joda.time.MutableDateTime.Property property97 = mutableDateTime96.secondOfDay();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456120599,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=599,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "years" + "'", str26, "years");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "years" + "'", str36, "years");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ko-KR" + "'", str54, "ko-KR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str56, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str57, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+30:12" + "'", str66, "+30:12");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ko-KR" + "'", str69, "ko-KR");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str71, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+30:12" + "'", str72, "+30:12");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Korean" + "'", str73, "Korean");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str74, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ko-KR" + "'", str75, "ko-KR");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "23160100" + "'", str76, "23160100");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ko-KR" + "'", str87, "ko-KR");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str89, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str90, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "57600000" + "'", str92, "57600000");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+30:12" + "'", str93, "+30:12");
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+30:12" + "'", str95, "+30:12");
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test14247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14247");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusSeconds((int) (short) 100);
        int int10 = localDateTime5.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withField(dateTimeFieldType11, 985);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime13.getFieldType(21263);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 21263");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456120646,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=646,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test14248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14248");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        java.util.Locale locale4 = dateTimeFormatter0.getLocale();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology(chronology7);
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromCalendarFields(calendar12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str19 = dateTimeFieldType18.toString();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType18.getDurationType();
        boolean boolean21 = localDateTime15.isSupported(durationFieldType20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withCenturyOfEra((int) 'u');
        boolean boolean24 = dateTimeZone11.isLocalDateTimeGap(localDateTime15);
        org.joda.time.Chronology chronology25 = localDateTime15.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.years();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology25);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.fromCalendarFields(calendar28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.era();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int37 = localDateTime35.get(dateTimeFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime27.withField(dateTimeFieldType36, 954);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 954 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456120677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=677,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfYear" + "'", str19, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645456120677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=677,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test14249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14249");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.util.Locale.setDefault(category1, locale2);
        boolean boolean6 = strSet0.contains((java.lang.Object) category1);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.toLanguageTag();
        boolean boolean9 = locale7.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime14.getZone();
        long long17 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 10);
        java.lang.String str18 = dateTimeZone12.toString();
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale20.toLanguageTag();
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale20.getDisplayCountry(locale22);
        java.lang.String str24 = dateTimeZone12.getName((long) 54089980, locale22);
        java.lang.String str25 = locale22.getDisplayLanguage();
        java.lang.String str26 = locale7.getDisplayVariant(locale22);
        java.lang.String str27 = locale22.getISO3Language();
        java.lang.String str28 = locale22.getDisplayName();
        java.util.Locale.setDefault(category1, locale22);
        java.util.Locale locale30 = java.util.Locale.getDefault(category1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.eras();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType38.getField(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.secondOfDay();
        java.lang.String str44 = dateTimeField43.getName();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        java.lang.String str49 = durationFieldType48.toString();
        boolean boolean50 = localTime47.isSupported(durationFieldType48);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime53 = localTime47.withFieldAdded(durationFieldType51, 32772);
        org.joda.time.LocalTime.Property property54 = localTime47.hourOfDay();
        org.joda.time.LocalTime localTime55 = property54.roundCeilingCopy();
        org.joda.time.LocalTime localTime57 = localTime55.withMillisOfDay(20);
        org.joda.time.LocalTime.Property property58 = localTime57.secondOfMinute();
        org.joda.time.LocalTime localTime60 = localTime57.minusMinutes((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone61);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.era();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime62.year();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(dateTimeZone65);
        boolean boolean68 = mutableDateTime66.isAfter((long) 21);
        boolean boolean70 = mutableDateTime66.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(dateTimeZone71);
        org.joda.time.DateTimeZone dateTimeZone73 = mutableDateTime72.getZone();
        mutableDateTime66.setZone(dateTimeZone73);
        mutableDateTime62.setZoneRetainFields(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = localTime60.toDateTimeToday(dateTimeZone73);
        java.util.Locale locale80 = new java.util.Locale("21 June 0130 15:01:38 ", "en_GB");
        java.lang.String str81 = dateTimeZone73.getShortName((-3599999L), locale80);
        java.lang.String str82 = dateTimeField43.getAsShortText((long) 31, locale80);
        java.lang.String str83 = dateTimeField43.getName();
        java.util.Locale locale84 = java.util.Locale.UK;
        java.util.Locale locale85 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet86 = locale85.getExtensionKeys();
        java.util.Locale locale87 = java.util.Locale.KOREA;
        java.util.Locale locale88 = java.util.Locale.KOREA;
        java.lang.String str89 = locale87.getDisplayScript(locale88);
        java.lang.String str90 = locale85.getDisplayScript(locale88);
        java.util.Locale locale91 = java.util.Locale.UK;
        java.lang.String str92 = locale85.getDisplayScript(locale91);
        java.lang.String str93 = locale84.getDisplayLanguage(locale91);
        int int94 = dateTimeField43.getMaximumShortTextLength(locale91);
        java.util.Set<java.lang.String> strSet95 = locale91.getUnicodeLocaleAttributes();
        java.lang.String str96 = dateTimeField36.getAsText(54372912, locale91);
        java.util.Locale.setDefault(category1, locale91);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko-KR" + "'", str8, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+30:12" + "'", str18, "+30:12");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko-KR" + "'", str21, "ko-KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str23, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+30:12" + "'", str24, "+30:12");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Korean" + "'", str25, "Korean");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "kor" + "'", str27, "kor");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Korean (South Korea)" + "'", str28, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "secondOfDay" + "'", str44, "secondOfDay");
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "years" + "'", str49, "years");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertEquals(locale80.toString(), "21 june 0130 15:01:38 _EN_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+30:12" + "'", str81, "+30:12");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "secondOfDay" + "'", str83, "secondOfDay");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "English" + "'", str93, "English");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5 + "'", int94 == 5);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "54372912" + "'", str96, "54372912");
    }

    @Test
    public void test14250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14250");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.minus((long) 13);
        org.joda.time.Instant instant4 = instant2.minus((long) 901);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.centuries();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.centuryOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test14251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14251");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        int int5 = dateTime4.getCenturyOfEra();
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute(4);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime7.plusDays(772);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.DateTime dateTime13 = dateTime10.plus((long) (-21));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        boolean boolean18 = mutableDateTime16.isAfter((long) 21);
        boolean boolean20 = mutableDateTime16.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime22.getZone();
        mutableDateTime16.setZone(dateTimeZone23);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale26.getDisplayScript(locale27);
        java.lang.String str29 = locale26.getDisplayScript();
        java.lang.String str30 = dateTimeZone23.getShortName((long) 13, locale26);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 54129245, dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime10.toMutableDateTime(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+30:12" + "'", str30, "+30:12");
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test14252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14252");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str2 = dateTimeFormatter0.print(0L);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) ' ');
        int int7 = localDateTime6.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis(54137);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withChronology(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Friday, 2 January 1970" + "'", str2, "Friday, 2 January 1970");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456120810,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=810,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test14253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14253");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime5.getZone();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime5.add(readableDuration7, 0);
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology11 = mutableDateTime3.getChronology();
        boolean boolean12 = mutableDateTime3.isEqualNow();
        mutableDateTime3.setSecondOfMinute(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        int int17 = localDate16.getDayOfMonth();
        org.joda.time.LocalDate localDate19 = localDate16.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        boolean boolean23 = mutableDateTime21.isAfter((long) 21);
        boolean boolean25 = mutableDateTime21.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime27.getZone();
        mutableDateTime21.setZone(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate16.toDateTimeAtStartOfDay(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime15.withFields((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay(0);
        org.joda.time.DateMidnight dateMidnight34 = dateTime31.toDateMidnight();
        org.joda.time.DateTime.Property property35 = dateTime31.yearOfCentury();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundFloor();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test14254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14254");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.setVariant("");
        java.util.Locale.Builder builder6 = builder2.clearExtensions();
        java.util.Locale.Builder builder8 = builder2.setVariant("54129776");
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder12 = builder8.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder8.setLanguageTag("2023-11-9 16:42:46");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2023 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14255");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        boolean boolean7 = mutableDateTime5.isAfter((long) 21);
        boolean boolean9 = mutableDateTime5.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        mutableDateTime5.setZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate0.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfEra((int) '4');
        org.joda.time.DateMidnight dateMidnight19 = localDate16.toDateMidnight();
        int int20 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateTime dateTime22 = dateTime15.withMillisOfSecond(9);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime24.setMinuteOfDay(100);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = localDate27.toInterval(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate27.plusMonths(0);
        org.joda.time.LocalDate.Property property32 = localDate31.year();
        int int33 = localDate31.size();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime35.getZone();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime38.getZone();
        long long41 = dateTimeZone36.getMillisKeepLocal(dateTimeZone39, (long) 10);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtMidnight(dateTimeZone39);
        int int43 = mutableDateTime24.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDate localDate44 = dateTime42.toLocalDate();
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTime.Property property46 = dateTime42.weekyear();
        org.joda.time.DateTime dateTime48 = property46.addToCopy(2000);
        org.joda.time.DateTimeField dateTimeField49 = property46.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField49.getType();
        int int51 = dateTime22.get(dateTimeField49);
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = localDate52.toInterval(dateTimeZone53);
        org.joda.time.LocalDate localDate56 = localDate52.plusMonths(0);
        org.joda.time.LocalDate.Property property57 = localDate56.year();
        org.joda.time.LocalDate localDate58 = property57.roundHalfEvenCopy();
        int int59 = dateTimeField49.getMinimumValue((org.joda.time.ReadablePartial) localDate58);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-292275054) + "'", int59 == (-292275054));
    }

    @Test
    public void test14256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14256");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 10);
        int int11 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusMonths(54134004);
        int int16 = localDateTime15.getYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456120914,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=914,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54520914 + "'", int11 == 54520914);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-4511157) + "'", int16 == (-4511157));
    }

    @Test
    public void test14257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14257");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        mutableDateTime1.setTime((long) 19);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.hourOfDay();
        mutableDateTime1.setMinuteOfDay(674);
        mutableDateTime1.addMillis(9);
        java.lang.String str11 = mutableDateTime1.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(13);
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withLocale(locale15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withZoneUTC();
        boolean boolean18 = dateTimeFormatter16.isOffsetParsed();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType19.getField(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter16.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Chronology chronology28 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        mutableDateTime1.setChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.minuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T11:14:00.028+30:12" + "'", str11, "2022-02-22T11:14:00.028+30:12");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test14258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14258");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime10.getZone();
        long long13 = dateTimeZone8.getMillisKeepLocal(dateTimeZone11, (long) 10);
        java.lang.String str14 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(chronology18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        long long24 = chronology18.add(readablePeriod21, (long) 48, 2122);
        org.joda.time.DurationField durationField25 = chronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.weekyear();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime15.toMutableDateTime(chronology18);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = localDate28.toInterval(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate28.plusMonths(0);
        org.joda.time.LocalDate.Property property33 = localDate32.year();
        int int34 = localDate32.size();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime36.getZone();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime39.getZone();
        long long42 = dateTimeZone37.getMillisKeepLocal(dateTimeZone40, (long) 10);
        org.joda.time.DateTime dateTime43 = localDate32.toDateTimeAtMidnight(dateTimeZone40);
        mutableDateTime27.setZone(dateTimeZone40);
        java.util.Locale locale45 = java.util.Locale.UK;
        java.util.Locale locale46 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.lang.String str50 = locale48.getDisplayScript(locale49);
        java.lang.String str51 = locale46.getDisplayScript(locale49);
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = locale46.getDisplayScript(locale52);
        java.lang.String str54 = locale45.getDisplayLanguage(locale52);
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.util.Locale locale56 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet57 = locale56.getExtensionKeys();
        java.lang.String str58 = locale55.getDisplayScript(locale56);
        java.lang.String str59 = locale52.getDisplayCountry(locale55);
        boolean boolean60 = dateTimeZone40.equals((java.lang.Object) locale52);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(242, 21245935, 4510305, 54269725, 54248577, 1999, dateTimeZone40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54269725 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+30:12" + "'", str14, "+30:12");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 48L + "'", long24 == 48L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English" + "'", str54, "English");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "United Kingdom" + "'", str59, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test14259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14259");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        java.lang.Appendable appendable6 = null;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusWeeks(54089980);
        int int16 = localDateTime15.getMillisOfDay();
        int int17 = localDateTime15.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(appendable6, (org.joda.time.ReadablePartial) localDateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645456120961,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=961,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54520961 + "'", int16 == 54520961);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test14260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14260");
        java.util.Date date0 = new java.util.Date();
        java.lang.String str1 = date0.toLocaleString();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromDateFields(date0);
        date0.setHours(21215732);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromCalendarFields(calendar5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property9.setCopy(19);
        java.util.Date date12 = localDateTime11.toDate();
        int int13 = date12.getMonth();
        boolean boolean14 = date0.before(date12);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Jun 02 20:08:40 GMT 4442");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "21-Feb-2022 15:08:40" + "'", str1, "21-Feb-2022 15:08:40");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456120977,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=40,MILLISECOND=977,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Oct 03 15:08:40 GMT 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test14261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14261");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime7.minusSeconds(50578855);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.DurationFieldType durationFieldType12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime10.withFieldAdded(durationFieldType12, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2922789 + "'", int5 == 2922789);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test14262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14262");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        java.lang.String str4 = mutableDateTime1.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        int int5 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        org.joda.time.DateTime dateTime10 = mutableDateTime7.toDateTimeISO();
        int int11 = mutableDateTime7.getYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str4, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test14263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14263");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property8.withMinimumValue();
        org.joda.time.LocalTime localTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property8.roundHalfFloorCopy();
        java.lang.String str13 = property8.getAsShortText();
        org.joda.time.LocalTime localTime14 = property8.getLocalTime();
        org.joda.time.LocalTime localTime15 = property8.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalTime localTime17 = localTime15.minus(readablePeriod16);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "6" + "'", str13, "6");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test14264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14264");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property8.addCopy(19);
        org.joda.time.LocalTime localTime13 = property8.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime14 = property8.getLocalTime();
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds(54264513);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test14265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14265");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test14266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14266");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayScript(locale3);
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale0.getDisplayScript(locale6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale6);
        calendar8.roll(1, true);
        calendar8.setFirstDayOfWeek(904);
        calendar8.set(0, 776, 108);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-60117324678872,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=904,minimalDaysInFirstWeek=4,ERA=1,YEAR=64,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=352,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=128,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test14267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14267");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        boolean boolean4 = mutableDateTime1.isAfterNow();
        boolean boolean5 = mutableDateTime1.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(21, 1);
        mutableDateTime1.setZoneRetainFields(dateTimeZone8);
        mutableDateTime1.setMillisOfSecond((int) '4');
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        int int13 = localDate12.getDayOfMonth();
        org.joda.time.LocalDate localDate15 = localDate12.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTime.Property property19 = dateTime16.property(dateTimeFieldType18);
        org.joda.time.DateTime dateTime21 = property19.addToCopy(2030);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime21);
        mutableDateTime1.addMonths(4);
        mutableDateTime1.setTime(32772L);
        java.lang.String str27 = mutableDateTime1.toString();
        mutableDateTime1.setYear(54121897);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime1.dayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-09-17T00:00:32.772+21:01" + "'", str27, "2022-09-17T00:00:32.772+21:01");
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test14268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14268");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.add(3, (int) ' ');
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar6);
        boolean boolean8 = calendar6.isWeekDateSupported();
        calendar6.setFirstDayOfWeek(5);
        calendar6.setMinimalDaysInFirstWeek(54098460);
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        calendar0.setTimeZone(timeZone13);
        calendar0.add(447, (int) (short) 0);
        int int18 = calendar0.getWeeksInWeekYear();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay((long) 20, chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfMonth();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("");
        java.lang.String str32 = dateTimeField28.getAsShortText(0, locale31);
        java.lang.String str33 = locale31.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap34 = calendar0.getDisplayNames(1256, 0, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1664809721163,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=276,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=163,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645456121163,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=54098460,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=163,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test14269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14269");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.util.Calendar calendar21 = dateTime18.toCalendar(locale20);
        org.joda.time.DateTime dateTime23 = dateTime18.plusMinutes(96);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1640886480000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2021,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=48,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test14270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14270");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.DateTimeFormat.mediumDate();
        java.lang.Integer int5 = dateTimeFormatter4.getPivotYear();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        java.lang.String str9 = durationFieldType8.toString();
        boolean boolean10 = localTime7.isSupported(durationFieldType8);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime13 = localTime7.withFieldAdded(durationFieldType11, 32772);
        org.joda.time.LocalTime.Property property14 = localTime7.hourOfDay();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.withMinimumValue();
        org.joda.time.LocalTime localTime17 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime19 = localTime17.plusHours(11);
        org.joda.time.LocalTime localTime21 = localTime19.minusMinutes((-1));
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter4.withChronology(chronology22);
        boolean boolean24 = dateTimeZone2.equals((java.lang.Object) dateTimeFormatter4);
        org.joda.time.Chronology chronology25 = dateTimeFormatter4.getChronology();
        java.lang.Integer int26 = dateTimeFormatter4.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "years" + "'", str9, "years");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(chronology25);
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test14271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14271");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property16.addToCopy((int) 'u');
        org.joda.time.DateTime dateTime21 = property16.setCopy(19);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths(2922789);
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        mutableDateTime27.setMinuteOfDay(100);
        boolean boolean30 = mutableDateTime27.isAfterNow();
        mutableDateTime27.add((long) 'a');
        boolean boolean33 = mutableDateTime27.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        mutableDateTime27.setZoneRetainFields(dateTimeZone34);
        java.lang.String str37 = dateTimeZone34.getName((long) 54110417);
        org.joda.time.DateTime dateTime38 = dateTime25.withZoneRetainFields(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test14272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14272");
        java.lang.Object obj1 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        java.lang.String str5 = durationFieldType4.toString();
        boolean boolean6 = localTime3.isSupported(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime9 = localTime3.withFieldAdded(durationFieldType7, 32772);
        org.joda.time.LocalTime.Property property10 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime12 = localTime3.minusMinutes(2922789);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology15);
        boolean boolean17 = localTime3.equals((java.lang.Object) chronology15);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(obj1, chronology15);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(1699548046259L, chronology15);
        org.joda.time.LocalTime localTime21 = localTime19.minusSeconds(0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "years" + "'", str5, "years");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test14273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14273");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears(14);
        int int6 = localDateTime5.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMillis((-9));
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property9.setCopy(2030);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2030 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456121313,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=313,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test14274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14274");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.minusSeconds(54110417);
        int int4 = dateTime3.getMinuteOfDay();
        org.joda.time.Instant instant5 = dateTime3.toInstant();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 880 + "'", int4 == 880);
        org.junit.Assert.assertNotNull(instant5);
    }

    @Test
    public void test14275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14275");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        int int4 = dateTimeZone2.getStandardOffset(0L);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("years");
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 108720000 + "'", int4 == 108720000);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645456121333,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=333,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645456121333,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=333,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14276");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate4 = localDate1.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        boolean boolean8 = mutableDateTime6.isAfter((long) 21);
        boolean boolean10 = mutableDateTime6.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        mutableDateTime6.setZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate1.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate19 = localDate17.withWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime22.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime25.getZone();
        long long28 = dateTimeZone23.getMillisKeepLocal(dateTimeZone26, (long) 10);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, dateTimeZone23);
        long long31 = dateTimeZone23.nextTransition((long) 12);
        org.joda.time.DateTime dateTime32 = localDate17.toDateTimeAtMidnight(dateTimeZone23);
        long long34 = dateTimeZone13.getMillisKeepLocal(dateTimeZone23, (long) '#');
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(obj0, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38, 54460432);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime37.toMutableDateTime();
        org.junit.Assert.assertNotNull(localDate1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 12L + "'", long31 == 12L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35L + "'", long34 == 35L);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test14277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14277");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withPeriodAdded(readablePeriod8, (int) (short) 100);
        int int11 = localDateTime10.getWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYearOfCentury(15);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays(54107938);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfDay();
        boolean boolean17 = calendar0.after((java.lang.Object) localDateTime13);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = calendar0.getMaximum(948);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 948");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456121395,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=395,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456121396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=396,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test14278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14278");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-21T15:02:32.382Z");
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: 2022-02-21T15:02:32.382Z" + "'", str2, "java.io.IOException: 2022-02-21T15:02:32.382Z");
    }

    @Test
    public void test14279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14279");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = localDate4.toInterval(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate4.plusMonths(0);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        int int10 = localDate8.size();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        long long18 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone16);
        int int20 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate21 = dateTime19.toLocalDate();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime19.minusYears(2030);
        org.joda.time.DateTime dateTime28 = dateTime19.minusDays(54113901);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.millisOfDay();
        java.lang.String str33 = mutableDateTime30.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.era();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime39.getZone();
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime39.add(readableDuration41, 0);
        mutableDateTime37.setTime((org.joda.time.ReadableInstant) mutableDateTime39);
        mutableDateTime39.add((long) 32772);
        org.joda.time.DateTimeField dateTimeField47 = mutableDateTime39.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int49 = mutableDateTime39.get(dateTimeFieldType48);
        boolean boolean50 = mutableDateTime30.isSupported(dateTimeFieldType48);
        boolean boolean51 = dateTime19.isSupported(dateTimeFieldType48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTime19.withSecondOfMinute(54246588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54246588 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str33, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 76874184 + "'", int49 == 76874184);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test14280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14280");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1L);
        int int2 = mutableDateTime1.getCenturyOfEra();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime1.toCalendar(locale3);
        boolean boolean5 = calendar4.isWeekDateSupported();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        int int8 = calendar6.getGreatestMinimum((int) (byte) 0);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.lang.String str10 = timeZone9.getID();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("years");
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        boolean boolean14 = timeZone9.hasSameRules(timeZone12);
        calendar4.setTimeZone(timeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType18.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.hourOfDay();
        java.lang.String str25 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.dayOfMonth();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale28.toLanguageTag();
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale28.getDisplayCountry(locale30);
        java.lang.String str32 = locale28.getDisplayCountry();
        java.lang.String str33 = dateTimeField26.getAsText(54126208L, locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = timeZone9.getDisplayName(true, 54268148, locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 54268148");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645456121427,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=427,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT" + "'", str10, "GMT");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ko-KR" + "'", str29, "ko-KR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str31, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "South Korea" + "'", str32, "South Korea");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
    }

    @Test
    public void test14281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14281");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.lang.String str8 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet12, filteringMode13);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleKeys();
        strSet18.clear();
        java.util.Iterator<java.lang.String> strItor20 = strSet18.iterator();
        boolean boolean21 = strSet12.equals((java.lang.Object) strItor20);
        boolean boolean23 = strSet12.equals((java.lang.Object) 1.0f);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        mutableDateTime25.setMinuteOfDay(100);
        boolean boolean28 = mutableDateTime25.isAfterNow();
        mutableDateTime25.add((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str32 = dateTimeFieldType31.toString();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getDurationType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType31);
        org.joda.time.MutableDateTime mutableDateTime35 = property34.roundHalfCeiling();
        org.joda.time.MutableDateTime[] mutableDateTimeArray36 = new org.joda.time.MutableDateTime[] { mutableDateTime35 };
        org.joda.time.MutableDateTime[] mutableDateTimeArray37 = strSet12.toArray(mutableDateTimeArray36);
        java.util.Iterator<java.lang.String> strItor38 = strSet12.iterator();
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate41 = localDate39.withWeekyear(3);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now();
        int int44 = localDate43.getDayOfMonth();
        org.joda.time.LocalDate localDate46 = localDate43.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = localDate48.toInterval(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = localDate48.plusMonths(0);
        org.joda.time.LocalDate.Property property53 = localDate52.year();
        int int54 = localDate52.size();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime56.getZone();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime59.getZone();
        long long62 = dateTimeZone57.getMillisKeepLocal(dateTimeZone60, (long) 10);
        org.joda.time.DateTime dateTime63 = localDate52.toDateTimeAtMidnight(dateTimeZone60);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property65 = dateTime63.property(dateTimeFieldType64);
        int int66 = localDate43.get(dateTimeFieldType64);
        org.joda.time.LocalDate.Property property67 = localDate43.dayOfMonth();
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("hi!");
        int int70 = property67.getMaximumTextLength(locale69);
        java.lang.String str71 = localDate41.toString("2022-02-21", locale69);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(locale69);
        boolean boolean73 = locale69.hasExtensions();
        java.util.Set<java.lang.String> strSet74 = locale69.getUnicodeLocaleKeys();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.parse("gregory", strMap76);
        boolean boolean78 = strSet74.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77);
        boolean boolean79 = strSet12.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77);
        strSet12.clear();
        org.joda.time.LocalDate localDate81 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.Interval interval83 = localDate81.toInterval(dateTimeZone82);
        org.joda.time.LocalDate localDate85 = localDate81.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate localDate87 = localDate81.minusMonths(10);
        int int88 = localDate87.getDayOfYear();
        int int89 = localDate87.getDayOfMonth();
        org.joda.time.LocalDate.Property property90 = localDate87.dayOfMonth();
        boolean boolean91 = strSet12.contains((java.lang.Object) localDate87);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + filteringMode13 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode13.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "dayOfYear" + "'", str32, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTimeArray36);
        org.junit.Assert.assertNotNull(mutableDateTimeArray37);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-21" + "'", str71, "2022-02-21");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645456121458,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=458,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(languageRangeList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 112 + "'", int88 == 112);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 22 + "'", int89 == 22);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test14282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14282");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(13);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        int int21 = localDate20.getDayOfMonth();
        org.joda.time.LocalDate localDate23 = localDate20.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        boolean boolean27 = mutableDateTime25.isAfter((long) 21);
        boolean boolean29 = mutableDateTime25.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime31.getZone();
        mutableDateTime25.setZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate20.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(dateTimeZone32);
        java.util.Date date37 = localDate36.toDate();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        mutableDateTime39.setMinuteOfDay(100);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Interval interval44 = localDate42.toInterval(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = localDate42.plusMonths(0);
        org.joda.time.LocalDate.Property property47 = localDate46.year();
        int int48 = localDate46.size();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime50.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime53.getZone();
        long long56 = dateTimeZone51.getMillisKeepLocal(dateTimeZone54, (long) 10);
        org.joda.time.DateTime dateTime57 = localDate46.toDateTimeAtMidnight(dateTimeZone54);
        int int58 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDate localDate59 = dateTime57.toLocalDate();
        org.joda.time.DateTime dateTime60 = dateTime57.toDateTime();
        org.joda.time.DateTime.Property property61 = dateTime57.weekyear();
        org.joda.time.DateTime dateTime63 = property61.addToCopy(2000);
        org.joda.time.DateTimeField dateTimeField64 = property61.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField64.getType();
        int int66 = localDate36.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime68 = dateTime19.withField(dateTimeFieldType65, 54118926);
        org.joda.time.DateTime.Property property69 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property71 = dateTime70.monthOfYear();
        org.joda.time.DateTime dateTime72 = property71.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone73);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime74.era();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime74.year();
        org.joda.time.MutableDateTime mutableDateTime77 = mutableDateTime74.copy();
        long long78 = property71.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.DateTimeField dateTimeField79 = property71.getField();
        int int80 = dateTime19.get(dateTimeField79);
        int int82 = dateTimeField79.getMaximumValue(1645456042708L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 12 + "'", int80 == 12);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
    }

    @Test
    public void test14283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14283");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale1 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        boolean boolean6 = mutableDateTime4.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.toMutableDateTime();
        mutableDateTime4.addDays(19);
        java.lang.String str10 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime4.addMillis(100);
        int int13 = mutableDateTime4.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.millisOfDay();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = property16.getAsText(locale17);
        java.lang.String str19 = locale17.getISO3Language();
        java.util.Calendar calendar20 = mutableDateTime4.toCalendar(locale17);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime4.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "21:20" + "'", str10, "21:20");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "76841566" + "'", str18, "76841566");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "deu" + "'", str19, "deu");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1647097721666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=71,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=666,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test14284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14284");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        boolean boolean7 = mutableDateTime5.isAfter((long) 21);
        boolean boolean9 = mutableDateTime5.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        mutableDateTime5.setZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate0.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate18 = localDate16.withWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime24.getZone();
        long long27 = dateTimeZone22.getMillisKeepLocal(dateTimeZone25, (long) 10);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(10L, dateTimeZone22);
        long long30 = dateTimeZone22.nextTransition((long) 12);
        org.joda.time.DateTime dateTime31 = localDate16.toDateTimeAtMidnight(dateTimeZone22);
        long long33 = dateTimeZone12.getMillisKeepLocal(dateTimeZone22, (long) '#');
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime34.copy();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime34.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime38 = property36.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime40 = property36.add((long) 54195816);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, 54149362);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 12L + "'", long30 == 12L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35L + "'", long33 == 35L);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
    }

    @Test
    public void test14285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14285");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0, 0, (-2020), 825, 50576237, 44352161, 21262001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 825 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14286");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.Interval interval4 = localDate3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        long long12 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (long) 10);
        java.lang.String str13 = dateTimeZone7.toString();
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtMidnight(dateTimeZone7);
        java.lang.String str16 = dateTimeZone7.getName((long) 39387342);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+30:12" + "'", str13, "+30:12");
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+30:12" + "'", str16, "+30:12");
    }

    @Test
    public void test14287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14287");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("00:00:00.000");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        int int5 = timeZone1.getOffset(142335414205840000L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14288");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.era();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfCeilingCopy();
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        int int11 = localDate10.getDayOfMonth();
        org.joda.time.LocalDate localDate13 = localDate10.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.LocalDate localDate16 = property14.roundFloorCopy();
        org.joda.time.LocalDate localDate18 = localDate16.minusDays(12);
        int int19 = localDate16.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate16.minus(readablePeriod20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDate21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456121653,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=653,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test14289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14289");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra((int) '4');
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate7 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = property8.roundCeilingCopy();
        int int13 = property8.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test14290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14290");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setVariant("fr");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: fr [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test14291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14291");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(874L);
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean4 = instant2.isSupported(dateTimeFieldType3);
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getDurationType();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withField(dateTimeFieldType3, 18);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusSeconds(54192915);
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.minuteOfHour();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14292");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.eras();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(chronology2);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology2);
        mutableDateTime5.add((long) 21211413);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test14293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14293");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.setTimeInMillis((long) 54128588);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) 100);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant7 = instant5.minus(readableDuration6);
        boolean boolean8 = calendar1.before((java.lang.Object) readableDuration6);
        int int9 = calendar1.getWeekYear();
        long long10 = calendar1.getTimeInMillis();
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=54128588,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=8,MILLISECOND=588,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 54128588L + "'", long10 == 54128588L);
    }

    @Test
    public void test14294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14294");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.getLocalTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale11 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withLocale(locale11);
        java.lang.String str13 = localTime9.toString(dateTimeFormatter12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 54110417);
        java.lang.Integer int16 = dateTimeFormatter12.getPivotYear();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "06:12" + "'", str13, "06:12");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test14295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14295");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate4 = localDate1.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        boolean boolean8 = mutableDateTime6.isAfter((long) 21);
        boolean boolean10 = mutableDateTime6.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        mutableDateTime6.setZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate1.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime0.withFields((org.joda.time.ReadablePartial) localDate1);
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.plus(readablePeriod18);
        org.joda.time.DateTime.Property property20 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(1900);
        org.junit.Assert.assertNotNull(localDate1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test14296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14296");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime9.minus(readablePeriod10);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis((long) (short) 100);
        org.joda.time.Instant instant15 = instant14.toInstant();
        boolean boolean16 = localTime11.equals((java.lang.Object) instant14);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("years");
        boolean boolean20 = timeZone19.observesDaylightTime();
        java.util.Locale locale21 = java.util.Locale.UK;
        java.util.Locale locale22 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale22.getDisplayScript(locale25);
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = locale22.getDisplayScript(locale28);
        java.lang.String str30 = locale21.getDisplayLanguage(locale28);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone19, locale21);
        java.lang.String str32 = localTime11.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", locale21);
        org.joda.time.LocalTime localTime34 = localTime11.plusSeconds(54100989);
        org.joda.time.LocalTime.Property property35 = localTime34.secondOfMinute();
        java.lang.String str37 = localTime34.toString("82800100");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645456121832,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=832,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str32, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "82800100" + "'", str37, "82800100");
    }

    @Test
    public void test14297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14297");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        int int2 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate4 = localDate1.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        boolean boolean8 = mutableDateTime6.isAfter((long) 21);
        boolean boolean10 = mutableDateTime6.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        mutableDateTime6.setZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate1.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime0.withFields((org.joda.time.ReadablePartial) localDate1);
        org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(0);
        org.joda.time.DateTime.Property property19 = dateTime16.millisOfSecond();
        int int20 = property19.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = property19.setCopy(21228839);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21228839 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 850 + "'", int20 == 850);
    }

    @Test
    public void test14298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14298");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMinimumValueOverall();
        org.joda.time.LocalDate localDate7 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property4.roundFloorCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.LocalDate localDate11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate13 = localDate11.minusYears((int) 'u');
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "centuryOfEra" + "'", str5, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test14299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14299");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder11 = builder6.setTimeOfDay(901, 54092146, 59, 5);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("years");
        boolean boolean14 = timeZone13.observesDaylightTime();
        java.util.Calendar.Builder builder15 = builder11.setTimeZone(timeZone13);
        java.util.Calendar.Builder builder19 = builder11.setDate(54121606, 2000, 12);
        java.util.Calendar.Builder builder21 = builder19.setLenient(false);
        java.util.Calendar.Builder builder25 = builder21.setTimeOfDay(622, 20, 54295778);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test14300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14300");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        int int4 = localDate3.getDayOfMonth();
        org.joda.time.LocalDate localDate6 = localDate3.plusYears((int) (byte) 100);
        org.joda.time.Interval interval7 = localDate6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        long long15 = dateTimeZone10.getMillisKeepLocal(dateTimeZone13, (long) 10);
        java.lang.String str16 = dateTimeZone10.toString();
        org.joda.time.DateTime dateTime17 = localDate6.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime1.toMutableDateTime(dateTimeZone10);
        java.lang.String str19 = mutableDateTime18.toString();
        java.lang.String str20 = mutableDateTime18.toString();
        mutableDateTime18.addMillis(32);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime18.add(readableDuration23);
        long long25 = mutableDateTime18.getMillis();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime18.minuteOfHour();
        int int27 = property26.getMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+30:12" + "'", str16, "+30:12");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T21:20:41.876+30:12" + "'", str19, "2022-02-22T21:20:41.876+30:12");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T21:20:41.876+30:12" + "'", str20, "2022-02-22T21:20:41.876+30:12");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645456121908L + "'", long25 == 1645456121908L);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test14301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14301");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime3 = property1.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = property1.addToCopy((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = property1.setCopy(21153698);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21153698 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test14302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14302");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.getLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMillis(292278994);
        org.joda.time.LocalTime localTime13 = localTime9.plusMinutes(54142542);
        int int14 = localTime13.size();
        org.joda.time.LocalTime localTime16 = localTime13.plusSeconds(21250122);
        org.joda.time.LocalTime localTime18 = localTime13.plusHours(82800100);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test14303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14303");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder10 = builder6.setDate(111, 901, (int) '4');
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        int int12 = localDate11.getDayOfMonth();
        org.joda.time.LocalDate localDate14 = localDate11.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        boolean boolean18 = mutableDateTime16.isAfter((long) 21);
        boolean boolean20 = mutableDateTime16.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime22.getZone();
        mutableDateTime16.setZone(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDate11.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate29 = localDate27.withWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime32.getZone();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime35.getZone();
        long long38 = dateTimeZone33.getMillisKeepLocal(dateTimeZone36, (long) 10);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(10L, dateTimeZone33);
        long long41 = dateTimeZone33.nextTransition((long) 12);
        org.joda.time.DateTime dateTime42 = localDate27.toDateTimeAtMidnight(dateTimeZone33);
        long long44 = dateTimeZone23.getMillisKeepLocal(dateTimeZone33, (long) '#');
        java.util.TimeZone timeZone45 = dateTimeZone33.toTimeZone();
        java.util.Calendar.Builder builder46 = builder6.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder50 = builder46.setDate(54139, 2922, 54112806);
        java.util.Calendar.Builder builder54 = builder50.setWeekDate(54149119, 54096794, (-2));
        java.util.Calendar.Builder builder56 = builder50.setLenient(false);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance();
        int int59 = calendar57.getGreatestMinimum((int) (byte) 0);
        java.util.TimeZone timeZone60 = calendar57.getTimeZone();
        java.lang.String str61 = timeZone60.getID();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getTimeZone("years");
        java.time.ZoneId zoneId64 = timeZone63.toZoneId();
        boolean boolean65 = timeZone60.hasSameRules(timeZone63);
        timeZone60.setID("");
        java.util.Calendar.Builder builder68 = builder56.setTimeZone(timeZone60);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder71 = builder56.setWeekDefinition(468, 859);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 12L + "'", long41 == 12L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 35L + "'", long44 == 35L);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645456121955,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=955,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GMT" + "'", str61, "GMT");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId64);
// flaky:         org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test14304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14304");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        calendar3.setLenient(true);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        calendar3.setLenient(true);
        java.time.Instant instant10 = calendar3.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456121969,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=41,MILLISECOND=969,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test14305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14305");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        mutableDateTime1.setMillis(12L);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add(359);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setMinuteOfHour(54121606);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54121606 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test14306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14306");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfHour();
        java.lang.String str3 = mutableDateTime1.toString();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, 54190463);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.DateTimeFormat.shortDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((int) (byte) -1);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        int int13 = localDate12.getDayOfMonth();
        org.joda.time.LocalDate localDate15 = localDate12.plusYears((int) (byte) 100);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime18.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        long long24 = dateTimeZone19.getMillisKeepLocal(dateTimeZone22, (long) 10);
        java.lang.String str25 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtMidnight(dateTimeZone19);
        long long28 = dateTimeZone19.convertUTCToLocal((-87L));
        long long30 = dateTimeZone19.convertUTCToLocal(100L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter9.withZone(dateTimeZone19);
        long long35 = dateTimeZone19.convertLocalToUTC((long) (short) 1, false, 1707781096161720000L);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone19);
        long long37 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Interval interval40 = localDate38.toInterval(dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate38.plusMonths(0);
        org.joda.time.LocalDate.Property property43 = localDate42.year();
        int int44 = localDate42.size();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime46.getZone();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime49.getZone();
        long long52 = dateTimeZone47.getMillisKeepLocal(dateTimeZone50, (long) 10);
        org.joda.time.DateTime dateTime53 = localDate42.toDateTimeAtMidnight(dateTimeZone50);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = locale54.toLanguageTag();
        boolean boolean56 = localDate42.equals((java.lang.Object) str55);
        org.joda.time.LocalDate localDate58 = localDate42.minusWeeks(0);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDate localDate61 = localDate58.withPeriodAdded(readablePeriod59, 12);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate61.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.DateTime.Property property64 = dateTime63.monthOfYear();
        org.joda.time.DateTime dateTime65 = dateTime63.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime67 = dateTime63.minusWeeks(54106168);
        org.joda.time.DateTime dateTime68 = dateTime67.toDateTime();
        long long69 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Instant instant70 = dateTime68.toInstant();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T21:20:42.000+30:12" + "'", str3, "2022-02-22T21:20:42.000+30:12");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(localDate12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+30:12" + "'", str25, "+30:12");
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 108719913L + "'", long28 == 108719913L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 108720100L + "'", long30 == 108720100L);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-108719999L) + "'", long35 == (-108719999L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ko-KR" + "'", str55, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 32723410406400000L + "'", long69 == 32723410406400000L);
        org.junit.Assert.assertNotNull(instant70);
    }

    @Test
    public void test14307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14307");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2122-02-21T00:00:00.000Z");
        java.util.GregorianCalendar gregorianCalendar2 = dateTime1.toGregorianCalendar();
        java.util.TimeZone timeZone3 = gregorianCalendar2.getTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = timeZone3.getDisplayName(false, 54487931);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 54487931");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456122036,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=36,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14308");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra(19);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withWeekyear(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(54117389);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = property19.setCopy(19);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plus(readableDuration24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withMillisOfDay(4);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readableDuration28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.era();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withPeriodAdded(readablePeriod31, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int35 = localDateTime29.get(dateTimeFieldType34);
        int int36 = localDateTime13.get(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime13.plusSeconds(21269);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = localDateTime13.withEra((-292275036));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275036 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456122043,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=43,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645456122043,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=43,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23533042 + "'", int36 == 23533042);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test14309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14309");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("\uc624\uc804 5:57:06");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022. 2. 18 ????? 5:57:06\" is malformed at \". 2. 18 ????? 5:57:06\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14310");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.minus(readableDuration2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.era();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.addWrapField((-1));
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime9.add(readablePeriod10);
        int int12 = mutableDateTime9.getWeekyear();
        boolean boolean13 = instant1.isBefore((org.joda.time.ReadableInstant) mutableDateTime9);
        mutableDateTime9.addYears(21264025);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14311");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTime();
        mutableDateTime1.addDays(19);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfEven();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime8.add(readablePeriod9, 50563722);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableDateTime8.add(readablePeriod12, 54110417);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime8.add(readablePeriod15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime8.millisOfSecond();
        int int18 = property17.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 999 + "'", int18 == 999);
    }

    @Test
    public void test14312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14312");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (byte) -1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        int int4 = localDate3.getDayOfMonth();
        org.joda.time.LocalDate localDate6 = localDate3.plusYears((int) (byte) 100);
        org.joda.time.Interval interval7 = localDate6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        long long15 = dateTimeZone10.getMillisKeepLocal(dateTimeZone13, (long) 10);
        java.lang.String str16 = dateTimeZone10.toString();
        org.joda.time.DateTime dateTime17 = localDate6.toDateTimeAtMidnight(dateTimeZone10);
        long long19 = dateTimeZone10.convertUTCToLocal((-87L));
        long long21 = dateTimeZone10.convertUTCToLocal(100L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter0.withZone(dateTimeZone10);
        boolean boolean23 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = dateTimeFormatter0.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDate3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+30:12" + "'", str16, "+30:12");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 108719913L + "'", long19 == 108719913L);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 108720100L + "'", long21 == 108720100L);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimePrinter25);
    }

    @Test
    public void test14313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14313");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale4.getDisplayScript(locale5);
        java.util.Locale.setDefault(category3, locale4);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.util.Locale.setDefault(category3, locale9);
        java.util.Locale locale13 = java.util.Locale.getDefault(category3);
        java.util.Locale locale14 = java.util.Locale.getDefault(category3);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale14);
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder15.setLanguageTag("21 Feb 1914 15:07:39 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 21 Feb 1914 15:07:39 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test14314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14314");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths(10);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test14315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14315");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 54374);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMonthOfYear(12122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12122 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14316");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusMillis(54101869);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.addWrapFieldToCopy(873);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withLocale(locale13);
        java.util.Locale locale15 = null;
        java.lang.String str16 = locale13.getDisplayScript(locale15);
        java.lang.String str17 = localDateTime10.toString("21:57:54.494", locale15);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456122120,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=120,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "21:57:54.494" + "'", str17, "21:57:54.494");
    }

    @Test
    public void test14317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14317");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.set((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(38);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test14318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14318");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType6.getField(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology9.seconds();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DurationField durationField15 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter5.withChronology(chronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter17.getZone();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean23 = mutableDateTime21.isSupported(dateTimeFieldType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime19.withField(dateTimeFieldType22, 50586);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50586 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test14319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14319");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property8.addCopy(19);
        org.joda.time.LocalTime localTime13 = localTime11.withHourOfDay(8);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale16 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withLocale(locale16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        boolean boolean21 = mutableDateTime19.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime19.toMutableDateTime();
        mutableDateTime19.addDays(19);
        java.lang.String str25 = dateTimeFormatter15.print((org.joda.time.ReadableInstant) mutableDateTime19);
        java.lang.String str26 = localTime13.toString(dateTimeFormatter15);
        int int27 = localTime13.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType28 = null;
        boolean boolean29 = localTime13.isSupported(durationFieldType28);
        org.joda.time.Chronology chronology30 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "21:20" + "'", str25, "21:20");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "08:12" + "'", str26, "08:12");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test14320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14320");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime3 = dateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(7);
        org.joda.time.DateTime dateTime7 = dateTime3.minusYears(32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = dateTime7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = localDate10.toInterval(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate10.plusMonths(0);
        org.joda.time.LocalDate.Property property15 = localDate14.year();
        int int16 = localDate14.size();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime18.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        long long24 = dateTimeZone19.getMillisKeepLocal(dateTimeZone22, (long) 10);
        org.joda.time.DateTime dateTime25 = localDate14.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime27 = property26.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime30.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime33.getZone();
        long long36 = dateTimeZone31.getMillisKeepLocal(dateTimeZone34, (long) 10);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(10L, dateTimeZone31);
        long long39 = dateTimeZone31.nextTransition((long) 12);
        org.joda.time.DateTime dateTime40 = dateTime27.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime41 = dateTime7.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone31);
        boolean boolean43 = dateTimeZone31.isFixed();
        java.lang.String str44 = dateTimeZone31.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 12L + "'", long39 == 12L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+30:12" + "'", str44, "+30:12");
    }

    @Test
    public void test14321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14321");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        long long10 = dateTimeZone5.getMillisKeepLocal(dateTimeZone8, (long) 10);
        java.lang.String str11 = dateTimeZone5.toString();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.lang.String str17 = dateTimeZone5.getName((long) 54089980, locale15);
        java.lang.String str18 = locale15.getDisplayLanguage();
        java.lang.String str19 = locale0.getDisplayVariant(locale15);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale0);
        calendar20.set(54112697, 6048836, 1380, (int) (short) 0, 54136);
        java.util.TimeZone timeZone27 = calendar20.getTimeZone();
        calendar20.setLenient(false);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.fromCalendarFields(calendar30);
        boolean boolean32 = calendar30.isWeekDateSupported();
        calendar30.setFirstDayOfWeek(5);
        calendar30.setMinimalDaysInFirstWeek((-1));
        java.util.Date date37 = calendar30.getTime();
        java.util.TimeZone timeZone38 = calendar30.getTimeZone();
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        timeZone39.setRawOffset(54135326);
        calendar20.setTimeZone(timeZone39);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("00:00:00.000");
        java.time.ZoneId zoneId45 = timeZone44.toZoneId();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone(zoneId45);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone(zoneId45);
        calendar20.setTimeZone(timeZone47);
        boolean boolean49 = timeZone47.observesDaylightTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ko-KR" + "'", str1, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+30:12" + "'", str11, "+30:12");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ko-KR" + "'", str14, "ko-KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str16, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+30:12" + "'", str17, "+30:12");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Korean" + "'", str18, "Korean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=54112697,MONTH=6048836,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1380,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=54136,SECOND=42,MILLISECOND=214,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645456122214,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=54135326,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=-1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=214,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 21 15:08:42 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test14322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14322");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfMinute();
        mutableDateTime1.addSeconds(86399999);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        java.lang.String str9 = durationFieldType8.toString();
        boolean boolean10 = localTime7.isSupported(durationFieldType8);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime13 = localTime7.withFieldAdded(durationFieldType11, 32772);
        org.joda.time.LocalTime.Property property14 = localTime7.hourOfDay();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime17 = localTime15.withMillisOfDay(20);
        org.joda.time.LocalTime.Property property18 = localTime17.secondOfMinute();
        org.joda.time.LocalTime localTime20 = localTime17.minusMinutes((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.era();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.year();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        boolean boolean28 = mutableDateTime26.isAfter((long) 21);
        boolean boolean30 = mutableDateTime26.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime32.getZone();
        mutableDateTime26.setZone(dateTimeZone33);
        mutableDateTime22.setZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone33);
        mutableDateTime1.setZone(dateTimeZone33);
        java.lang.String str38 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "years" + "'", str9, "years");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2024-11-18T21:20:41.242+30:12" + "'", str38, "2024-11-18T21:20:41.242+30:12");
    }

    @Test
    public void test14323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14323");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfMinute();
        org.joda.time.DateTime dateTime3 = property2.getDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test14324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14324");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.Interval interval4 = localDate3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        long long12 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (long) 10);
        java.lang.String str13 = dateTimeZone7.toString();
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime17 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime18 = property15.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withMonthOfYear(970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+30:12" + "'", str13, "+30:12");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test14325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14325");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.minusDays(12);
        int int9 = localDate6.getYearOfCentury();
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime();
        int int11 = dateTime10.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2922789 + "'", int5 == 2922789);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
    }

    @Test
    public void test14326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14326");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getRangeDurationType();
        java.lang.String str3 = durationFieldType2.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weeks" + "'", str3, "weeks");
    }

    @Test
    public void test14327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14327");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        int int4 = dateTimeZone2.getStandardOffset(0L);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("years");
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        boolean boolean9 = timeZone7.observesDaylightTime();
        java.time.ZoneId zoneId10 = timeZone7.toZoneId();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone(zoneId10);
        boolean boolean12 = timeZone11.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 108720000 + "'", int4 == 108720000);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14328");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType5.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfDay();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter0.withChronology(chronology8);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter12.getParser();
        java.lang.Integer int14 = dateTimeFormatter12.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter12.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear(13);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter16.getParser();
        java.util.Locale locale20 = dateTimeFormatter16.getLocale();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeFormatter16.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter16.getParser();
        int int23 = dateTimeParser22.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser22);
        java.lang.StringBuffer stringBuffer25 = null;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.fromCalendarFields(calendar26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusWeeks(100);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withDurationAdded(readableDuration33, 14);
        int int36 = localDateTime29.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime29.withMillisOfSecond((int) 'a');
        java.util.Locale locale42 = new java.util.Locale("2022-02-21T15:05:45.262", "30 September 2022 05:52:35 ", "GMT+00:00");
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter15.printTo(stringBuffer25, (org.joda.time.ReadablePartial) localDateTime29, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeParser13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(dateTimePrinter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeParser19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeParser22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 40 + "'", int23 == 40);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645456122389,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=389,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertEquals(locale42.toString(), "2022-02-21t15:05:45.262_30 SEPTEMBER 2022 05:52:35 _GMT+00:00");
    }

    @Test
    public void test14329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14329");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMinimumValueOverall();
        org.joda.time.LocalDate localDate7 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = property4.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        org.joda.time.LocalDate localDate11 = property4.addWrapFieldToCopy(82800100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate14 = localDate11.withPeriodAdded(readablePeriod12, (-16));
        org.joda.time.LocalDate.Property property15 = localDate14.weekyear();
        org.joda.time.LocalDate.Property property16 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.setCopy(0);
        org.joda.time.LocalDate.Property property19 = localDate18.year();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "centuryOfEra" + "'", str5, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test14330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14330");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.hourOfDay();
        long long12 = dateTimeField9.getDifferenceAsLong(0L, 1645455909781L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField9.getType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-457071L) + "'", long12 == (-457071L));
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test14331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14331");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str7 = dateTimeFieldType6.toString();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getDurationType();
        boolean boolean9 = localDateTime3.isSupported(durationFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withCenturyOfEra((int) 'u');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = localDateTime11.getField(50571);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 50571");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456122467,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=467,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "dayOfYear" + "'", str7, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14332");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.LocalTime localTime6 = localTime1.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime.Property property7 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = property7.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime11 = property7.getLocalTime();
        org.joda.time.LocalTime localTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime14 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property7.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = property7.setCopy("5 Dec 12 15:05:12 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"5 Dec 12 15:05:12 GMT\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test14333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14333");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekyear();
        long long7 = dateTimeField5.remainder((long) 21144338);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 280344338L + "'", long7 == 280344338L);
    }

    @Test
    public void test14334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14334");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(3);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra(21401263);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test14335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14335");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay((long) 20, chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.minuteOfDay();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test14336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14336");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusMinutes((int) (byte) 1);
        int int6 = localDateTime5.getDayOfWeek();
        int int7 = localDateTime5.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withDurationAdded(readableDuration8, 54129499);
        int int11 = localDateTime10.getWeekyear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456122628,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=628,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test14337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14337");
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay((long) 20, chronology4);
        org.joda.time.Chronology chronology6 = chronology4.withUTC();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(3249414360000L, chronology6);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test14338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14338");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Date date2 = calendar0.getTime();
        boolean boolean3 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromCalendarFields(calendar5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusMinutes(7);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusYears(54147603);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.era();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime16.year();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        boolean boolean22 = mutableDateTime20.isAfter((long) 21);
        boolean boolean24 = mutableDateTime20.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime26.getZone();
        mutableDateTime20.setZone(dateTimeZone27);
        mutableDateTime16.setZoneRetainFields(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(0L, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.era();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime34.year();
        mutableDateTime34.setTime((long) 19);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        mutableDateTime34.setZoneRetainFields(dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutableDateTime34.add(readablePeriod42, 54156906);
        int int45 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTime dateTime46 = localDateTime10.toDateTime(dateTimeZone27);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = localDate4.isAfter((org.joda.time.ReadablePartial) localDateTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456122649,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=649,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 15:08:42 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456122649,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=649,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T15:01:42.649" + "'", str11, "2022-02-21T15:01:42.649");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 108720000 + "'", int45 == 108720000);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test14339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14339");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        boolean boolean4 = mutableDateTime1.isAfterNow();
        mutableDateTime1.add((long) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfYear();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType7.getDurationType();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.property(dateTimeFieldType7);
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 1);
        org.joda.time.Instant instant13 = mutableDateTime12.toInstant();
        mutableDateTime12.setMinuteOfDay(772);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime12.add(readablePeriod16);
        mutableDateTime12.add(1645455822203L);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime12.millisOfDay();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfYear" + "'", str8, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test14340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14340");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        int int8 = localDateTime3.size();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusSeconds(54096794);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYear(54113409);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        boolean boolean20 = mutableDateTime18.isAfter((long) 21);
        boolean boolean22 = mutableDateTime18.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime24.getZone();
        mutableDateTime18.setZone(dateTimeZone25);
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str30 = locale28.getDisplayScript(locale29);
        java.lang.String str31 = locale28.getDisplayScript();
        java.lang.String str32 = dateTimeZone25.getShortName((long) 13, locale28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.fromCalendarFields(calendar33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusSeconds(0);
        boolean boolean39 = dateTimeZone25.isLocalDateTimeGap(localDateTime36);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plus(readablePeriod40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusWeeks(31);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime50 = localDateTime44.withTime(273, 54159975, 21200614, 54304333);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 273 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456122686,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=686,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+30:12" + "'", str32, "+30:12");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645456122686,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=686,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test14341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14341");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1L);
        int int2 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        java.lang.String str4 = mutableDateTime1.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-02T06:12:00.001+30:12" + "'", str4, "1970-01-02T06:12:00.001+30:12");
    }

    @Test
    public void test14342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14342");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readablePeriod2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime5 = property4.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra(985);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(54192915);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456122709,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=709,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test14343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14343");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        boolean boolean6 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter4.getZone();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = localDate8.toInterval(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate8.plusMonths(0);
        org.joda.time.LocalDate.Property property13 = localDate8.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        boolean boolean15 = localDate8.isSupported(durationFieldType14);
        java.lang.String str16 = dateTimeFormatter4.print((org.joda.time.ReadablePartial) localDate8);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str16, "22 f\351\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
    }

    @Test
    public void test14344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14344");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        calendar1.setTimeInMillis((long) 54128588);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        boolean boolean5 = calendar1.isLenient();
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=54128588,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=8,MILLISECOND=588,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test14345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14345");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate0.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.years();
        boolean boolean7 = localDate0.isSupported(durationFieldType6);
        java.lang.String str8 = durationFieldType6.getName();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "years" + "'", str8, "years");
    }

    @Test
    public void test14346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14346");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(17, 54422296, 54344452, 58622333, 21284218, 17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 58622333 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14347");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("years");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        boolean boolean3 = timeZone1.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime10.getZone();
        long long13 = dateTimeZone8.getMillisKeepLocal(dateTimeZone11, (long) 10);
        java.lang.String str14 = dateTimeZone11.toString();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("hi!");
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16, locale18);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.years();
        java.lang.String str23 = durationFieldType22.toString();
        boolean boolean24 = localTime21.isSupported(durationFieldType22);
        org.joda.time.LocalTime localTime26 = localTime21.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime.Property property27 = localTime21.millisOfDay();
        org.joda.time.LocalTime localTime28 = property27.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.years();
        java.lang.String str33 = durationFieldType32.toString();
        boolean boolean34 = localTime31.isSupported(durationFieldType32);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime37 = localTime31.withFieldAdded(durationFieldType35, 32772);
        org.joda.time.LocalTime.Property property38 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime39 = property38.roundCeilingCopy();
        org.joda.time.LocalTime localTime41 = property38.addCopy(19);
        org.joda.time.LocalTime localTime43 = property38.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime44 = property38.getLocalTime();
        org.joda.time.LocalTime localTime46 = localTime44.plusMinutes(14);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.util.Locale locale48 = java.util.Locale.KOREA;
        java.lang.String str49 = locale47.getDisplayScript(locale48);
        java.util.Locale locale50 = java.util.Locale.KOREA;
        java.lang.String str51 = locale50.toLanguageTag();
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.lang.String str53 = locale50.getDisplayCountry(locale52);
        java.lang.String str54 = locale48.getDisplayCountry(locale50);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime56.getZone();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime59.getZone();
        long long62 = dateTimeZone57.getMillisKeepLocal(dateTimeZone60, (long) 10);
        java.lang.String str63 = dateTimeZone57.toString();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.lang.String str66 = locale65.toLanguageTag();
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.lang.String str68 = locale65.getDisplayCountry(locale67);
        java.lang.String str69 = dateTimeZone57.getName((long) 54089980, locale67);
        java.lang.String str70 = locale67.getDisplayLanguage();
        java.lang.String str71 = locale50.getDisplayName(locale67);
        java.lang.String str72 = locale50.toLanguageTag();
        java.lang.String str73 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localTime46, locale50);
        java.lang.String str74 = locale18.getDisplayLanguage(locale50);
        java.util.Set<java.lang.String> strSet75 = locale50.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = timeZone1.getDisplayName(false, 50582, locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 50582");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+30:12" + "'", str14, "+30:12");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645456122786,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=786,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "years" + "'", str23, "years");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "years" + "'", str33, "years");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ko-KR" + "'", str51, "ko-KR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str53, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str54, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+30:12" + "'", str63, "+30:12");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ko-KR" + "'", str66, "ko-KR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str68, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+30:12" + "'", str69, "+30:12");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Korean" + "'", str70, "Korean");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str71, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ko-KR" + "'", str72, "ko-KR");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "23160100" + "'", str73, "23160100");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strSet75);
    }

    @Test
    public void test14348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14348");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.hourOfDay();
        long long12 = dateTimeField9.getDifferenceAsLong(315705600000L, (long) 54513002);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 87680L + "'", long12 == 87680L);
    }

    @Test
    public void test14349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14349");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property8.setCopy(772);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(86399);
        int int14 = localDateTime13.getEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundCeilingCopy();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456122819,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=819,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test14350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14350");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-21T14:55:34.319");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:55:34.319\" is malformed at \"22-02-21T14:55:34.319\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14351");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.setFirstDayOfWeek(5);
        calendar0.setMinimalDaysInFirstWeek((-1));
        java.util.Date date7 = calendar0.getTime();
        java.util.TimeZone timeZone8 = calendar0.getTimeZone();
        int int10 = calendar0.getGreatestMinimum(12);
        int int12 = calendar0.getActualMaximum(0);
        calendar0.setFirstDayOfWeek(24524);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456122845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=24524,minimalDaysInFirstWeek=-1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=845,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 15:08:42 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test14352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14352");
        java.lang.Throwable throwable0 = null;
        java.io.IOException iOException1 = new java.io.IOException(throwable0);
        java.io.IOException iOException3 = new java.io.IOException("Property[weekOfWeekyear]");
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray5 = iOException3.getSuppressed();
        java.io.IOException iOException7 = new java.io.IOException("English");
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        iOException3.addSuppressed((java.lang.Throwable) iOException7);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test14353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14353");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        calendar0.set(13, (int) (byte) -1, 2);
        java.time.Instant instant6 = calendar0.toInstant();
        java.util.Date date7 = java.util.Date.from(instant6);
        java.lang.String str8 = date7.toGMTString();
        int int9 = date7.getDay();
        date7.setDate(54113472);
        date7.setMonth(0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61759615877115,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=12,MONTH=11,WEEK_OF_YEAR=48,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=337,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=885,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Sat Aug 26 15:08:42 GMT 148169");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2 Dec 12 15:08:42 GMT" + "'", str8, "2 Dec 12 15:08:42 GMT");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
    }

    @Test
    public void test14354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14354");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(54344452, 21146196, 21235485, 54379671, 54443223, 351);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54379671 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14355");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.LocalTime localTime9 = localTime7.minusMinutes(54191062);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime9.plus(readablePeriod10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = localTime11.toString("2022-02-21T15:07:19.736");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test14356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14356");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        org.joda.time.Chronology chronology3 = dateTimeFormatter0.getChronolgy();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Calendar calendar5 = builder4.build();
        java.util.Calendar.Builder builder10 = builder4.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder14 = builder10.setDate(111, 901, (int) '4');
        java.util.Calendar.Builder builder18 = builder14.setDate((int) 'a', (int) 'u', 16);
        java.util.Calendar.Builder builder20 = builder18.setLenient(false);
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder26 = builder21.setTimeOfDay((int) '4', 54092146, 54104989, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType27.getField(chronology30);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.lang.String str34 = locale32.getDisplayScript(locale33);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = locale35.toLanguageTag();
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale35.getDisplayCountry(locale37);
        java.lang.String str39 = locale33.getDisplayCountry(locale35);
        int int40 = dateTimeField31.getMaximumTextLength(locale33);
        java.lang.String str41 = locale33.getVariant();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.years();
        java.lang.String str45 = durationFieldType44.toString();
        boolean boolean46 = localTime43.isSupported(durationFieldType44);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime49 = localTime43.withFieldAdded(durationFieldType47, 32772);
        org.joda.time.LocalTime.Property property50 = localTime43.hourOfDay();
        org.joda.time.LocalTime localTime51 = property50.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalTime localTime53 = localTime51.minus(readablePeriod52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis((long) (short) 100);
        org.joda.time.Instant instant57 = instant56.toInstant();
        boolean boolean58 = localTime53.equals((java.lang.Object) instant56);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("years");
        boolean boolean62 = timeZone61.observesDaylightTime();
        java.util.Locale locale63 = java.util.Locale.UK;
        java.util.Locale locale64 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.lang.String str68 = locale66.getDisplayScript(locale67);
        java.lang.String str69 = locale64.getDisplayScript(locale67);
        java.util.Locale locale70 = java.util.Locale.UK;
        java.lang.String str71 = locale64.getDisplayScript(locale70);
        java.lang.String str72 = locale63.getDisplayLanguage(locale70);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone61, locale63);
        java.lang.String str74 = localTime53.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", locale63);
        java.lang.String str75 = locale33.getDisplayName(locale63);
        java.lang.String str76 = locale63.getISO3Country();
        java.util.Calendar.Builder builder77 = builder21.setLocale(locale63);
        java.util.Calendar.Builder builder78 = builder18.setLocale(locale63);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter0.withLocale(locale63);
        java.util.Locale locale80 = dateTimeFormatter79.getLocale();
        org.joda.time.Chronology chronology81 = dateTimeFormatter79.getChronology();
        boolean boolean82 = dateTimeFormatter79.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ko-KR" + "'", str36, "ko-KR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str38, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str39, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "years" + "'", str45, "years");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "English" + "'", str72, "English");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1645456122915,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=915,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str74, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Korean (South Korea)" + "'", str75, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "GBR" + "'", str76, "GBR");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_GB");
        org.junit.Assert.assertNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test14357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14357");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("21 June 0130 15:04:16 ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14358");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        long long10 = dateTimeZone5.getMillisKeepLocal(dateTimeZone8, (long) 10);
        java.lang.String str11 = dateTimeZone5.toString();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.lang.String str17 = dateTimeZone5.getName((long) 54089980, locale15);
        java.lang.String str18 = locale15.getDisplayLanguage();
        java.lang.String str19 = locale0.getDisplayVariant(locale15);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale0);
        calendar20.set(54112697, 6048836, 1380, (int) (short) 0, 54136);
        java.util.TimeZone timeZone27 = calendar20.getTimeZone();
        calendar20.setLenient(false);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.fromCalendarFields(calendar30);
        boolean boolean32 = calendar30.isWeekDateSupported();
        calendar30.setFirstDayOfWeek(5);
        calendar30.setMinimalDaysInFirstWeek((-1));
        java.util.Date date37 = calendar30.getTime();
        java.util.TimeZone timeZone38 = calendar30.getTimeZone();
        java.util.TimeZone timeZone39 = calendar30.getTimeZone();
        timeZone39.setRawOffset(54135326);
        calendar20.setTimeZone(timeZone39);
        java.lang.String str43 = timeZone39.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ko-KR" + "'", str1, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+30:12" + "'", str11, "+30:12");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ko-KR" + "'", str14, "ko-KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str16, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+30:12" + "'", str17, "+30:12");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Korean" + "'", str18, "Korean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=54135326,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=54112697,MONTH=6048836,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1380,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=54136,SECOND=42,MILLISECOND=979,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645456122979,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=54135326,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=-1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=42,MILLISECOND=979,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 21 15:08:42 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Greenwich Mean Time" + "'", str43, "Greenwich Mean Time");
    }

    @Test
    public void test14359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14359");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(457071L);
    }

    @Test
    public void test14360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14360");
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Calendar calendar8 = builder7.build();
        calendar8.clear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType10.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfDay();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology13);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology13);
        boolean boolean19 = calendar8.before((java.lang.Object) chronology13);
        org.joda.time.DateTimeField dateTimeField20 = chronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(54405, 54351324, 54404070, 54129499, 54344957, 122, 54265152, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54129499 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test14361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14361");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        long long7 = dateTimeZone2.convertLocalToUTC((long) 0, true, (long) 32772);
        boolean boolean9 = dateTimeZone2.isStandardOffset((long) 19043);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-108720000L) + "'", long7 == (-108720000L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test14362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14362");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("years");
        boolean boolean3 = timeZone2.observesDaylightTime();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayScript(locale8);
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale5.getDisplayScript(locale11);
        java.lang.String str13 = locale4.getDisplayLanguage(locale11);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone2, locale4);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int17 = dateTimeZone15.getStandardOffset(54196265499L);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) "2022-10-03T14:03:00.013-01:00", dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English" + "'", str13, "English");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645456123032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test14363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14363");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.setFirstDayOfWeek(5);
        calendar0.setMinimalDaysInFirstWeek(54098460);
        int int8 = calendar0.getMinimum(0);
        java.util.Date date9 = calendar0.getTime();
        calendar0.setMinimalDaysInFirstWeek(54125287);
        calendar0.clear();
        java.util.TimeZone timeZone13 = calendar0.getTimeZone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=54125287,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 21 15:08:43 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test14364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14364");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        java.lang.String str5 = property4.getName();
        int int6 = property4.getMinimumValueOverall();
        org.joda.time.LocalDate localDate7 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths(50578855);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime12.setMinuteOfDay(100);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundCeiling();
        org.joda.time.DateTime dateTime17 = localDate7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(2000);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes(53325046);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime19.withTime(0, (-3639), 26, 21262001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3639 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "centuryOfEra" + "'", str5, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test14365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14365");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.add(3, (int) ' ');
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar6);
        boolean boolean8 = calendar6.isWeekDateSupported();
        calendar6.setFirstDayOfWeek(5);
        calendar6.setMinimalDaysInFirstWeek(54098460);
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        calendar0.setTimeZone(timeZone13);
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar calendar16 = builder15.build();
        java.util.Calendar.Builder builder21 = builder15.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder23 = builder21.setLenient(false);
        java.util.Calendar.Builder builder27 = builder23.setDate(54142542, 21, 54100989);
        java.util.Calendar.Builder builder32 = builder27.setTimeOfDay(5, 54107938, 54134252, 50571);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("years");
        boolean boolean37 = timeZone36.observesDaylightTime();
        boolean boolean38 = timeZone34.hasSameRules(timeZone36);
        java.util.Calendar.Builder builder39 = builder27.setTimeZone(timeZone36);
        boolean boolean40 = timeZone13.hasSameRules(timeZone36);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1664809723071,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=276,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=71,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645456123071,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=54098460,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=71,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test14366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14366");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.lang.String str8 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet12, filteringMode13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.util.Set<java.lang.String> strSet24 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale25.toLanguageTag();
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = locale25.getDisplayCountry(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale21, locale27, locale30 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.lang.String str38 = locale36.getDisplayScript(locale37);
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet40 = locale36.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strSet40);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strList41, filteringMode42);
        boolean boolean44 = strSet12.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16);
        java.util.Iterator<java.lang.String> strItor45 = strSet12.iterator();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.years();
        java.lang.String str49 = durationFieldType48.toString();
        boolean boolean50 = localTime47.isSupported(durationFieldType48);
        org.joda.time.LocalTime localTime52 = localTime47.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime.Property property53 = localTime47.millisOfDay();
        org.joda.time.LocalTime localTime54 = property53.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField55 = property53.getField();
        boolean boolean56 = strSet12.contains((java.lang.Object) property53);
        java.lang.Throwable throwable58 = null;
        java.io.IOException iOException59 = new java.io.IOException(throwable58);
        java.io.IOException iOException61 = new java.io.IOException("Property[weekOfWeekyear]");
        iOException59.addSuppressed((java.lang.Throwable) iOException61);
        java.io.IOException iOException63 = new java.io.IOException((java.lang.Throwable) iOException61);
        java.io.IOException iOException64 = new java.io.IOException("54126208", (java.lang.Throwable) iOException63);
        java.io.IOException iOException65 = new java.io.IOException((java.lang.Throwable) iOException63);
        java.lang.Throwable[] throwableArray66 = iOException65.getSuppressed();
        java.io.Serializable[] serializableArray67 = strSet12.toArray((java.io.Serializable[]) throwableArray66);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + filteringMode13 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode13.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ko-KR" + "'", str26, "ko-KR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str28, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode42.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "years" + "'", str49, "years");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(serializableArray67);
    }

    @Test
    public void test14367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14367");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField7 = chronology3.era();
        org.joda.time.DurationField durationField8 = chronology3.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology3);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setMillisOfSecond(54520914);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54520914 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test14368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14368");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale8.getDisplayCountry(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale8);
        int int13 = dateTimeField4.getMaximumTextLength(locale6);
        java.lang.String str14 = locale6.getVariant();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        java.lang.String str18 = durationFieldType17.toString();
        boolean boolean19 = localTime16.isSupported(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime22 = localTime16.withFieldAdded(durationFieldType20, 32772);
        org.joda.time.LocalTime.Property property23 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime24 = property23.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime26 = localTime24.minus(readablePeriod25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis((long) (short) 100);
        org.joda.time.Instant instant30 = instant29.toInstant();
        boolean boolean31 = localTime26.equals((java.lang.Object) instant29);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("years");
        boolean boolean35 = timeZone34.observesDaylightTime();
        java.util.Locale locale36 = java.util.Locale.UK;
        java.util.Locale locale37 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale39.getDisplayScript(locale40);
        java.lang.String str42 = locale37.getDisplayScript(locale40);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale37.getDisplayScript(locale43);
        java.lang.String str45 = locale36.getDisplayLanguage(locale43);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.lang.String str47 = localTime26.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", locale36);
        java.lang.String str48 = locale6.getDisplayName(locale36);
        java.util.Set<java.lang.String> strSet49 = locale6.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet49.spliterator();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.years();
        java.lang.String str54 = durationFieldType53.toString();
        boolean boolean55 = localTime52.isSupported(durationFieldType53);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime58 = localTime52.withFieldAdded(durationFieldType56, 32772);
        org.joda.time.LocalTime.Property property59 = localTime52.hourOfDay();
        org.joda.time.LocalTime localTime60 = property59.roundCeilingCopy();
        org.joda.time.LocalTime localTime62 = property59.addCopy(19);
        org.joda.time.LocalTime localTime64 = property59.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime65 = property59.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime67 = property59.addCopy(54138814);
        boolean boolean68 = strSet49.remove((java.lang.Object) localTime67);
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.years();
        java.lang.String str72 = durationFieldType71.toString();
        boolean boolean73 = localTime70.isSupported(durationFieldType71);
        org.joda.time.LocalTime localTime75 = localTime70.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime localTime77 = localTime75.withMillisOfSecond(21);
        int int78 = localTime67.compareTo((org.joda.time.ReadablePartial) localTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko-KR" + "'", str9, "ko-KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str11, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str12, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English" + "'", str45, "English");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645456123170,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=170,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str47, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Korean (South Korea)" + "'", str48, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strSpliterator50);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "years" + "'", str54, "years");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "years" + "'", str72, "years");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test14369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14369");
        java.util.Date date0 = new java.util.Date();
        date0.setMinutes(12);
        date0.setHours(2922789);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.secondOfMinute();
        int int9 = mutableDateTime6.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.millisOfDay();
        java.lang.String str14 = mutableDateTime11.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        int int15 = mutableDateTime11.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.secondOfMinute();
        org.joda.time.Chronology chronology17 = mutableDateTime11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime6.toMutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime18.toMutableDateTime();
        java.util.Date date20 = mutableDateTime19.toDate();
        int int21 = date20.getMonth();
        java.time.Instant instant22 = date20.toInstant();
        boolean boolean23 = date0.after(date20);
        java.time.Instant instant24 = date0.toInstant();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Thu Jul 28 21:12:43 GMT 2355");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 76843 + "'", int9 == 76843);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str14, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 21 15:08:43 GMT 2022");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(instant24);
    }

    @Test
    public void test14370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14370");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1L);
        int int2 = mutableDateTime1.getRoundingMode();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        int int4 = mutableDateTime1.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundCeiling();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 372 + "'", int4 == 372);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test14371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14371");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMinutes(2122);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMillis(54096794);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMillis(21);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) 100);
        boolean boolean14 = localDateTime7.equals((java.lang.Object) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(54161953);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456123248,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=248,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14372");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        long long10 = dateTimeZone5.getMillisKeepLocal(dateTimeZone8, (long) 10);
        java.lang.String str11 = dateTimeZone5.toString();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.lang.String str17 = dateTimeZone5.getName((long) 54089980, locale15);
        java.lang.String str18 = locale15.getDisplayLanguage();
        java.lang.String str19 = locale0.getDisplayVariant(locale15);
        java.lang.String str20 = locale15.getISO3Language();
        java.lang.String str21 = locale15.getDisplayLanguage();
        java.lang.String str22 = locale15.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ko-KR" + "'", str1, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+30:12" + "'", str11, "+30:12");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ko-KR" + "'", str14, "ko-KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str16, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+30:12" + "'", str17, "+30:12");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Korean" + "'", str18, "Korean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "kor" + "'", str20, "kor");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Korean" + "'", str21, "Korean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test14373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14373");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        boolean boolean2 = dateTimeFormatter0.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 901);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.era();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.year();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(dateTimeZone9);
        boolean boolean12 = mutableDateTime10.isAfter((long) 21);
        boolean boolean14 = mutableDateTime10.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime16.getZone();
        mutableDateTime10.setZone(dateTimeZone17);
        mutableDateTime6.setZoneRetainFields(dateTimeZone17);
        mutableDateTime6.add((long) (short) -1);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime6.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfEven();
        java.lang.String str24 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime23);
        mutableDateTime23.addMillis(50);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType27.getField(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.secondOfMinute();
        mutableDateTime23.setChronology(chronology30);
        mutableDateTime23.add((long) (-4441888));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "00:00:00 o'clock +30:12" + "'", str24, "00:00:00 o'clock +30:12");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test14374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14374");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        boolean boolean11 = mutableDateTime9.isAfter((long) 21);
        boolean boolean13 = mutableDateTime9.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        mutableDateTime9.setZone(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localTime1.toDateTimeToday(dateTimeZone16);
        org.joda.time.LocalTime localTime20 = localTime1.plusMinutes(0);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime23 = localTime1.withPeriodAdded(readablePeriod21, 54107938);
        org.joda.time.DateTime dateTime24 = localTime23.toDateTimeToday();
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(54134004);
        int int27 = dateTime26.getMonthOfYear();
        org.joda.time.DateTime.Property property28 = dateTime26.centuryOfEra();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test14375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14375");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        int int4 = dateTimePrinter3.estimatePrintedLength();
        int int5 = dateTimePrinter3.estimatePrintedLength();
        int int6 = dateTimePrinter3.estimatePrintedLength();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.shortTime();
        java.lang.String str18 = localDateTime16.toString(dateTimeFormatter17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.DateTimeFormat.longDateTime();
        java.lang.String str20 = localDateTime16.toString(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter19.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = dateTimeParser22.parseInto(dateTimeParserBucket24, "2022-02-21T15:06:40.923", 884);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimePrinter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40 + "'", int5 == 40);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645456123314,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=314,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "15:08" + "'", str18, "15:08");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "21 June 0130 15:08:43 " + "'", str20, "21 June 0130 15:08:43 ");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeParser22);
    }

    @Test
    public void test14376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14376");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        long long7 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) 10);
        java.lang.String str8 = dateTimeZone5.toString();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone5);
        java.util.TimeZone timeZone10 = dateTimeZone5.toTimeZone();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("hi!");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        timeZone10.setID("2022-02-21T15:01:48.350Z");
        boolean boolean16 = timeZone10.observesDaylightTime();
        java.lang.String str17 = timeZone10.getID();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = timeZone10.getOffset(212, 102, (-9), 21282567, (-10076576), 41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+30:12" + "'", str8, "+30:12");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645456123341,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-21T15:01:48.350Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=341,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-21T15:01:48.350Z" + "'", str17, "2022-02-21T15:01:48.350Z");
    }

    @Test
    public void test14377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14377");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        boolean boolean7 = mutableDateTime5.isAfter((long) 21);
        boolean boolean9 = mutableDateTime5.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        mutableDateTime5.setZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate0.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate18 = localDate16.withWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime24.getZone();
        long long27 = dateTimeZone22.getMillisKeepLocal(dateTimeZone25, (long) 10);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(10L, dateTimeZone22);
        long long30 = dateTimeZone22.nextTransition((long) 12);
        org.joda.time.DateTime dateTime31 = localDate16.toDateTimeAtMidnight(dateTimeZone22);
        long long33 = dateTimeZone12.getMillisKeepLocal(dateTimeZone22, (long) '#');
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime34.copy();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime34.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime38 = property36.addWrapField(0);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.era();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((java.lang.Object) property39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 12L + "'", long30 == 12L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35L + "'", long33 == 35L);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test14378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14378");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTime();
        mutableDateTime1.addDays(19);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundCeiling();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getDayOfMonth();
        org.joda.time.LocalDate localDate12 = localDate9.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        boolean boolean16 = mutableDateTime14.isAfter((long) 21);
        boolean boolean18 = mutableDateTime14.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime20.getZone();
        mutableDateTime14.setZone(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate9.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate27 = localDate25.withWeekyear(3);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime30.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime33.getZone();
        long long36 = dateTimeZone31.getMillisKeepLocal(dateTimeZone34, (long) 10);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(10L, dateTimeZone31);
        long long39 = dateTimeZone31.nextTransition((long) 12);
        org.joda.time.DateTime dateTime40 = localDate25.toDateTimeAtMidnight(dateTimeZone31);
        long long42 = dateTimeZone21.getMillisKeepLocal(dateTimeZone31, (long) '#');
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone21);
        mutableDateTime8.setZoneRetainFields(dateTimeZone21);
        long long47 = dateTimeZone21.nextTransition((long) 46);
        boolean boolean48 = dateTimeZone21.isFixed();
        long long50 = dateTimeZone21.previousTransition(1645456097685L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 12L + "'", long39 == 12L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 35L + "'", long42 == 35L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 46L + "'", long47 == 46L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645456097685L + "'", long50 == 1645456097685L);
    }

    @Test
    public void test14379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14379");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("years");
        boolean boolean4 = timeZone3.observesDaylightTime();
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        timeZone1.setRawOffset(69);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone1);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone1);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone1);
        int int12 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456123400,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=469,ZONE_OFFSET=69,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645456123400,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=469,ZONE_OFFSET=69,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645456123400,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=469,ZONE_OFFSET=69,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test14380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14380");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale8 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withLocale(locale8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        boolean boolean13 = mutableDateTime11.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.toMutableDateTime();
        mutableDateTime11.addDays(19);
        java.lang.String str17 = dateTimeFormatter7.print((org.joda.time.ReadableInstant) mutableDateTime11);
        mutableDateTime11.addMillis(100);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime11.copy();
        mutableDateTime20.addHours(50563722);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.dayOfWeek();
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) mutableDateTime20);
        mutableDateTime6.setMillis((long) 75378542);
        mutableDateTime6.add((long) 54483104);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "21:20" + "'", str17, "21:20");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14381");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        mutableDateTime1.setZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = dateTimeZone8.getShortName((long) 13, locale11);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds(0);
        boolean boolean22 = dateTimeZone8.isLocalDateTimeGap(localDateTime19);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plus(readablePeriod23);
        java.util.Date date25 = localDateTime24.toDate();
        int int26 = localDateTime24.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.era();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks(54134385);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.plusDays(54112697);
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime29.withDurationAdded(readableDuration35, 54285980);
        int[] intArray38 = localDateTime37.getValues();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+30:12" + "'", str15, "+30:12");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645456123446,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=446,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Mon Oct 03 15:08:43 GMT 2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1, 1, 1, 0]");
    }

    @Test
    public void test14382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14382");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet13, filteringMode14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.lang.String str24 = locale22.getDisplayScript(locale23);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = locale30.getDisplayScript(locale31);
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale22, locale28, locale31 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale locale36 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = locale37.getDisplayScript(locale38);
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet41 = locale37.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet41);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList42, filteringMode43);
        boolean boolean45 = strSet13.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17);
        boolean boolean46 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.lang.String str54 = locale52.getDisplayScript(locale53);
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale56 = java.util.Locale.KOREA;
        java.lang.String str57 = locale56.toLanguageTag();
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.lang.String str59 = locale56.getDisplayCountry(locale58);
        java.util.Locale locale60 = java.util.Locale.KOREA;
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.lang.String str62 = locale60.getDisplayScript(locale61);
        java.util.Locale[] localeArray63 = new java.util.Locale[] { locale52, locale58, locale61 };
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.Locale locale66 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.Locale locale67 = java.util.Locale.KOREA;
        java.util.Locale locale68 = java.util.Locale.KOREA;
        java.lang.String str69 = locale67.getDisplayScript(locale68);
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet71 = locale67.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strSet71);
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.Locale locale76 = java.util.Locale.KOREA;
        java.util.Locale locale77 = java.util.Locale.KOREA;
        java.lang.String str78 = locale76.getDisplayScript(locale77);
        java.util.Set<java.lang.String> strSet79 = locale76.getUnicodeLocaleKeys();
        java.util.Locale locale80 = java.util.Locale.KOREA;
        java.lang.String str81 = locale80.toLanguageTag();
        java.util.Locale locale82 = java.util.Locale.KOREA;
        java.lang.String str83 = locale80.getDisplayCountry(locale82);
        java.util.Locale locale84 = java.util.Locale.KOREA;
        java.util.Locale locale85 = java.util.Locale.KOREA;
        java.lang.String str86 = locale84.getDisplayScript(locale85);
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale76, locale82, locale85 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.Locale locale90 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList91);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + filteringMode14 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode14.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ko-KR" + "'", str27, "ko-KR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str29, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode43.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko-KR" + "'", str57, "ko-KR");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str59, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(locale66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ko-KR" + "'", str81, "ko-KR");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str83, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(locale90);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeList92);
    }

    @Test
    public void test14383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14383");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(54421456);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456123514,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=514,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 10, 3, 54523514]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test14384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14384");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.lang.String str6 = locale4.getDisplayScript(locale5);
        java.util.Locale.setDefault(category3, locale4);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.util.Locale.setDefault(category3, locale9);
        java.util.Locale locale13 = java.util.Locale.getDefault(category3);
        java.util.Locale locale14 = java.util.Locale.getDefault(category3);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale14);
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder15.setLanguage("weekOfWeekyear");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: weekOfWeekyear [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "kor" + "'", str11, "kor");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test14385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14385");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        boolean boolean6 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        java.lang.String str9 = dateTimeFormatter4.print(54098460L);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        java.lang.String str13 = locale10.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withLocale(locale10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withDefaultYear(54268148);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2 janvier 1970 21:13:38 +30:12" + "'", str9, "2 janvier 1970 21:13:38 +30:12");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test14386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14386");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay((long) 20, chronology3);
        org.joda.time.DurationField durationField5 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeField6.set(0L, "8192-12-07T15:56:53.737-81:11:15.054");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"8192-12-07T15:56:53.737-81:11:15.054\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test14387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14387");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        boolean boolean4 = mutableDateTime1.isAfterNow();
        boolean boolean5 = mutableDateTime1.isEqualNow();
        java.util.Date date6 = mutableDateTime1.toDate();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        java.util.Date date8 = localDate7.toDate();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfEra();
        java.lang.String str10 = property9.getName();
        int int11 = property9.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 20 19:28:43 GMT 2022");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Sun Feb 20 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yearOfEra" + "'", str10, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
    }

    @Test
    public void test14388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14388");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType4.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfDay();
        java.lang.String str10 = dateTimeField9.getName();
        java.lang.String str11 = dateTimeField9.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType12.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfDay();
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = dateTimeField17.getAsText(7, locale19);
        java.util.Locale locale21 = java.util.Locale.UK;
        java.util.Locale locale22 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale22.getDisplayScript(locale25);
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = locale22.getDisplayScript(locale28);
        java.lang.String str30 = locale21.getDisplayLanguage(locale28);
        java.lang.String str31 = locale19.getDisplayVariant(locale28);
        java.util.Locale locale34 = new java.util.Locale("21 June 0130 15:01:38 ", "en_GB");
        java.lang.String str35 = locale19.getDisplayLanguage(locale34);
        int int36 = dateTimeField9.getMaximumTextLength(locale19);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("2022-02-21T15:00:33.584");
        java.lang.String str39 = locale19.getDisplayLanguage(locale38);
        java.util.Locale.Builder builder40 = builder3.setLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder3.setLanguageTag("08:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 08:00:00.000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondOfDay" + "'", str10, "secondOfDay");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[secondOfDay]" + "'", str11, "DateTimeField[secondOfDay]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7" + "'", str20, "7");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals(locale34.toString(), "21 june 0130 15:01:38 _EN_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "French" + "'", str35, "French");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "French" + "'", str39, "French");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test14389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14389");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(6046641, 11, 54100989, 109, 21362400, 54211751);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 109 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14390");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(35L);
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean4 = instant2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        int int6 = instant2.get(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.property(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType8.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfDay();
        java.lang.String str15 = chronology11.toString();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology11.getZone();
        org.joda.time.DurationField durationField17 = chronology11.centuries();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType5.getField(chronology11);
        boolean boolean20 = dateTimeField18.isLeap((long) (-9));
        org.joda.time.DurationField durationField21 = dateTimeField18.getRangeDurationField();
        org.joda.time.DurationField durationField22 = dateTimeField18.getLeapDurationField();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNull(durationField22);
    }

    @Test
    public void test14391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14391");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.toLanguageTag();
        boolean boolean18 = localDate4.equals((java.lang.Object) str17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        boolean boolean20 = localDate4.equals((java.lang.Object) dateTime19);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = localDate21.toInterval(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate21.plusMonths(0);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate25.minus(readablePeriod27);
        org.joda.time.LocalDate localDate30 = localDate28.withCenturyOfEra(32772);
        org.joda.time.LocalDate localDate32 = localDate30.withMonthOfYear(12);
        boolean boolean33 = localDate4.isEqual((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.LocalDate.Property property34 = localDate4.dayOfMonth();
        int int35 = localDate4.getMonthOfYear();
        org.joda.time.LocalDate.Property property36 = localDate4.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko-KR" + "'", str17, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test14392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14392");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate4.minus(readablePeriod6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) '4');
        boolean boolean11 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate13 = localDate8.minusDays((int) (byte) 100);
        org.joda.time.LocalDate.Property property14 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate16 = property14.setCopy(9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear(13);
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter17.getParser();
        java.lang.String str22 = dateTimeFormatter17.print((long) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter17.withZoneUTC();
        java.lang.String str24 = localDate16.toString(dateTimeFormatter17);
        java.util.Locale locale25 = dateTimeFormatter17.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter17.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZoneUTC();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeParser20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "02 January 1970 06:12:00 +30:12" + "'", str22, "02 January 1970 06:12:00 +30:12");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd " + "'", str24, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd ");
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test14393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14393");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        java.util.Locale locale1 = java.util.Locale.UK;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        boolean boolean6 = mutableDateTime4.isAfter((long) 21);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.toMutableDateTime();
        mutableDateTime4.addDays(19);
        java.lang.String str10 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter0.withDefaultYear(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear((java.lang.Integer) 42);
        java.util.Locale locale17 = new java.util.Locale("year", "21 June 0130 14:03:06 ");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter14.withLocale(locale17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime20.getZone();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.secondOfMinute();
        mutableDateTime20.addSeconds(86399999);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.years();
        java.lang.String str28 = durationFieldType27.toString();
        boolean boolean29 = localTime26.isSupported(durationFieldType27);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime32 = localTime26.withFieldAdded(durationFieldType30, 32772);
        org.joda.time.LocalTime.Property property33 = localTime26.hourOfDay();
        org.joda.time.LocalTime localTime34 = property33.roundCeilingCopy();
        org.joda.time.LocalTime localTime36 = localTime34.withMillisOfDay(20);
        org.joda.time.LocalTime.Property property37 = localTime36.secondOfMinute();
        org.joda.time.LocalTime localTime39 = localTime36.minusMinutes((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.era();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime41.year();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        boolean boolean47 = mutableDateTime45.isAfter((long) 21);
        boolean boolean49 = mutableDateTime45.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime51.getZone();
        mutableDateTime45.setZone(dateTimeZone52);
        mutableDateTime41.setZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localTime39.toDateTimeToday(dateTimeZone52);
        mutableDateTime20.setZone(dateTimeZone52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeFormatter14, dateTimeZone52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "21:20" + "'", str10, "21:20");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals(locale17.toString(), "year_21 JUNE 0130 14:03:06 ");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "years" + "'", str28, "years");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test14394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14394");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfEra();
        int int6 = localDate4.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
    }

    @Test
    public void test14395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14395");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate18 = dateTime17.toLocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test14396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14396");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("05-Jan-143179 14:11:19", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14397");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 10);
        int int11 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusMonths(54134004);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusYears(21144338);
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.minusMillis(0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456123708,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=708,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54523708 + "'", int11 == 54523708);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test14398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14398");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfMinute();
        int int4 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfDay();
        java.lang.String str9 = mutableDateTime6.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        int int10 = mutableDateTime6.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.secondOfMinute();
        org.joda.time.Chronology chronology12 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime1.toMutableDateTime(chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType14.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.years();
        java.lang.String str23 = durationFieldType22.toString();
        boolean boolean24 = localTime21.isSupported(durationFieldType22);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime27 = localTime21.withFieldAdded(durationFieldType25, 32772);
        org.joda.time.LocalTime.Property property28 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime30 = localTime21.minusMinutes(2922789);
        java.util.Locale locale32 = java.util.Locale.UK;
        java.util.Locale locale33 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale35.getDisplayScript(locale36);
        java.lang.String str38 = locale33.getDisplayScript(locale36);
        java.util.Locale locale39 = java.util.Locale.UK;
        java.lang.String str40 = locale33.getDisplayScript(locale39);
        java.lang.String str41 = locale32.getDisplayLanguage(locale39);
        java.lang.String str42 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localTime30, (int) ' ', locale32);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.years();
        java.lang.String str46 = durationFieldType45.toString();
        boolean boolean47 = localTime44.isSupported(durationFieldType45);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime50 = localTime44.withFieldAdded(durationFieldType48, 32772);
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.lang.String str53 = locale51.getDisplayScript(locale52);
        java.lang.String str54 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localTime50, locale52);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.years();
        java.lang.String str58 = durationFieldType57.toString();
        boolean boolean59 = localTime56.isSupported(durationFieldType57);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime62 = localTime56.withFieldAdded(durationFieldType60, 32772);
        org.joda.time.LocalTime.Property property63 = localTime56.hourOfDay();
        org.joda.time.LocalTime localTime64 = property63.roundCeilingCopy();
        org.joda.time.LocalTime localTime65 = property63.withMinimumValue();
        org.joda.time.LocalTime localTime66 = property63.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime68 = localTime66.plusHours(11);
        org.joda.time.LocalTime localTime70 = localTime68.minusMinutes((-1));
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalTime localTime72 = localTime68.plus(readablePeriod71);
        java.util.Locale locale74 = new java.util.Locale("Property[millisOfDay]");
        java.lang.String str75 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localTime68, locale74);
        int int76 = mutableDateTime1.get(dateTimeField19);
        mutableDateTime1.add(3249414360001L);
        mutableDateTime1.add(4190400000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 76843 + "'", int4 == 76843);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str9, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "years" + "'", str23, "years");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "32" + "'", str42, "32");
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "years" + "'", str46, "years");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "years" + "'", str58, "years");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertEquals(locale74.toString(), "property[millisofday]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0" + "'", str75, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 43 + "'", int76 == 43);
    }

    @Test
    public void test14399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14399");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readablePeriod2);
        int int4 = localDateTime3.getDayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        int int7 = localDateTime6.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusYears(54121);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 82800100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds(120);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusDays(21381719);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456123807,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=807,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test14400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14400");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(21, 1);
        org.joda.time.DateTime dateTime8 = localDateTime3.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withMillisOfDay(54113409);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusYears(14);
        int int17 = localDateTime16.size();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusHours(12);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime10.withMillisOfSecond(54354409);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54354409 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456123817,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=817,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645456123817,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=817,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test14401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14401");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusMinutes(2122);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMinutes(10);
        int int12 = localDateTime11.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusDays(0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456123857,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=857,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test14402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14402");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        mutableDateTime1.setZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = dateTimeZone8.getShortName((long) 13, locale11);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale18.toLanguageTag();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale18);
        java.lang.String str21 = locale18.getISO3Country();
        java.lang.String str22 = dateTimeZone8.getShortName(0L, locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = locale18.getUnicodeLocaleType("January");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: January");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+30:12" + "'", str15, "+30:12");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ko-KR" + "'", str19, "ko-KR");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645456123867,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=43,MILLISECOND=867,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "KOR" + "'", str21, "KOR");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+30:12" + "'", str22, "+30:12");
    }

    @Test
    public void test14403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14403");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1L);
        int int2 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.era();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime4.add(readablePeriod6, (int) (byte) 100);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType10.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfDay();
        org.joda.time.DurationField durationField17 = dateTimeField16.getLeapDurationField();
        int int18 = mutableDateTime4.get(dateTimeField16);
        mutableDateTime4.addHours(54092146);
        mutableDateTime4.setMillis((long) ' ');
        int int23 = mutableDateTime4.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime4.dayOfWeek();
        mutableDateTime4.addDays((int) '4');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 372 + "'", int23 == 372);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test14404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14404");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear(13);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withLocale(locale4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType7.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfDay();
        org.joda.time.DurationField durationField13 = chronology10.seconds();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.DurationField durationField16 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.centuryOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter6.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter18.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.millisOfDay();
        java.lang.String str25 = mutableDateTime22.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        int int26 = mutableDateTime22.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.secondOfMinute();
        org.joda.time.Chronology chronology28 = mutableDateTime22.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 901, chronology28);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology28);
        java.lang.String str32 = dateTimeFormatter18.print((org.joda.time.ReadablePartial) localTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.parse("54139", dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"54139\" is malformed at \"139\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str25, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 21:20:43 " + "'", str32, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 21:20:43 ");
    }

    @Test
    public void test14405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14405");
        java.util.Locale locale2 = new java.util.Locale("54151367", "2022-02-21T15:06:32.457Z");
        java.lang.String str3 = locale2.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "54151367_2022-02-21T15:06:32.457Z");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test14406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14406");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test14407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14407");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        mutableDateTime1.setTime((long) 19);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone7);
        boolean boolean9 = mutableDateTime1.isAfterNow();
        boolean boolean11 = mutableDateTime1.isEqual(1645455820389L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14408");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        long long7 = dateTimeZone2.getMillisKeepLocal(dateTimeZone5, (long) 10);
        java.lang.String str8 = dateTimeZone5.toString();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology12.add(readablePeriod15, (long) 48, 2122);
        org.joda.time.DurationField durationField19 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.weekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime9.toMutableDateTime(chronology12);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate22.toInterval(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate22.plusMonths(0);
        org.joda.time.LocalDate.Property property27 = localDate26.year();
        int int28 = localDate26.size();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime30.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime33.getZone();
        long long36 = dateTimeZone31.getMillisKeepLocal(dateTimeZone34, (long) 10);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtMidnight(dateTimeZone34);
        mutableDateTime21.setZone(dateTimeZone34);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime21.isAfter(readableInstant39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.era();
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        int int45 = localDate44.getDayOfMonth();
        org.joda.time.LocalDate localDate47 = localDate44.plusYears((int) (byte) 100);
        org.joda.time.Interval interval48 = localDate47.toInterval();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime50.getZone();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime53.getZone();
        long long56 = dateTimeZone51.getMillisKeepLocal(dateTimeZone54, (long) 10);
        java.lang.String str57 = dateTimeZone51.toString();
        org.joda.time.DateTime dateTime58 = localDate47.toDateTimeAtMidnight(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime42.toMutableDateTime(dateTimeZone51);
        long long62 = dateTimeZone51.adjustOffset(3599999L, false);
        boolean boolean63 = dateTimeZone51.isFixed();
        mutableDateTime21.setZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime67 = dateTime65.withMillisOfSecond(62);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+30:12" + "'", str8, "+30:12");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 48L + "'", long18 == 48L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 22 + "'", int45 == 22);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+30:12" + "'", str57, "+30:12");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3599999L + "'", long62 == 3599999L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test14409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14409");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), (int) (byte) 0);
        long long4 = dateTimeZone2.convertUTCToLocal(1L);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        java.lang.String str8 = durationFieldType7.toString();
        boolean boolean9 = localTime6.isSupported(durationFieldType7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime12 = localTime6.withFieldAdded(durationFieldType10, 32772);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean16 = localTime14.equals((java.lang.Object) dateTimeFieldType15);
        org.joda.time.LocalTime.Property property17 = localTime6.property(dateTimeFieldType15);
        org.joda.time.LocalTime localTime18 = property17.withMaximumValue();
        boolean boolean19 = dateTimeZone2.equals((java.lang.Object) property17);
        org.joda.time.LocalTime localTime20 = property17.roundFloorCopy();
        org.joda.time.LocalTime localTime21 = property17.roundFloorCopy();
        int int22 = property17.getLeapAmount();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = property17.setCopy("5:57 AM");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"5:57 AM\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599999L) + "'", long4 == (-3599999L));
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "years" + "'", str8, "years");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test14410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14410");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.minus((long) 13);
        org.joda.time.Instant instant4 = instant2.minus((long) 901);
        org.joda.time.Instant instant7 = instant4.withDurationAdded((long) '#', 16);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, 54137);
        org.joda.time.DateTime dateTime11 = instant7.toDateTime();
        java.lang.String str12 = dateTime11.toString();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T21:20:43.741+30:12" + "'", str12, "2022-02-22T21:20:43.741+30:12");
    }

    @Test
    public void test14411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14411");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.years();
        java.lang.String str4 = durationFieldType3.toString();
        boolean boolean5 = localTime2.isSupported(durationFieldType3);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, 32772);
        java.lang.String str9 = durationFieldType6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType10.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfDay();
        boolean boolean17 = durationFieldType6.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, chronology13);
        org.joda.time.Chronology chronology20 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.era();
        org.joda.time.DurationField durationField22 = chronology13.seconds();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "years" + "'", str4, "years");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "halfdays" + "'", str9, "halfdays");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test14412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14412");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(3249414360000L, chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.millisOfDay();
        mutableDateTime2.addSeconds(50831694);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test14413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14413");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate4.minus(readablePeriod6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) '4');
        boolean boolean11 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate8);
        java.util.Locale locale13 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.lang.String str18 = locale13.getDisplayScript(locale16);
        java.util.Set<java.lang.String> strSet19 = locale13.getUnicodeLocaleKeys();
        java.lang.String str20 = locale13.getVariant();
        java.lang.String str21 = localDate7.toString("2", locale13);
        java.lang.String str22 = localDate7.toString();
        org.joda.time.LocalDate.Property property23 = localDate7.year();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2" + "'", str21, "2");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22" + "'", str22, "2022-02-22");
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14414");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property4.addToCopy((int) (short) 100);
        int int7 = localDate6.getEra();
        org.joda.time.LocalDate.Property property8 = localDate6.year();
        org.joda.time.LocalDate localDate9 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = localDate10.plusWeeks(21263116);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test14415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14415");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.months();
        mutableDateTime0.add(durationFieldType2, 2023);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType5.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.hourOfDay();
        java.lang.String str12 = chronology8.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfMinute();
        long long18 = chronology8.add((long) 53, (long) 54142876, 1922);
        org.joda.time.DurationField durationField19 = durationFieldType2.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField20 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField22 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology8.millisOfSecond();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 104062607725L + "'", long18 == 104062607725L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test14416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14416");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.minus((long) 13);
        org.joda.time.Instant instant4 = instant2.minus((long) 901);
        org.joda.time.DateTimeZone dateTimeZone5 = instant4.getZone();
        org.joda.time.Instant instant7 = instant4.plus((-3599999L));
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test14417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14417");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readablePeriod2);
        int int4 = localDateTime3.getDayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        int int7 = localDateTime6.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusYears(54121);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withPeriodAdded(readablePeriod10, 82800100);
        int int13 = localDateTime12.getYearOfCentury();
        int int14 = localDateTime12.getYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456124193,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=193,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-52099) + "'", int14 == (-52099));
    }

    @Test
    public void test14418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14418");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder11 = builder0.setTimeOfDay(0, 13, 40, (int) (short) 0);
        java.util.Calendar.Builder builder15 = builder11.setTimeOfDay(37, 21246826, 77);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.years();
        java.lang.String str19 = durationFieldType18.toString();
        boolean boolean20 = localTime17.isSupported(durationFieldType18);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime23 = localTime17.withFieldAdded(durationFieldType21, 32772);
        org.joda.time.LocalTime.Property property24 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime25 = property24.roundCeilingCopy();
        org.joda.time.LocalTime localTime27 = localTime25.withMillisOfDay(20);
        org.joda.time.LocalTime.Property property28 = localTime27.secondOfMinute();
        org.joda.time.LocalTime localTime30 = localTime27.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        int[] intArray32 = localTime30.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder33 = builder15.setFields(intArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "years" + "'", str19, "years");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 50, 0, 20]");
    }

    @Test
    public void test14419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14419");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        boolean boolean4 = mutableDateTime1.isAfterNow();
        boolean boolean5 = mutableDateTime1.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(21, 1);
        mutableDateTime1.setZoneRetainFields(dateTimeZone8);
        mutableDateTime1.setMillisOfSecond((int) '4');
        mutableDateTime1.addWeeks(111);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test14420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14420");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 54129298);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(54151493);
        int int6 = localDateTime5.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test14421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14421");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Interval interval7 = localDate5.toInterval(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate5.plusMonths(0);
        org.joda.time.LocalDate.Property property10 = localDate9.year();
        int int11 = localDate9.size();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime13.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime16.getZone();
        long long19 = dateTimeZone14.getMillisKeepLocal(dateTimeZone17, (long) 10);
        org.joda.time.DateTime dateTime20 = localDate9.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        int int23 = localDate0.get(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = localDate24.toInterval(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate24.plusMonths(0);
        org.joda.time.LocalDate.Property property29 = localDate28.weekOfWeekyear();
        java.lang.String str30 = property29.toString();
        org.joda.time.LocalDate localDate31 = property29.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean33 = localDate31.isSupported(dateTimeFieldType32);
        org.joda.time.LocalDate.Property property34 = localDate0.property(dateTimeFieldType32);
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        org.joda.time.LocalDate localDate37 = property34.addToCopy(68);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[weekOfWeekyear]" + "'", str30, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test14422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14422");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMonths(54098460);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, (int) 'a');
        int int14 = dateTime10.getYearOfCentury();
        org.joda.time.DateTime.Property property15 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2922789 + "'", int5 == 2922789);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14423");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType1.getField(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.hourOfDay();
        java.lang.String str8 = chronology4.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology4.getZone();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(0L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime10.toMutableDateTime();
        mutableDateTime13.addMonths(52185);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.era();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.addWrapField((-1));
        java.lang.String str22 = mutableDateTime21.toString();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.minuteOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.yearOfCentury();
        java.lang.String str25 = mutableDateTime21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType26.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.yearOfCentury();
        int int35 = dateTimeField33.getMinimumValue(63840268800048L);
        mutableDateTime21.setRounding(dateTimeField33);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setRounding(dateTimeField33, 54000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 54000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-0001-01-01T00:00:00.000+30:12" + "'", str22, "-0001-01-01T00:00:00.000+30:12");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-0001-01-01T00:00:00.000+30:12" + "'", str25, "-0001-01-01T00:00:00.000+30:12");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test14424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14424");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        mutableDateTime1.setZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = dateTimeZone8.getShortName((long) 13, locale11);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds(0);
        boolean boolean22 = dateTimeZone8.isLocalDateTimeGap(localDateTime19);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plus(readablePeriod23);
        java.util.Date date25 = localDateTime24.toDate();
        int int26 = date25.getHours();
        java.time.Instant instant27 = date25.toInstant();
        date25.setMinutes(902);
        date25.setYear(6);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+30:12" + "'", str15, "+30:12");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645456124296,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=296,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Thu Oct 04 06:02:44 GMT 1906");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
        org.junit.Assert.assertNotNull(instant27);
    }

    @Test
    public void test14425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14425");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property8.withMinimumValue();
        org.joda.time.LocalTime localTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property8.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = property8.addWrapFieldToCopy(54100989);
        org.joda.time.LocalTime localTime16 = property8.addCopy(279);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test14426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14426");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.yearOfEra();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeField dateTimeField6 = chronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DurationField durationField8 = chronology2.centuries();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test14427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14427");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 54138);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 61);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.DateTime.Property property5 = dateTime4.year();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test14428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14428");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate4.minus(readablePeriod6);
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra(32772);
        org.joda.time.LocalDate localDate11 = localDate9.withMonthOfYear(12);
        org.joda.time.LocalDate localDate13 = localDate9.withWeekyear(54113409);
        org.joda.time.LocalDate localDate15 = localDate9.minusDays(54195618);
        int int16 = localDate9.getDayOfYear();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.years();
        java.lang.String str20 = durationFieldType19.toString();
        boolean boolean21 = localTime18.isSupported(durationFieldType19);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime24 = localTime18.withFieldAdded(durationFieldType22, 32772);
        org.joda.time.LocalTime.Property property25 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.roundCeilingCopy();
        org.joda.time.LocalTime localTime27 = property25.roundCeilingCopy();
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfDay();
        java.lang.String str29 = property28.toString();
        org.joda.time.LocalTime localTime31 = property28.addCopy(1960);
        org.joda.time.LocalTime localTime33 = property28.addWrapFieldToCopy(54143548);
        org.joda.time.LocalTime localTime35 = property28.addNoWrapToCopy(2122);
        org.joda.time.LocalTime localTime36 = property28.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime38.getZone();
        int int41 = dateTimeZone39.getStandardOffset(0L);
        java.util.TimeZone timeZone42 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTime dateTime43 = localTime36.toDateTimeToday(dateTimeZone39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((java.lang.Object) int16, dateTimeZone39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "years" + "'", str20, "years");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[millisOfDay]" + "'", str29, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 108720000 + "'", int41 == 108720000);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test14429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14429");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(0);
        int int6 = localDateTime5.getMillisOfDay();
        int int7 = localDateTime5.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusYears(50);
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime12.add(readableDuration14, 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfCeiling();
        int int19 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime18);
        boolean boolean20 = mutableDateTime18.isBeforeNow();
        mutableDateTime18.setMillis((long) 660);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456124385,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=385,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54524385 + "'", int6 == 54524385);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test14430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14430");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList7);
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet13, filteringMode14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.lang.String str24 = locale22.getDisplayScript(locale23);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.lang.String str27 = locale26.toLanguageTag();
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = locale26.getDisplayCountry(locale28);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = locale30.getDisplayScript(locale31);
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale22, locale28, locale31 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale locale36 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList34);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = locale37.getDisplayScript(locale38);
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet41 = locale37.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet41);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList42, filteringMode43);
        boolean boolean45 = strSet13.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17);
        boolean boolean46 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.fromCalendarFields(calendar47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.plusYears(14);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.withDurationAdded(readableDuration53, 20);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime48.minusWeeks((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDateTime localDateTime59 = localDateTime48.plus(readablePeriod58);
        boolean boolean60 = strSet0.equals((java.lang.Object) localDateTime59);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + filteringMode14 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode14.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ko-KR" + "'", str27, "ko-KR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str29, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode43.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645456124402,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=402,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test14431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14431");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.Interval interval4 = localDate3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime9.getZone();
        long long12 = dateTimeZone7.getMillisKeepLocal(dateTimeZone10, (long) 10);
        java.lang.String str13 = dateTimeZone7.toString();
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtMidnight(dateTimeZone7);
        int int15 = localDate3.getCenturyOfEra();
        org.joda.time.LocalDate localDate17 = localDate3.plusWeeks(6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) (-3600000));
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology23.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter20.withZone(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight27 = localDate17.toDateMidnight(dateTimeZone25);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.fromCalendarFields(calendar28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusSeconds(0);
        int int34 = localDateTime33.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.era();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.years();
        mutableDateTime36.add(durationFieldType38, (int) (short) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.withFieldAdded(durationFieldType38, (int) 'a');
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks((-75382309));
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localDate17.compareTo((org.joda.time.ReadablePartial) localDateTime42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+30:12" + "'", str13, "+30:12");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 21 + "'", int15 == 21);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645456124434,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=434,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 54524434 + "'", int34 == 54524434);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test14432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14432");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime3 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        int int5 = localDate4.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate4.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property8 = localDate7.centuryOfEra();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = localDate10.minusDays(12);
        org.joda.time.LocalDate localDate14 = localDate10.withWeekyear(10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate14.withPeriodAdded(readablePeriod15, 2922789);
        org.joda.time.LocalDate.Property property18 = localDate14.monthOfYear();
        boolean boolean19 = property18.isLeap();
        org.joda.time.LocalDate localDate20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        int int22 = localDate21.getDayOfMonth();
        org.joda.time.LocalDate localDate24 = localDate21.plusYears((int) (byte) 100);
        int int25 = localDate21.size();
        org.joda.time.LocalDate localDate27 = localDate21.minusWeeks((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime29.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime32.getZone();
        long long35 = dateTimeZone30.getMillisKeepLocal(dateTimeZone33, (long) 10);
        java.lang.String str36 = dateTimeZone33.toString();
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.weekyears();
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(chronology40);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = chronology40.add(readablePeriod43, (long) 48, 2122);
        org.joda.time.DurationField durationField47 = chronology40.weekyears();
        org.joda.time.DateTimeField dateTimeField48 = chronology40.weekyear();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime37.toMutableDateTime(chronology40);
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Interval interval52 = localDate50.toInterval(dateTimeZone51);
        org.joda.time.LocalDate localDate54 = localDate50.plusMonths(0);
        org.joda.time.LocalDate.Property property55 = localDate54.year();
        int int56 = localDate54.size();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime58.getZone();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime61.getZone();
        long long64 = dateTimeZone59.getMillisKeepLocal(dateTimeZone62, (long) 10);
        org.joda.time.DateTime dateTime65 = localDate54.toDateTimeAtMidnight(dateTimeZone62);
        mutableDateTime49.setZone(dateTimeZone62);
        org.joda.time.Interval interval67 = localDate27.toInterval(dateTimeZone62);
        org.joda.time.DateTime dateTime68 = localDate20.toDateTimeAtMidnight(dateTimeZone62);
        org.joda.time.DateTime dateTime69 = dateTime3.withZone(dateTimeZone62);
        boolean boolean70 = dateTime3.isBeforeNow();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2922789 + "'", int9 == 2922789);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+30:12" + "'", str36, "+30:12");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 48L + "'", long46 == 48L);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test14433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14433");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = localDate4.toInterval(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate4.plusMonths(0);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        int int10 = localDate8.size();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime12.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime15.getZone();
        long long18 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 10);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone16);
        int int20 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate21 = dateTime19.toLocalDate();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime19.weekyear();
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime19.minusYears(2030);
        int int27 = dateTime26.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
    }

    @Test
    public void test14434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14434");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(54096794);
        org.joda.time.tz.NameProvider nameProvider8 = org.joda.time.DateTimeZone.getNameProvider();
        boolean boolean9 = localDateTime7.equals((java.lang.Object) nameProvider8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.millisOfDay();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.lang.String str14 = property12.getAsText(locale13);
        java.lang.String str15 = locale13.getISO3Language();
        java.lang.String str18 = nameProvider8.getShortName(locale13, "3:01 PM", "7");
        java.util.Locale locale19 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = locale19.getDisplayScript(locale22);
        java.lang.String str27 = nameProvider8.getShortName(locale19, "3:01 PM", "2022-02-21T15:02:31.934");
        boolean boolean28 = locale19.hasExtensions();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456124504,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=504,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(nameProvider8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "76844504" + "'", str14, "76844504");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "deu" + "'", str15, "deu");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test14435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14435");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        mutableDateTime1.setTime((long) 19);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.hourOfDay();
        java.lang.String str7 = property6.getAsText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
    }

    @Test
    public void test14436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14436");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.halfdayOfDay();
        long long9 = dateTimeField6.getDifferenceAsLong(820000L, 1645748326926L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-38096L) + "'", long9 == (-38096L));
    }

    @Test
    public void test14437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14437");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekyear(0);
        org.joda.time.DateTime.Property property7 = dateTime4.weekOfWeekyear();
        java.lang.String str8 = dateTime4.toString();
        int int9 = dateTime4.getWeekyear();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        int int11 = localDate10.getDayOfMonth();
        org.joda.time.LocalDate localDate13 = localDate10.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        int int15 = property14.getMaximumValueOverall();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.util.Locale locale17 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.lang.String str22 = locale17.getDisplayScript(locale20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale17.getDisplayScript(locale23);
        java.lang.String str25 = locale16.getDisplayLanguage(locale23);
        java.util.Locale.setDefault(locale16);
        int int27 = property14.getMaximumTextLength(locale16);
        java.util.Locale locale28 = java.util.Locale.UK;
        java.util.Locale locale29 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale31.getDisplayScript(locale32);
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = locale29.getDisplayScript(locale35);
        java.lang.String str37 = locale28.getDisplayLanguage(locale35);
        java.util.Locale.setDefault(locale28);
        int int39 = property14.getMaximumShortTextLength(locale28);
        java.util.Calendar calendar40 = dateTime4.toCalendar(locale28);
        java.util.TimeZone timeZone41 = calendar40.getTimeZone();
        java.util.TimeZone.setDefault(timeZone41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone41);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.000+30:12" + "'", str8, "2022-02-22T00:00:00.000+30:12");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2922789 + "'", int15 == 2922789);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English" + "'", str25, "English");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 7 + "'", int39 == 7);
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645379280000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=20,DAY_OF_YEAR=51,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=48,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645456124540,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=540,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14438");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        org.joda.time.LocalDate localDate6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = property5.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = localDate9.plusWeeks(58622333);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test14439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14439");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime1.getZone();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfSecond();
        org.joda.time.LocalTime.Property property6 = localTime4.secondOfMinute();
        java.lang.String str7 = property6.getName();
        org.joda.time.LocalTime localTime9 = property6.setCopy(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = property6.setCopy(21264550);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21264550 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "secondOfMinute" + "'", str7, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test14440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14440");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        calendar0.setMinimalDaysInFirstWeek(202365);
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=202365,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test14441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14441");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = dateTimeFieldType1.getField(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfDay();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.DurationField durationField8 = chronology4.years();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(obj0, chronology4);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.Chronology chronology11 = chronology4.withUTC();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test14442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14442");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis((-1));
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusHours(2922789);
        int int9 = localDateTime1.getValue(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime.Property property11 = localDateTime1.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusSeconds(149);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456124609,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=609,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test14443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14443");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        boolean boolean7 = mutableDateTime5.isAfter((long) 21);
        boolean boolean9 = mutableDateTime5.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        mutableDateTime5.setZone(dateTimeZone12);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.Interval interval21 = property18.toInterval();
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.KOREA;
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.util.Locale.setDefault(category23, locale24);
        java.util.Locale locale28 = java.util.Locale.getDefault(category23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = property18.setCopy("2022-02-18T05:52:41.901-81:11:15.054", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-18T05:52:41.901-81:11:15.054\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
    }

    @Test
    public void test14444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14444");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime1.setMinuteOfDay(100);
        boolean boolean4 = mutableDateTime1.isAfterNow();
        boolean boolean5 = mutableDateTime1.isEqualNow();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        java.util.GregorianCalendar gregorianCalendar7 = mutableDateTime1.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar7.roll(541496, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
    }

    @Test
    public void test14445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14445");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("50578849");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"50578849\" is malformed at \"578849\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14446");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate18 = dateTime17.toLocalDate();
        int int19 = localDate18.getEra();
        org.joda.time.LocalDate localDate21 = localDate18.withWeekOfWeekyear(6);
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test14447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14447");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        org.joda.time.DurationField durationField7 = chronology3.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfDay();
        long long10 = dateTimeField8.roundHalfEven((long) 54221578);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(1645452119673L);
        org.joda.time.LocalDate localDate16 = localDate14.plusYears(49);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = localDate18.toInterval(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate18.plusMonths(0);
        org.joda.time.LocalDate.Property property23 = localDate22.year();
        int int24 = localDate22.size();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime26.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime29.getZone();
        long long32 = dateTimeZone27.getMillisKeepLocal(dateTimeZone30, (long) 10);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime35 = property34.getDateTime();
        int int36 = property34.getMinimumValueOverall();
        org.joda.time.DateTime dateTime37 = property34.withMinimumValue();
        org.joda.time.DateTime dateTime39 = dateTime37.minusYears(54110417);
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime44.getZone();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime47.getZone();
        long long50 = dateTimeZone45.getMillisKeepLocal(dateTimeZone48, (long) 10);
        java.lang.String str51 = dateTimeZone45.toString();
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.lang.String str54 = locale53.toLanguageTag();
        java.util.Locale locale55 = java.util.Locale.KOREA;
        java.lang.String str56 = locale53.getDisplayCountry(locale55);
        java.lang.String str57 = dateTimeZone45.getName((long) 54089980, locale55);
        java.lang.String str58 = dateTimeField41.getAsText(0L, locale55);
        boolean boolean59 = locale55.hasExtensions();
        java.lang.String str60 = locale55.getDisplayName();
        java.lang.String str61 = localDate14.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", locale55);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = dateTimeField8.set((long) 21145813, "21 Feb 2022 15:04:47 GMT", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"21 Feb 2022 15:04:47 GMT\" for clockhourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 54000000L + "'", long10 == 54000000L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+30:12" + "'", str51, "+30:12");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ko-KR" + "'", str54, "ko-KR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str56, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+30:12" + "'", str57, "+30:12");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\uc6d4" + "'", str58, "\uc6d4");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Korean (South Korea)" + "'", str60, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str61, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test14448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14448");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setLanguage("GBR");
        java.util.Locale.Builder builder7 = builder6.clear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        int int10 = localDate9.getDayOfMonth();
        org.joda.time.LocalDate localDate12 = localDate9.plusYears((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        boolean boolean16 = mutableDateTime14.isAfter((long) 21);
        boolean boolean18 = mutableDateTime14.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime20.getZone();
        mutableDateTime14.setZone(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = localDate9.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime8.withFields((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTime dateTime26 = dateTime24.withHourOfDay(0);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfCentury();
        org.joda.time.DateTime dateTime28 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property29 = dateTime26.era();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime31.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        long long37 = dateTimeZone32.getMillisKeepLocal(dateTimeZone35, (long) 10);
        java.lang.String str38 = dateTimeZone32.toString();
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale40.toLanguageTag();
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.lang.String str43 = locale40.getDisplayCountry(locale42);
        java.lang.String str44 = dateTimeZone32.getName((long) 54089980, locale42);
        java.lang.String str45 = locale42.getScript();
        int int46 = property29.getMaximumTextLength(locale42);
        java.util.Locale.Builder builder47 = builder6.setLocale(locale42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder49 = builder6.setLanguage("3 Oct 2022 15:04:24 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 3 Oct 2022 15:04:24 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+30:12" + "'", str38, "+30:12");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ko-KR" + "'", str41, "ko-KR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str43, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+30:12" + "'", str44, "+30:12");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test14449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14449");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.setVariant("");
        java.util.Locale.Builder builder6 = builder2.clearExtensions();
        java.util.Locale.Builder builder8 = builder2.setRegion("");
        java.util.Locale.Builder builder9 = builder2.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder12 = builder10.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14450");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy(2922789L);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456124746,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=746,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test14451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14451");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean3 = mutableDateTime1.isAfter((long) 21);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        mutableDateTime1.setZone(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = dateTimeZone8.getShortName((long) 13, locale11);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds(0);
        boolean boolean22 = dateTimeZone8.isLocalDateTimeGap(localDateTime19);
        org.joda.time.Chronology chronology23 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusMillis(54128588);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plus(readableDuration27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra(366);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+30:12" + "'", str15, "+30:12");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645456124756,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=756,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test14452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14452");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        java.lang.String str7 = dateTimeField5.getAsShortText(10L);
        long long9 = dateTimeField5.roundHalfEven((long) 1);
        boolean boolean10 = dateTimeField5.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField5.getType();
        int int13 = dateTimeField5.getLeapAmount((long) 54264513);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test14453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14453");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("2022");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale8.getISO3Language();
        java.util.Locale.setDefault(category2, locale8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category2);
        java.lang.String str13 = locale12.getISO3Country();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter1.withLocale(locale12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime17.getZone();
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone18);
        long long23 = dateTimeZone18.convertLocalToUTC((long) 0, true, (long) 32772);
        int int25 = dateTimeZone18.getOffset((long) 10);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.fromCalendarFields(calendar26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusMinutes((int) (byte) 1);
        int int32 = localDateTime31.getYear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.year();
        int int34 = localDateTime31.getEra();
        boolean boolean35 = dateTimeZone18.isLocalDateTimeGap(localDateTime31);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(0L, dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.millisOfDay();
        int int41 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime37, "", 21147468);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime37.setDate(276, 954, 50567056);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 954 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "kor" + "'", str10, "kor");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "KOR" + "'", str13, "KOR");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-108720000L) + "'", long23 == (-108720000L));
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 108720000 + "'", int25 == 108720000);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645456124791,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=791,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-21147469) + "'", int41 == (-21147469));
    }

    @Test
    public void test14454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14454");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale locale1 = java.util.Locale.KOREA;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        strSet3.clear();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        int int6 = localDate5.getDayOfMonth();
        org.joda.time.LocalDate localDate8 = localDate5.plusYears((int) (byte) 100);
        org.joda.time.Interval interval9 = localDate8.toInterval();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime14.getZone();
        long long17 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 10);
        java.lang.String str18 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime21 = property20.roundHalfEvenCopy();
        boolean boolean22 = strSet3.contains((java.lang.Object) dateTime21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Interval interval25 = localDate23.toInterval(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate23.plusMonths(0);
        org.joda.time.LocalDate.Property property28 = localDate27.year();
        int int29 = localDate27.size();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime31.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime34.getZone();
        long long37 = dateTimeZone32.getMillisKeepLocal(dateTimeZone35, (long) 10);
        org.joda.time.DateTime dateTime38 = localDate27.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime43.getZone();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime46.getZone();
        long long49 = dateTimeZone44.getMillisKeepLocal(dateTimeZone47, (long) 10);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(10L, dateTimeZone44);
        long long52 = dateTimeZone44.nextTransition((long) 12);
        org.joda.time.DateTime dateTime53 = dateTime40.withZone(dateTimeZone44);
        int int54 = dateTime53.getMinuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay55 = dateTime53.toYearMonthDay();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime53.toMutableDateTime();
        boolean boolean57 = strSet3.remove((java.lang.Object) dateTime53);
        java.util.Collection<java.util.Locale.LanguageRange> languageRangeCollection58 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = strSet3.containsAll(languageRangeCollection58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(localDate5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+30:12" + "'", str18, "+30:12");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 12L + "'", long52 == 12L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test14455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14455");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.LocalDate localDate9 = localDate7.withYearOfEra(37);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14456");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale16.toLanguageTag();
        boolean boolean18 = localDate4.equals((java.lang.Object) str17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        boolean boolean20 = localDate4.equals((java.lang.Object) dateTime19);
        org.joda.time.DateMidnight dateMidnight21 = localDate4.toDateMidnight();
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Interval interval24 = localDate22.toInterval(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate22.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate localDate28 = localDate22.minusMonths(10);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.Interval interval31 = localDate29.toInterval(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate29.plusMonths(0);
        org.joda.time.LocalDate.Property property34 = localDate33.year();
        org.joda.time.LocalDate localDate36 = localDate33.minusYears(8);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean38 = localDate36.isSupported(durationFieldType37);
        boolean boolean39 = localDate22.isSupported(durationFieldType37);
        org.joda.time.LocalDate localDate41 = localDate4.withFieldAdded(durationFieldType37, 54092654);
        int int42 = localDate4.getEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ko-KR" + "'", str17, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test14457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14457");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        java.lang.String str4 = mutableDateTime1.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        int int5 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.secondOfMinute();
        int int7 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType8.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.years();
        java.lang.String str17 = durationFieldType16.toString();
        boolean boolean18 = localTime15.isSupported(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime21 = localTime15.withFieldAdded(durationFieldType19, 32772);
        org.joda.time.LocalTime.Property property22 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime24 = localTime15.minusMinutes(2922789);
        java.util.Locale locale26 = java.util.Locale.UK;
        java.util.Locale locale27 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.lang.String str32 = locale27.getDisplayScript(locale30);
        java.util.Locale locale33 = java.util.Locale.UK;
        java.lang.String str34 = locale27.getDisplayScript(locale33);
        java.lang.String str35 = locale26.getDisplayLanguage(locale33);
        java.lang.String str36 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localTime24, (int) ' ', locale26);
        mutableDateTime1.setRounding(dateTimeField13, (int) (byte) 0);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.LocalTime localTime43 = localTime40.plusMillis(15);
        int int44 = localTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType45.getField(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.hourOfDay();
        org.joda.time.DurationField durationField52 = chronology48.weeks();
        org.joda.time.DurationField durationField53 = chronology48.days();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.weekyearOfCentury();
        java.lang.String str55 = dateTimeField54.getName();
        java.util.Locale.Category category57 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale58 = java.util.Locale.KOREA;
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.lang.String str60 = locale58.getDisplayScript(locale59);
        java.util.Locale.setDefault(category57, locale58);
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.lang.String str64 = locale62.getDisplayScript(locale63);
        java.lang.String str65 = locale63.getISO3Language();
        java.util.Locale.setDefault(category57, locale63);
        java.lang.String str67 = dateTimeField54.getAsText(14L, locale63);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getTimeZone("years");
        boolean boolean70 = timeZone69.observesDaylightTime();
        java.util.Locale locale71 = java.util.Locale.UK;
        java.util.Locale locale72 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet73 = locale72.getExtensionKeys();
        java.util.Locale locale74 = java.util.Locale.KOREA;
        java.util.Locale locale75 = java.util.Locale.KOREA;
        java.lang.String str76 = locale74.getDisplayScript(locale75);
        java.lang.String str77 = locale72.getDisplayScript(locale75);
        java.util.Locale locale78 = java.util.Locale.UK;
        java.lang.String str79 = locale72.getDisplayScript(locale78);
        java.lang.String str80 = locale71.getDisplayLanguage(locale78);
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.lang.String str82 = locale63.getDisplayScript(locale71);
        java.lang.String str83 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localTime43, locale71);
        java.lang.String str84 = locale71.getDisplayCountry();
        java.lang.String str85 = locale71.getDisplayScript();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str4, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "years" + "'", str17, "years");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English" + "'", str35, "English");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "32" + "'", str36, "32");
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "weekyearOfCentury" + "'", str55, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.FORMAT + "'", category57.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "kor" + "'", str65, "kor");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "70" + "'", str67, "70");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "English" + "'", str80, "English");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645456124881,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=881,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0" + "'", str83, "0");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "United Kingdom" + "'", str84, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test14458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14458");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withYearOfEra((int) '4');
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.LocalDate localDate7 = property5.addWrapFieldToCopy(12);
        org.joda.time.LocalDate localDate9 = localDate7.minusDays(17);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
    }

    @Test
    public void test14459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14459");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("years");
        boolean boolean3 = timeZone2.observesDaylightTime();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.util.Locale locale5 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayScript(locale8);
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale5.getDisplayScript(locale11);
        java.lang.String str13 = locale4.getDisplayLanguage(locale11);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone2, locale4);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int17 = dateTimeZone15.getOffset((long) 52);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(obj0, dateTimeZone15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localTime18.toString("2022-02-21T14:03:07.278-01:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English" + "'", str13, "English");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645456124940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=44,MILLISECOND=940,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test14460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14460");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 7);
        int int9 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.LocalDate localDate10 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfEra(224);
        org.joda.time.LocalDate.Property property13 = localDate10.yearOfEra();
        org.joda.time.LocalDate localDate15 = localDate10.plusDays((-719519));
        org.joda.time.LocalDate localDate17 = localDate10.plusMonths(53325057);
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2922789 + "'", int5 == 2922789);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test14461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14461");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(363, 904, 308, (-33), 21156417, 75532022, 1900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -33 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14462");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology3.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test14463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14463");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ko_KR", (double) 356);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=356.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14464");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.LocalTime localTime6 = localTime1.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime.Property property7 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundFloorCopy();
        java.lang.String str9 = property7.getAsString();
        java.lang.String str10 = property7.toString();
        int int11 = property7.getLeapAmount();
        org.joda.time.LocalTime localTime13 = property7.setCopy(54269725);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.LocalTime localTime16 = localTime13.minusHours(2100);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "22320100" + "'", str9, "22320100");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[millisOfDay]" + "'", str10, "Property[millisOfDay]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test14465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14465");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime10 = localTime1.minusMinutes(2922789);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology13);
        boolean boolean15 = localTime1.equals((java.lang.Object) chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfHour();
        long long20 = chronology13.add((long) 54129298, (long) 1922, 0);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyear();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 54129298L + "'", long20 == 54129298L);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test14466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14466");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getGreatestMinimum((int) (byte) 0);
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) calendar0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.hourOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.hourOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456125059,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=45,MILLISECOND=59,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test14467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14467");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        int int4 = dateTimePrinter3.estimatePrintedLength();
        int int5 = dateTimePrinter3.estimatePrintedLength();
        int int6 = dateTimePrinter3.estimatePrintedLength();
        java.io.Writer writer7 = null;
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.secondOfDay();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = localDate16.toInterval(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate16.plusMonths(0);
        org.joda.time.LocalDate.Property property21 = localDate20.year();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime23.getZone();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime26.getZone();
        long long29 = dateTimeZone24.getMillisKeepLocal(dateTimeZone27, (long) 10);
        org.joda.time.DateMidnight dateMidnight30 = localDate20.toDateMidnight(dateTimeZone24);
        long long34 = dateTimeZone24.convertLocalToUTC((long) 2922, false, (long) 8);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime37.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime40.getZone();
        long long43 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 10);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(10L, dateTimeZone38);
        org.joda.time.DateTime.Property property45 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime44.plusMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime49.getZone();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime49.secondOfMinute();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime49.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime49.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime56.getZone();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime59.getZone();
        long long62 = dateTimeZone57.getMillisKeepLocal(dateTimeZone60, (long) 10);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(10L, dateTimeZone57);
        int int65 = dateTimeZone57.getStandardOffset((long) 40);
        mutableDateTime49.setZoneRetainFields(dateTimeZone57);
        java.lang.String str67 = dateTimeZone57.getID();
        org.joda.time.DateTime dateTime68 = dateTime47.withZone(dateTimeZone57);
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.years();
        java.lang.String str72 = durationFieldType71.toString();
        boolean boolean73 = localTime70.isSupported(durationFieldType71);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime76 = localTime70.withFieldAdded(durationFieldType74, 32772);
        org.joda.time.LocalTime.Property property77 = localTime70.hourOfDay();
        org.joda.time.LocalTime localTime78 = property77.roundCeilingCopy();
        org.joda.time.LocalTime localTime80 = property77.addCopy(19);
        org.joda.time.LocalTime localTime82 = property77.setCopy((int) (short) 1);
        java.util.Locale locale83 = java.util.Locale.ITALY;
        java.lang.String str84 = property77.getAsShortText(locale83);
        boolean boolean85 = locale83.hasExtensions();
        java.util.Set<java.lang.String> strSet86 = locale83.getUnicodeLocaleAttributes();
        java.util.Calendar calendar87 = dateTime68.toCalendar(locale83);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter3.printTo(writer7, 1645456094106L, chronology11, 47, dateTimeZone24, locale83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimePrinter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40 + "'", int5 == 40);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(dateMidnight30);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-108717078L) + "'", long34 == (-108717078L));
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 108720000 + "'", int65 == 108720000);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+30:12" + "'", str67, "+30:12");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "years" + "'", str72, "years");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "6" + "'", str84, "6");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14468");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfMinute();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        java.lang.String str9 = durationFieldType8.toString();
        boolean boolean10 = localTime7.isSupported(durationFieldType8);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime13 = localTime7.withFieldAdded(durationFieldType11, 32772);
        org.joda.time.LocalTime.Property property14 = localTime7.hourOfDay();
        org.joda.time.LocalTime localTime16 = localTime7.minusMinutes(2922789);
        java.util.Locale locale18 = java.util.Locale.UK;
        java.util.Locale locale19 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = locale19.getDisplayScript(locale22);
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = locale19.getDisplayScript(locale25);
        java.lang.String str27 = locale18.getDisplayLanguage(locale25);
        java.lang.String str28 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localTime16, (int) ' ', locale18);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime31 = localTime16.withPeriodAdded(readablePeriod29, 6);
        int[] intArray32 = localTime31.getValues();
        org.joda.time.LocalTime.Property property33 = localTime31.minuteOfHour();
        org.joda.time.LocalTime localTime35 = property33.addWrapFieldToCopy(21386569);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "years" + "'", str9, "years");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English" + "'", str27, "English");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "32" + "'", str28, "32");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[13, 3, 0, 100]");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test14469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14469");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear(13);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withLocale(locale3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        boolean boolean6 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType7.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology10);
        java.lang.String str17 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14470");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.yearOfCentury();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay(1645455713323L, chronology3);
        org.joda.time.DateTimeField dateTimeField8 = chronology3.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test14471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14471");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (byte) -1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        int int11 = localDateTime10.getDayOfWeek();
        java.lang.String str12 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy(873);
        org.joda.time.LocalDateTime localDateTime16 = property13.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645456125182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=45,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "01/01/01 00:00" + "'", str12, "01/01/01 00:00");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test14472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14472");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("3:03 PM");
        timeZone1.setRawOffset(50570234);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        boolean boolean5 = dateTimeZone4.isFixed();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test14473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14473");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.toLanguageTag();
        boolean boolean2 = locale0.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime7.getZone();
        long long10 = dateTimeZone5.getMillisKeepLocal(dateTimeZone8, (long) 10);
        java.lang.String str11 = dateTimeZone5.toString();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = locale13.getDisplayCountry(locale15);
        java.lang.String str17 = dateTimeZone5.getName((long) 54089980, locale15);
        java.lang.String str18 = locale15.getDisplayLanguage();
        java.lang.String str19 = locale0.getDisplayVariant(locale15);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale0);
        calendar20.set(54112697, 6048836, 1380, (int) (short) 0, 54136);
        java.util.TimeZone timeZone27 = calendar20.getTimeZone();
        calendar20.setLenient(false);
        calendar20.setFirstDayOfWeek(50830674);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.years();
        java.lang.String str35 = durationFieldType34.toString();
        boolean boolean36 = localTime33.isSupported(durationFieldType34);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime39 = localTime33.withFieldAdded(durationFieldType37, 32772);
        org.joda.time.LocalTime.Property property40 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime42 = localTime33.minusMinutes(19);
        org.joda.time.Chronology chronology43 = localTime33.getChronology();
        org.joda.time.Chronology chronology44 = localTime33.getChronology();
        org.joda.time.Chronology chronology45 = chronology44.withUTC();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) calendar20, chronology44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ko-KR" + "'", str1, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+30:12" + "'", str11, "+30:12");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ko-KR" + "'", str14, "ko-KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str16, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+30:12" + "'", str17, "+30:12");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Korean" + "'", str18, "Korean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=50830674,minimalDaysInFirstWeek=1,ERA=1,YEAR=54112697,MONTH=6048836,WEEK_OF_YEAR=30,WEEK_OF_MONTH=4,DAY_OF_MONTH=1380,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=0,MINUTE=54136,SECOND=45,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "years" + "'", str35, "years");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test14474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14474");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        int int4 = localDate0.getWeekOfWeekyear();
        java.lang.String str5 = localDate0.toString();
        org.joda.time.LocalDate.Property property6 = localDate0.centuryOfEra();
        int int7 = localDate0.getYear();
        org.joda.time.LocalDate localDate9 = localDate0.plusMonths((-21145));
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localDate9.getFields();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22" + "'", str5, "2022-02-22");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
    }

    @Test
    public void test14475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14475");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay((int) 'x', (int) 'u', 11);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay((int) (byte) 1, 2000, 54089980);
        java.util.Calendar.Builder builder14 = builder0.setTimeOfDay(86399999, 50, 50598, 50598);
        java.util.Date date18 = new java.util.Date(670, 31, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder19 = builder14.setInstant(date18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Fri Jul 31 00:00:00 GMT 2572");
    }

    @Test
    public void test14476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14476");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.hourOfDay();
        java.lang.String str7 = chronology3.toString();
        org.joda.time.Chronology chronology8 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.DurationField durationField11 = chronology3.months();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test14477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14477");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 292278994);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears(54126);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime3.getFieldTypes();
        int int5 = localDateTime3.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test14478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14478");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        long long7 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Instant instant9 = instant6.minus((long) (byte) 1);
        org.joda.time.Instant instant11 = instant9.withMillis((-62166872782404L));
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test14479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14479");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean3 = localTime1.equals((java.lang.Object) dateTimeFieldType2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType4.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType2.getField(chronology7);
        long long13 = dateTimeField11.roundHalfCeiling(540016L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.longDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear(13);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withLocale(locale18);
        java.util.Locale locale20 = locale18.stripExtensions();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder24 = builder22.clearExtensions();
        java.util.Locale locale25 = builder24.build();
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale18.getDisplayName(locale25);
        java.lang.String str28 = dateTimeField11.getAsShortText((long) 9, locale25);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "French (Canada)" + "'", str27, "French (Canada)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
    }

    @Test
    public void test14480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14480");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-21T15:01:45.243Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T15:01:45.243Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14481");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.secondOfDay();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.years();
        java.lang.String str11 = durationFieldType10.toString();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime15 = localTime9.withFieldAdded(durationFieldType13, 32772);
        org.joda.time.LocalTime.Property property16 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property16.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalTime localTime19 = localTime17.minus(readablePeriod18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime19.plus(readablePeriod20);
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.lang.String str24 = locale23.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.KOREA;
        java.lang.String str26 = locale23.getDisplayCountry(locale25);
        java.lang.String str27 = locale25.getISO3Country();
        java.lang.String str28 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localTime19, 32, locale25);
        org.joda.time.LocalTime.Property property29 = localTime19.secondOfMinute();
        org.joda.time.LocalTime localTime30 = property29.roundCeilingCopy();
        org.joda.time.LocalTime localTime31 = property29.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime32 = property29.withMaximumValue();
        java.lang.String str33 = localTime32.toString();
        org.joda.time.DateTimeField dateTimeField35 = localTime32.getField(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "years" + "'", str11, "years");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ko-KR" + "'", str24, "ko-KR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str26, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "KOR" + "'", str27, "KOR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "32" + "'", str28, "32");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "07:00:59.000" + "'", str33, "07:00:59.000");
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test14482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14482");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate4.minus(readablePeriod6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfEra((int) '4');
        boolean boolean11 = localDate7.isBefore((org.joda.time.ReadablePartial) localDate8);
        java.util.Locale locale13 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.lang.String str18 = locale13.getDisplayScript(locale16);
        java.util.Set<java.lang.String> strSet19 = locale13.getUnicodeLocaleKeys();
        java.lang.String str20 = locale13.getVariant();
        java.lang.String str21 = localDate7.toString("2", locale13);
        org.joda.time.LocalDate localDate23 = localDate7.minusDays(54159477);
        org.joda.time.LocalDate localDate25 = localDate23.minusDays(39);
        int int26 = localDate23.size();
        org.joda.time.LocalDate localDate28 = localDate23.plusYears(69);
        org.joda.time.LocalDate.Property property29 = localDate23.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = localDate23.withMonthOfYear(54092654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54092654 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2" + "'", str21, "2");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test14483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14483");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.toLanguageTag();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.lang.String str10 = locale7.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale3, locale9, locale12 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale locale17 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale18.getDisplayScript(locale19);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet22);
        boolean boolean25 = strSet22.contains((java.lang.Object) (short) 1);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList32);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream35 = languageRangeList27.parallelStream();
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale36.toLanguageTag();
        boolean boolean38 = locale36.hasExtensions();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime40.getZone();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime43.getZone();
        long long46 = dateTimeZone41.getMillisKeepLocal(dateTimeZone44, (long) 10);
        java.lang.String str47 = dateTimeZone41.toString();
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.lang.String str50 = locale49.toLanguageTag();
        java.util.Locale locale51 = java.util.Locale.KOREA;
        java.lang.String str52 = locale49.getDisplayCountry(locale51);
        java.lang.String str53 = dateTimeZone41.getName((long) 54089980, locale51);
        java.lang.String str54 = locale51.getDisplayLanguage();
        java.lang.String str55 = locale36.getDisplayVariant(locale51);
        java.util.Set<java.lang.String> strSet56 = locale36.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet56);
        boolean boolean58 = strSet22.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27);
        java.util.Iterator<java.lang.String> strItor59 = strSet22.iterator();
        boolean boolean61 = strSet22.contains((java.lang.Object) 1645455743309L);
        strSet22.clear();
        java.util.Iterator<java.lang.String> strItor63 = strSet22.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = strSet22.add("2022-02-21T15:06:18.363Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko-KR" + "'", str8, "ko-KR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str10, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeStream35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ko-KR" + "'", str37, "ko-KR");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+30:12" + "'", str47, "+30:12");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ko-KR" + "'", str50, "ko-KR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str52, "\ub300\ud55c\ubbfc\uad6d");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+30:12" + "'", str53, "+30:12");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Korean" + "'", str54, "Korean");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strItor63);
    }

    @Test
    public void test14484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14484");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(351, 54420885);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 351 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14485");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.Interval interval2 = localDate0.toInterval(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(0);
        org.joda.time.LocalDate.Property property5 = localDate4.year();
        int int6 = localDate4.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
        long long14 = dateTimeZone9.getMillisKeepLocal(dateTimeZone12, (long) 10);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime19 = property16.addToCopy((int) 'u');
        org.joda.time.DateTime dateTime21 = property16.setCopy(19);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths(2922789);
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime26 = property24.addToCopy((int) 'x');
        org.joda.time.DateTime dateTime27 = property24.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime29.setMinuteOfDay(100);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = localDate32.toInterval(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate32.plusMonths(0);
        org.joda.time.LocalDate.Property property37 = localDate36.year();
        int int38 = localDate36.size();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime40.getZone();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime43.getZone();
        long long46 = dateTimeZone41.getMillisKeepLocal(dateTimeZone44, (long) 10);
        org.joda.time.DateTime dateTime47 = localDate36.toDateTimeAtMidnight(dateTimeZone44);
        int int48 = mutableDateTime29.compareTo((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean49 = dateTime27.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTime.Property property50 = dateTime27.dayOfWeek();
        org.joda.time.DateTime dateTime51 = property50.getDateTime();
        org.joda.time.DateTime dateTime52 = property50.roundFloorCopy();
        org.joda.time.DateTime dateTime53 = dateTime52.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test14486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14486");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("2022");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.era();
        java.lang.String str8 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.centuryOfEra();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields(calendar10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property14.setCopy(19);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths(4);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withMillisOfDay(4);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readableDuration23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.era();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withPeriodAdded(readablePeriod26, 7);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int30 = localDateTime24.get(dateTimeFieldType29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime5.withField(dateTimeFieldType29, 32770);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusSeconds(21239694);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645456125509,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=45,MILLISECOND=509,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645456125509,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=45,MILLISECOND=509,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test14487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14487");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weekyears();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekyear();
        org.joda.time.DurationField durationField6 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology2.halfdays();
        org.joda.time.DurationField durationField10 = chronology2.weeks();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology2);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test14488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14488");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        java.lang.String str7 = dateTimeField5.getAsShortText(10L);
        long long10 = dateTimeField5.addWrapField(1645455766700L, 50570158);
        long long12 = dateTimeField5.remainder((long) 25);
        int int14 = dateTimeField5.getLeapAmount((long) 21245713);
        long long17 = dateTimeField5.getDifferenceAsLong(4617325005511314L, (long) 54428);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645481924700L + "'", long10 == 1645481924700L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 25L + "'", long12 == 25L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4617325005456L + "'", long17 == 4617325005456L);
    }

    @Test
    public void test14489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14489");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, (int) (short) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy(54134004);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withSecondOfMinute(42);
        int int14 = localDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType15.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology18);
        mutableDateTime21.addSeconds((int) (short) 0);
        mutableDateTime21.addHours(674);
        mutableDateTime21.setWeekyear(38);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType30.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.millisOfSecond();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 985, chronology33);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.years();
        java.lang.String str42 = durationFieldType41.toString();
        boolean boolean43 = localTime40.isSupported(durationFieldType41);
        org.joda.time.LocalTime localTime45 = localTime40.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime.Property property46 = localTime40.millisOfDay();
        org.joda.time.LocalTime localTime47 = property46.roundFloorCopy();
        org.joda.time.LocalTime localTime49 = property46.addNoWrapToCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime50 = property46.getLocalTime();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalTime localTime53 = localTime50.withPeriodAdded(readablePeriod51, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalTime localTime56 = localTime50.withPeriodAdded(readablePeriod54, 121);
        int[] intArray58 = chronology33.get((org.joda.time.ReadablePartial) localTime50, (long) 278);
        mutableDateTime21.setChronology(chronology33);
        java.lang.String str60 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField61 = chronology33.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((java.lang.Object) int14, chronology33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456125551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=45,MILLISECOND=551,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "years" + "'", str42, "years");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 278]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[UTC]" + "'", str60, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test14490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14490");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.years();
        java.lang.String str3 = durationFieldType2.toString();
        boolean boolean4 = localTime1.isSupported(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime1.withFieldAdded(durationFieldType5, 32772);
        org.joda.time.LocalTime.Property property8 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property8.withMinimumValue();
        org.joda.time.LocalTime localTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property8.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = property8.addWrapFieldToCopy(54100989);
        org.joda.time.LocalTime localTime16 = localTime14.minusMillis(31);
        int int17 = localTime16.getMinuteOfHour();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "years" + "'", str3, "years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    }

    @Test
    public void test14491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14491");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale7.toLanguageTag();
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.lang.String str10 = locale7.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale12 = java.util.Locale.KOREA;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale3, locale9, locale12 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale locale17 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str20 = locale18.getDisplayScript(locale19);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet22);
        java.lang.Object obj24 = null;
        boolean boolean25 = strSet22.equals(obj24);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(1L);
        int int28 = mutableDateTime27.getCenturyOfEra();
        int int29 = mutableDateTime27.getDayOfYear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime27.add(readableDuration31, 14);
        boolean boolean34 = strSet22.contains((java.lang.Object) mutableDateTime27);
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime27.add(readableDuration35);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ko-KR" + "'", str8, "ko-KR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str10, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test14492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14492");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate3 = localDate0.plusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfYear();
        int int8 = localDate6.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDate0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2922789 + "'", int5 == 2922789);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test14493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14493");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("years");
        boolean boolean5 = timeZone4.observesDaylightTime();
        boolean boolean6 = timeZone2.hasSameRules(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        long long10 = dateTimeZone7.convertLocalToUTC(194766091200000L, false);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(3599999L, dateTimeZone7);
        int int12 = localDateTime11.getMillisOfDay();
        org.joda.time.LocalDate localDate13 = localDateTime11.toLocalDate();
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 194766091200000L + "'", long10 == 194766091200000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3599999 + "'", int12 == 3599999);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test14494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14494");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("years");
        boolean boolean4 = timeZone3.observesDaylightTime();
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        long long9 = dateTimeZone6.convertLocalToUTC(194766091200000L, false);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime10.withCenturyOfEra(50562);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 194766091200000L + "'", long9 == 194766091200000L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14495");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType0.getField(chronology3);
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.lang.String str9 = locale8.toLanguageTag();
        java.util.Locale locale10 = java.util.Locale.KOREA;
        java.lang.String str11 = locale8.getDisplayCountry(locale10);
        java.lang.String str12 = locale6.getDisplayCountry(locale8);
        int int13 = dateTimeField4.getMaximumTextLength(locale6);
        java.lang.String str14 = locale6.getVariant();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        java.lang.String str18 = durationFieldType17.toString();
        boolean boolean19 = localTime16.isSupported(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime22 = localTime16.withFieldAdded(durationFieldType20, 32772);
        org.joda.time.LocalTime.Property property23 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime24 = property23.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime26 = localTime24.minus(readablePeriod25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis((long) (short) 100);
        org.joda.time.Instant instant30 = instant29.toInstant();
        boolean boolean31 = localTime26.equals((java.lang.Object) instant29);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("years");
        boolean boolean35 = timeZone34.observesDaylightTime();
        java.util.Locale locale36 = java.util.Locale.UK;
        java.util.Locale locale37 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale39.getDisplayScript(locale40);
        java.lang.String str42 = locale37.getDisplayScript(locale40);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale37.getDisplayScript(locale43);
        java.lang.String str45 = locale36.getDisplayLanguage(locale43);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.lang.String str47 = localTime26.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", locale36);
        java.lang.String str48 = locale6.getDisplayName(locale36);
        java.util.Set<java.lang.String> strSet49 = locale6.getUnicodeLocaleKeys();
        java.lang.String str50 = locale6.getCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko-KR" + "'", str9, "ko-KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str11, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str12, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English" + "'", str45, "English");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645456125665,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=45,MILLISECOND=665,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str47, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Korean (South Korea)" + "'", str48, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "KR" + "'", str50, "KR");
    }

    @Test
    public void test14496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14496");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) ' ');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(0);
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withFieldAdded(durationFieldType8, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis(54100989);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMinutes(32772);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456125684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=45,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54525684 + "'", int6 == 54525684);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14497");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        boolean boolean2 = calendar0.isWeekDateSupported();
        calendar0.setFirstDayOfWeek(5);
        calendar0.setMinimalDaysInFirstWeek(54098460);
        java.util.TimeZone timeZone7 = calendar0.getTimeZone();
        timeZone7.setRawOffset(8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(1L);
        int int13 = mutableDateTime12.getCenturyOfEra();
        int int14 = mutableDateTime12.getDayOfYear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.centuryOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.secondOfMinute();
        mutableDateTime12.addDays(61);
        mutableDateTime12.setDayOfYear(212);
        mutableDateTime12.addMonths(55);
        boolean boolean23 = dateTimeZone10.equals((java.lang.Object) mutableDateTime12);
        int int25 = dateTimeZone10.getOffsetFromLocal((long) 21226);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645456125694,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=8,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=54098460,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=8,SECOND=45,MILLISECOND=694,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test14498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14498");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        mutableDateTime1.setMillis(12L);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime1.add(readablePeriod5, 3);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime1.add(readablePeriod10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) 100);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.yearOfEra();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime1.toMutableDateTime(chronology14);
        int int21 = mutableDateTime1.getMinuteOfDay();
        mutableDateTime1.setWeekyear(32772);
        mutableDateTime1.addMinutes(21287543);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.millisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 372 + "'", int21 == 372);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test14499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14499");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(2, (int) 'u', 12, 21);
        java.util.Calendar.Builder builder8 = builder6.setLenient(false);
        java.util.Calendar.Builder builder12 = builder8.setDate(54142542, 21, 54100989);
        java.util.Calendar.Builder builder17 = builder12.setTimeOfDay(5, 54107938, 54134252, 50571);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("years");
        boolean boolean22 = timeZone21.observesDaylightTime();
        boolean boolean23 = timeZone19.hasSameRules(timeZone21);
        java.util.Calendar.Builder builder24 = builder12.setTimeZone(timeZone21);
        java.util.Calendar.Builder builder29 = builder24.setTimeOfDay(39, 54410183, 54159477, 10);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test14500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14500");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.era();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        mutableDateTime2.add(durationFieldType4, (int) (short) 1);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) 54139233, chronology7);
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        java.lang.String str13 = durationFieldType12.toString();
        boolean boolean14 = localTime11.isSupported(durationFieldType12);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime17 = localTime11.withFieldAdded(durationFieldType15, 32772);
        org.joda.time.LocalTime.Property property18 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime19 = property18.roundCeilingCopy();
        org.joda.time.LocalTime localTime21 = property18.addCopy(19);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean25 = localTime23.equals((java.lang.Object) dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0);
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType26.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType24.getField(chronology29);
        boolean boolean34 = localTime21.isSupported(dateTimeFieldType24);
        java.lang.String str35 = dateTimeFieldType24.toString();
        int int36 = localTime8.get(dateTimeFieldType24);
        java.lang.String str37 = dateTimeFieldType24.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "years" + "'", str13, "years");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hourOfDay" + "'", str35, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 15 + "'", int36 == 15);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hourOfDay" + "'", str37, "hourOfDay");
    }
}

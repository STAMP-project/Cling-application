import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(6.0d);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.getColumnMatrix(0);
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigInteger bigInteger23 = bigDecimal17.toBigInteger();
        long long24 = bigDecimal17.longValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrix15.scalarAdd(bigDecimal17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrix15.getSubMatrix((int) (byte) 10, (int) (short) 100, 7, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bigMatrix25);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarAdd((double) 5);
        int int6 = realMatrix1.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix1.scalarAdd(8667.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix8.scalarMultiply((double) 97L);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix8.inverse();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = realMatrix8.getRow(970);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(3);
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        int int6 = bigMatrixImpl5.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl5.transpose();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = bigMatrixImpl5.getEntryAsDouble((int) (byte) 10, (int) (short) 388);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix8);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        int int10 = bigDecimal1.intValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal12 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal14 = bigDecimal12.movePointRight(3);
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray27 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26 };
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl29.transpose();
        int int31 = bigMatrixImpl29.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl29.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl29.copy();
        double[][] doubleArray34 = bigMatrixImpl29.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal35 = bigMatrixImpl29.getNorm();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal37.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal42 = bigDecimal39.movePointLeft((-1));
        java.math.BigDecimal bigDecimal43 = bigDecimal35.divideToIntegralValue(bigDecimal39);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal53.min(bigDecimal56);
        java.math.BigDecimal[] bigDecimalArray59 = new java.math.BigDecimal[] { bigDecimal58 };
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        int int65 = bigDecimal64.intValue();
        java.math.BigDecimal bigDecimal66 = bigDecimal61.min(bigDecimal64);
        java.math.BigDecimal[] bigDecimalArray67 = new java.math.BigDecimal[] { bigDecimal66 };
        java.math.BigDecimal[][] bigDecimalArray68 = new java.math.BigDecimal[][] { bigDecimalArray51, bigDecimalArray59, bigDecimalArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl71 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray68);
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl71.getDataRef();
        java.math.BigDecimal bigDecimal73 = bigMatrixImpl71.getNorm();
        boolean boolean74 = bigMatrixImpl71.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl71.copy();
        double[] doubleArray77 = bigMatrixImpl71.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl71.scalarMultiply(bigDecimal78);
        java.math.BigDecimal bigDecimal82 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl71.scalarAdd(bigDecimal82);
        java.math.BigDecimal bigDecimal85 = bigDecimal82.movePointLeft((int) (short) -100);
        java.math.BigDecimal bigDecimal87 = new java.math.BigDecimal(0.0d);
        int int88 = bigDecimal87.intValue();
        long long89 = bigDecimal87.longValue();
        java.math.BigDecimal bigDecimal90 = bigDecimal82.min(bigDecimal87);
        java.math.BigDecimal bigDecimal91 = bigDecimal82.plus();
        java.math.BigDecimal bigDecimal92 = bigDecimal43.divideToIntegralValue(bigDecimal91);
        boolean boolean93 = bigDecimal12.equals((java.lang.Object) bigDecimal92);
        java.math.BigDecimal bigDecimal94 = bigDecimal92.abs();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(bigDecimal94);
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray20);
        double[][] doubleArray25 = bigMatrix24.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(bigMatrix26);
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        java.lang.String str9 = bigDecimal8.toString();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        int int13 = bigDecimal11.signum();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal8.divideAndRemainder(bigDecimal11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray14);
        int int16 = bigMatrixImpl15.getRoundingMode();
        boolean boolean17 = bigMatrixImpl15.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrix6.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl15);
        int int19 = bigMatrix6.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal20 = bigMatrix6.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("1.0");
        java.math.BigInteger bigInteger2 = bigDecimal1.toBigIntegerExact();
        org.junit.Assert.assertNotNull(bigInteger2);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        float float3 = bigDecimal1.floatValue();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        int int20 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl18.scalarMultiply(bigDecimal22);
        java.math.BigDecimal bigDecimal26 = bigMatrixImpl18.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal1.remainder(bigDecimal26);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal[][] bigDecimalArray52 = new java.math.BigDecimal[][] { bigDecimalArray35, bigDecimalArray43, bigDecimalArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        java.math.BigDecimal[][] bigDecimalArray56 = bigMatrixImpl55.getDataRef();
        java.math.BigDecimal bigDecimal57 = bigMatrixImpl55.getNorm();
        boolean boolean58 = bigMatrixImpl55.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl55.copy();
        double[] doubleArray61 = bigMatrixImpl55.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray63 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray64 = new java.lang.String[][] { strArray63 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(strArray64);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl55.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl65);
        java.math.BigDecimal bigDecimal67 = bigMatrixImpl55.getNorm();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal74 = bigDecimal69.min(bigDecimal72);
        java.math.BigInteger bigInteger75 = bigDecimal69.toBigInteger();
        java.math.BigDecimal bigDecimal76 = bigDecimal67.max(bigDecimal69);
        long long77 = bigDecimal76.longValueExact();
        java.math.BigDecimal bigDecimal78 = bigDecimal1.add(bigDecimal76);
        java.math.BigDecimal bigDecimal80 = bigDecimal1.scaleByPowerOfTen((-32));
        java.math.BigDecimal bigDecimal81 = bigDecimal1.abs();
        short short82 = bigDecimal1.shortValueExact();
        java.math.BigDecimal bigDecimal85 = bigDecimal1.setScale(2805, (int) (byte) 1);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertTrue("'" + short82 + "' != '" + (short) 97 + "'", short82 == (short) 97);
        org.junit.Assert.assertNotNull(bigDecimal85);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix15.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        java.math.MathContext mathContext1 = null;
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((double) (byte) 0, mathContext1);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.min(bigDecimal7);
        java.math.BigInteger bigInteger10 = bigDecimal4.toBigInteger();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(bigInteger10);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(bigInteger10);
        java.math.BigDecimal bigDecimal13 = bigDecimal2.add(bigDecimal12);
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = bigDecimal15.pow((int) 'a');
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigInteger bigInteger34 = bigDecimal25.toBigIntegerExact();
        java.math.BigDecimal bigDecimal35 = bigDecimal23.add(bigDecimal25);
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigInteger bigInteger46 = bigDecimal37.toBigIntegerExact();
        float float47 = bigDecimal37.floatValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal23.add(bigDecimal37);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal51 = bigDecimal37.divideToIntegralValue(bigDecimal50);
        java.math.BigDecimal bigDecimal52 = bigDecimal2.add(bigDecimal51);
        float float53 = bigDecimal2.floatValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertTrue("'" + float47 + "' != '" + 0.0f + "'", float47 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode(10);
        int int31 = bigMatrixImpl27.getColumnDimension();
        double[][] doubleArray32 = bigMatrixImpl27.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.copy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(bigMatrix33);
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        double[] doubleArray1 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix2 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray1);
        double[] doubleArray7 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix9.scalarAdd((double) 6);
        int int12 = realMatrix9.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrix9.scalarAdd(10.0d);
        double[] doubleArray19 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray19);
        double double21 = realMatrix20.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix20.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix14.preMultiply(realMatrix23);
        double[][] doubleArray25 = realMatrix24.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix24.inverse();
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.scalarAdd((double) 1.0f);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix57.scalarAdd((double) 6);
        int int60 = realMatrix57.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix57.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrix50.preMultiply(realMatrix57);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrix50.copy();
        boolean boolean65 = realMatrix64.isSquare();
        int int66 = realMatrix64.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrix24.add(realMatrix64);
        double[] doubleArray69 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix70 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray69);
        double[] doubleArray71 = realMatrix24.operate(doubleArray69);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray71);
        double[] doubleArray73 = realMatrix2.operate(doubleArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrix74.getRowMatrix(3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix2);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[7.5116889E7]");
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[6.51038076963E11]");
        org.junit.Assert.assertNotNull(bigMatrix74);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        int int24 = realMatrix23.getColumnDimension();
        double double25 = realMatrix23.getNorm();
        double[] doubleArray30 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 6);
        int int35 = realMatrix34.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix34.scalarMultiply(1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix37.scalarAdd((double) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix23.preMultiply(realMatrix37);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8668.0d + "'", double25 == 8668.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realMatrix40);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        int int21 = bigMatrixImpl14.getRoundingMode();
        int int22 = bigMatrixImpl14.getColumnDimension();
        int int23 = bigMatrixImpl14.getRoundingMode();
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        bigMatrixImpl38.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray41 = bigMatrixImpl38.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        double[][] doubleArray43 = bigMatrixImpl42.getDataAsDoubleArray();
        double[][] doubleArray44 = bigMatrixImpl42.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl14.subtract(bigMatrix47);
        int[] intArray52 = new int[] { (short) 31464, 44, (short) 2805 };
        int[] intArray55 = new int[] { 1, 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl14.getSubMatrix(intArray52, intArray55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[31464, 44, 2805]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1, 1]");
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        double[][] doubleArray31 = bigMatrixImpl27.getDataAsDoubleArray();
        boolean boolean32 = bigMatrixImpl27.isSingular();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        double[][] doubleArray11 = bigMatrix10.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray11);
        java.math.BigDecimal bigDecimal13 = bigMatrixImpl12.getNorm();
        java.math.BigDecimal bigDecimal14 = bigDecimal13.negate();
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray27 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26 };
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrixImpl29.transpose();
        int int31 = bigMatrixImpl29.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl29.getDataRef();
        bigMatrixImpl29.setScale((int) (short) 100);
        boolean boolean35 = bigMatrixImpl29.isSingular();
        int int36 = bigMatrixImpl29.getScale();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        java.lang.String str63 = bigDecimal62.toString();
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal66 = bigDecimal65.stripTrailingZeros();
        int int67 = bigDecimal65.signum();
        java.math.BigDecimal[] bigDecimalArray68 = bigDecimal62.divideAndRemainder(bigDecimal65);
        java.math.BigDecimal bigDecimal70 = bigDecimal62.pow((int) 'a');
        java.math.BigInteger bigInteger71 = bigDecimal62.toBigIntegerExact();
        float float72 = bigDecimal62.floatValue();
        java.math.BigDecimal bigDecimal73 = bigDecimal48.add(bigDecimal62);
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal76 = bigDecimal62.divideToIntegralValue(bigDecimal75);
        java.math.BigDecimal bigDecimal77 = bigDecimal38.divideToIntegralValue(bigDecimal75);
        boolean boolean78 = bigMatrixImpl29.equals((java.lang.Object) bigDecimal77);
        java.math.BigDecimal bigDecimal79 = bigDecimal14.add(bigDecimal77);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigInteger71);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + 0.0f + "'", float72 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(bigDecimal79);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException0 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException1 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException0.addSuppressed((java.lang.Throwable) invalidMatrixException1);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException4 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException0.addSuppressed((java.lang.Throwable) matrixIndexException4);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException7 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException4.addSuppressed((java.lang.Throwable) matrixIndexException7);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException9 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException10 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException9.addSuppressed((java.lang.Throwable) invalidMatrixException10);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException12 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException13 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException12.addSuppressed((java.lang.Throwable) invalidMatrixException13);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException16 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException12.addSuppressed((java.lang.Throwable) matrixIndexException16);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException18 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException19 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException18.addSuppressed((java.lang.Throwable) invalidMatrixException19);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException22 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException18.addSuppressed((java.lang.Throwable) matrixIndexException22);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException25 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException22.addSuppressed((java.lang.Throwable) matrixIndexException25);
        matrixIndexException16.addSuppressed((java.lang.Throwable) matrixIndexException22);
        invalidMatrixException9.addSuppressed((java.lang.Throwable) matrixIndexException16);
        matrixIndexException7.addSuppressed((java.lang.Throwable) invalidMatrixException9);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException30 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException9.addSuppressed((java.lang.Throwable) invalidMatrixException30);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException32 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException33 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException32.addSuppressed((java.lang.Throwable) invalidMatrixException33);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException36 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException32.addSuppressed((java.lang.Throwable) matrixIndexException36);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException39 = new org.apache.commons.math.linear.MatrixIndexException("");
        matrixIndexException36.addSuppressed((java.lang.Throwable) matrixIndexException39);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException41 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException42 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException41.addSuppressed((java.lang.Throwable) invalidMatrixException42);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException45 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException41.addSuppressed((java.lang.Throwable) matrixIndexException45);
        matrixIndexException36.addSuppressed((java.lang.Throwable) invalidMatrixException41);
        invalidMatrixException30.addSuppressed((java.lang.Throwable) matrixIndexException36);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException49 = new org.apache.commons.math.linear.InvalidMatrixException();
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException50 = new org.apache.commons.math.linear.InvalidMatrixException();
        invalidMatrixException49.addSuppressed((java.lang.Throwable) invalidMatrixException50);
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException53 = new org.apache.commons.math.linear.MatrixIndexException("");
        invalidMatrixException49.addSuppressed((java.lang.Throwable) matrixIndexException53);
        java.lang.Throwable[] throwableArray55 = matrixIndexException53.getSuppressed();
        invalidMatrixException30.addSuppressed((java.lang.Throwable) matrixIndexException53);
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException58 = new org.apache.commons.math.linear.InvalidMatrixException("org.apache.commons.math.linear.InvalidMatrixException");
        matrixIndexException53.addSuppressed((java.lang.Throwable) invalidMatrixException58);
        java.lang.Throwable[] throwableArray60 = matrixIndexException53.getSuppressed();
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException62 = new org.apache.commons.math.linear.MatrixIndexException("2805");
        matrixIndexException53.addSuppressed((java.lang.Throwable) matrixIndexException62);
        java.lang.String str64 = matrixIndexException62.toString();
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.linear.MatrixIndexException: 2805" + "'", str64, "org.apache.commons.math.linear.MatrixIndexException: 2805");
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        java.lang.String str11 = bigDecimal10.toString();
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        int int15 = bigDecimal13.signum();
        java.math.BigDecimal[] bigDecimalArray16 = bigDecimal10.divideAndRemainder(bigDecimal13);
        java.math.BigDecimal bigDecimal18 = bigDecimal10.pow((int) 'a');
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        java.lang.String str21 = bigDecimal20.toString();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        int int25 = bigDecimal23.signum();
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal20.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal bigDecimal28 = bigDecimal20.pow((int) 'a');
        java.math.BigInteger bigInteger29 = bigDecimal20.toBigIntegerExact();
        java.math.BigDecimal bigDecimal30 = bigDecimal18.add(bigDecimal20);
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal("100");
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray57);
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        int int65 = bigDecimal64.intValue();
        java.math.BigDecimal bigDecimal66 = bigDecimal61.min(bigDecimal64);
        java.math.BigInteger bigInteger67 = bigDecimal61.toBigInteger();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(bigInteger67);
        java.math.BigDecimal bigDecimal70 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal71 = bigDecimal70.stripTrailingZeros();
        float float72 = bigDecimal70.floatValue();
        java.math.BigDecimal bigDecimal73 = bigDecimal68.multiply(bigDecimal70);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrix59.scalarAdd(bigDecimal73);
        short short75 = bigDecimal73.shortValueExact();
        java.math.BigDecimal bigDecimal77 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int78 = bigDecimal77.signum();
        java.math.BigDecimal[] bigDecimalArray79 = bigDecimal73.divideAndRemainder(bigDecimal77);
        java.math.BigDecimal bigDecimal80 = bigDecimal32.add(bigDecimal73);
        java.math.BigDecimal[] bigDecimalArray81 = bigDecimal30.divideAndRemainder(bigDecimal80);
        java.math.BigDecimal bigDecimal82 = bigDecimal1.remainder(bigDecimal80);
        java.lang.String str83 = bigDecimal80.toEngineeringString();
        float float84 = bigDecimal80.floatValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertTrue("'" + float72 + "' != '" + 97.0f + "'", float72 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertTrue("'" + short75 + "' != '" + (short) 0 + "'", short75 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(bigDecimalArray81);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "100" + "'", str83, "100");
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 100.0f + "'", float84 == 100.0f);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        boolean boolean19 = bigMatrix18.isSquare();
        java.math.BigDecimal[] bigDecimalArray21 = bigMatrix18.getRow(0);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrix18.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrix18.copy();
        int int24 = bigMatrix18.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl14.subtract(bigMatrix18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 110, 4);
        java.lang.String[] strArray4 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray5 = new java.lang.String[][] { strArray4 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray5);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray5);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray5);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray5);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray5);
        org.apache.commons.math.linear.BigMatrix bigMatrix11 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray5);
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray5);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray5);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray5);
        int int15 = bigMatrixImpl14.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix16 = bigMatrixImpl2.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(bigMatrix11);
        org.junit.Assert.assertNotNull(bigMatrix12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        double[][] doubleArray31 = bigMatrixImpl27.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray31);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int3 = bigDecimal2.intValue();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        double[] doubleArray21 = bigMatrixImpl18.getRowAsDoubleArray((int) (short) 0);
        boolean boolean22 = bigMatrixImpl18.isSingular();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl18.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23);
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal27 = bigDecimal26.negate();
        int int28 = bigDecimal27.scale();
        boolean boolean29 = bigMatrixImpl24.equals((java.lang.Object) bigDecimal27);
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger32 = bigDecimal31.unscaledValue();
        java.lang.String str33 = bigDecimal31.toPlainString();
        java.math.BigDecimal bigDecimal34 = bigDecimal27.divideToIntegralValue(bigDecimal31);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal[][] bigDecimalArray59 = new java.math.BigDecimal[][] { bigDecimalArray42, bigDecimalArray50, bigDecimalArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        java.math.BigDecimal[][] bigDecimalArray63 = bigMatrixImpl62.getDataRef();
        java.math.BigDecimal bigDecimal64 = bigMatrixImpl62.getNorm();
        boolean boolean65 = bigMatrixImpl62.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl62.copy();
        double[] doubleArray68 = bigMatrixImpl62.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl62.scalarMultiply(bigDecimal69);
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        long long74 = bigDecimal72.longValue();
        long long75 = bigDecimal72.longValueExact();
        int int76 = bigDecimal72.precision();
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        int int79 = bigDecimal78.intValue();
        long long80 = bigDecimal78.longValue();
        long long81 = bigDecimal78.longValueExact();
        java.math.BigDecimal bigDecimal82 = bigDecimal72.add(bigDecimal78);
        java.math.BigDecimal bigDecimal84 = new java.math.BigDecimal(0.0d);
        int int85 = bigDecimal84.intValue();
        java.math.BigDecimal bigDecimal87 = new java.math.BigDecimal(0.0d);
        int int88 = bigDecimal87.intValue();
        java.math.BigDecimal bigDecimal89 = bigDecimal84.min(bigDecimal87);
        java.math.BigDecimal bigDecimal90 = bigDecimal82.min(bigDecimal87);
        java.math.BigDecimal bigDecimal92 = bigDecimal90.movePointRight((int) (short) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix93 = bigMatrixImpl62.scalarAdd(bigDecimal90);
        java.math.BigDecimal bigDecimal94 = bigDecimal31.subtract(bigDecimal90);
        java.math.BigDecimal bigDecimal95 = bigDecimal2.add(bigDecimal94);
        java.math.BigDecimal bigDecimal97 = bigDecimal94.setScale((int) (short) 0);
        short short98 = bigDecimal97.shortValueExact();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "100" + "'", str33, "100");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigMatrix93);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigDecimal95);
        org.junit.Assert.assertNotNull(bigDecimal97);
        org.junit.Assert.assertTrue("'" + short98 + "' != '" + (short) 100 + "'", short98 == (short) 100);
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int5 = bigMatrixImpl4.getRoundingMode();
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl4.getTrace();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl4.copy();
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray20 = new double[][] { doubleArray10, doubleArray13, doubleArray16, doubleArray19 };
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        java.math.BigDecimal[][] bigDecimalArray24 = bigMatrix23.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int26 = bigMatrixImpl25.getRoundingMode();
        java.math.BigDecimal bigDecimal27 = bigMatrixImpl25.getNorm();
        java.math.BigDecimal[] bigDecimalArray29 = bigMatrixImpl25.getRow(2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray30 = bigMatrixImpl4.solve(bigDecimalArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        float float13 = bigDecimal11.floatValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.divideToIntegralValue(bigDecimal11);
        java.math.BigDecimal bigDecimal15 = bigDecimal9.negate();
        int int16 = bigDecimal15.intValueExact();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 97.0f + "'", float13 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException1 = new org.apache.commons.math.linear.InvalidMatrixException("BigMatrixImpl{{97},{0}}");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException3 = new org.apache.commons.math.linear.MatrixIndexException("0.0000000002");
        invalidMatrixException1.addSuppressed((java.lang.Throwable) matrixIndexException3);
        java.lang.String str5 = invalidMatrixException1.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.linear.InvalidMatrixException: BigMatrixImpl{{97},{0}}" + "'", str5, "org.apache.commons.math.linear.InvalidMatrixException: BigMatrixImpl{{97},{0}}");
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray18);
        double double20 = realMatrix19.getNorm();
        int int21 = realMatrix19.getColumnDimension();
        int int22 = realMatrix19.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix19.transpose();
        boolean boolean24 = realMatrix19.isSingular();
        int[] intArray31 = new int[] { (short) 97, (byte) 6, (short) 35, (short) 388, (-35), (byte) 110 };
        int[] intArray37 = new int[] { (-2), (byte) 97, '4', 2, (byte) -11 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix19.getSubMatrix(intArray31, intArray37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 4.0d + "'", double20 == 4.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[97, 6, 35, 388, -35, 110]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-2, 97, 52, 2, -11]");
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((-1L), (int) (byte) 1);
        java.math.BigDecimal bigDecimal4 = bigDecimal2.pow(2);
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        java.math.BigDecimal bigDecimal9 = bigDecimal7.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal10 = bigDecimal4.add(bigDecimal7);
        double double11 = bigDecimal4.doubleValue();
        short short12 = bigDecimal4.shortValue();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.01d + "'", double11 == 0.01d);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.toBigInteger();
        java.math.BigDecimal bigDecimal4 = bigDecimal2.ulp();
        java.math.BigDecimal bigDecimal5 = bigDecimal2.negate();
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.valueOf((long) (short) 97, (int) (byte) 110);
        boolean boolean9 = bigDecimal5.equals((java.lang.Object) (short) 97);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl27.getData();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray36 = bigMatrixImpl27.getRowAsDoubleArray(10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray34);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        boolean boolean32 = bigMatrixImpl31.isSquare();
        int int33 = bigMatrixImpl31.getRowDimension();
        bigMatrixImpl31.setRoundingMode((int) '#');
        int int36 = bigMatrixImpl31.getRowDimension();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((int) (byte) -100);
        java.math.BigDecimal bigDecimal40 = bigDecimal38.movePointLeft((int) 'a');
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl31.scalarAdd(bigDecimal40);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 110);
        boolean boolean44 = bigMatrixImpl31.equals((java.lang.Object) realMatrix43);
        int[] intArray49 = new int[] { 546084, 3, 10, (short) -3072 };
        int[] intArray52 = new int[] { (byte) 32, 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl31.getSubMatrix(intArray49, intArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[546084, 3, 10, -3072]");
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[32, 1]");
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl25.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix29);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray69 = bigDecimal66.divideAndRemainder(bigDecimal68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        int int71 = bigMatrixImpl70.getColumnDimension();
        boolean boolean72 = bigMatrixImpl70.isSingular();
        boolean boolean73 = bigMatrixImpl27.equals((java.lang.Object) boolean72);
        java.math.BigDecimal bigDecimal74 = bigMatrixImpl27.getNorm();
        int int75 = bigMatrixImpl27.getColumnDimension();
        int int76 = bigMatrixImpl27.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal79 = bigMatrixImpl27.getEntry((int) (byte) 52, (int) (short) 9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double[] doubleArray13 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray13);
        double[] doubleArray19 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray19);
        double[] doubleArray21 = realMatrix14.operate(doubleArray19);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix6.multiply(realMatrix14);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix6.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix6.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        boolean boolean56 = bigMatrix55.isSingular();
        boolean boolean57 = bigMatrixImpl27.equals((java.lang.Object) boolean56);
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl27.getData();
        double[] doubleArray60 = bigMatrixImpl27.getRowAsDoubleArray(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray60);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrix62.getColumnMatrix((int) (byte) 32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(realMatrix62);
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigInteger bigInteger63 = bigDecimal57.toBigInteger();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(bigInteger63);
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal67 = bigDecimal66.stripTrailingZeros();
        float float68 = bigDecimal66.floatValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal64.multiply(bigDecimal66);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrix55.scalarAdd(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl27.add(bigMatrix55);
        int int72 = bigMatrixImpl27.getRoundingMode();
        bigMatrixImpl27.setRoundingMode(64);
        int int75 = bigMatrixImpl27.getColumnDimension();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 97.0f + "'", float68 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 100);
        double[] doubleArray4 = new double[] { 1.0d, 100.0f };
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray14 = new double[][] { doubleArray4, doubleArray7, doubleArray10, doubleArray13 };
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray14);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray14);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl16.transpose();
        double[] doubleArray19 = bigMatrixImpl16.getRowAsDoubleArray((int) (short) 0);
        boolean boolean20 = bigMatrixImpl16.isSingular();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal("100");
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl16.scalarMultiply(bigDecimal22);
        boolean boolean24 = bigDecimal1.equals((java.lang.Object) bigDecimal22);
        java.math.BigDecimal bigDecimal26 = bigDecimal1.movePointRight((int) (byte) 11);
        java.math.BigDecimal bigDecimal27 = bigDecimal1.ulp();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigInteger bigInteger35 = bigDecimal29.toBigInteger();
        int int36 = bigDecimal29.precision();
        java.lang.String str37 = bigDecimal29.toEngineeringString();
        int int38 = bigDecimal29.intValueExact();
        java.math.BigDecimal bigDecimal39 = bigDecimal29.stripTrailingZeros();
        java.math.BigDecimal bigDecimal40 = bigDecimal29.abs();
        boolean boolean41 = bigDecimal27.equals((java.lang.Object) bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        double[][] doubleArray31 = bigMatrixImpl27.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray31);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) ' ', 100);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.min(bigDecimal7);
        java.math.BigDecimal[] bigDecimalArray10 = new java.math.BigDecimal[] { bigDecimal9 };
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal[][] bigDecimalArray27 = new java.math.BigDecimal[][] { bigDecimalArray10, bigDecimalArray18, bigDecimalArray26 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl30.getDataRef();
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl30.getNorm();
        boolean boolean33 = bigMatrixImpl30.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl30.copy();
        boolean boolean35 = bigDecimal2.equals((java.lang.Object) bigMatrix34);
        java.math.MathContext mathContext36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal37 = bigDecimal2.abs(mathContext36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix11.transpose();
        int int23 = realMatrix11.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix11.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix11.getColumnMatrix((int) (byte) 52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix23.scalarMultiply((double) 3);
        boolean boolean40 = realMatrix23.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix23.getSubMatrix(2881, 5, (int) (short) 400, 6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal[][] bigDecimalArray54 = new java.math.BigDecimal[][] { bigDecimalArray37, bigDecimalArray45, bigDecimalArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl57.getDataRef();
        java.math.BigDecimal bigDecimal59 = bigMatrixImpl57.getNorm();
        boolean boolean60 = bigMatrixImpl57.isSquare();
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl57.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl57.transpose();
        bigMatrixImpl57.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl57.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl57.copy();
        boolean boolean67 = bigMatrixImpl57.isSingular();
        boolean boolean68 = bigMatrixImpl57.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl27.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl27.getColumnMatrix(8667);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(bigMatrix69);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix11 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix11);
        org.junit.Assert.assertNotNull(bigMatrix12);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (byte) 97);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.ulp();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(7);
        boolean boolean35 = bigMatrixImpl27.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray37 = bigMatrixImpl27.getRowAsDoubleArray((int) (byte) -54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = bigDecimal15.setScale(0);
        byte byte19 = bigDecimal18.byteValueExact();
        java.math.BigDecimal bigDecimal20 = bigDecimal18.plus();
        java.math.BigDecimal bigDecimal21 = bigDecimal13.max(bigDecimal20);
        java.math.BigDecimal bigDecimal22 = bigDecimal20.abs();
        float float23 = bigDecimal20.floatValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal26 = bigMatrix25.getDeterminant();
        java.math.BigDecimal bigDecimal27 = bigMatrix25.getTrace();
        java.math.BigDecimal bigDecimal28 = bigDecimal20.divideToIntegralValue(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.0f + "'", float23 == 0.0f);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal28);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        java.lang.String str64 = bigDecimal63.toString();
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal67 = bigDecimal66.stripTrailingZeros();
        int int68 = bigDecimal66.signum();
        java.math.BigDecimal[] bigDecimalArray69 = bigDecimal63.divideAndRemainder(bigDecimal66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        int int71 = bigMatrixImpl70.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl70.transpose();
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl70.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl37.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl74);
        int int76 = bigMatrixImpl74.getColumnDimension();
        double[][] doubleArray77 = bigMatrixImpl74.getDataAsDoubleArray();
        boolean boolean78 = bigMatrixImpl74.isSingular();
        boolean boolean79 = bigMatrixImpl74.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl74.copy();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal81 = bigMatrixImpl74.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(bigMatrix80);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigMatrixImpl27.getColumnDimension();
        bigMatrixImpl27.setRoundingMode((int) (byte) -100);
        double[] doubleArray34 = bigMatrixImpl27.getRowAsDoubleArray(2);
        bigMatrixImpl27.setScale((int) (short) 0);
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        float float52 = bigDecimal50.floatValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.divideToIntegralValue(bigDecimal50);
        java.math.BigDecimal bigDecimal54 = bigDecimal38.max(bigDecimal48);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl27.scalarAdd(bigDecimal54);
        java.math.BigDecimal[][] bigDecimalArray56 = bigMatrixImpl27.getData();
        bigMatrixImpl27.setScale(2881);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl27.getRowMatrix((int) (short) 970);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 97.0f + "'", float52 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl14.copy();
        double[][] doubleArray19 = bigMatrixImpl14.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal21 = bigDecimal20.abs();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal26.scaleByPowerOfTen((int) (short) 1);
        int int32 = bigDecimal31.signum();
        int int33 = bigDecimal20.compareTo(bigDecimal31);
        java.math.BigInteger bigInteger34 = bigDecimal31.unscaledValue();
        int int35 = bigDecimal31.intValue();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 970 + "'", int35 == 970);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        java.math.BigDecimal bigDecimal9 = bigMatrixImpl8.getNorm();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.ZERO;
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigDecimal[] bigDecimalArray18 = new java.math.BigDecimal[] { bigDecimal17 };
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray26 = new java.math.BigDecimal[] { bigDecimal25 };
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.min(bigDecimal31);
        java.math.BigDecimal[] bigDecimalArray34 = new java.math.BigDecimal[] { bigDecimal33 };
        java.math.BigDecimal[][] bigDecimalArray35 = new java.math.BigDecimal[][] { bigDecimalArray18, bigDecimalArray26, bigDecimalArray34 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray35);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl38.getDataRef();
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl38.getNorm();
        boolean boolean41 = bigMatrixImpl38.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl38.copy();
        double[] doubleArray44 = bigMatrixImpl38.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray46 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(strArray47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl38.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl48);
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl38.getNorm();
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl38.getData();
        int int52 = bigMatrixImpl38.getScale();
        boolean boolean53 = bigDecimal10.equals((java.lang.Object) bigMatrixImpl38);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl8.scalarMultiply(bigDecimal10);
        java.math.BigDecimal[] bigDecimalArray56 = bigMatrixImpl8.getRow(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray56);
        int[] intArray62 = new int[] { (byte) 4, (byte) 97, '#' };
        int[] intArray65 = new int[] { (short) -3072, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrix58.getSubMatrix(intArray62, intArray65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 64 + "'", int52 == 64);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[4, 97, 35]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-3072, 10]");
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal9.divideAndRemainder(bigDecimal11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl13.copy();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        int int24 = bigMatrixImpl23.getRoundingMode();
        boolean boolean25 = bigMatrixImpl23.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl23);
        boolean boolean27 = bigMatrixImpl5.equals((java.lang.Object) bigMatrix26);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl5.getData();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal30.divideAndRemainder(bigDecimal32);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl34.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl34.copy();
        bigMatrixImpl34.setRoundingMode(10);
        int int39 = bigMatrixImpl34.getRowDimension();
        java.math.BigDecimal bigDecimal40 = bigMatrixImpl34.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl5.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl34.getSubMatrix(110, 98, 5, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigMatrix41);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        double[] doubleArray1 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix2 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray1);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray1);
        org.apache.commons.math.linear.RealMatrix realMatrix4 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix2);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[] doubleArray38 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray39 = new double[][] { doubleArray29, doubleArray32, doubleArray35, doubleArray38 };
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray39);
        boolean boolean41 = bigMatrixImpl25.equals((java.lang.Object) bigMatrix40);
        int int42 = bigMatrixImpl25.getRowDimension();
        int int43 = bigMatrixImpl25.getRoundingMode();
        int int44 = bigMatrixImpl25.getScale();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 64 + "'", int44 == 64);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        java.lang.String str20 = bigDecimal19.toString();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        java.math.BigDecimal[] bigDecimalArray25 = bigDecimal19.divideAndRemainder(bigDecimal22);
        java.math.BigDecimal bigDecimal27 = bigDecimal19.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal17, bigDecimal19 };
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray28);
        java.math.BigDecimal[] bigDecimalArray31 = bigMatrix15.preMultiply(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        double[][] doubleArray35 = bigMatrixImpl34.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl34.transpose();
        double[][] doubleArray37 = bigMatrixImpl34.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(doubleArray37);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix18.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = realMatrix18.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str18 = bigMatrixImpl14.toString();
        int int19 = bigMatrixImpl14.getScale();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl14.getRowMatrix((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrix22.transpose();
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrix39.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray40);
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray54 = new double[][] { doubleArray44, doubleArray47, doubleArray50, doubleArray53 };
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl56.transpose();
        java.math.BigDecimal bigDecimal59 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        java.lang.String str62 = bigDecimal61.toString();
        java.math.BigDecimal bigDecimal64 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal65 = bigDecimal64.stripTrailingZeros();
        int int66 = bigDecimal64.signum();
        java.math.BigDecimal[] bigDecimalArray67 = bigDecimal61.divideAndRemainder(bigDecimal64);
        java.math.BigDecimal bigDecimal69 = bigDecimal61.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray70 = new java.math.BigDecimal[] { bigDecimal59, bigDecimal61 };
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray70);
        java.math.BigDecimal[] bigDecimalArray73 = bigMatrix57.preMultiply(bigDecimalArray70);
        java.math.BigDecimal[] bigDecimalArray74 = bigMatrixImpl41.preMultiply(bigDecimalArray73);
        java.math.BigDecimal[] bigDecimalArray76 = bigMatrixImpl41.getRow(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray76);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray76);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray76);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray76);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray81 = bigMatrix23.operate(bigDecimalArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str18, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 64 + "'", int19 == 64);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigMatrix80);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        double[][] doubleArray9 = bigMatrixImpl8.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray10 = bigMatrixImpl8.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal11 = bigMatrixImpl8.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        float float22 = bigDecimal21.floatValue();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigInteger bigInteger47 = bigDecimal41.toBigInteger();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(bigInteger47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrix39.scalarAdd(bigDecimal48);
        java.math.BigDecimal bigDecimal50 = bigDecimal48.stripTrailingZeros();
        java.math.BigDecimal bigDecimal51 = bigDecimal21.min(bigDecimal50);
        java.math.BigInteger bigInteger52 = bigDecimal21.unscaledValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal21.scaleByPowerOfTen(7);
        java.math.BigDecimal bigDecimal56 = bigDecimal54.pow((int) (short) 2805);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal56);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        int int6 = realMatrix5.getColumnDimension();
        boolean boolean7 = realMatrix5.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrix5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double12 = realMatrix11.getTrace();
        boolean boolean13 = realMatrix11.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix11.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix15.scalarAdd((double) (short) -2805);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix15.getRowMatrix(5);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix19.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix20.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix5.add(realMatrix20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(97L, 6);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(396.0d);
        java.lang.String str5 = bigDecimal4.toPlainString();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal7.min(bigDecimal10);
        java.math.BigDecimal[] bigDecimalArray13 = new java.math.BigDecimal[] { bigDecimal12 };
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.min(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal[][] bigDecimalArray30 = new java.math.BigDecimal[][] { bigDecimalArray13, bigDecimalArray21, bigDecimalArray29 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl33.getDataRef();
        java.math.BigDecimal bigDecimal35 = bigMatrixImpl33.getNorm();
        boolean boolean36 = bigMatrixImpl33.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl33.copy();
        double[] doubleArray39 = bigMatrixImpl33.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal((double) (short) -100);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal43.pow((int) 'a');
        java.math.BigInteger bigInteger52 = bigDecimal43.toBigIntegerExact();
        int int53 = bigDecimal43.precision();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray61);
        java.math.BigDecimal bigDecimal63 = bigMatrixImpl62.getNorm();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        java.lang.String str66 = bigDecimal65.toString();
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal69 = bigDecimal68.stripTrailingZeros();
        int int70 = bigDecimal68.signum();
        java.math.BigDecimal[] bigDecimalArray71 = bigDecimal65.divideAndRemainder(bigDecimal68);
        java.math.BigDecimal bigDecimal73 = bigDecimal65.pow((int) 'a');
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal76 = bigDecimal75.stripTrailingZeros();
        float float77 = bigDecimal75.floatValue();
        java.math.BigDecimal bigDecimal78 = bigDecimal73.divideToIntegralValue(bigDecimal75);
        boolean boolean79 = bigMatrixImpl62.equals((java.lang.Object) bigDecimal75);
        java.math.BigDecimal[] bigDecimalArray80 = bigDecimal43.divideAndRemainder(bigDecimal75);
        java.math.BigDecimal bigDecimal81 = bigDecimal41.remainder(bigDecimal75);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrixImpl33.scalarMultiply(bigDecimal75);
        java.math.BigDecimal bigDecimal84 = new java.math.BigDecimal(0.0d);
        int int85 = bigDecimal84.intValue();
        java.math.BigDecimal bigDecimal87 = new java.math.BigDecimal(0.0d);
        int int88 = bigDecimal87.intValue();
        java.math.BigDecimal bigDecimal89 = bigDecimal84.min(bigDecimal87);
        java.math.BigInteger bigInteger90 = bigDecimal84.toBigInteger();
        short short91 = bigDecimal84.shortValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix92 = bigMatrixImpl33.scalarAdd(bigDecimal84);
        java.math.BigDecimal bigDecimal93 = bigDecimal4.add(bigDecimal84);
        java.math.MathContext mathContext94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal95 = bigDecimal2.add(bigDecimal93, mathContext94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "396" + "'", str5, "396");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertTrue("'" + float77 + "' != '" + 97.0f + "'", float77 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigMatrix82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigInteger90);
        org.junit.Assert.assertTrue("'" + short91 + "' != '" + (short) 0 + "'", short91 == (short) 0);
        org.junit.Assert.assertNotNull(bigMatrix92);
        org.junit.Assert.assertNotNull(bigDecimal93);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        int int5 = bigMatrixImpl3.getRoundingMode();
        java.math.BigDecimal bigDecimal6 = bigMatrixImpl3.getDeterminant();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal9 = bigMatrixImpl3.getEntry((int) (short) 970, (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(bigDecimal6);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        boolean boolean7 = bigMatrixImpl5.isSingular();
        int int8 = bigMatrixImpl5.getRowDimension();
        bigMatrixImpl5.setRoundingMode((int) (byte) 10);
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl5.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray11);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray24 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        double[] doubleArray26 = realMatrix19.operate(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray24);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrix28.transpose();
        double[][] doubleArray30 = realMatrix28.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        boolean boolean32 = bigMatrixImpl31.isSingular();
        int int33 = bigMatrixImpl31.getScale();
        double[][] doubleArray34 = bigMatrixImpl31.getDataAsDoubleArray();
        bigMatrixImpl31.setRoundingMode((-32));
        int int37 = bigMatrixImpl31.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl31.getData();
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl31.getData();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl31.getData();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        java.lang.String str43 = bigDecimal42.toString();
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal46 = bigDecimal45.stripTrailingZeros();
        int int47 = bigDecimal45.signum();
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal42.divideAndRemainder(bigDecimal45);
        java.math.BigDecimal bigDecimal50 = bigDecimal42.pow((int) 'a');
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        java.lang.String str53 = bigDecimal52.toString();
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal56 = bigDecimal55.stripTrailingZeros();
        int int57 = bigDecimal55.signum();
        java.math.BigDecimal[] bigDecimalArray58 = bigDecimal52.divideAndRemainder(bigDecimal55);
        java.math.BigDecimal bigDecimal60 = bigDecimal52.pow((int) 'a');
        java.math.BigInteger bigInteger61 = bigDecimal52.toBigIntegerExact();
        java.math.BigDecimal bigDecimal62 = bigDecimal50.add(bigDecimal52);
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger66 = bigDecimal65.unscaledValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal63.add(bigDecimal65);
        java.math.BigDecimal bigDecimal68 = bigDecimal52.multiply(bigDecimal63);
        java.math.BigDecimal bigDecimal70 = bigDecimal63.scaleByPowerOfTen(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl31.scalarAdd(bigDecimal70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl13.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl31);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertNotNull(bigMatrix12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 64 + "'", int33 == 64);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-32) + "'", int37 == (-32));
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix72);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (byte) -11, 3);
        // The following exception was thrown during execution in test generation
        try {
            short short3 = bigDecimal2.shortValueExact();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Rounding necessary");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        java.lang.String str9 = bigDecimal8.toString();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        int int13 = bigDecimal11.signum();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal8.divideAndRemainder(bigDecimal11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray14);
        int int16 = bigMatrixImpl15.getRoundingMode();
        boolean boolean17 = bigMatrixImpl15.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrix6.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl15);
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl15.getData();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl15.getData();
        int int21 = bigMatrixImpl15.getRoundingMode();
        double[] doubleArray26 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray26);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix28.scalarAdd((double) 6);
        int int31 = realMatrix28.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrix28.scalarAdd(10.0d);
        double[] doubleArray38 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray38);
        double double40 = realMatrix39.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix39.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix33.preMultiply(realMatrix42);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix43.scalarAdd((double) 1.0f);
        double[] doubleArray50 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix51 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray50);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray50);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrix52.scalarAdd((double) 6);
        int int55 = realMatrix52.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrix52.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix45.preMultiply(realMatrix52);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix45.copy();
        double[] doubleArray64 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix65 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray64);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray64);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrix66.scalarAdd((double) 6);
        double double69 = realMatrix66.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrix45.preMultiply(realMatrix66);
        double double71 = realMatrix45.getDeterminant();
        double[] doubleArray76 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix77 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray76);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray76);
        int int79 = realMatrix78.getRowDimension();
        double[] doubleArray81 = realMatrix78.getRow((int) (short) 1);
        double[] doubleArray82 = realMatrix45.operate(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray83 = bigMatrixImpl15.operate(doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 63.0d + "'", double69 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 8668.0d + "'", double71 == 8668.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[52.0]");
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[450736.0]");
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        int int6 = bigMatrixImpl5.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.transpose();
        java.lang.String[] strArray9 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray10 = new java.lang.String[][] { strArray9 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray10);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(strArray10);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray10);
        int int14 = bigMatrixImpl13.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray15 = bigMatrixImpl13.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = bigMatrixImpl13.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrix7.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(bigMatrix16);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = bigDecimal21.pow((int) (byte) 97);
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger26 = bigDecimal25.unscaledValue();
        short short27 = bigDecimal25.shortValueExact();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.divide(bigDecimal25);
        byte byte29 = bigDecimal25.byteValueExact();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.plus();
        int int31 = bigDecimal25.intValueExact();
        java.math.BigDecimal bigDecimal32 = bigDecimal25.abs();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf(10L);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal38 = bigDecimal36.plus();
        double double39 = bigDecimal38.doubleValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal34.max(bigDecimal38);
        java.math.BigDecimal bigDecimal41 = bigDecimal25.subtract(bigDecimal34);
        java.math.BigInteger bigInteger42 = bigDecimal25.unscaledValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(bigInteger42);
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(bigInteger42);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 100 + "'", short27 == (short) 100);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 100 + "'", byte29 == (byte) 100);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigInteger42);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        boolean boolean27 = bigDecimal4.equals((java.lang.Object) realMatrix16);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix16.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = realMatrix28.scalarMultiply((double) (byte) 97);
        double[] doubleArray35 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray35);
        double double37 = realMatrix36.getNorm();
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        double[] doubleArray50 = realMatrix43.operate(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray48);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrix52.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrix36.subtract(realMatrix52);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrix28.add(realMatrix36);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrix36.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix56.getRowMatrix(0);
        double[] doubleArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray60 = realMatrix56.solve(doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix58);
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal7.pow(3);
        java.math.BigDecimal bigDecimal15 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal16 = bigDecimal15.stripTrailingZeros();
        float float17 = bigDecimal15.floatValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal15.ulp();
        java.math.BigDecimal bigDecimal19 = bigDecimal7.subtract(bigDecimal18);
        java.math.BigDecimal bigDecimal21 = bigDecimal18.pow(10);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal23.toBigInteger();
        int int30 = bigDecimal23.precision();
        java.lang.String str31 = bigDecimal23.toEngineeringString();
        int int32 = bigDecimal23.intValueExact();
        java.math.BigDecimal bigDecimal33 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal35 = bigDecimal23.setScale((int) (byte) 11);
        java.math.MathContext mathContext36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal37 = bigDecimal18.divideToIntegralValue(bigDecimal35, mathContext36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 97.0f + "'", float17 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal35);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigInteger bigInteger26 = bigDecimal25.toBigIntegerExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl18.scalarAdd(bigDecimal25);
        int int28 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl18.getDataRef();
        double[] doubleArray34 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray34);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        double[] doubleArray42 = realMatrix35.operate(doubleArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix44.transpose();
        double[][] doubleArray46 = realMatrix44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray60 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59 };
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl62.transpose();
        double[] doubleArray65 = bigMatrixImpl62.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str66 = bigMatrixImpl62.toString();
        int int67 = bigMatrixImpl62.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl47.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl62);
        java.math.BigDecimal[] bigDecimalArray70 = bigMatrixImpl47.getRow((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray70);
        java.math.BigDecimal[] bigDecimalArray73 = bigMatrixImpl18.preMultiply(bigDecimalArray70);
        int int74 = bigMatrixImpl18.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal75 = bigMatrixImpl18.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str66, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 64 + "'", int67 == 64);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException1 = new org.apache.commons.math.linear.MatrixIndexException("BigMatrixImpl{{97},{0}}");
        java.lang.String str2 = matrixIndexException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.linear.MatrixIndexException: BigMatrixImpl{{97},{0}}" + "'", str2, "org.apache.commons.math.linear.MatrixIndexException: BigMatrixImpl{{97},{0}}");
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (-1));
        java.math.BigDecimal bigDecimal3 = bigDecimal1.scaleByPowerOfTen((int) (short) 4);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        int[] intArray18 = new int[] { (short) 100 };
        int[] intArray21 = new int[] { 4, 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix16.getSubMatrix(intArray18, intArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[4, 1]");
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.stripTrailingZeros();
        byte byte4 = bigDecimal3.byteValueExact();
        int int5 = bigDecimal3.signum();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 100 + "'", byte4 == (byte) 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.min(bigDecimal7);
        float float15 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal1.pow((int) (short) 31464);
        java.math.RoundingMode roundingMode19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal20 = bigDecimal1.setScale((int) (byte) 6, roundingMode19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.0f + "'", float15 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal17);
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        boolean boolean15 = realMatrix14.isSingular();
        double[][] doubleArray16 = realMatrix14.getData();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal71 = bigDecimal66.min(bigDecimal69);
        java.math.BigDecimal[] bigDecimalArray72 = new java.math.BigDecimal[] { bigDecimal71 };
        java.math.BigDecimal bigDecimal74 = new java.math.BigDecimal(0.0d);
        int int75 = bigDecimal74.intValue();
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        int int78 = bigDecimal77.intValue();
        java.math.BigDecimal bigDecimal79 = bigDecimal74.min(bigDecimal77);
        java.math.BigDecimal[] bigDecimalArray80 = new java.math.BigDecimal[] { bigDecimal79 };
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(0.0d);
        int int83 = bigDecimal82.intValue();
        java.math.BigDecimal bigDecimal85 = new java.math.BigDecimal(0.0d);
        int int86 = bigDecimal85.intValue();
        java.math.BigDecimal bigDecimal87 = bigDecimal82.min(bigDecimal85);
        java.math.BigDecimal[] bigDecimalArray88 = new java.math.BigDecimal[] { bigDecimal87 };
        java.math.BigDecimal[][] bigDecimalArray89 = new java.math.BigDecimal[][] { bigDecimalArray72, bigDecimalArray80, bigDecimalArray88 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray89);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray89);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl92 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray89);
        java.math.BigDecimal[][] bigDecimalArray93 = bigMatrixImpl92.getDataRef();
        bigMatrixImpl92.setRoundingMode(10);
        int int96 = bigMatrixImpl92.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix97 = bigMatrixImpl27.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl92);
        int int98 = bigMatrixImpl27.getRowDimension();
        int int99 = bigMatrixImpl27.getRowDimension();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigDecimalArray88);
        org.junit.Assert.assertNotNull(bigDecimalArray89);
        org.junit.Assert.assertNotNull(bigMatrix91);
        org.junit.Assert.assertNotNull(bigDecimalArray93);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 64 + "'", int96 == 64);
        org.junit.Assert.assertNotNull(bigMatrix97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 3 + "'", int99 == 3);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.lang.String str3 = bigDecimal2.toString();
        java.math.BigDecimal bigDecimal5 = bigDecimal2.pow((int) (short) 1);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(4.733456112E9d);
        java.math.BigDecimal bigDecimal8 = bigDecimal5.add(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1E-100" + "'", str3, "1E-100");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigDecimal8);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal8.negate();
        java.math.BigDecimal bigDecimal16 = bigDecimal14.movePointLeft((-100));
        java.math.BigDecimal bigDecimal18 = bigDecimal16.movePointRight(0);
        java.math.BigDecimal bigDecimal20 = bigDecimal16.movePointLeft(0);
        int int21 = bigDecimal16.signum();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 97.0f + "'", float12 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix23.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix23.inverse();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.min(bigDecimal38);
        java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal40 };
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal48 };
        java.math.BigDecimal[][] bigDecimalArray50 = new java.math.BigDecimal[][] { bigDecimalArray33, bigDecimalArray41, bigDecimalArray49 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        int int54 = bigMatrixImpl53.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl53.copy();
        double[] doubleArray57 = bigMatrixImpl53.getRowAsDoubleArray((int) (byte) 1);
        double[] doubleArray58 = realMatrix25.operate(doubleArray57);
        double[][] doubleArray59 = realMatrix25.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix60 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray59);
        double[] doubleArray65 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrix67.scalarAdd((double) 6);
        double double70 = realMatrix67.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix67.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrix67.scalarAdd((double) 0.0f);
        boolean boolean74 = realMatrix73.isSingular();
        int int75 = realMatrix73.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrix60.preMultiply(realMatrix73);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrix78.scalarAdd(0.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrix60.add(realMatrix80);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrix81.getSubMatrix((int) (short) -100, (int) (short) -3072, (-3), (-200));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 63.0d + "'", double70 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix81);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        boolean boolean37 = bigDecimal20.equals((java.lang.Object) doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrixImpl38.getData();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl38.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.lang.String str27 = bigMatrixImpl25.toString();
        int int28 = bigMatrixImpl25.getRoundingMode();
        java.lang.String str29 = bigMatrixImpl25.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str27, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str29, "BigMatrixImpl{{0},{0},{0}}");
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) -3072);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 100);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.pow((int) (byte) 100);
        short short4 = bigDecimal1.shortValueExact();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 0, (int) (short) -100);
        java.math.BigDecimal bigDecimal8 = bigDecimal7.stripTrailingZeros();
        java.math.BigDecimal bigDecimal9 = bigDecimal7.ulp();
        java.math.MathContext mathContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal11 = bigDecimal1.divideToIntegralValue(bigDecimal9, mathContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 100 + "'", short4 == (short) 100);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimal9);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getDataRef();
        double[][] doubleArray19 = bigMatrixImpl14.getDataAsDoubleArray();
        boolean boolean20 = bigMatrixImpl14.isSquare();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        float float24 = bigDecimal22.floatValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal22.ulp();
        double double26 = bigDecimal22.doubleValue();
        float float27 = bigDecimal22.floatValue();
        float float28 = bigDecimal22.floatValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl14.scalarAdd(bigDecimal22);
        java.lang.Object obj30 = null;
        boolean boolean31 = bigMatrixImpl14.equals(obj30);
        double[][] doubleArray32 = bigMatrixImpl14.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl14.getRowMatrix(8667);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 97.0f + "'", float24 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 97.0d + "'", double26 == 97.0d);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 97.0f + "'", float27 == 97.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 97.0f + "'", float28 == 97.0f);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray32);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        java.math.BigDecimal bigDecimal9 = bigMatrixImpl8.getNorm();
        java.lang.String str10 = bigDecimal9.toPlainString();
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[] doubleArray16 = new double[] { 1.0d, 100.0f };
        double[] doubleArray19 = new double[] { 1.0d, 100.0f };
        double[] doubleArray22 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray23 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22 };
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray23);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl25.transpose();
        double[] doubleArray28 = bigMatrixImpl25.getRowAsDoubleArray((int) (short) 0);
        boolean boolean29 = bigMatrixImpl25.isSingular();
        boolean boolean30 = bigMatrixImpl25.isSquare();
        double[][] doubleArray31 = bigMatrixImpl25.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl25.copy();
        java.math.BigDecimal bigDecimal33 = bigMatrixImpl25.getNorm();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.max(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        java.lang.String str47 = bigDecimal46.toString();
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        int int51 = bigDecimal49.signum();
        java.math.BigDecimal[] bigDecimalArray52 = bigDecimal46.divideAndRemainder(bigDecimal49);
        java.math.BigDecimal bigDecimal54 = bigDecimal46.pow((int) 'a');
        java.math.BigInteger bigInteger55 = bigDecimal46.toBigIntegerExact();
        java.math.BigDecimal bigDecimal56 = bigDecimal44.add(bigDecimal46);
        java.math.BigDecimal bigDecimal58 = bigDecimal56.pow((int) (byte) 97);
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        short short62 = bigDecimal60.shortValueExact();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.divide(bigDecimal60);
        byte byte64 = bigDecimal60.byteValueExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal60.plus();
        int int66 = bigDecimal65.intValue();
        long long67 = bigDecimal65.longValue();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal70 = bigDecimal33.divide(bigDecimal65, (int) (short) -2805, (int) (byte) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 100 + "'", short62 == (short) 100);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + byte64 + "' != '" + (byte) 100 + "'", byte64 == (byte) 100);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray20);
        bigMatrixImpl21.setScale((int) (short) -2805);
        int int24 = bigMatrixImpl21.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal31 = bigDecimal30.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.scalarMultiply(bigDecimal30);
        short short33 = bigDecimal30.shortValueExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 100 + "'", short33 == (short) 100);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        java.lang.String str22 = bigDecimal21.toString();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal25 = bigDecimal24.stripTrailingZeros();
        int int26 = bigDecimal24.signum();
        java.math.BigDecimal[] bigDecimalArray27 = bigDecimal21.divideAndRemainder(bigDecimal24);
        java.math.BigDecimal bigDecimal29 = bigDecimal21.pow((int) 'a');
        java.math.BigInteger bigInteger30 = bigDecimal21.toBigIntegerExact();
        float float31 = bigDecimal21.floatValue();
        double[] doubleArray36 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray36);
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double[] doubleArray44 = realMatrix37.operate(doubleArray42);
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray44);
        java.math.BigDecimal bigDecimal46 = bigMatrix45.getNorm();
        java.math.BigDecimal bigDecimal47 = bigDecimal21.subtract(bigDecimal46);
        int int48 = bigDecimal47.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl14.scalarMultiply(bigDecimal47);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl14.getRowMatrix((int) (short) 1);
        int int52 = bigMatrixImpl14.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.0f + "'", float31 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 64 + "'", int52 == 64);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix23.copy();
        boolean boolean38 = realMatrix37.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix37.scalarAdd((double) 970L);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrix40.inverse();
        int int42 = realMatrix40.getColumnDimension();
        boolean boolean43 = realMatrix40.isSingular();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix2 = realMatrix1.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrix2.getRowMatrix((int) (byte) 6);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = realMatrix4.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(realMatrix2);
        org.junit.Assert.assertNotNull(realMatrix4);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal[][] bigDecimalArray36 = bigMatrixImpl27.getDataRef();
        int int37 = bigMatrixImpl27.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.getRowMatrix(98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray28);
        boolean boolean35 = bigMatrix34.isSingular();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal16.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl14.preMultiply(bigDecimalArray19);
        int int21 = bigMatrixImpl14.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl14.getColumnMatrix((-32));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        int int27 = bigMatrixImpl25.getRowDimension();
        boolean boolean28 = bigMatrixImpl25.isSingular();
        double[][] doubleArray29 = bigMatrixImpl25.getDataAsDoubleArray();
        bigMatrixImpl25.setScale((int) (byte) 85);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix15.scalarAdd((-1.0d));
        double[] doubleArray19 = realMatrix15.getRow(0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2805.0]");
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = bigDecimal21.pow((int) (byte) 97);
        int int24 = bigDecimal21.scale();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int27 = bigDecimal26.signum();
        java.math.BigDecimal bigDecimal28 = bigDecimal21.add(bigDecimal26);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        java.lang.String str31 = bigDecimal30.toString();
        java.math.BigDecimal bigDecimal33 = bigDecimal30.setScale(0);
        byte byte34 = bigDecimal33.byteValueExact();
        java.math.BigDecimal bigDecimal35 = bigDecimal33.plus();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger38 = bigDecimal37.unscaledValue();
        java.lang.String str39 = bigDecimal37.toPlainString();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = bigDecimal41.stripTrailingZeros();
        float float43 = bigDecimal41.floatValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal41.ulp();
        java.math.BigDecimal bigDecimal45 = bigDecimal44.ulp();
        java.math.BigDecimal bigDecimal46 = bigDecimal37.remainder(bigDecimal45);
        java.math.BigDecimal bigDecimal48 = bigDecimal37.pow((int) '#');
        int int49 = bigDecimal33.compareTo(bigDecimal48);
        java.math.BigDecimal bigDecimal50 = bigDecimal48.stripTrailingZeros();
        java.math.MathContext mathContext51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal52 = bigDecimal28.multiply(bigDecimal48, mathContext51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 0 + "'", byte34 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "100" + "'", str39, "100");
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertTrue("'" + float43 + "' != '" + 97.0f + "'", float43 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(bigDecimal50);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, 10);
        int int3 = bigMatrixImpl2.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl2.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl2.getRowMatrix((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode(10);
        int int31 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        java.lang.String str34 = bigDecimal33.toString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        int int38 = bigDecimal36.signum();
        java.math.BigDecimal[] bigDecimalArray39 = bigDecimal33.divideAndRemainder(bigDecimal36);
        java.math.BigDecimal bigDecimal41 = bigDecimal33.pow((int) 'a');
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal43.pow((int) 'a');
        java.math.BigInteger bigInteger52 = bigDecimal43.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal41.add(bigDecimal43);
        java.math.BigDecimal bigDecimal55 = bigDecimal53.pow((int) (byte) 97);
        int int56 = bigDecimal53.scale();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int59 = bigDecimal58.signum();
        java.math.BigDecimal bigDecimal60 = bigDecimal53.add(bigDecimal58);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl27.scalarAdd(bigDecimal58);
        boolean boolean62 = bigMatrixImpl27.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl27.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix5.multiply(realMatrix19);
        double double23 = realMatrix22.getTrace();
        double[][] doubleArray24 = realMatrix22.getData();
        double[][] doubleArray25 = realMatrix22.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix22.scalarAdd(2.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2805.0d + "'", double23 == 2805.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realMatrix27);
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        double[][] doubleArray8 = bigMatrixImpl7.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal((long) (byte) -54);
        org.apache.commons.math.linear.BigMatrix bigMatrix11 = bigMatrixImpl7.scalarAdd(bigDecimal10);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(bigMatrix11);
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrix5.scalarAdd((double) (short) -2805);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrix5.getRowMatrix(5);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix9.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix10.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = realMatrix11.getEntry((int) (short) 9, (int) (byte) -32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        double[][] doubleArray9 = bigMatrixImpl8.getDataAsDoubleArray();
        java.lang.String str10 = bigMatrixImpl8.toString();
        int int11 = bigMatrixImpl8.getRoundingMode();
        java.math.BigDecimal[] bigDecimalArray13 = bigMatrixImpl8.getRow(0);
        double[][] doubleArray14 = bigMatrixImpl8.getDataAsDoubleArray();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "BigMatrixImpl{{0},{0}}" + "'", str10, "BigMatrixImpl{{0},{0}}");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal21.pow((int) (byte) 100);
        double double24 = bigDecimal21.doubleValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl19.scalarAdd(bigDecimal21);
        int int26 = bigMatrixImpl19.getRoundingMode();
        int int27 = bigMatrixImpl19.getColumnDimension();
        int int28 = bigMatrixImpl19.getRoundingMode();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl14.getNorm();
        int int23 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) (byte) -100);
        java.math.BigDecimal bigDecimal26 = bigDecimal25.abs();
        java.math.BigDecimal bigDecimal28 = bigDecimal25.movePointRight((int) '4');
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl14.scalarAdd(bigDecimal25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix30 = bigMatrix29.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigMatrix29);
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal[] bigDecimalArray31 = bigMatrixImpl27.getColumn(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.solve(bigMatrix32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray39, bigDecimalArray47, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray56);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        int int64 = bigDecimal63.intValue();
        java.math.BigDecimal bigDecimal65 = bigDecimal60.min(bigDecimal63);
        java.math.BigInteger bigInteger66 = bigDecimal60.toBigInteger();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(bigInteger66);
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal70 = bigDecimal69.stripTrailingZeros();
        float float71 = bigDecimal69.floatValue();
        java.math.BigDecimal bigDecimal72 = bigDecimal67.multiply(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrix58.scalarAdd(bigDecimal72);
        java.math.BigInteger bigInteger74 = bigDecimal72.toBigInteger();
        boolean boolean75 = bigMatrixImpl31.equals((java.lang.Object) bigDecimal72);
        double[] doubleArray77 = bigMatrixImpl31.getColumnAsDoubleArray(0);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray77);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray77);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertTrue("'" + float71 + "' != '" + 97.0f + "'", float71 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[97.0, 97.0, 97.0, 97.0]");
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(realMatrix80);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getColumnDimension();
        bigMatrixImpl14.setScale(7);
        java.math.BigDecimal bigDecimal24 = bigMatrixImpl14.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(bigDecimal24);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        char[] charArray0 = null;
        java.math.MathContext mathContext3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray0, 0, 2805, mathContext3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        double[][] doubleArray11 = bigMatrix10.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray11);
        int int13 = bigMatrixImpl12.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl12.transpose();
        bigMatrixImpl12.setRoundingMode((int) (short) 2805);
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf(546084.0d);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl12.scalarAdd(bigDecimal18);
        double[][] doubleArray20 = bigMatrixImpl12.getDataAsDoubleArray();
        int int21 = bigMatrixImpl12.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray29);
        int int31 = bigMatrixImpl30.getRoundingMode();
        boolean boolean32 = bigMatrixImpl30.isSquare();
        bigMatrixImpl30.setRoundingMode((int) (byte) 10);
        boolean boolean35 = bigMatrixImpl30.isSquare();
        bigMatrixImpl30.setScale((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl12.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl18.getColumn(0);
        int int21 = bigMatrixImpl18.getRoundingMode();
        int int22 = bigMatrixImpl18.getScale();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl37.transpose();
        int int39 = bigMatrixImpl37.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl37.getDataRef();
        bigMatrixImpl37.setScale((int) (short) 100);
        boolean boolean43 = bigMatrixImpl37.isSingular();
        int int44 = bigMatrixImpl37.getScale();
        int int45 = bigMatrixImpl37.getColumnDimension();
        double[] doubleArray47 = bigMatrixImpl37.getRowAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl18.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        bigMatrixImpl18.setScale((int) ' ');
        bigMatrixImpl18.setScale((int) (byte) -54);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigMatrix48);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal36 = bigDecimal23.pow((int) ' ');
        java.math.BigDecimal bigDecimal37 = bigDecimal23.stripTrailingZeros();
        byte byte38 = bigDecimal37.byteValueExact();
        java.math.BigDecimal bigDecimal39 = bigDecimal37.abs();
        java.math.BigDecimal bigDecimal41 = bigDecimal39.setScale((int) (short) 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + byte38 + "' != '" + (byte) 0 + "'", byte38 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal41);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(bigMatrix9);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrix15.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
        int int18 = bigMatrixImpl17.getRoundingMode();
        java.math.BigDecimal bigDecimal19 = bigMatrixImpl17.getNorm();
        java.math.BigDecimal[][] bigDecimalArray20 = bigMatrixImpl17.getData();
        java.lang.String str21 = bigMatrixImpl17.toString();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(10);
        java.math.BigDecimal bigDecimal25 = bigDecimal23.scaleByPowerOfTen((int) (short) 400);
        boolean boolean26 = bigMatrixImpl17.equals((java.lang.Object) bigDecimal23);
        int int27 = bigMatrixImpl17.getScale();
        int int28 = bigMatrixImpl17.getScale();
        int int29 = bigMatrixImpl17.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 64 + "'", int27 == 64);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 64 + "'", int29 == 64);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = bigDecimal6.setScale(0);
        java.math.BigDecimal bigDecimal10 = bigDecimal9.plus();
        java.math.BigInteger bigInteger11 = bigDecimal10.toBigInteger();
        java.math.BigDecimal bigDecimal12 = bigDecimal4.add(bigDecimal10);
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray25 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl27.transpose();
        double[] doubleArray30 = bigMatrixImpl27.getRowAsDoubleArray((int) (short) 0);
        boolean boolean31 = bigMatrixImpl27.isSingular();
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl27.getData();
        int int33 = bigMatrixImpl27.getRoundingMode();
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal35, bigDecimal37 };
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray46);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrix47.getColumnMatrix(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl27.multiply(bigMatrix47);
        java.math.BigDecimal bigDecimal51 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal53 = bigDecimal51.movePointLeft((int) (byte) -1);
        java.math.RoundingMode roundingMode55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal56 = bigDecimal10.divide(bigDecimal51, 100, roundingMode55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal53);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        float float13 = bigDecimal11.floatValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.divideToIntegralValue(bigDecimal11);
        java.math.BigDecimal bigDecimal15 = bigDecimal11.ulp();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger18 = bigDecimal17.unscaledValue();
        short short19 = bigDecimal17.shortValueExact();
        java.lang.String str20 = bigDecimal17.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal17);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray21);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 97.0f + "'", float13 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 100 + "'", short19 == (short) 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigMatrix22);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) -100);
        java.math.BigInteger bigInteger2 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(bigInteger2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        java.lang.String str6 = bigDecimal5.toString();
        java.math.BigDecimal bigDecimal8 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal9 = bigDecimal8.stripTrailingZeros();
        int int10 = bigDecimal8.signum();
        java.math.BigDecimal[] bigDecimalArray11 = bigDecimal5.divideAndRemainder(bigDecimal8);
        java.math.BigDecimal bigDecimal13 = bigDecimal5.pow((int) 'a');
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        java.lang.String str16 = bigDecimal15.toString();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = bigDecimal15.pow((int) 'a');
        java.math.BigInteger bigInteger24 = bigDecimal15.toBigIntegerExact();
        java.math.BigDecimal bigDecimal25 = bigDecimal13.add(bigDecimal15);
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigInteger bigInteger36 = bigDecimal27.toBigIntegerExact();
        float float37 = bigDecimal27.floatValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal13.add(bigDecimal27);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal41 = bigDecimal27.divideToIntegralValue(bigDecimal40);
        java.math.BigDecimal bigDecimal42 = bigDecimal3.min(bigDecimal40);
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[] doubleArray51 = new double[] { 1.0d, 100.0f };
        double[] doubleArray54 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray55 = new double[][] { doubleArray45, doubleArray48, doubleArray51, doubleArray54 };
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray55);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray55);
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        int int65 = bigDecimal64.intValue();
        java.math.BigDecimal bigDecimal66 = bigDecimal61.min(bigDecimal64);
        java.math.BigInteger bigInteger67 = bigDecimal61.toBigInteger();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(bigInteger67);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrix59.scalarAdd(bigDecimal68);
        java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal(0.0d);
        java.lang.String str72 = bigDecimal71.toString();
        java.math.BigDecimal bigDecimal74 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal75 = bigDecimal74.stripTrailingZeros();
        int int76 = bigDecimal74.signum();
        java.math.BigDecimal[] bigDecimalArray77 = bigDecimal71.divideAndRemainder(bigDecimal74);
        java.math.BigDecimal bigDecimal79 = bigDecimal71.pow((int) 'a');
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(0.0d);
        java.lang.String str82 = bigDecimal81.toString();
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal85 = bigDecimal84.stripTrailingZeros();
        int int86 = bigDecimal84.signum();
        java.math.BigDecimal[] bigDecimalArray87 = bigDecimal81.divideAndRemainder(bigDecimal84);
        java.math.BigDecimal bigDecimal89 = bigDecimal81.pow((int) 'a');
        java.math.BigInteger bigInteger90 = bigDecimal81.toBigIntegerExact();
        java.math.BigDecimal bigDecimal91 = bigDecimal79.add(bigDecimal81);
        java.math.BigInteger bigInteger92 = bigDecimal91.unscaledValue();
        long long93 = bigDecimal91.longValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrix69.scalarAdd(bigDecimal91);
        java.lang.String str95 = bigDecimal91.toPlainString();
        java.math.MathContext mathContext96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal97 = bigDecimal3.multiply(bigDecimal91, mathContext96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray77);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray87);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigInteger90);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigInteger92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(bigMatrix94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "0" + "'", str95, "0");
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray3 = realMatrix1.getColumn(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray3);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = bigMatrix4.copy();
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double[] doubleArray18 = realMatrix11.operate(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix20.transpose();
        double[][] doubleArray22 = realMatrix20.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray22);
        int int26 = bigMatrixImpl25.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrix4.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 64 + "'", int26 == 64);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(4);
        int int2 = bigMatrix1.getRowDimension();
        double[][] doubleArray3 = bigMatrix1.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray3);
        org.junit.Assert.assertNotNull(bigMatrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(bigMatrix4);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int32 = bigDecimal31.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.scalarMultiply(bigDecimal31);
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        java.lang.String str36 = bigDecimal35.toString();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        int int40 = bigDecimal38.signum();
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal35.divideAndRemainder(bigDecimal38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        int int43 = bigMatrixImpl42.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl42.transpose();
        double[][] doubleArray45 = bigMatrix44.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrix44.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.multiply(bigMatrix44);
        int int48 = bigMatrixImpl27.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal49 = bigMatrixImpl27.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix18.scalarAdd((double) 6);
        int int21 = realMatrix18.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix18.scalarAdd(10.0d);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        double double30 = realMatrix29.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix29.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = realMatrix23.preMultiply(realMatrix32);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 1.0f);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrix42.scalarAdd((double) 6);
        int int45 = realMatrix42.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix42.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix35.preMultiply(realMatrix42);
        org.apache.commons.math.linear.RealMatrix realMatrix49 = realMatrix35.copy();
        double[] doubleArray54 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix55 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix56.scalarAdd((double) 6);
        double double59 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix35.preMultiply(realMatrix56);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix6.subtract(realMatrix60);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix61.copy();
        boolean boolean63 = realMatrix61.isSquare();
        double[] doubleArray68 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix69 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray68);
        double[] doubleArray74 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix75 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray74);
        double[] doubleArray76 = realMatrix69.operate(doubleArray74);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray74);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray74);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrix78.transpose();
        double[][] doubleArray80 = realMatrix78.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray80);
        boolean boolean82 = bigMatrixImpl81.isSingular();
        int int83 = bigMatrixImpl81.getScale();
        double[][] doubleArray84 = bigMatrixImpl81.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrix realMatrix85 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray84);
        boolean boolean86 = realMatrix85.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix88 = realMatrix85.scalarAdd(101.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrix61.multiply(realMatrix85);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrix61.getRowMatrix(1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 63.0d + "'", double59 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 64 + "'", int83 == 64);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix91);
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getRoundingMode();
        int int17 = bigMatrixImpl14.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getEntry((-2), 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double double7 = realMatrix6.getNorm();
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double double14 = realMatrix13.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix13.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix13.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix13.scalarAdd(1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarMultiply((double) 97);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix6.preMultiply(realMatrix19);
        double double23 = realMatrix22.getTrace();
        double[][] doubleArray24 = realMatrix22.getData();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 63.0d + "'", double7 == 63.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 2866.0d + "'", double23 == 2866.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(bigInteger29);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.multiply(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.negate();
        java.math.BigDecimal bigDecimal37 = bigDecimal21.add(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        float float41 = bigDecimal39.floatValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigInteger bigInteger63 = bigDecimal54.toBigIntegerExact();
        java.math.BigDecimal bigDecimal64 = bigDecimal52.add(bigDecimal54);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger68 = bigDecimal67.unscaledValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal65.add(bigDecimal67);
        java.math.BigDecimal bigDecimal70 = bigDecimal54.multiply(bigDecimal65);
        java.math.BigDecimal bigDecimal71 = bigDecimal42.divide(bigDecimal65);
        java.math.BigDecimal bigDecimal72 = bigDecimal36.remainder(bigDecimal42);
        double double73 = bigDecimal72.doubleValue();
        java.lang.String str74 = bigDecimal72.toString();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal("970");
        java.math.BigDecimal bigDecimal77 = bigDecimal72.divide(bigDecimal76);
        java.math.BigInteger bigInteger78 = bigDecimal72.toBigInteger();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 97.0f + "'", float41 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0" + "'", str74, "0");
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigInteger78);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix23.copy();
        boolean boolean38 = realMatrix37.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix37.transpose();
        double[] doubleArray44 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray44);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray44);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix46.scalarAdd((double) 6);
        double double49 = realMatrix46.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix46.copy();
        boolean boolean51 = realMatrix50.isSquare();
        int int52 = realMatrix50.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrix37.preMultiply(realMatrix50);
        double double54 = realMatrix53.getNorm();
        double[] doubleArray59 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix60 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray59);
        double[] doubleArray65 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray65);
        double[] doubleArray67 = realMatrix60.operate(doubleArray65);
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrix69.transpose();
        double[][] doubleArray71 = realMatrix69.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix72 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray71);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrix72.copy();
        double[] doubleArray78 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix79 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray78);
        double[] doubleArray84 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix85 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray84);
        double[] doubleArray86 = realMatrix79.operate(doubleArray84);
        org.apache.commons.math.linear.BigMatrix bigMatrix87 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray86);
        org.apache.commons.math.linear.BigMatrix bigMatrix88 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray86);
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray86);
        double[] doubleArray90 = realMatrix73.operate(doubleArray86);
        int int91 = realMatrix73.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrix53.preMultiply(realMatrix73);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrix73.copy();
        double[] doubleArray95 = realMatrix93.getRow(0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 63.0d + "'", double49 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 546084.0d + "'", double54 == 546084.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix87);
        org.junit.Assert.assertNotNull(bigMatrix88);
        org.junit.Assert.assertNotNull(bigMatrix89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-1.0, 52.0, 10.0, 0.0]");
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        boolean boolean23 = realMatrix7.isSingular();
        int int24 = realMatrix7.getRowDimension();
        double[][] doubleArray25 = realMatrix7.getData();
        int[] intArray28 = new int[] { '#', (short) 35 };
        int[] intArray34 = new int[] { (byte) 0, (short) -100, 0, (-100), (short) 31464 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix7.getSubMatrix(intArray28, intArray34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[35, 35]");
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, -100, 0, -100, 31464]");
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal39 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigInteger bigInteger47 = bigDecimal41.toBigInteger();
        java.math.BigDecimal bigDecimal48 = bigDecimal39.max(bigDecimal41);
        long long49 = bigDecimal48.longValueExact();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal((double) 10.0f);
        java.math.BigDecimal bigDecimal52 = bigDecimal48.min(bigDecimal51);
        java.math.BigDecimal bigDecimal53 = bigDecimal48.negate();
        java.math.BigDecimal bigDecimal55 = bigDecimal53.pow(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal55);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        float float15 = bigDecimal13.floatValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.divideToIntegralValue(bigDecimal13);
        java.math.BigDecimal bigDecimal17 = bigDecimal1.max(bigDecimal11);
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        float float21 = bigDecimal19.floatValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.max(bigDecimal19);
        float float23 = bigDecimal19.floatValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal19.setScale((int) (byte) 10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 97.0f + "'", float15 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + float21 + "' != '" + 97.0f + "'", float21 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 97.0f + "'", float23 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal25);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double double9 = realMatrix6.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix6.copy();
        double[] doubleArray15 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix17.scalarAdd((double) 6);
        int int20 = realMatrix17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix17.scalarAdd(10.0d);
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double double29 = realMatrix28.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix22.preMultiply(realMatrix31);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 1.0f);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix41.scalarAdd((double) 6);
        int int44 = realMatrix41.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix41.scalarAdd(10.0d);
        double[] doubleArray51 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix52 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray51);
        double double53 = realMatrix52.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrix52.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrix46.preMultiply(realMatrix55);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix56.scalarAdd((double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix32.subtract(realMatrix58);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix32.scalarMultiply((double) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix10.multiply(realMatrix32);
        double[] doubleArray67 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix68 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray67);
        double[] doubleArray73 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix74 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray73);
        double[] doubleArray75 = realMatrix68.operate(doubleArray73);
        double[] doubleArray80 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix81 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray80);
        org.apache.commons.math.linear.RealMatrix realMatrix82 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray80);
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrix82.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix85 = realMatrix68.multiply(realMatrix82);
        boolean boolean86 = realMatrix85.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrix32.multiply(realMatrix85);
        double double88 = realMatrix32.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix89 = realMatrix32.transpose();
        double double90 = realMatrix89.getDeterminant();
        double[][] doubleArray91 = realMatrix89.getData();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 63.0d + "'", double9 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 8667.0d + "'", double88 == 8667.0d);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 8667.0d + "'", double90 == 8667.0d);
        org.junit.Assert.assertNotNull(doubleArray91);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal10.divideAndRemainder(bigDecimal12);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.multiply(bigDecimal12);
        java.math.BigDecimal bigDecimal15 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) (byte) 97);
        java.math.BigDecimal bigDecimal18 = bigDecimal15.subtract(bigDecimal17);
        java.math.BigDecimal bigDecimal19 = bigDecimal15.ulp();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 32L);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getDataRef();
        java.lang.String str23 = bigMatrixImpl14.toString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str23, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 4, (int) (byte) 6);
        int int3 = bigDecimal2.scale();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int7 = bigMatrixImpl6.getRoundingMode();
        int int8 = bigMatrixImpl6.getColumnDimension();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (byte) 1);
        int int2 = bigDecimal1.signum();
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.ZERO;
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(0.0d);
        int int6 = bigDecimal5.intValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal5.min(bigDecimal8);
        java.math.BigDecimal[] bigDecimalArray11 = new java.math.BigDecimal[] { bigDecimal10 };
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal[][] bigDecimalArray28 = new java.math.BigDecimal[][] { bigDecimalArray11, bigDecimalArray19, bigDecimalArray27 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getDataRef();
        java.math.BigDecimal bigDecimal33 = bigMatrixImpl31.getNorm();
        boolean boolean34 = bigMatrixImpl31.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl31.copy();
        double[] doubleArray37 = bigMatrixImpl31.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray39 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray40 = new java.lang.String[][] { strArray39 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(strArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl31.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl41);
        java.math.BigDecimal bigDecimal43 = bigMatrixImpl31.getNorm();
        java.math.BigDecimal[][] bigDecimalArray44 = bigMatrixImpl31.getData();
        int int45 = bigMatrixImpl31.getScale();
        boolean boolean46 = bigDecimal3.equals((java.lang.Object) bigMatrixImpl31);
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        java.lang.String str49 = bigDecimal48.toString();
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal52 = bigDecimal51.stripTrailingZeros();
        int int53 = bigDecimal51.signum();
        java.math.BigDecimal[] bigDecimalArray54 = bigDecimal48.divideAndRemainder(bigDecimal51);
        java.math.BigDecimal bigDecimal56 = bigDecimal48.pow((int) 'a');
        java.lang.String str57 = bigDecimal48.toString();
        java.math.BigDecimal bigDecimal59 = bigDecimal48.scaleByPowerOfTen((int) ' ');
        boolean boolean60 = bigMatrixImpl31.equals((java.lang.Object) bigDecimal59);
        java.math.MathContext mathContext61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal62 = bigDecimal1.remainder(bigDecimal59, mathContext61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 64 + "'", int45 == 64);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        int int24 = bigDecimal21.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl14.scalarAdd(bigDecimal21);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal26 = bigMatrixImpl14.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigMatrix25);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl8.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = bigMatrixImpl8.getRowMatrix(0);
        boolean boolean14 = bigMatrixImpl8.isSingular();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.toBigInteger();
        java.math.BigDecimal bigDecimal4 = bigDecimal2.ulp();
        java.math.BigDecimal bigDecimal6 = bigDecimal4.scaleByPowerOfTen(100);
        long long7 = bigDecimal4.longValue();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) '4');
        int int2 = bigDecimal1.intValue();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        java.lang.String[] strArray11 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl5.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl16);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl5.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        double[] doubleArray24 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        double double26 = realMatrix25.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix25.scalarAdd((double) '4');
        boolean boolean29 = bigMatrixImpl19.equals((java.lang.Object) realMatrix28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.getColumnMatrix((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl27.getData();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal[][] bigDecimalArray59 = new java.math.BigDecimal[][] { bigDecimalArray42, bigDecimalArray50, bigDecimalArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        java.math.BigDecimal[][] bigDecimalArray63 = bigMatrixImpl62.getDataRef();
        bigMatrixImpl62.setRoundingMode((int) '4');
        double[][] doubleArray66 = bigMatrixImpl62.getDataAsDoubleArray();
        boolean boolean67 = bigMatrixImpl27.equals((java.lang.Object) doubleArray66);
        bigMatrixImpl27.setRoundingMode((-35));
        double[][] doubleArray70 = bigMatrixImpl27.getDataAsDoubleArray();
        int int71 = bigMatrixImpl27.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray73 = bigMatrixImpl27.getRowAsDoubleArray(110);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal16.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl14.preMultiply(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrix39.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray40);
        int int42 = bigMatrixImpl41.getRoundingMode();
        java.math.BigDecimal bigDecimal43 = bigMatrixImpl41.getNorm();
        java.math.BigDecimal[] bigDecimalArray45 = bigMatrixImpl41.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray45);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray45);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray45);
        boolean boolean49 = bigMatrixImpl23.equals((java.lang.Object) bigMatrix48);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrix51.inverse();
        int int53 = realMatrix52.getRowDimension();
        boolean boolean54 = bigMatrixImpl23.equals((java.lang.Object) int53);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        boolean boolean17 = bigMatrixImpl14.isSingular();
        java.lang.String str18 = bigMatrixImpl14.toString();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.lang.String str20 = bigMatrixImpl14.toString();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = bigMatrixImpl14.getEntryAsDouble((int) ' ', 2881);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str18, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str20, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) -100, (int) (short) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: row and column dimensions must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getDataRef();
        int int23 = bigMatrixImpl14.getScale();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = bigMatrixImpl14.getColumnAsDoubleArray((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 64 + "'", int23 == 64);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.min(bigDecimal7);
        short short15 = bigDecimal1.shortValueExact();
        float float16 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        long long20 = bigDecimal18.longValue();
        long long21 = bigDecimal18.longValueExact();
        int int22 = bigDecimal18.precision();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        long long26 = bigDecimal24.longValue();
        long long27 = bigDecimal24.longValueExact();
        java.math.BigDecimal bigDecimal28 = bigDecimal18.add(bigDecimal24);
        java.math.BigDecimal bigDecimal30 = bigDecimal24.pow(3);
        java.math.BigInteger bigInteger31 = bigDecimal30.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = bigDecimal1.max(bigDecimal30);
        int int33 = bigDecimal30.scale();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.movePointLeft((-32));
        java.lang.String str36 = bigDecimal35.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSingular();
        boolean boolean31 = bigMatrixImpl27.isSingular();
        double[][] doubleArray32 = bigMatrixImpl27.getDataAsDoubleArray();
        java.math.BigDecimal[] bigDecimalArray34 = bigMatrixImpl27.getRow((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal35 = bigMatrixImpl27.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(charArray2, (int) (short) 10, (-200));
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        java.lang.String[] strArray1 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix12 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray15 = bigMatrix13.getRow((-100));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(bigMatrix2);
        org.junit.Assert.assertNotNull(bigMatrix3);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(bigMatrix9);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(bigMatrix11);
        org.junit.Assert.assertNotNull(bigMatrix12);
        org.junit.Assert.assertNotNull(bigMatrix13);
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.lang.String str17 = bigMatrixImpl14.toString();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = bigMatrixImpl14.getColumnAsDoubleArray(52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str17, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        boolean boolean18 = bigMatrixImpl17.isSingular();
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray23 = bigDecimal20.divideAndRemainder(bigDecimal22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23);
        double[] doubleArray26 = bigMatrixImpl24.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl24.copy();
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray40 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39 };
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl42.transpose();
        int int44 = bigMatrixImpl42.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl42.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl24.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl17.preMultiply(bigMatrix46);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigDecimal[] bigDecimalArray63 = new java.math.BigDecimal[] { bigDecimal62 };
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal65.min(bigDecimal68);
        java.math.BigDecimal[] bigDecimalArray71 = new java.math.BigDecimal[] { bigDecimal70 };
        java.math.BigDecimal[][] bigDecimalArray72 = new java.math.BigDecimal[][] { bigDecimalArray55, bigDecimalArray63, bigDecimalArray71 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        java.math.BigDecimal[][] bigDecimalArray76 = bigMatrixImpl75.getDataRef();
        java.math.BigDecimal bigDecimal77 = bigMatrixImpl75.getNorm();
        int int78 = bigMatrixImpl75.getColumnDimension();
        bigMatrixImpl75.setRoundingMode((int) (byte) -100);
        bigMatrixImpl75.setScale(10);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl17.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrixImpl17.getColumnMatrix((int) (byte) 32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(bigMatrix83);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray3 = realMatrix1.getColumn(4);
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrix1.inverse();
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        double[] doubleArray23 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray23);
        double[] doubleArray25 = realMatrix18.operate(doubleArray23);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray25);
        double[] doubleArray27 = realMatrix12.preMultiply(doubleArray25);
        boolean boolean28 = realMatrix12.isSingular();
        int int29 = realMatrix12.getRowDimension();
        double[][] doubleArray30 = realMatrix12.getData();
        double[] doubleArray35 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray35);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray35);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix37.scalarAdd((double) 6);
        int int40 = realMatrix37.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix37.scalarAdd(10.0d);
        double[] doubleArray47 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray47);
        double double49 = realMatrix48.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrix48.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrix42.preMultiply(realMatrix51);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = realMatrix52.scalarAdd((double) 1.0f);
        double[] doubleArray59 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix60 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray59);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray59);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrix61.scalarAdd((double) 6);
        int int64 = realMatrix61.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrix61.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrix54.preMultiply(realMatrix61);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrix54.copy();
        boolean boolean69 = realMatrix68.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrix68.transpose();
        double[] doubleArray75 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray75);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray75);
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrix77.scalarAdd((double) 6);
        double double80 = realMatrix77.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrix77.copy();
        boolean boolean82 = realMatrix81.isSquare();
        int int83 = realMatrix81.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix84 = realMatrix68.preMultiply(realMatrix81);
        int int85 = realMatrix68.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix86 = realMatrix12.multiply(realMatrix68);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrix4.solve(realMatrix68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-2805.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 63.0d + "'", double80 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(realMatrix86);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix30 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray28);
        java.math.BigDecimal[] bigDecimalArray34 = bigMatrix32.getRow(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        float float13 = bigDecimal11.floatValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.divideToIntegralValue(bigDecimal11);
        java.math.BigDecimal bigDecimal15 = bigDecimal11.ulp();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger18 = bigDecimal17.unscaledValue();
        short short19 = bigDecimal17.shortValueExact();
        java.lang.String str20 = bigDecimal17.toEngineeringString();
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal15.divideAndRemainder(bigDecimal17);
        java.lang.String str22 = bigDecimal15.toEngineeringString();
        int int23 = bigDecimal15.intValueExact();
        double[] doubleArray30 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray37 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray44 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray51 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray52 = new double[][] { doubleArray30, doubleArray37, doubleArray44, doubleArray51 };
        org.apache.commons.math.linear.RealMatrix realMatrix53 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray52);
        java.lang.Class<?> wildcardClass54 = doubleArray52.getClass();
        boolean boolean55 = bigDecimal15.equals((java.lang.Object) wildcardClass54);
        java.math.MathContext mathContext56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal57 = bigDecimal15.round(mathContext56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 97.0f + "'", float13 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 100 + "'", short19 == (short) 100);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100" + "'", str20, "100");
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        boolean boolean10 = bigMatrixImpl8.isSquare();
        bigMatrixImpl8.setRoundingMode((int) (byte) 10);
        boolean boolean13 = bigMatrixImpl8.isSquare();
        bigMatrixImpl8.setScale((-1));
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray20);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        double[] doubleArray34 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray34);
        double[] doubleArray36 = realMatrix29.operate(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray36);
        double[] doubleArray38 = realMatrix23.preMultiply(doubleArray36);
        org.apache.commons.math.linear.RealMatrix realMatrix39 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray38);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray38);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray44 = bigMatrixImpl8.solve(doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(bigMatrix43);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal37 = bigDecimal23.divideToIntegralValue(bigDecimal36);
        java.math.BigDecimal bigDecimal40 = bigDecimal37.setScale((int) (byte) 0, (int) (short) 1);
        java.math.BigDecimal bigDecimal41 = bigDecimal37.stripTrailingZeros();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        int int21 = bigMatrixImpl14.getRoundingMode();
        int int22 = bigMatrixImpl14.getColumnDimension();
        int int23 = bigMatrixImpl14.getRoundingMode();
        int int24 = bigMatrixImpl14.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl14.copy();
        int int26 = bigMatrixImpl14.getScale();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = bigMatrixImpl14.getColumnAsDoubleArray((int) (short) 35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 64 + "'", int26 == 64);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("10");
        int int2 = bigDecimal1.signum();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal4.divideAndRemainder(bigDecimal6);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        double[] doubleArray10 = bigMatrixImpl8.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger13 = bigDecimal12.unscaledValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal12.stripTrailingZeros();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        long long18 = bigDecimal16.longValue();
        long long19 = bigDecimal16.longValueExact();
        short short20 = bigDecimal16.shortValueExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal12.min(bigDecimal16);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl8.scalarMultiply(bigDecimal12);
        java.math.BigDecimal bigDecimal23 = bigDecimal1.divideToIntegralValue(bigDecimal12);
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl38.transpose();
        boolean boolean40 = bigMatrixImpl38.isSingular();
        double[] doubleArray42 = bigMatrixImpl38.getColumnAsDoubleArray(0);
        int int43 = bigMatrixImpl38.getRoundingMode();
        boolean boolean44 = bigMatrixImpl38.isSingular();
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl38.getNorm();
        java.math.MathContext mathContext46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal47 = bigDecimal23.divide(bigDecimal45, mathContext46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + short20 + "' != '" + (short) 0 + "'", short20 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(bigDecimal45);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.lang.String str10 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigInteger bigInteger22 = bigDecimal13.toBigIntegerExact();
        int int23 = bigDecimal13.precision();
        java.math.BigInteger bigInteger24 = bigDecimal13.toBigInteger();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(bigInteger24, 0);
        int int27 = bigDecimal1.compareTo(bigDecimal26);
        java.math.MathContext mathContext29 = null;
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal((double) (byte) 0, mathContext29);
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigInteger bigInteger38 = bigDecimal32.toBigInteger();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(bigInteger38);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(bigInteger38);
        java.math.BigDecimal bigDecimal41 = bigDecimal30.add(bigDecimal40);
        java.math.BigDecimal bigDecimal43 = bigDecimal40.movePointLeft(0);
        java.math.BigDecimal bigDecimal44 = bigDecimal26.add(bigDecimal40);
        short short45 = bigDecimal44.shortValueExact();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 0 + "'", short45 == (short) 0);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix5.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double9 = realMatrix8.getTrace();
        boolean boolean10 = realMatrix8.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrix8.scalarMultiply((double) 100);
        int int13 = realMatrix12.getColumnDimension();
        boolean boolean14 = realMatrix12.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix12.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix5.multiply(realMatrix15);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix5.scalarMultiply((-58.0d));
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        java.lang.String str21 = bigDecimal20.toString();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        int int25 = bigDecimal23.signum();
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal20.divideAndRemainder(bigDecimal23);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        int int28 = bigMatrixImpl27.getRoundingMode();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        bigMatrixImpl27.setRoundingMode((int) (byte) 10);
        int int32 = bigMatrixImpl27.getRoundingMode();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        java.lang.String str35 = bigDecimal34.toString();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        int int39 = bigDecimal37.signum();
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal34.divideAndRemainder(bigDecimal37);
        java.math.BigDecimal bigDecimal42 = bigDecimal34.pow((int) 'a');
        java.math.BigInteger bigInteger43 = bigDecimal34.toBigIntegerExact();
        float float44 = bigDecimal34.floatValue();
        double[] doubleArray49 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix50 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray49);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double[] doubleArray57 = realMatrix50.operate(doubleArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray57);
        java.math.BigDecimal bigDecimal59 = bigMatrix58.getNorm();
        java.math.BigDecimal bigDecimal60 = bigDecimal34.subtract(bigDecimal59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl27.scalarAdd(bigDecimal60);
        java.math.BigDecimal bigDecimal64 = bigMatrixImpl27.getEntry(0, 0);
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        java.lang.String str67 = bigDecimal66.toString();
        java.math.BigDecimal bigDecimal69 = bigDecimal66.setScale(0);
        double[] doubleArray74 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix75 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray74);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray74);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrix76.scalarAdd((double) 6);
        int int79 = realMatrix76.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrix76.scalarAdd(10.0d);
        double[] doubleArray86 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix87 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray86);
        double double88 = realMatrix87.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix90 = realMatrix87.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix91 = realMatrix81.preMultiply(realMatrix90);
        boolean boolean92 = bigDecimal69.equals((java.lang.Object) realMatrix81);
        org.apache.commons.math.linear.RealMatrix realMatrix93 = realMatrix81.transpose();
        double[] doubleArray95 = realMatrix81.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix96 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray95);
        boolean boolean97 = bigMatrixImpl27.equals((java.lang.Object) doubleArray95);
        org.apache.commons.math.linear.RealMatrix realMatrix98 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray95);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray99 = realMatrix5.preMultiply(doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.0f + "'", float44 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 52.0d + "'", double88 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(realMatrix91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(realMatrix93);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[62.0]");
        org.junit.Assert.assertNotNull(realMatrix96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(realMatrix98);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = bigMatrix1.inverse();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix4 = bigMatrix2.getColumnMatrix(4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix1);
        org.junit.Assert.assertNotNull(bigMatrix2);
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        float float5 = bigDecimal2.floatValue();
        java.lang.String str6 = bigDecimal2.toEngineeringString();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        long long10 = bigDecimal8.longValue();
        long long11 = bigDecimal8.longValueExact();
        int int12 = bigDecimal8.precision();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        long long16 = bigDecimal14.longValue();
        long long17 = bigDecimal14.longValueExact();
        java.math.BigDecimal bigDecimal18 = bigDecimal8.add(bigDecimal14);
        java.math.BigDecimal bigDecimal20 = bigDecimal14.pow(3);
        java.math.BigInteger bigInteger21 = bigDecimal20.toBigIntegerExact();
        java.math.BigDecimal bigDecimal22 = bigDecimal20.stripTrailingZeros();
        java.math.BigDecimal bigDecimal23 = bigDecimal2.add(bigDecimal20);
        java.lang.String str24 = bigDecimal23.toPlainString();
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 100.0f + "'", float5 == 100.0f);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "100" + "'", str24, "100");
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal1.ulp();
        java.lang.String str13 = bigDecimal1.toEngineeringString();
        int int14 = bigDecimal1.intValue();
        long long15 = bigDecimal1.longValueExact();
        double double16 = bigDecimal1.doubleValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 4);
        java.math.MathContext mathContext2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal3 = bigDecimal1.plus(mathContext2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrix1.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrix3.copy();
        double double5 = realMatrix3.getNorm();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal11 = bigDecimal1.subtract(bigDecimal10);
        java.math.BigDecimal bigDecimal12 = bigDecimal10.ulp();
        java.lang.String str13 = bigDecimal12.toEngineeringString();
        byte byte14 = bigDecimal12.byteValueExact();
        int int15 = bigDecimal12.precision();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 1 + "'", byte14 == (byte) 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) -100);
        java.math.BigInteger bigInteger2 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(bigInteger2);
        java.math.BigInteger bigInteger4 = bigDecimal3.toBigInteger();
        int int5 = bigDecimal3.signum();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(bigInteger4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal19 = bigMatrixImpl14.getNorm();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        java.lang.String str21 = bigMatrixImpl14.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl14.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigMatrix22);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        double double2 = realMatrix1.getNorm();
        double double3 = realMatrix1.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrix1.copy();
        int int5 = realMatrix4.getColumnDimension();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) (byte) -32);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.abs();
        org.junit.Assert.assertNotNull(bigDecimal2);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigInteger bigInteger63 = bigDecimal57.toBigInteger();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(bigInteger63);
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal67 = bigDecimal66.stripTrailingZeros();
        float float68 = bigDecimal66.floatValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal64.multiply(bigDecimal66);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrix55.scalarAdd(bigDecimal69);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl27.add(bigMatrix55);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = bigMatrixImpl27.getColumnMatrix(0);
        int[] intArray74 = null;
        int[] intArray78 = new int[] { (byte) -1, (byte) 35, ' ' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl27.getSubMatrix(intArray74, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 97.0f + "'", float68 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 32]");
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) 0);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.pow(4);
        java.math.MathContext mathContext4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal5 = bigDecimal3.plus(mathContext4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal3);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.stripTrailingZeros();
        int int9 = bigDecimal8.signum();
        int int10 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal13 = bigDecimal12.negate();
        int int14 = bigDecimal13.scale();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal((double) 2805.0f);
        java.math.BigDecimal bigDecimal18 = bigDecimal16.setScale((int) '4');
        java.math.BigDecimal bigDecimal19 = bigDecimal13.multiply(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal8.divide(bigDecimal16);
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        boolean boolean35 = bigMatrix34.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrix34.copy();
        java.math.BigDecimal bigDecimal37 = bigMatrix34.getNorm();
        java.math.BigDecimal bigDecimal38 = bigDecimal37.abs();
        java.math.RoundingMode roundingMode40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal41 = bigDecimal8.divide(bigDecimal37, (int) (byte) -32, roundingMode40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal31 = bigMatrixImpl27.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((double) (short) -100);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarAdd(bigDecimal34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl27.copy();
        bigMatrixImpl27.setScale(970);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix36);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigInteger bigInteger10 = bigDecimal1.toBigIntegerExact();
        float float11 = bigDecimal1.floatValue();
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double[] doubleArray22 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        double[] doubleArray24 = realMatrix17.operate(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray24);
        java.math.BigDecimal bigDecimal26 = bigMatrix25.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal1.subtract(bigDecimal26);
        int int28 = bigDecimal27.signum();
        java.math.BigInteger bigInteger29 = bigDecimal27.toBigInteger();
        java.math.MathContext mathContext30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(bigInteger29, mathContext30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(bigInteger29);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(546084.0d, mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.copy();
        java.math.BigDecimal bigDecimal16 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal17 = bigDecimal16.abs();
        java.math.BigDecimal bigDecimal18 = bigDecimal16.stripTrailingZeros();
        int int19 = bigDecimal18.intValueExact();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 400 + "'", int19 == 400);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        int int3 = bigMatrixImpl2.getColumnDimension();
        bigMatrixImpl2.setRoundingMode((int) (byte) 110);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl2.getRowMatrix(2805);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal32 = bigMatrix31.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = bigDecimal23.setScale(0);
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        boolean boolean49 = bigDecimal26.equals((java.lang.Object) realMatrix38);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal26);
        double[][] doubleArray51 = bigMatrix50.getDataAsDoubleArray();
        org.apache.commons.math.linear.RealMatrix realMatrix52 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray51);
        org.apache.commons.math.linear.RealMatrix realMatrix53 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realMatrix53);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((long) 98, mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        java.math.BigDecimal bigDecimal16 = bigDecimal13.setScale((int) (short) -1, 0);
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        long long20 = bigDecimal18.longValue();
        long long21 = bigDecimal18.longValueExact();
        int int22 = bigDecimal18.precision();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        long long26 = bigDecimal24.longValue();
        long long27 = bigDecimal24.longValueExact();
        java.math.BigDecimal bigDecimal28 = bigDecimal18.add(bigDecimal24);
        java.math.BigDecimal bigDecimal29 = bigDecimal18.ulp();
        java.lang.String str30 = bigDecimal18.toEngineeringString();
        int int31 = bigDecimal18.intValue();
        java.math.RoundingMode roundingMode33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal34 = bigDecimal13.divide(bigDecimal18, (int) (short) -3072, roundingMode33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 97.0f + "'", float12 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray17);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigMatrix19);
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrix15.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
        int int18 = bigMatrixImpl17.getRoundingMode();
        java.math.BigDecimal bigDecimal19 = bigMatrixImpl17.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = bigMatrixImpl17.getRow(2);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = bigMatrixImpl17.getEntryAsDouble(2805, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.copy();
        int int22 = bigMatrixImpl14.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl14.getColumnMatrix((int) (byte) -112);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal16.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl14.preMultiply(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        boolean boolean22 = bigMatrixImpl21.isSingular();
        boolean boolean23 = bigMatrixImpl21.isSingular();
        int[] intArray29 = new int[] { (byte) 52, 8667, (byte) 85, 7, (short) 970 };
        int[] intArray30 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl21.getSubMatrix(intArray29, intArray30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[52, 8667, 85, 7, 970]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigInteger bigInteger8 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger8);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(bigInteger8);
        java.math.MathContext mathContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(bigInteger8, mathContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigInteger8);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl18.getColumn(0);
        int int21 = bigMatrixImpl18.getRoundingMode();
        int int22 = bigMatrixImpl18.getScale();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl37.transpose();
        int int39 = bigMatrixImpl37.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl37.getDataRef();
        bigMatrixImpl37.setScale((int) (short) 100);
        boolean boolean43 = bigMatrixImpl37.isSingular();
        int int44 = bigMatrixImpl37.getScale();
        int int45 = bigMatrixImpl37.getColumnDimension();
        double[] doubleArray47 = bigMatrixImpl37.getRowAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl18.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl18.getRowMatrix(3);
        double[] doubleArray52 = bigMatrixImpl18.getColumnAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(bigMatrix53);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.copy();
        java.math.BigDecimal bigDecimal16 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal17 = bigDecimal16.abs();
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        boolean boolean36 = bigMatrixImpl32.isSingular();
        java.math.BigDecimal[][] bigDecimalArray37 = bigMatrixImpl32.getData();
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl32.getNorm();
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray51 = new double[][] { doubleArray41, doubleArray44, doubleArray47, doubleArray50 };
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray51);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray51);
        boolean boolean55 = bigDecimal38.equals((java.lang.Object) doubleArray51);
        java.math.BigDecimal bigDecimal57 = bigDecimal16.divide(bigDecimal38, (int) (short) 1);
        java.math.BigDecimal bigDecimal58 = bigDecimal38.ulp();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        java.lang.String str61 = bigDecimal60.toString();
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal64 = bigDecimal63.stripTrailingZeros();
        int int65 = bigDecimal63.signum();
        java.math.BigDecimal[] bigDecimalArray66 = bigDecimal60.divideAndRemainder(bigDecimal63);
        java.math.BigDecimal bigDecimal68 = bigDecimal60.pow((int) 'a');
        java.math.BigInteger bigInteger69 = bigDecimal60.toBigIntegerExact();
        float float70 = bigDecimal60.floatValue();
        double[] doubleArray75 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray75);
        double[] doubleArray81 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix82 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray81);
        double[] doubleArray83 = realMatrix76.operate(doubleArray81);
        org.apache.commons.math.linear.BigMatrix bigMatrix84 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray83);
        java.math.BigDecimal bigDecimal85 = bigMatrix84.getNorm();
        java.math.BigDecimal bigDecimal86 = bigDecimal60.subtract(bigDecimal85);
        int int87 = bigDecimal86.signum();
        java.math.BigDecimal bigDecimal88 = bigDecimal86.ulp();
        java.math.BigDecimal bigDecimal89 = bigDecimal86.stripTrailingZeros();
        java.math.BigDecimal bigDecimal90 = bigDecimal38.max(bigDecimal89);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0" + "'", str61, "0");
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray66);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertTrue("'" + float70 + "' != '" + 0.0f + "'", float70 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix84);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigDecimal90);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.copy();
        java.math.BigDecimal bigDecimal16 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal17 = bigDecimal16.abs();
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        boolean boolean36 = bigMatrixImpl32.isSingular();
        java.math.BigDecimal[][] bigDecimalArray37 = bigMatrixImpl32.getData();
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl32.getNorm();
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray51 = new double[][] { doubleArray41, doubleArray44, doubleArray47, doubleArray50 };
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray51);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray51);
        boolean boolean55 = bigDecimal38.equals((java.lang.Object) doubleArray51);
        java.math.BigDecimal bigDecimal57 = bigDecimal16.divide(bigDecimal38, (int) (short) 1);
        int int58 = bigDecimal57.signum();
        double[] doubleArray65 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray72 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray79 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray86 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray87 = new double[][] { doubleArray65, doubleArray72, doubleArray79, doubleArray86 };
        org.apache.commons.math.linear.RealMatrix realMatrix88 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray87);
        double[][] doubleArray89 = realMatrix88.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix90 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray89);
        boolean boolean91 = realMatrix90.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrix90.transpose();
        boolean boolean93 = bigDecimal57.equals((java.lang.Object) realMatrix92);
        java.math.BigDecimal bigDecimal94 = bigDecimal57.negate();
        java.math.BigDecimal bigDecimal97 = bigDecimal57.setScale((int) 'a', (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigDecimal97);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal23 = bigDecimal22.negate();
        int int24 = bigDecimal23.scale();
        boolean boolean25 = bigMatrixImpl20.equals((java.lang.Object) bigDecimal23);
        int int26 = bigMatrixImpl20.getColumnDimension();
        java.math.BigDecimal[] bigDecimalArray28 = bigMatrixImpl20.getColumn(0);
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl20.getNorm();
        int int30 = bigMatrixImpl20.getColumnDimension();
        int int31 = bigMatrixImpl20.getRoundingMode();
        int[] intArray33 = new int[] { 64 };
        int[] intArray40 = new int[] { (short) 10, 'a', (short) 0, (short) 400, (byte) 4, 4 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl20.getSubMatrix(intArray33, intArray40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[64]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[10, 97, 0, 400, 4, 4]");
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException1 = new org.apache.commons.math.linear.InvalidMatrixException("org.apache.commons.math.linear.InvalidMatrixException: 0.000");
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal10.divideAndRemainder(bigDecimal12);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.multiply(bigDecimal12);
        java.math.BigDecimal bigDecimal15 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) (byte) 97);
        java.math.BigDecimal bigDecimal18 = bigDecimal15.subtract(bigDecimal17);
        java.math.BigDecimal bigDecimal20 = bigDecimal15.pow((int) (short) 97);
        java.math.BigInteger bigInteger21 = bigDecimal20.toBigInteger();
        java.math.MathContext mathContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(bigInteger21, (int) 'a', mathContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigInteger21);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        short short3 = bigDecimal1.shortValueExact();
        java.math.BigInteger bigInteger4 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(bigInteger4, (int) (byte) 10);
        java.math.MathContext mathContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger4, (-200), mathContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 100 + "'", short3 == (short) 100);
        org.junit.Assert.assertNotNull(bigInteger4);
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray20);
        int int22 = bigMatrixImpl21.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl21.copy();
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl38.transpose();
        int int40 = bigMatrixImpl38.getColumnDimension();
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal43 = bigDecimal42.stripTrailingZeros();
        int int44 = bigDecimal42.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl38.scalarMultiply(bigDecimal42);
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        java.lang.String str48 = bigDecimal47.toString();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        int int52 = bigDecimal50.signum();
        java.math.BigDecimal[] bigDecimalArray53 = bigDecimal47.divideAndRemainder(bigDecimal50);
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal56 = bigDecimal55.stripTrailingZeros();
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal[] bigDecimalArray61 = new java.math.BigDecimal[] { bigDecimal47, bigDecimal56, bigDecimal58, bigDecimal60 };
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray61);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray61);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray61);
        java.math.BigDecimal[] bigDecimalArray65 = bigMatrixImpl38.preMultiply(bigDecimalArray61);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray65);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray68 = bigMatrixImpl21.operate(bigDecimalArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(bigMatrix67);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException1 = new org.apache.commons.math.linear.MatrixIndexException("1.0");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException3 = new org.apache.commons.math.linear.MatrixIndexException("0.0000004");
        matrixIndexException1.addSuppressed((java.lang.Throwable) matrixIndexException3);
        java.lang.String str5 = matrixIndexException3.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.linear.MatrixIndexException: 0.0000004" + "'", str5, "org.apache.commons.math.linear.MatrixIndexException: 0.0000004");
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 85);
        org.junit.Assert.assertNotNull(realMatrix1);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl14.copy();
        java.lang.String str19 = bigMatrixImpl14.toString();
        int int20 = bigMatrixImpl14.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str19, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.plus();
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal6 = bigDecimal5.stripTrailingZeros();
        float float7 = bigDecimal5.floatValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal5.ulp();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        java.lang.String str11 = bigDecimal10.toString();
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        int int15 = bigDecimal13.signum();
        java.math.BigDecimal[] bigDecimalArray16 = bigDecimal10.divideAndRemainder(bigDecimal13);
        java.math.BigDecimal bigDecimal18 = bigDecimal10.pow((int) 'a');
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        java.lang.String str21 = bigDecimal20.toString();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        int int25 = bigDecimal23.signum();
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal20.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal bigDecimal28 = bigDecimal20.pow((int) 'a');
        java.math.BigInteger bigInteger29 = bigDecimal20.toBigIntegerExact();
        java.math.BigDecimal bigDecimal30 = bigDecimal18.add(bigDecimal20);
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger34 = bigDecimal33.unscaledValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal31.add(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = bigDecimal20.multiply(bigDecimal31);
        java.math.BigDecimal bigDecimal37 = bigDecimal8.divide(bigDecimal31);
        int int38 = bigDecimal1.compareTo(bigDecimal8);
        int int39 = bigDecimal8.intValueExact();
        int int40 = bigDecimal8.scale();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 97.0f + "'", float7 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        java.math.BigDecimal bigDecimal6 = bigDecimal3.movePointLeft((-1));
        long long7 = bigDecimal6.longValueExact();
        int int8 = bigDecimal6.scale();
        java.math.BigDecimal bigDecimal9 = bigDecimal6.stripTrailingZeros();
        java.lang.String str10 = bigDecimal6.toPlainString();
        java.math.MathContext mathContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal12 = bigDecimal6.negate(mathContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 970L + "'", long7 == 970L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "970" + "'", str10, "970");
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.transpose();
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl14.getNorm();
        int int23 = bigDecimal22.precision();
        java.math.BigDecimal bigDecimal24 = bigDecimal22.abs();
        java.math.BigDecimal bigDecimal26 = bigDecimal22.movePointLeft((int) (short) -2805);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal26);
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal1.min(bigDecimal7);
        short short15 = bigDecimal1.shortValueExact();
        float float16 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        long long20 = bigDecimal18.longValue();
        long long21 = bigDecimal18.longValueExact();
        int int22 = bigDecimal18.precision();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        long long26 = bigDecimal24.longValue();
        long long27 = bigDecimal24.longValueExact();
        java.math.BigDecimal bigDecimal28 = bigDecimal18.add(bigDecimal24);
        java.math.BigDecimal bigDecimal30 = bigDecimal24.pow(3);
        java.math.BigInteger bigInteger31 = bigDecimal30.toBigIntegerExact();
        java.math.BigDecimal bigDecimal32 = bigDecimal1.max(bigDecimal30);
        java.math.BigDecimal bigDecimal34 = bigDecimal32.movePointLeft(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal34);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double2 = realMatrix1.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrix1.transpose();
        double[] doubleArray5 = realMatrix1.getColumn((int) (short) 10);
        double[] doubleArray7 = realMatrix1.getRow((int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix9.transpose();
        double[] doubleArray15 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix17.scalarAdd((double) 6);
        int int20 = realMatrix17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix17.scalarAdd(10.0d);
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double double29 = realMatrix28.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix22.preMultiply(realMatrix31);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 1.0f);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix41.scalarAdd((double) 6);
        int int44 = realMatrix41.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix41.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix34.preMultiply(realMatrix41);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix34.copy();
        boolean boolean49 = realMatrix48.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrix9.preMultiply(realMatrix50);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrix51.transpose();
        boolean boolean53 = realMatrix51.isSquare();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 546084);
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        int int15 = bigMatrix13.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        java.lang.String str18 = bigDecimal17.toString();
        java.math.BigDecimal bigDecimal19 = bigDecimal17.plus();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        java.lang.String str37 = bigDecimal36.toString();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        int int41 = bigDecimal39.signum();
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal36.divideAndRemainder(bigDecimal39);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.pow((int) 'a');
        java.math.BigInteger bigInteger45 = bigDecimal36.toBigIntegerExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal34.add(bigDecimal36);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger50 = bigDecimal49.unscaledValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal47.add(bigDecimal49);
        java.math.BigDecimal bigDecimal52 = bigDecimal36.multiply(bigDecimal47);
        java.math.BigDecimal bigDecimal53 = bigDecimal24.divide(bigDecimal47);
        int int54 = bigDecimal17.compareTo(bigDecimal24);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarMultiply(bigDecimal17);
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger58 = bigDecimal57.unscaledValue();
        java.lang.String str59 = bigDecimal57.toPlainString();
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        float float63 = bigDecimal61.floatValue();
        java.math.BigDecimal bigDecimal64 = bigDecimal61.ulp();
        java.math.BigDecimal bigDecimal65 = bigDecimal64.ulp();
        java.math.BigDecimal bigDecimal66 = bigDecimal57.remainder(bigDecimal65);
        java.math.BigDecimal bigDecimal67 = bigDecimal17.divide(bigDecimal57);
        long long68 = bigDecimal67.longValueExact();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal((long) (short) 31464);
        java.math.BigDecimal bigDecimal71 = bigDecimal70.plus();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        java.math.BigDecimal bigDecimal78 = bigDecimal73.min(bigDecimal76);
        java.math.BigInteger bigInteger79 = bigDecimal73.toBigInteger();
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal(bigInteger79);
        java.math.BigDecimal bigDecimal82 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal83 = bigDecimal82.stripTrailingZeros();
        float float84 = bigDecimal82.floatValue();
        java.math.BigDecimal bigDecimal85 = bigDecimal80.multiply(bigDecimal82);
        java.math.BigDecimal bigDecimal86 = bigDecimal70.multiply(bigDecimal82);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal88 = bigDecimal67.divide(bigDecimal86, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 97.0f + "'", float23 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "100" + "'", str59, "100");
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 97.0f + "'", float63 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 97.0f + "'", float84 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal86);
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        int int26 = bigDecimal25.intValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        int int29 = bigDecimal28.intValue();
        java.math.BigDecimal bigDecimal30 = bigDecimal25.min(bigDecimal28);
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal30 };
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal[][] bigDecimalArray40 = new java.math.BigDecimal[][] { bigDecimalArray23, bigDecimalArray31, bigDecimalArray39 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray40);
        java.math.BigDecimal[][] bigDecimalArray44 = bigMatrixImpl43.getDataRef();
        java.math.BigDecimal bigDecimal45 = bigMatrixImpl43.getNorm();
        boolean boolean46 = bigMatrixImpl43.isSquare();
        java.math.BigDecimal[][] bigDecimalArray47 = bigMatrixImpl43.getDataRef();
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray60 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59 };
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray60);
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal71 = bigDecimal66.min(bigDecimal69);
        java.math.BigInteger bigInteger72 = bigDecimal66.toBigInteger();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(bigInteger72);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrix64.scalarAdd(bigDecimal73);
        java.math.BigDecimal bigDecimal75 = bigDecimal73.plus();
        boolean boolean76 = bigMatrixImpl43.equals((java.lang.Object) bigDecimal75);
        java.math.BigDecimal bigDecimal78 = new java.math.BigDecimal(0.0d);
        int int79 = bigDecimal78.intValue();
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(0.0d);
        int int82 = bigDecimal81.intValue();
        java.math.BigDecimal bigDecimal83 = bigDecimal78.min(bigDecimal81);
        java.math.BigInteger bigInteger84 = bigDecimal78.toBigInteger();
        java.math.BigInteger bigInteger85 = bigDecimal78.unscaledValue();
        java.math.BigDecimal bigDecimal86 = new java.math.BigDecimal(bigInteger85);
        int int87 = bigDecimal75.compareTo(bigDecimal86);
        org.apache.commons.math.linear.BigMatrix bigMatrix88 = bigMatrixImpl15.scalarMultiply(bigDecimal86);
        boolean boolean89 = bigMatrixImpl15.isSingular();
        java.math.BigDecimal[][] bigDecimalArray90 = bigMatrixImpl15.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal93 = bigMatrixImpl15.getEntry((int) (byte) 97, (int) (short) -2805);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(bigMatrix88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray90);
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        java.lang.String str9 = bigDecimal8.toString();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        int int13 = bigDecimal11.signum();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal8.divideAndRemainder(bigDecimal11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray14);
        int int16 = bigMatrixImpl15.getRoundingMode();
        boolean boolean17 = bigMatrixImpl15.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrix6.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl15);
        int int19 = bigMatrixImpl15.getRoundingMode();
        int int20 = bigMatrixImpl15.getRoundingMode();
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl35.transpose();
        boolean boolean37 = bigMatrixImpl35.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl15.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl35);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal41 = bigMatrix38.getEntry((int) (byte) 85, 7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(bigMatrix38);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double2 = realMatrix1.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrix1.getRowMatrix((int) (short) 10);
        double double5 = realMatrix4.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix4.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        float float22 = bigDecimal21.floatValue();
        java.math.BigInteger bigInteger23 = bigDecimal21.unscaledValue();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger23, 0);
        java.math.MathContext mathContext26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(bigInteger23, mathContext26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(bigInteger23);
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        double[][] doubleArray11 = bigMatrix10.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal12 = bigMatrix10.getNorm();
        int int13 = bigDecimal12.signum();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        long long17 = bigDecimal15.longValue();
        long long18 = bigDecimal15.longValueExact();
        int int19 = bigDecimal15.precision();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        long long23 = bigDecimal21.longValue();
        long long24 = bigDecimal21.longValueExact();
        java.math.BigDecimal bigDecimal25 = bigDecimal15.add(bigDecimal21);
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigInteger bigInteger46 = bigDecimal37.toBigIntegerExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal35.add(bigDecimal37);
        java.math.BigDecimal bigDecimal48 = bigDecimal21.multiply(bigDecimal35);
        java.math.BigDecimal bigDecimal49 = bigDecimal21.ulp();
        double[] doubleArray52 = new double[] { 1.0d, 100.0f };
        double[] doubleArray55 = new double[] { 1.0d, 100.0f };
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray62 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61 };
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl64 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray62);
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal71 = new java.math.BigDecimal(0.0d);
        int int72 = bigDecimal71.intValue();
        java.math.BigDecimal bigDecimal73 = bigDecimal68.min(bigDecimal71);
        java.math.BigInteger bigInteger74 = bigDecimal68.toBigInteger();
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(bigInteger74);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = bigMatrix66.scalarAdd(bigDecimal75);
        java.math.BigDecimal bigDecimal77 = bigDecimal21.min(bigDecimal75);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal78 = bigDecimal12.divideToIntegralValue(bigDecimal75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Division undefined");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigDecimal77);
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigInteger bigInteger22 = bigDecimal21.unscaledValue();
        long long23 = bigDecimal21.longValue();
        double double24 = bigDecimal21.doubleValue();
        int int25 = bigDecimal21.signum();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(7);
        boolean boolean35 = bigMatrixImpl27.isSingular();
        int int36 = bigMatrixImpl27.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl27.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        boolean boolean40 = bigMatrix39.isSquare();
        java.math.BigDecimal[] bigDecimalArray42 = bigMatrix39.getRow(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray44 = bigMatrix37.preMultiply(bigDecimalArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(bigMatrix43);
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(44);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl37.copy();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl37.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray40);
        java.lang.String str42 = bigMatrixImpl41.toString();
        boolean boolean43 = bigMatrixImpl41.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl41.getRowMatrix(2881);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "BigMatrixImpl{{0.0}}" + "'", str42, "BigMatrixImpl{{0.0}}");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray44 = new double[][] { doubleArray34, doubleArray37, doubleArray40, doubleArray43 };
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl46 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray44);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigInteger bigInteger56 = bigDecimal50.toBigInteger();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(bigInteger56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrix48.scalarAdd(bigDecimal57);
        java.math.BigDecimal bigDecimal59 = bigDecimal57.plus();
        boolean boolean60 = bigMatrixImpl27.equals((java.lang.Object) bigDecimal59);
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        int int63 = bigDecimal62.intValue();
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal67 = bigDecimal62.min(bigDecimal65);
        java.math.BigInteger bigInteger68 = bigDecimal62.toBigInteger();
        java.math.BigInteger bigInteger69 = bigDecimal62.unscaledValue();
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(bigInteger69);
        int int71 = bigDecimal59.compareTo(bigDecimal70);
        byte byte72 = bigDecimal70.byteValueExact();
        java.math.BigDecimal bigDecimal73 = bigDecimal70.ulp();
        java.math.BigDecimal bigDecimal74 = bigDecimal73.plus();
        float float75 = bigDecimal73.floatValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + byte72 + "' != '" + (byte) 0 + "'", byte72 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 1.0f + "'", float75 == 1.0f);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) ' ');
        java.lang.String str2 = bigDecimal1.toPlainString();
        int int3 = bigDecimal1.precision();
        java.math.MathContext mathContext5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal6 = bigDecimal1.pow(50, mathContext5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "32" + "'", str2, "32");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) (short) 0);
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) (short) 100, 0);
        short short5 = bigDecimal4.shortValueExact();
        java.math.BigDecimal bigDecimal6 = bigDecimal4.ulp();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.min(bigDecimal11);
        java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal13 };
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal21 = bigDecimal16.min(bigDecimal19);
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal[][] bigDecimalArray31 = new java.math.BigDecimal[][] { bigDecimalArray14, bigDecimalArray22, bigDecimalArray30 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        java.math.BigDecimal[][] bigDecimalArray35 = bigMatrixImpl34.getDataRef();
        java.math.BigDecimal bigDecimal36 = bigMatrixImpl34.getNorm();
        boolean boolean37 = bigMatrixImpl34.isSquare();
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl34.getDataRef();
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray51 = new double[][] { doubleArray41, doubleArray44, doubleArray47, doubleArray50 };
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray51);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray51);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray51);
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigInteger bigInteger63 = bigDecimal57.toBigInteger();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(bigInteger63);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrix55.scalarAdd(bigDecimal64);
        java.math.BigDecimal bigDecimal66 = bigDecimal64.plus();
        boolean boolean67 = bigMatrixImpl34.equals((java.lang.Object) bigDecimal66);
        java.math.BigDecimal bigDecimal69 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray72 = bigDecimal69.divideAndRemainder(bigDecimal71);
        java.math.BigDecimal bigDecimal73 = bigDecimal66.max(bigDecimal69);
        int int74 = bigDecimal73.signum();
        java.math.BigInteger bigInteger75 = bigDecimal73.unscaledValue();
        int int76 = bigDecimal4.compareTo(bigDecimal73);
        java.math.MathContext mathContext77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal78 = bigDecimal1.subtract(bigDecimal73, mathContext77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 100 + "'", short5 == (short) 100);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        double[] doubleArray3 = new double[] { 62.0d, 52.0d, (-35) };
        double[] doubleArray7 = new double[] { 62.0d, 52.0d, (-35) };
        double[] doubleArray11 = new double[] { 62.0d, 52.0d, (-35) };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray7, doubleArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        int int14 = bigMatrixImpl13.getScale();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        float float28 = bigDecimal26.floatValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.divideToIntegralValue(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal29.movePointRight((int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl13.scalarMultiply(bigDecimal31);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl13.getRowMatrix((int) (short) 1);
        int[] intArray38 = new int[] { 110, 2, 4 };
        int[] intArray39 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrix34.getSubMatrix(intArray38, intArray39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[62.0, 52.0, -35.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[62.0, 52.0, -35.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[62.0, 52.0, -35.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 64 + "'", int14 == 64);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 97.0f + "'", float28 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[110, 2, 4]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        int int15 = realMatrix14.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = realMatrix14.getColumn((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal11 = bigDecimal1.subtract(bigDecimal10);
        java.math.BigDecimal bigDecimal12 = bigDecimal10.ulp();
        java.math.BigInteger bigInteger13 = bigDecimal12.toBigInteger();
        java.math.MathContext mathContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(bigInteger13, mathContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigInteger13);
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        boolean boolean27 = bigMatrixImpl26.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray29 = bigMatrixImpl26.getColumn(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.plus();
        java.math.BigDecimal bigDecimal4 = bigDecimal3.negate();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal28 = bigDecimal26.pow((int) (byte) 97);
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger31 = bigDecimal30.unscaledValue();
        short short32 = bigDecimal30.shortValueExact();
        java.math.BigDecimal bigDecimal33 = bigDecimal28.divide(bigDecimal30);
        byte byte34 = bigDecimal30.byteValueExact();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.plus();
        java.math.BigDecimal bigDecimal36 = bigDecimal3.subtract(bigDecimal35);
        java.math.BigDecimal bigDecimal38 = bigDecimal36.pow((int) (byte) 6);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 100 + "'", short32 == (short) 100);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 100 + "'", byte34 == (byte) 100);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal38);
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl7 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int10 = bigMatrixImpl9.getRowDimension();
        bigMatrixImpl9.setScale(4);
        boolean boolean13 = bigMatrixImpl9.isSingular();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((long) 400, mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal10.min(bigDecimal13);
        java.math.BigDecimal[] bigDecimalArray16 = new java.math.BigDecimal[] { bigDecimal15 };
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal23 = bigDecimal18.min(bigDecimal21);
        java.math.BigDecimal[] bigDecimalArray24 = new java.math.BigDecimal[] { bigDecimal23 };
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal26.min(bigDecimal29);
        java.math.BigDecimal[] bigDecimalArray32 = new java.math.BigDecimal[] { bigDecimal31 };
        java.math.BigDecimal[][] bigDecimalArray33 = new java.math.BigDecimal[][] { bigDecimalArray16, bigDecimalArray24, bigDecimalArray32 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl34 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray33);
        java.math.BigDecimal[][] bigDecimalArray35 = bigMatrixImpl34.getDataRef();
        int int36 = bigMatrixImpl34.getRowDimension();
        boolean boolean37 = bigMatrixImpl34.isSingular();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        java.lang.String str40 = bigDecimal39.toString();
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal43 = bigDecimal42.stripTrailingZeros();
        int int44 = bigDecimal42.signum();
        java.math.BigDecimal[] bigDecimalArray45 = bigDecimal39.divideAndRemainder(bigDecimal42);
        java.math.BigDecimal bigDecimal47 = bigDecimal39.pow((int) 'a');
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal50 = bigDecimal49.stripTrailingZeros();
        float float51 = bigDecimal49.floatValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.divideToIntegralValue(bigDecimal49);
        java.math.BigDecimal bigDecimal53 = bigDecimal49.ulp();
        int int54 = bigDecimal49.precision();
        java.math.BigDecimal bigDecimal56 = bigDecimal49.scaleByPowerOfTen((-1));
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl34.scalarMultiply(bigDecimal56);
        java.math.BigDecimal bigDecimal59 = bigDecimal56.movePointRight((int) 'a');
        java.lang.String str60 = bigDecimal56.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl8.scalarMultiply(bigDecimal56);
        int[] intArray65 = new int[] { 5, 97, (byte) 62 };
        int[] intArray68 = new int[] { (short) 2805, 6 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl8.getSubMatrix(intArray65, intArray68);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + float51 + "' != '" + 97.0f + "'", float51 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "9.7" + "'", str60, "9.7");
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[5, 97, 62]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[2805, 6]");
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        boolean boolean61 = bigMatrixImpl37.equals((java.lang.Object) realMatrix59);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(0.0d);
        java.lang.String str64 = bigDecimal63.toString();
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal67 = bigDecimal66.stripTrailingZeros();
        int int68 = bigDecimal66.signum();
        java.math.BigDecimal[] bigDecimalArray69 = bigDecimal63.divideAndRemainder(bigDecimal66);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray69);
        int int71 = bigMatrixImpl70.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl70.transpose();
        java.math.BigDecimal[][] bigDecimalArray73 = bigMatrixImpl70.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl37.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl74);
        java.math.BigDecimal bigDecimal76 = bigMatrixImpl37.getDeterminant();
        java.lang.Class<?> wildcardClass77 = bigMatrixImpl37.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix8.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix8.scalarMultiply(1.0d);
        double[][] doubleArray12 = realMatrix11.getData();
        int int13 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrix11.transpose();
        double[] doubleArray19 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray19);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray19);
        double double22 = realMatrix21.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix11.subtract(realMatrix21);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = realMatrix11.getColumn(97);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 63.0d + "'", double22 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix23);
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        boolean boolean18 = bigMatrixImpl17.isSingular();
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray23 = bigDecimal20.divideAndRemainder(bigDecimal22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray23);
        double[] doubleArray26 = bigMatrixImpl24.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl24.copy();
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray40 = new double[][] { doubleArray30, doubleArray33, doubleArray36, doubleArray39 };
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray40);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl42.transpose();
        int int44 = bigMatrixImpl42.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray45 = bigMatrixImpl42.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl24.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl42);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl17.preMultiply(bigMatrix46);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigDecimal[] bigDecimalArray63 = new java.math.BigDecimal[] { bigDecimal62 };
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal65.min(bigDecimal68);
        java.math.BigDecimal[] bigDecimalArray71 = new java.math.BigDecimal[] { bigDecimal70 };
        java.math.BigDecimal[][] bigDecimalArray72 = new java.math.BigDecimal[][] { bigDecimalArray55, bigDecimalArray63, bigDecimalArray71 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        java.math.BigDecimal[][] bigDecimalArray76 = bigMatrixImpl75.getDataRef();
        java.math.BigDecimal bigDecimal77 = bigMatrixImpl75.getNorm();
        int int78 = bigMatrixImpl75.getColumnDimension();
        bigMatrixImpl75.setRoundingMode((int) (byte) -100);
        bigMatrixImpl75.setScale(10);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl17.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl75);
        java.math.BigDecimal[][] bigDecimalArray84 = bigMatrixImpl17.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl17.getSubMatrix(6, (-200), (int) (byte) 4, (int) (short) -3072);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("97");
        java.math.BigInteger bigInteger2 = bigDecimal1.toBigInteger();
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray15 = new double[][] { doubleArray5, doubleArray8, doubleArray11, doubleArray14 };
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray15);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray15);
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray15);
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrix18.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray33 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32 };
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray33);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl35.transpose();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal38, bigDecimal40 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray49);
        java.math.BigDecimal[] bigDecimalArray52 = bigMatrix36.preMultiply(bigDecimalArray49);
        java.math.BigDecimal[] bigDecimalArray53 = bigMatrixImpl20.preMultiply(bigDecimalArray52);
        java.math.BigDecimal[] bigDecimalArray55 = bigMatrixImpl20.getRow(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[] doubleArray64 = new double[] { 1.0d, 100.0f };
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[] doubleArray70 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray71 = new double[][] { doubleArray61, doubleArray64, doubleArray67, doubleArray70 };
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = bigMatrixImpl73.transpose();
        double[] doubleArray76 = bigMatrixImpl73.getRowAsDoubleArray((int) (short) 0);
        boolean boolean77 = bigMatrixImpl73.isSingular();
        java.math.BigDecimal[][] bigDecimalArray78 = bigMatrixImpl73.getData();
        java.math.BigDecimal bigDecimal79 = bigMatrixImpl73.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl73.transpose();
        java.math.BigDecimal bigDecimal81 = bigMatrixImpl73.getNorm();
        int int82 = bigDecimal81.precision();
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl58.scalarMultiply(bigDecimal81);
        java.math.BigDecimal bigDecimal84 = bigDecimal1.max(bigDecimal81);
        java.math.BigDecimal bigDecimal87 = java.math.BigDecimal.valueOf((-1L), (int) (byte) 1);
        java.math.BigDecimal bigDecimal89 = bigDecimal87.pow(2);
        java.math.BigDecimal bigDecimal91 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal92 = bigDecimal91.stripTrailingZeros();
        java.math.BigDecimal bigDecimal94 = bigDecimal92.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal95 = bigDecimal89.add(bigDecimal92);
        float float96 = bigDecimal89.floatValue();
        java.math.BigDecimal bigDecimal97 = bigDecimal81.add(bigDecimal89);
        java.math.BigDecimal bigDecimal99 = bigDecimal97.scaleByPowerOfTen((int) (byte) 62);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(bigMatrix16);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigDecimal95);
        org.junit.Assert.assertTrue("'" + float96 + "' != '" + 0.01f + "'", float96 == 0.01f);
        org.junit.Assert.assertNotNull(bigDecimal97);
        org.junit.Assert.assertNotNull(bigDecimal99);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        int int22 = bigMatrixImpl14.getScale();
        double[] doubleArray24 = bigMatrixImpl14.getColumnAsDoubleArray((int) (byte) 0);
        int int25 = bigMatrixImpl14.getScale();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = bigMatrixImpl14.getColumnAsDoubleArray((-2));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigMatrixImpl27.getColumnDimension();
        bigMatrixImpl27.setRoundingMode((int) (byte) -100);
        double[] doubleArray34 = bigMatrixImpl27.getRowAsDoubleArray(2);
        bigMatrixImpl27.setScale((int) (short) 0);
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        float float52 = bigDecimal50.floatValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.divideToIntegralValue(bigDecimal50);
        java.math.BigDecimal bigDecimal54 = bigDecimal38.max(bigDecimal48);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl27.scalarAdd(bigDecimal54);
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[] doubleArray64 = new double[] { 1.0d, 100.0f };
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray68 = new double[][] { doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        java.math.BigDecimal bigDecimal74 = new java.math.BigDecimal(0.0d);
        int int75 = bigDecimal74.intValue();
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        int int78 = bigDecimal77.intValue();
        java.math.BigDecimal bigDecimal79 = bigDecimal74.min(bigDecimal77);
        java.math.BigInteger bigInteger80 = bigDecimal74.toBigInteger();
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(bigInteger80);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrix72.scalarAdd(bigDecimal81);
        java.math.BigDecimal bigDecimal83 = bigDecimal81.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrixImpl27.scalarMultiply(bigDecimal81);
        java.math.BigDecimal[][] bigDecimalArray85 = bigMatrixImpl27.getData();
        bigMatrixImpl27.setRoundingMode((-2));
        int int88 = bigMatrixImpl27.getRoundingMode();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 97.0f + "'", float52 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertNotNull(bigMatrix82);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigMatrix84);
        org.junit.Assert.assertNotNull(bigDecimalArray85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-2) + "'", int88 == (-2));
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        java.lang.String str42 = bigDecimal41.toString();
        java.math.BigDecimal bigDecimal44 = bigDecimal41.setScale(0);
        byte byte45 = bigDecimal44.byteValueExact();
        java.math.BigDecimal bigDecimal46 = bigDecimal44.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.scalarMultiply(bigDecimal46);
        boolean boolean48 = bigMatrixImpl27.isSquare();
        bigMatrixImpl27.setRoundingMode(6);
        bigMatrixImpl27.setRoundingMode((int) (short) 7888);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + byte45 + "' != '" + (byte) 0 + "'", byte45 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf(0.0d);
        long long20 = bigDecimal19.longValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.scalarMultiply(bigDecimal19);
        java.lang.String str22 = bigMatrixImpl14.toString();
        java.math.BigDecimal bigDecimal23 = bigMatrixImpl14.getNorm();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str22, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimal23);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((int) (byte) 32, mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        double[] doubleArray6 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray6);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray6);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray6);
        double[] doubleArray14 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix15.operate(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray22);
        double[] doubleArray24 = realMatrix9.preMultiply(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix25.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix25.inverse();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal[][] bigDecimalArray52 = new java.math.BigDecimal[][] { bigDecimalArray35, bigDecimalArray43, bigDecimalArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        int int56 = bigMatrixImpl55.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl55.copy();
        double[] doubleArray59 = bigMatrixImpl55.getRowAsDoubleArray((int) (byte) 1);
        double[] doubleArray60 = realMatrix27.operate(doubleArray59);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray60);
        double[] doubleArray62 = realMatrix1.solve(doubleArray60);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray60);
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigMatrix66);
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        int int21 = bigMatrixImpl14.getRoundingMode();
        int int22 = bigMatrixImpl14.getColumnDimension();
        int int23 = bigMatrixImpl14.getRoundingMode();
        int int24 = bigMatrixImpl14.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl14.copy();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal((long) (byte) 4);
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal[][] bigDecimalArray52 = new java.math.BigDecimal[][] { bigDecimalArray35, bigDecimalArray43, bigDecimalArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray52);
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        int int60 = bigDecimal59.intValue();
        java.math.BigDecimal bigDecimal61 = bigDecimal56.min(bigDecimal59);
        java.math.BigInteger bigInteger62 = bigDecimal56.toBigInteger();
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal(bigInteger62);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal66 = bigDecimal65.stripTrailingZeros();
        float float67 = bigDecimal65.floatValue();
        java.math.BigDecimal bigDecimal68 = bigDecimal63.multiply(bigDecimal65);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrix54.scalarAdd(bigDecimal68);
        short short70 = bigDecimal68.shortValueExact();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int73 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray74 = bigDecimal68.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal76 = bigDecimal72.setScale((int) (byte) 110);
        int int77 = bigDecimal72.precision();
        java.lang.String str78 = bigDecimal72.toPlainString();
        java.math.BigDecimal[] bigDecimalArray79 = bigDecimal27.divideAndRemainder(bigDecimal72);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray80 = bigMatrixImpl14.preMultiply(bigDecimalArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 64 + "'", int24 == 64);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 97.0f + "'", float67 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) 0 + "'", short70 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "100" + "'", str78, "100");
        org.junit.Assert.assertNotNull(bigDecimalArray79);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.scalarMultiply(bigDecimal18);
        double[][] doubleArray22 = bigMatrixImpl14.getDataAsDoubleArray();
        double[][] doubleArray23 = bigMatrixImpl14.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getDataRef();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl37.transpose();
        double[] doubleArray40 = bigMatrixImpl37.getRowAsDoubleArray((int) (short) 0);
        boolean boolean41 = bigMatrixImpl37.isSingular();
        boolean boolean42 = bigMatrixImpl37.isSquare();
        double[][] doubleArray43 = bigMatrixImpl37.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl37.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal47.divideAndRemainder(bigDecimal49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl51.copy();
        java.math.BigDecimal[][] bigDecimalArray54 = bigMatrixImpl51.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl37.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl55);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl55.transpose();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigMatrix57);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix8.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix8.scalarMultiply(1.0d);
        double double12 = realMatrix11.getNorm();
        double double13 = realMatrix11.getNorm();
        double[][] doubleArray14 = realMatrix11.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray14);
        int int16 = bigMatrixImpl15.getRowDimension();
        int int17 = bigMatrixImpl15.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 85.0d + "'", double12 == 85.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 85.0d + "'", double13 == 85.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl27.getNorm();
        java.lang.String str31 = bigMatrixImpl27.toString();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray39, bigDecimalArray47, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        java.math.BigDecimal[][] bigDecimalArray60 = bigMatrixImpl59.getDataRef();
        java.math.BigDecimal bigDecimal61 = bigMatrixImpl59.getNorm();
        int int62 = bigMatrixImpl59.getColumnDimension();
        bigMatrixImpl59.setRoundingMode((int) (byte) -100);
        double[] doubleArray66 = bigMatrixImpl59.getRowAsDoubleArray(2);
        bigMatrixImpl59.setScale((int) (short) 0);
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        java.lang.String str73 = bigDecimal72.toString();
        java.math.BigDecimal bigDecimal75 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal76 = bigDecimal75.stripTrailingZeros();
        int int77 = bigDecimal75.signum();
        java.math.BigDecimal[] bigDecimalArray78 = bigDecimal72.divideAndRemainder(bigDecimal75);
        java.math.BigDecimal bigDecimal80 = bigDecimal72.pow((int) 'a');
        java.math.BigDecimal bigDecimal82 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal83 = bigDecimal82.stripTrailingZeros();
        float float84 = bigDecimal82.floatValue();
        java.math.BigDecimal bigDecimal85 = bigDecimal80.divideToIntegralValue(bigDecimal82);
        java.math.BigDecimal bigDecimal86 = bigDecimal70.max(bigDecimal80);
        org.apache.commons.math.linear.BigMatrix bigMatrix87 = bigMatrixImpl59.scalarAdd(bigDecimal86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix88 = bigMatrixImpl27.multiply(bigMatrix87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str31, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0" + "'", str73, "0");
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray78);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertTrue("'" + float84 + "' != '" + 97.0f + "'", float84 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigMatrix87);
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl5.copy();
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray21 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl23.transpose();
        int int25 = bigMatrixImpl23.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl23.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl5.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl23);
        int int28 = bigMatrixImpl5.getScale();
        double[][] doubleArray29 = bigMatrixImpl5.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray29);
        int int31 = bigMatrixImpl30.getRowDimension();
        java.math.BigDecimal[] bigDecimalArray32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray33 = bigMatrixImpl30.preMultiply(bigDecimalArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl4 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int6 = bigMatrixImpl5.getRowDimension();
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray8 = bigMatrixImpl5.solve(doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        java.math.MathContext mathContext1 = null;
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((double) (byte) 0, mathContext1);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.min(bigDecimal7);
        java.math.BigInteger bigInteger10 = bigDecimal4.toBigInteger();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(bigInteger10);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(bigInteger10);
        java.math.BigDecimal bigDecimal13 = bigDecimal2.add(bigDecimal12);
        java.math.BigDecimal bigDecimal15 = bigDecimal12.movePointLeft(0);
        int int16 = bigDecimal12.precision();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        double[][] doubleArray29 = bigMatrixImpl27.getDataAsDoubleArray();
        double[][] doubleArray30 = bigMatrixImpl27.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        java.lang.String str7 = bigMatrixImpl6.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl6.transpose();
        java.math.BigDecimal bigDecimal9 = bigMatrixImpl6.getNorm();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "BigMatrixImpl{{1},{0}}" + "'", str7, "BigMatrixImpl{{1},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(bigDecimal9);
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        int int14 = bigDecimal10.signum();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 97.0f + "'", float12 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2);
        java.math.MathContext mathContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(charArray2, (-2), (int) (short) 97, mathContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        short short36 = bigDecimal34.shortValueExact();
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray49 = new double[][] { doubleArray39, doubleArray42, doubleArray45, doubleArray48 };
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray49);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.transpose();
        double[] doubleArray54 = bigMatrixImpl51.getRowAsDoubleArray((int) (short) 0);
        boolean boolean55 = bigMatrixImpl51.isSingular();
        java.math.BigDecimal[][] bigDecimalArray56 = bigMatrixImpl51.getData();
        java.math.BigDecimal bigDecimal57 = bigMatrixImpl51.getNorm();
        double[] doubleArray60 = new double[] { 1.0d, 100.0f };
        double[] doubleArray63 = new double[] { 1.0d, 100.0f };
        double[] doubleArray66 = new double[] { 1.0d, 100.0f };
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray70 = new double[][] { doubleArray60, doubleArray63, doubleArray66, doubleArray69 };
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray70);
        boolean boolean74 = bigDecimal57.equals((java.lang.Object) doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        boolean boolean76 = bigDecimal34.equals((java.lang.Object) doubleArray70);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl77.getRowMatrix((int) (byte) 1);
        int int80 = bigMatrixImpl77.getRowDimension();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertTrue("'" + short36 + "' != '" + (short) 10 + "'", short36 == (short) 10);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl8.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray11);
        int int13 = bigMatrixImpl12.getScale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl12.getColumnMatrix((int) (byte) -112);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 64 + "'", int13 == 64);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double2 = realMatrix1.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrix1.transpose();
        double[] doubleArray5 = realMatrix1.getColumn((int) (short) 10);
        double[] doubleArray7 = realMatrix1.getRow((int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix9.transpose();
        double[] doubleArray15 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix17.scalarAdd((double) 6);
        int int20 = realMatrix17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix17.scalarAdd(10.0d);
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double double29 = realMatrix28.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix22.preMultiply(realMatrix31);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 1.0f);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix41.scalarAdd((double) 6);
        int int44 = realMatrix41.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix41.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix34.preMultiply(realMatrix41);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix34.copy();
        boolean boolean49 = realMatrix48.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrix9.preMultiply(realMatrix50);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrix51.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrix52.getSubMatrix(2881, 546084, 0, 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrix5.scalarAdd((double) (short) -2805);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double10 = realMatrix9.getTrace();
        boolean boolean11 = realMatrix9.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix9.scalarAdd((double) 5);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix13.scalarMultiply(85.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix7.subtract(realMatrix13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix16.getSubMatrix((int) (byte) 0, 0, (int) '4', (int) (short) -3072);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.lang.String str35 = bigDecimal9.toString();
        java.math.BigDecimal bigDecimal36 = bigDecimal9.negate();
        int int37 = bigDecimal36.scale();
        java.math.BigInteger bigInteger38 = bigDecimal36.toBigInteger();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigInteger38);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal(1.0E97d, mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl9 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl10 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal12 = bigMatrixImpl11.getTrace();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray14 = bigMatrixImpl11.getColumn((int) (byte) 52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigDecimal12);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        int int8 = bigDecimal1.precision();
        java.lang.String str9 = bigDecimal1.toEngineeringString();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal[][] bigDecimalArray34 = new java.math.BigDecimal[][] { bigDecimalArray17, bigDecimalArray25, bigDecimalArray33 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl35 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray34);
        java.math.BigDecimal[][] bigDecimalArray38 = bigMatrixImpl37.getData();
        boolean boolean39 = bigMatrixImpl37.isSquare();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int42 = bigDecimal41.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl37.scalarMultiply(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal1.divide(bigDecimal41, (int) (short) 100, 6);
        int int47 = bigDecimal46.scale();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigDecimal[] bigDecimalArray63 = new java.math.BigDecimal[] { bigDecimal62 };
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal65.min(bigDecimal68);
        java.math.BigDecimal[] bigDecimalArray71 = new java.math.BigDecimal[] { bigDecimal70 };
        java.math.BigDecimal[][] bigDecimalArray72 = new java.math.BigDecimal[][] { bigDecimalArray55, bigDecimalArray63, bigDecimalArray71 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        java.math.BigDecimal[][] bigDecimalArray76 = bigMatrixImpl75.getDataRef();
        java.math.BigDecimal bigDecimal77 = bigMatrixImpl75.getNorm();
        boolean boolean78 = bigMatrixImpl75.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl75.copy();
        double[] doubleArray81 = bigMatrixImpl75.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal82 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl75.scalarMultiply(bigDecimal82);
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix87 = bigMatrixImpl75.scalarAdd(bigDecimal86);
        java.math.BigDecimal bigDecimal90 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        java.math.BigDecimal bigDecimal91 = bigDecimal86.divideToIntegralValue(bigDecimal90);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal94 = bigDecimal46.divide(bigDecimal86, 2881, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigMatrix87);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal91);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double double6 = realMatrix5.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix5.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix9 = realMatrix5.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix5.scalarAdd(1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarMultiply((double) (short) -1);
        boolean boolean14 = realMatrix11.isSquare();
        boolean boolean15 = realMatrix11.isSingular();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.transpose();
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl14.getNorm();
        java.math.BigInteger bigInteger23 = bigDecimal22.unscaledValue();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger23, (int) '4');
        java.lang.String str26 = bigDecimal25.toPlainString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0.0000000000000000000000000000000000000000000000000400" + "'", str26, "0.0000000000000000000000000000000000000000000000000400");
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        bigMatrixImpl14.setRoundingMode(2);
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray21 = bigDecimal18.divideAndRemainder(bigDecimal20);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl22.copy();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        java.math.BigDecimal bigDecimal33 = bigMatrixImpl32.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl22.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray47 = new double[][] { doubleArray37, doubleArray40, doubleArray43, doubleArray46 };
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl49 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl49.transpose();
        java.math.BigDecimal bigDecimal52 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray63 = new java.math.BigDecimal[] { bigDecimal52, bigDecimal54 };
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray63);
        java.math.BigDecimal[] bigDecimalArray66 = bigMatrix50.preMultiply(bigDecimalArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray63);
        java.math.BigDecimal[] bigDecimalArray68 = bigMatrix34.preMultiply(bigDecimalArray63);
        java.math.BigDecimal[] bigDecimalArray69 = bigMatrixImpl14.preMultiply(bigDecimalArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray63);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigDecimalArray66);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigMatrix70);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        java.lang.String str20 = bigDecimal19.toString();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        java.math.BigDecimal[] bigDecimalArray25 = bigDecimal19.divideAndRemainder(bigDecimal22);
        java.math.BigDecimal bigDecimal27 = bigDecimal19.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray28 = new java.math.BigDecimal[] { bigDecimal17, bigDecimal19 };
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray28);
        boolean boolean32 = bigMatrixImpl15.equals((java.lang.Object) bigMatrix31);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl60.getDataRef();
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl60.getNorm();
        boolean boolean63 = bigMatrixImpl60.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl60.copy();
        double[] doubleArray66 = bigMatrixImpl60.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl60.scalarMultiply(bigDecimal67);
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        int int71 = bigDecimal70.intValue();
        long long72 = bigDecimal70.longValue();
        long long73 = bigDecimal70.longValueExact();
        int int74 = bigDecimal70.precision();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        long long78 = bigDecimal76.longValue();
        long long79 = bigDecimal76.longValueExact();
        java.math.BigDecimal bigDecimal80 = bigDecimal70.add(bigDecimal76);
        java.math.BigDecimal bigDecimal82 = new java.math.BigDecimal(0.0d);
        int int83 = bigDecimal82.intValue();
        java.math.BigDecimal bigDecimal85 = new java.math.BigDecimal(0.0d);
        int int86 = bigDecimal85.intValue();
        java.math.BigDecimal bigDecimal87 = bigDecimal82.min(bigDecimal85);
        java.math.BigDecimal bigDecimal88 = bigDecimal80.min(bigDecimal85);
        java.math.BigDecimal bigDecimal90 = bigDecimal88.movePointRight((int) (short) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl60.scalarAdd(bigDecimal88);
        double[][] doubleArray92 = bigMatrix91.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal93 = bigMatrix91.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrix31.scalarAdd(bigDecimal93);
        java.math.BigDecimal[][] bigDecimalArray95 = bigMatrix94.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix96 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray95);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigMatrix91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigMatrix94);
        org.junit.Assert.assertNotNull(bigDecimalArray95);
        org.junit.Assert.assertNotNull(bigMatrix96);
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("100");
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        int int4 = bigDecimal3.intValue();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal3.min(bigDecimal6);
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal[][] bigDecimalArray26 = new java.math.BigDecimal[][] { bigDecimalArray9, bigDecimalArray17, bigDecimalArray25 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray26);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigInteger bigInteger36 = bigDecimal30.toBigInteger();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(bigInteger36);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        float float41 = bigDecimal39.floatValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.multiply(bigDecimal39);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrix28.scalarAdd(bigDecimal42);
        short short44 = bigDecimal42.shortValueExact();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int47 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal42.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal49 = bigDecimal1.add(bigDecimal42);
        byte byte50 = bigDecimal42.byteValueExact();
        int int51 = bigDecimal42.intValueExact();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 97.0f + "'", float41 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 0 + "'", short44 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 0 + "'", byte50 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        org.apache.commons.math.linear.BigMatrix bigMatrix1 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix(4);
        int int2 = bigMatrix1.getRowDimension();
        int int3 = bigMatrix1.getRoundingMode();
        int[] intArray10 = new int[] { (byte) 10, 8667, (short) 4, (byte) 10, (byte) -1, 2805 };
        int[] intArray17 = new int[] { (byte) -54, 110, (byte) 110, (short) 35, 100, (-35) };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrix1.getSubMatrix(intArray10, intArray17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigMatrix1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, 8667, 4, 10, -1, 2805]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-54, 110, 110, 35, 100, -35]");
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        int int37 = realMatrix23.getColumnDimension();
        int int38 = realMatrix23.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigInteger bigInteger25 = bigDecimal16.toBigIntegerExact();
        java.math.BigDecimal bigDecimal26 = bigDecimal14.add(bigDecimal16);
        java.math.BigDecimal bigDecimal27 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger30 = bigDecimal29.unscaledValue();
        java.math.BigDecimal bigDecimal31 = bigDecimal27.add(bigDecimal29);
        java.math.BigDecimal bigDecimal32 = bigDecimal16.multiply(bigDecimal27);
        java.math.BigDecimal bigDecimal33 = bigDecimal0.subtract(bigDecimal16);
        java.math.BigDecimal bigDecimal34 = bigDecimal33.abs();
        java.lang.String str35 = bigDecimal34.toEngineeringString();
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigInteger25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10" + "'", str35, "10");
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getScale();
        int int22 = bigMatrixImpl14.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl14.copy();
        boolean boolean24 = bigMatrixImpl14.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 64 + "'", int21 == 64);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        double[][] doubleArray17 = realMatrix14.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix14.copy();
        double[][] doubleArray19 = realMatrix14.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf(100L);
        java.math.MathContext mathContext2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal3 = bigDecimal1.plus(mathContext2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        double[][] doubleArray30 = bigMatrixImpl27.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        java.lang.String str34 = bigDecimal33.toString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        int int38 = bigDecimal36.signum();
        java.math.BigDecimal[] bigDecimalArray39 = bigDecimal33.divideAndRemainder(bigDecimal36);
        java.math.BigDecimal bigDecimal41 = bigDecimal33.pow((int) 'a');
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        java.math.BigDecimal bigDecimal51 = bigDecimal43.pow((int) 'a');
        java.math.BigInteger bigInteger52 = bigDecimal43.toBigIntegerExact();
        java.math.BigDecimal bigDecimal53 = bigDecimal41.add(bigDecimal43);
        java.math.BigDecimal bigDecimal54 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal56 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger57 = bigDecimal56.unscaledValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal54.add(bigDecimal56);
        java.math.BigDecimal bigDecimal59 = bigDecimal43.multiply(bigDecimal54);
        java.math.BigDecimal bigDecimal61 = bigDecimal43.pow(100);
        int int62 = bigDecimal43.scale();
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl27.scalarAdd(bigDecimal43);
        bigMatrixImpl27.setRoundingMode((int) (byte) 11);
        int int66 = bigMatrixImpl27.getRowDimension();
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[] doubleArray72 = new double[] { 1.0d, 100.0f };
        double[] doubleArray75 = new double[] { 1.0d, 100.0f };
        double[] doubleArray78 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray79 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray79);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray79);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrixImpl81.transpose();
        int int83 = bigMatrixImpl81.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray84 = bigMatrixImpl81.getDataRef();
        bigMatrixImpl81.setScale((int) (short) 100);
        boolean boolean87 = bigMatrixImpl81.isSingular();
        int int88 = bigMatrixImpl81.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl27.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigInteger57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertNotNull(bigMatrix82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal[][] bigDecimalArray54 = new java.math.BigDecimal[][] { bigDecimalArray37, bigDecimalArray45, bigDecimalArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl57.getDataRef();
        java.math.BigDecimal bigDecimal59 = bigMatrixImpl57.getNorm();
        boolean boolean60 = bigMatrixImpl57.isSquare();
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl57.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl57.transpose();
        bigMatrixImpl57.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl57.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl57.copy();
        boolean boolean67 = bigMatrixImpl57.isSingular();
        boolean boolean68 = bigMatrixImpl57.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl27.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl57);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl57.getNorm();
        int int71 = bigMatrixImpl57.getColumnDimension();
        int int72 = bigMatrixImpl57.getScale();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 64 + "'", int72 == 64);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.lang.String str27 = bigMatrixImpl25.toString();
        double[] doubleArray32 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray32);
        double[] doubleArray38 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray38);
        double[] doubleArray40 = realMatrix33.operate(doubleArray38);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix42.transpose();
        double[][] doubleArray44 = realMatrix42.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray44);
        boolean boolean46 = bigMatrixImpl45.isSingular();
        int int47 = bigMatrixImpl45.getScale();
        double[][] doubleArray48 = bigMatrixImpl45.getDataAsDoubleArray();
        bigMatrixImpl45.setRoundingMode((-32));
        int int51 = bigMatrixImpl45.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl45.transpose();
        boolean boolean53 = bigMatrixImpl45.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrixImpl25.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str27, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 64 + "'", int47 == 64);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-32) + "'", int51 == (-32));
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrix15.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray16);
        int int18 = bigMatrixImpl17.getRoundingMode();
        java.math.BigDecimal bigDecimal19 = bigMatrixImpl17.getNorm();
        java.math.BigDecimal[] bigDecimalArray21 = bigMatrixImpl17.getRow(2);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl23.getRow(4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertNotNull(bigMatrix22);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        float float5 = bigDecimal2.floatValue();
        java.lang.String str6 = bigDecimal2.toEngineeringString();
        java.math.BigDecimal bigDecimal7 = bigDecimal2.abs();
        java.lang.String str8 = bigDecimal2.toPlainString();
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 100.0f + "'", float5 == 100.0f);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100" + "'", str8, "100");
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = bigDecimal11.setScale((int) (byte) 10);
        java.math.BigDecimal bigDecimal15 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal16 = bigDecimal15.stripTrailingZeros();
        float float17 = bigDecimal15.floatValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal15.ulp();
        java.math.BigDecimal bigDecimal19 = bigDecimal18.ulp();
        java.lang.String str20 = bigDecimal18.toEngineeringString();
        java.math.BigDecimal bigDecimal21 = bigDecimal13.divideToIntegralValue(bigDecimal18);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal23.toBigInteger();
        int int30 = bigDecimal23.precision();
        java.lang.String str31 = bigDecimal23.toEngineeringString();
        int int32 = bigDecimal23.intValueExact();
        java.math.BigDecimal bigDecimal33 = bigDecimal23.stripTrailingZeros();
        java.math.BigDecimal bigDecimal34 = bigDecimal23.abs();
        java.math.BigDecimal bigDecimal36 = bigDecimal23.movePointRight((int) (short) -2805);
        java.math.MathContext mathContext37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal38 = bigDecimal18.divideToIntegralValue(bigDecimal36, mathContext37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 97.0f + "'", float17 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal36);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = bigMatrixImpl8.copy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigMatrix9);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(bigInteger7, 97);
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) (short) 4);
        java.math.RoundingMode roundingMode12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal13 = bigDecimal9.divide(bigDecimal11, roundingMode12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal11);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (byte) -100);
        int int2 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        java.lang.String str5 = bigDecimal4.toString();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal8 = bigDecimal7.stripTrailingZeros();
        int int9 = bigDecimal7.signum();
        java.math.BigDecimal[] bigDecimalArray10 = bigDecimal4.divideAndRemainder(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal4.pow((int) 'a');
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        java.lang.String str15 = bigDecimal14.toString();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = bigDecimal17.stripTrailingZeros();
        int int19 = bigDecimal17.signum();
        java.math.BigDecimal[] bigDecimalArray20 = bigDecimal14.divideAndRemainder(bigDecimal17);
        java.math.BigDecimal bigDecimal22 = bigDecimal14.pow((int) 'a');
        java.math.BigInteger bigInteger23 = bigDecimal14.toBigIntegerExact();
        java.math.BigDecimal bigDecimal24 = bigDecimal12.add(bigDecimal14);
        int int25 = bigDecimal12.scale();
        long long26 = bigDecimal12.longValue();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal("-11");
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal12.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal31.toBigInteger();
        int int38 = bigDecimal31.precision();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal41 = bigDecimal31.subtract(bigDecimal40);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(2805L);
        java.math.BigDecimal bigDecimal44 = bigDecimal40.remainder(bigDecimal43);
        java.math.BigDecimal bigDecimal45 = bigDecimal12.max(bigDecimal44);
        int int46 = bigDecimal1.compareTo(bigDecimal44);
        java.lang.String str47 = bigDecimal1.toEngineeringString();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-100" + "'", str47, "-100");
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(charArray2, (-3), (-100));
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        int int21 = bigMatrixImpl14.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl14.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(44);
        org.junit.Assert.assertNotNull(realMatrix1);
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        float float2 = bigDecimal1.floatValue();
        float float3 = bigDecimal1.floatValue();
        double[] doubleArray6 = new double[] { 1.0d, 100.0f };
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray16 = new double[][] { doubleArray6, doubleArray9, doubleArray12, doubleArray15 };
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl18.transpose();
        int int20 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl18.scalarMultiply(bigDecimal22);
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigInteger bigInteger46 = bigDecimal37.toBigIntegerExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal35.add(bigDecimal37);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigInteger bigInteger55 = bigDecimal49.toBigInteger();
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(bigInteger55);
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        float float60 = bigDecimal58.floatValue();
        java.math.BigDecimal bigDecimal61 = bigDecimal56.multiply(bigDecimal58);
        java.math.BigDecimal bigDecimal62 = bigDecimal56.negate();
        java.math.BigDecimal bigDecimal63 = bigDecimal47.add(bigDecimal62);
        java.math.BigDecimal bigDecimal64 = bigDecimal63.abs();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl18.scalarAdd(bigDecimal64);
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        long long69 = bigDecimal67.longValue();
        long long70 = bigDecimal67.longValueExact();
        int int71 = bigDecimal67.precision();
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        long long75 = bigDecimal73.longValue();
        long long76 = bigDecimal73.longValueExact();
        java.math.BigDecimal bigDecimal77 = bigDecimal67.add(bigDecimal73);
        java.math.BigDecimal bigDecimal79 = bigDecimal73.pow(3);
        java.math.BigDecimal bigDecimal81 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal82 = bigDecimal81.stripTrailingZeros();
        float float83 = bigDecimal81.floatValue();
        java.math.BigDecimal bigDecimal84 = bigDecimal81.ulp();
        java.math.BigDecimal bigDecimal85 = bigDecimal73.subtract(bigDecimal84);
        java.math.BigDecimal bigDecimal86 = bigDecimal64.divide(bigDecimal84);
        java.math.MathContext mathContext87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal88 = bigDecimal1.subtract(bigDecimal86, mathContext87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 100.0f + "'", float3 == 100.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + float60 + "' != '" + 97.0f + "'", float60 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 97.0f + "'", float83 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal86);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode((int) '4');
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.min(bigDecimal51);
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal[][] bigDecimalArray55 = new java.math.BigDecimal[][] { bigDecimalArray38, bigDecimalArray46, bigDecimalArray54 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl58.getDataRef();
        java.math.BigDecimal bigDecimal60 = bigMatrixImpl58.getNorm();
        boolean boolean61 = bigMatrixImpl58.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl58.copy();
        double[] doubleArray64 = bigMatrixImpl58.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray66 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray67 = new java.lang.String[][] { strArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(strArray67);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl58.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl68);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl58.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl27.scalarAdd(bigDecimal70);
        boolean boolean72 = bigMatrixImpl27.isSingular();
        boolean boolean73 = bigMatrixImpl27.isSquare();
        boolean boolean74 = bigMatrixImpl27.isSquare();
        int[] intArray75 = null;
        int[] intArray80 = new int[] { (byte) 97, (byte) 4, (-2), (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrixImpl27.getSubMatrix(intArray75, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[97, 4, -2, -1]");
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        float float15 = bigDecimal13.floatValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.divideToIntegralValue(bigDecimal13);
        java.math.BigDecimal bigDecimal17 = bigDecimal1.max(bigDecimal11);
        java.math.BigDecimal bigDecimal18 = bigDecimal11.abs();
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray31 = new double[][] { doubleArray21, doubleArray24, doubleArray27, doubleArray30 };
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl33.transpose();
        int int35 = bigMatrixImpl33.getColumnDimension();
        java.math.BigDecimal bigDecimal36 = bigMatrixImpl33.getNorm();
        int int37 = bigMatrixImpl33.getScale();
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl33.getNorm();
        java.math.BigDecimal bigDecimal39 = bigDecimal18.multiply(bigDecimal38);
        int int40 = bigDecimal39.signum();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 97.0f + "'", float15 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        bigMatrixImpl3.setRoundingMode((int) (short) 9);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarAdd((double) 5);
        int int6 = realMatrix1.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = realMatrix1.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix1.inverse();
        double[] doubleArray13 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray13);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray13);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix15.scalarAdd((double) 6);
        double double18 = realMatrix15.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix15.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix15.scalarAdd((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix15.scalarMultiply((double) (byte) 0);
        double[][] doubleArray24 = realMatrix15.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix15.copy();
        boolean boolean26 = realMatrix25.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix8.subtract(realMatrix25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 63.0d + "'", double18 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        int int17 = bigMatrixImpl14.getRoundingMode();
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl32.getNorm();
        int int35 = bigDecimal34.signum();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 4);
        int int38 = bigDecimal37.signum();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.subtract(bigDecimal37);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = bigMatrixImpl14.scalarAdd(bigDecimal39);
        java.math.BigDecimal bigDecimal42 = bigDecimal39.movePointRight((int) (byte) 6);
        long long43 = bigDecimal39.longValueExact();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        java.math.BigDecimal bigDecimal66 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger69 = bigDecimal68.unscaledValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal66.add(bigDecimal68);
        java.math.BigDecimal bigDecimal71 = bigDecimal55.multiply(bigDecimal66);
        java.math.BigDecimal bigDecimal73 = bigDecimal55.pow(100);
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal(0.0d);
        java.lang.String str76 = bigDecimal75.toString();
        java.math.BigDecimal bigDecimal78 = bigDecimal75.setScale(0);
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal(0.0d);
        int int81 = bigDecimal80.intValue();
        long long82 = bigDecimal80.longValue();
        long long83 = bigDecimal80.longValueExact();
        short short84 = bigDecimal80.shortValueExact();
        java.math.BigDecimal bigDecimal85 = bigDecimal75.add(bigDecimal80);
        java.math.BigDecimal bigDecimal86 = bigDecimal85.ulp();
        java.math.BigDecimal bigDecimal87 = bigDecimal55.add(bigDecimal85);
        java.math.BigDecimal bigDecimal88 = bigDecimal39.multiply(bigDecimal85);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 396L + "'", long43 == 396L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigInteger69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0" + "'", str76, "0");
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + short84 + "' != '" + (short) 0 + "'", short84 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigDecimal88);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 62);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal((-2));
        java.math.BigDecimal bigDecimal4 = bigDecimal1.min(bigDecimal3);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal((long) (byte) 0);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal6.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 100);
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl26.transpose();
        double[] doubleArray29 = bigMatrixImpl26.getRowAsDoubleArray((int) (short) 0);
        boolean boolean30 = bigMatrixImpl26.isSingular();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal("100");
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl26.scalarMultiply(bigDecimal32);
        boolean boolean34 = bigDecimal11.equals((java.lang.Object) bigDecimal32);
        java.math.BigDecimal bigDecimal36 = bigDecimal11.movePointRight((int) (byte) 11);
        java.math.BigDecimal bigDecimal37 = bigDecimal6.add(bigDecimal11);
        java.math.MathContext mathContext38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal39 = bigDecimal3.divideToIntegralValue(bigDecimal37, mathContext38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        int int18 = bigMatrixImpl14.getScale();
        int int19 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        java.lang.String str22 = bigDecimal21.toString();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal25 = bigDecimal24.stripTrailingZeros();
        int int26 = bigDecimal24.signum();
        java.math.BigDecimal[] bigDecimalArray27 = bigDecimal21.divideAndRemainder(bigDecimal24);
        java.math.BigDecimal bigDecimal29 = bigDecimal21.pow((int) 'a');
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        java.lang.String str32 = bigDecimal31.toString();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = bigDecimal34.stripTrailingZeros();
        int int36 = bigDecimal34.signum();
        java.math.BigDecimal[] bigDecimalArray37 = bigDecimal31.divideAndRemainder(bigDecimal34);
        java.math.BigDecimal bigDecimal39 = bigDecimal31.pow((int) 'a');
        java.math.BigInteger bigInteger40 = bigDecimal31.toBigIntegerExact();
        java.math.BigDecimal bigDecimal41 = bigDecimal29.add(bigDecimal31);
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal44 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger45 = bigDecimal44.unscaledValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal42.add(bigDecimal44);
        java.math.BigDecimal bigDecimal47 = bigDecimal31.multiply(bigDecimal42);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl14.scalarAdd(bigDecimal31);
        java.math.BigDecimal bigDecimal50 = bigDecimal31.movePointRight((int) (short) 0);
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf(0L, (-32));
        java.math.BigDecimal bigDecimal54 = bigDecimal53.ulp();
        int int55 = bigDecimal53.scale();
        java.math.RoundingMode roundingMode56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal57 = bigDecimal50.divide(bigDecimal53, roundingMode56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-32) + "'", int55 == (-32));
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal33 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal34 = bigDecimal7.multiply(bigDecimal21);
        java.math.BigDecimal bigDecimal35 = bigDecimal7.abs();
        java.math.MathContext mathContext36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal37 = bigDecimal35.round(mathContext36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal35);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 97);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigInteger bigInteger22 = bigDecimal13.toBigIntegerExact();
        java.math.BigDecimal bigDecimal23 = bigDecimal11.add(bigDecimal13);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray37 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigInteger bigInteger49 = bigDecimal43.toBigInteger();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(bigInteger49);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrix41.scalarAdd(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal23, bigDecimal50 };
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray59 = bigMatrix57.getColumn(7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigMatrix57);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str18 = bigMatrixImpl14.toString();
        int int19 = bigMatrixImpl14.getScale();
        java.lang.String str20 = bigMatrixImpl14.toString();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal26 = bigDecimal25.stripTrailingZeros();
        int int27 = bigDecimal25.signum();
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal22.divideAndRemainder(bigDecimal25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl29.getNorm();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.ZERO;
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal38 = bigDecimal33.min(bigDecimal36);
        java.math.BigDecimal[] bigDecimalArray39 = new java.math.BigDecimal[] { bigDecimal38 };
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.min(bigDecimal44);
        java.math.BigDecimal[] bigDecimalArray47 = new java.math.BigDecimal[] { bigDecimal46 };
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal[][] bigDecimalArray56 = new java.math.BigDecimal[][] { bigDecimalArray39, bigDecimalArray47, bigDecimalArray55 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray56);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        java.math.BigDecimal[][] bigDecimalArray60 = bigMatrixImpl59.getDataRef();
        java.math.BigDecimal bigDecimal61 = bigMatrixImpl59.getNorm();
        boolean boolean62 = bigMatrixImpl59.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl59.copy();
        double[] doubleArray65 = bigMatrixImpl59.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray67 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray68 = new java.lang.String[][] { strArray67 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(strArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl59.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl69);
        java.math.BigDecimal bigDecimal71 = bigMatrixImpl59.getNorm();
        java.math.BigDecimal[][] bigDecimalArray72 = bigMatrixImpl59.getData();
        int int73 = bigMatrixImpl59.getScale();
        boolean boolean74 = bigDecimal31.equals((java.lang.Object) bigMatrixImpl59);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = bigMatrixImpl29.scalarMultiply(bigDecimal31);
        java.math.BigDecimal[] bigDecimalArray77 = bigMatrixImpl29.getRow(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl80 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray77);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray82 = bigMatrixImpl14.solve(bigDecimalArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str18, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 64 + "'", int19 == 64);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str20, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 64 + "'", int73 == 64);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigDecimalArray77);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigMatrix81);
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        long long9 = bigDecimal7.longValue();
        long long10 = bigDecimal7.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal7);
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.min(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        java.lang.String str22 = bigDecimal21.toString();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal25 = bigDecimal24.stripTrailingZeros();
        int int26 = bigDecimal24.signum();
        java.math.BigDecimal[] bigDecimalArray27 = bigDecimal21.divideAndRemainder(bigDecimal24);
        java.math.BigDecimal bigDecimal29 = bigDecimal21.pow((int) 'a');
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        java.lang.String str32 = bigDecimal31.toString();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = bigDecimal34.stripTrailingZeros();
        int int36 = bigDecimal34.signum();
        java.math.BigDecimal[] bigDecimalArray37 = bigDecimal31.divideAndRemainder(bigDecimal34);
        java.math.BigDecimal bigDecimal39 = bigDecimal31.pow((int) 'a');
        java.math.BigInteger bigInteger40 = bigDecimal31.toBigIntegerExact();
        java.math.BigDecimal bigDecimal41 = bigDecimal29.add(bigDecimal31);
        java.math.BigDecimal bigDecimal43 = bigDecimal41.pow((int) (byte) 97);
        int int44 = bigDecimal41.scale();
        int int45 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal19.max(bigDecimal41);
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        java.lang.String str49 = bigDecimal48.toString();
        java.math.BigDecimal bigDecimal51 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal52 = bigDecimal51.stripTrailingZeros();
        int int53 = bigDecimal51.signum();
        java.math.BigDecimal[] bigDecimalArray54 = bigDecimal48.divideAndRemainder(bigDecimal51);
        java.math.BigDecimal bigDecimal56 = bigDecimal48.pow((int) 'a');
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        java.lang.String str59 = bigDecimal58.toString();
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = bigDecimal61.stripTrailingZeros();
        int int63 = bigDecimal61.signum();
        java.math.BigDecimal[] bigDecimalArray64 = bigDecimal58.divideAndRemainder(bigDecimal61);
        java.math.BigDecimal bigDecimal66 = bigDecimal58.pow((int) 'a');
        java.math.BigInteger bigInteger67 = bigDecimal58.toBigIntegerExact();
        java.math.BigDecimal bigDecimal68 = bigDecimal56.add(bigDecimal58);
        java.math.BigDecimal bigDecimal69 = bigDecimal56.abs();
        java.math.BigDecimal bigDecimal70 = bigDecimal19.max(bigDecimal56);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray64);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        double[] doubleArray6 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray6);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray6);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray6);
        double[] doubleArray14 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray14);
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix15.operate(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray22);
        double[] doubleArray24 = realMatrix9.preMultiply(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix25.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix25.inverse();
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal37.min(bigDecimal40);
        java.math.BigDecimal[] bigDecimalArray43 = new java.math.BigDecimal[] { bigDecimal42 };
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.min(bigDecimal48);
        java.math.BigDecimal[] bigDecimalArray51 = new java.math.BigDecimal[] { bigDecimal50 };
        java.math.BigDecimal[][] bigDecimalArray52 = new java.math.BigDecimal[][] { bigDecimalArray35, bigDecimalArray43, bigDecimalArray51 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray52);
        int int56 = bigMatrixImpl55.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl55.copy();
        double[] doubleArray59 = bigMatrixImpl55.getRowAsDoubleArray((int) (byte) 1);
        double[] doubleArray60 = realMatrix27.operate(doubleArray59);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray60);
        double[] doubleArray62 = realMatrix1.solve(doubleArray60);
        int int63 = realMatrix1.getRowDimension();
        int int64 = realMatrix1.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        java.lang.String[] strArray1 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        float float23 = bigDecimal21.floatValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.divideToIntegralValue(bigDecimal21);
        java.math.BigDecimal bigDecimal25 = bigDecimal9.max(bigDecimal19);
        int int26 = bigDecimal19.intValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrix7.scalarMultiply(bigDecimal19);
        java.math.RoundingMode roundingMode29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal30 = bigDecimal19.setScale(0, roundingMode29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(bigMatrix2);
        org.junit.Assert.assertNotNull(bigMatrix3);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 97.0f + "'", float23 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(bigMatrix27);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (byte) 110);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = bigMatrixImpl2.getEntryAsDouble((int) (short) -3072, (int) (byte) 85);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double double7 = realMatrix6.getNorm();
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double double14 = realMatrix13.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix13.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix13.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix13.scalarAdd(1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarMultiply((double) 97);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix6.preMultiply(realMatrix19);
        int int23 = realMatrix22.getRowDimension();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 63.0d + "'", double7 == 63.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal bigDecimal21 = bigMatrixImpl14.getNorm();
        boolean boolean22 = bigMatrixImpl14.isSquare();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal("0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(charArray2, (int) (short) 400, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        byte byte5 = bigDecimal4.byteValueExact();
        int int6 = bigDecimal4.precision();
        int int7 = bigDecimal4.intValueExact();
        java.math.BigInteger bigInteger8 = bigDecimal4.toBigIntegerExact();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 0 + "'", byte5 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(bigInteger8);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl18.getColumn(0);
        int int21 = bigMatrixImpl18.getRoundingMode();
        int int22 = bigMatrixImpl18.getScale();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl37.transpose();
        int int39 = bigMatrixImpl37.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl37.getDataRef();
        bigMatrixImpl37.setScale((int) (short) 100);
        boolean boolean43 = bigMatrixImpl37.isSingular();
        int int44 = bigMatrixImpl37.getScale();
        int int45 = bigMatrixImpl37.getColumnDimension();
        double[] doubleArray47 = bigMatrixImpl37.getRowAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl18.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl18.getRowMatrix(3);
        double[] doubleArray52 = bigMatrixImpl18.getColumnAsDoubleArray(0);
        java.math.BigDecimal[][] bigDecimalArray53 = bigMatrixImpl18.getData();
        java.lang.Class<?> wildcardClass54 = bigMatrixImpl18.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarAdd(bigDecimal38);
        java.math.BigDecimal bigDecimal41 = bigDecimal38.movePointLeft((int) (short) -100);
        java.math.BigInteger bigInteger42 = bigDecimal41.unscaledValue();
        java.math.MathContext mathContext44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(bigInteger42, 0, mathContext44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigInteger42);
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        float float5 = bigDecimal2.floatValue();
        java.lang.String str6 = bigDecimal2.toEngineeringString();
        java.math.BigDecimal bigDecimal7 = bigDecimal2.abs();
        float float8 = bigDecimal7.floatValue();
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 100.0f + "'", float5 == 100.0f);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 100.0f + "'", float8 == 100.0f);
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl5.copy();
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray21 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl23.transpose();
        int int25 = bigMatrixImpl23.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl23.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl5.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl23);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl5.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl5.getData();
        int int30 = bigMatrixImpl5.getRowDimension();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((double) 'a');
        double double33 = bigDecimal32.doubleValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl5.scalarMultiply(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal[][] bigDecimalArray59 = new java.math.BigDecimal[][] { bigDecimalArray42, bigDecimalArray50, bigDecimalArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        bigMatrixImpl62.setScale((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl62.copy();
        int int66 = bigMatrix65.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl5.preMultiply(bigMatrix65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 97.0d + "'", double33 == 97.0d);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        boolean boolean10 = bigMatrixImpl8.isSquare();
        bigMatrixImpl8.setRoundingMode((int) (byte) 10);
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal((double) 100.0f);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl8.scalarAdd(bigDecimal14);
        long long16 = bigDecimal14.longValueExact();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((double) 4);
        int int19 = bigDecimal18.scale();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = bigDecimal21.stripTrailingZeros();
        java.math.BigDecimal bigDecimal24 = bigDecimal22.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal25 = bigDecimal18.multiply(bigDecimal22);
        java.math.RoundingMode roundingMode27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal28 = bigDecimal14.divide(bigDecimal25, (int) (byte) 35, roundingMode27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrix15.getRowMatrix(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrix15.transpose();
        int int19 = bigMatrix18.getRowDimension();
        java.math.BigDecimal bigDecimal20 = bigMatrix18.getNorm();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = bigDecimal22.setScale(0);
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        long long29 = bigDecimal27.longValue();
        long long30 = bigDecimal27.longValueExact();
        short short31 = bigDecimal27.shortValueExact();
        java.math.BigDecimal bigDecimal32 = bigDecimal22.add(bigDecimal27);
        java.math.BigDecimal bigDecimal33 = bigDecimal22.abs();
        int int34 = bigDecimal33.scale();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) (byte) 97);
        int int37 = bigDecimal36.intValueExact();
        java.math.BigDecimal bigDecimal40 = bigDecimal36.setScale(0, (int) (short) 0);
        java.math.BigInteger bigInteger41 = bigDecimal40.unscaledValue();
        boolean boolean42 = bigDecimal33.equals((java.lang.Object) bigDecimal40);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrix18.scalarAdd(bigDecimal33);
        long long44 = bigDecimal33.longValueExact();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + short31 + "' != '" + (short) 0 + "'", short31 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        boolean boolean7 = bigMatrixImpl5.isSingular();
        int int8 = bigMatrixImpl5.getRowDimension();
        bigMatrixImpl5.setRoundingMode((int) (byte) 10);
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl5.getDataRef();
        bigMatrixImpl5.setScale((-35));
        java.math.BigDecimal bigDecimal14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl5.scalarAdd(bigDecimal14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        float float13 = bigDecimal11.floatValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.divideToIntegralValue(bigDecimal11);
        java.math.BigDecimal bigDecimal15 = bigDecimal9.negate();
        java.lang.String str16 = bigDecimal9.toString();
        java.math.BigInteger bigInteger17 = bigDecimal9.toBigInteger();
        java.math.MathContext mathContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(bigInteger17, mathContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 97.0f + "'", float13 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(bigInteger17);
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        java.lang.String str30 = bigDecimal29.toEngineeringString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0);
        double[] doubleArray4 = new double[] { 1.0d, 100.0f };
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray14 = new double[][] { doubleArray4, doubleArray7, doubleArray10, doubleArray13 };
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray14);
        boolean boolean16 = bigMatrix15.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrix15.copy();
        java.math.BigDecimal bigDecimal18 = bigMatrix15.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        java.math.BigDecimal bigDecimal21 = bigMatrix20.getDeterminant();
        java.math.BigDecimal bigDecimal22 = bigDecimal18.max(bigDecimal21);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal24 = bigDecimal1.divide(bigDecimal18, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigMatrix20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.lang.String str17 = bigMatrixImpl14.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal19.divideAndRemainder(bigDecimal21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        java.lang.String str25 = bigMatrixImpl24.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl24.transpose();
        java.lang.String[] strArray28 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray29 = new java.lang.String[][] { strArray28 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(strArray29);
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl30.getData();
        int int32 = bigMatrixImpl30.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray33 = bigMatrixImpl30.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal36 = bigMatrix35.getDeterminant();
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl30.scalarMultiply(bigDecimal36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl24.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl30);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl14.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl24);
        boolean boolean40 = bigMatrixImpl14.isSingular();
        double[][] doubleArray41 = bigMatrixImpl14.getDataAsDoubleArray();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str17, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "BigMatrixImpl{{1},{0}}" + "'", str25, "BigMatrixImpl{{1},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(doubleArray41);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) (byte) 10);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        int int4 = bigDecimal3.intValue();
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        java.math.BigDecimal bigDecimal8 = bigDecimal3.min(bigDecimal6);
        java.math.BigDecimal[] bigDecimalArray9 = new java.math.BigDecimal[] { bigDecimal8 };
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.min(bigDecimal14);
        java.math.BigDecimal[] bigDecimalArray17 = new java.math.BigDecimal[] { bigDecimal16 };
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal19.min(bigDecimal22);
        java.math.BigDecimal[] bigDecimalArray25 = new java.math.BigDecimal[] { bigDecimal24 };
        java.math.BigDecimal[][] bigDecimalArray26 = new java.math.BigDecimal[][] { bigDecimalArray9, bigDecimalArray17, bigDecimalArray25 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray26);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray26);
        java.math.BigDecimal[][] bigDecimalArray30 = bigMatrixImpl29.getData();
        boolean boolean31 = bigMatrixImpl29.isSquare();
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl29.getNorm();
        java.math.BigDecimal bigDecimal33 = bigMatrixImpl29.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl29.transpose();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((double) (short) -100);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl29.scalarAdd(bigDecimal36);
        java.math.BigDecimal bigDecimal38 = bigDecimal1.add(bigDecimal36);
        java.math.MathContext mathContext39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal40 = bigDecimal1.negate(mathContext39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigDecimal38);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray3 = realMatrix1.getColumn(4);
        double[][] doubleArray4 = realMatrix1.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix1.inverse();
        int int7 = realMatrix1.getColumnDimension();
        int int8 = realMatrix1.getRowDimension();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 110, 4);
        int int3 = bigMatrixImpl2.getRoundingMode();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException1 = new org.apache.commons.math.linear.MatrixIndexException("org.apache.commons.math.linear.InvalidMatrixException: hi!");
        java.lang.Throwable[] throwableArray2 = matrixIndexException1.getSuppressed();
        java.lang.Throwable[] throwableArray3 = matrixIndexException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(7, 4);
        bigMatrixImpl2.setScale(10);
        java.math.BigDecimal[] bigDecimalArray6 = bigMatrixImpl2.getColumn(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl2.transpose();
        org.junit.Assert.assertNotNull(bigDecimalArray6);
        org.junit.Assert.assertNotNull(bigMatrix7);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal9.divideAndRemainder(bigDecimal11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = bigMatrixImpl13.copy();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        int int24 = bigMatrixImpl23.getRoundingMode();
        boolean boolean25 = bigMatrixImpl23.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl23);
        boolean boolean27 = bigMatrixImpl5.equals((java.lang.Object) bigMatrix26);
        double[][] doubleArray28 = bigMatrix26.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrix26.copy();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(bigMatrix29);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        java.lang.String[] strArray11 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl5.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl16);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl5.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        double[] doubleArray24 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray24);
        double double26 = realMatrix25.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix25.scalarAdd((double) '4');
        boolean boolean29 = bigMatrixImpl19.equals((java.lang.Object) realMatrix28);
        double[] doubleArray34 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray34);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        double[] doubleArray42 = realMatrix35.operate(doubleArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix44.transpose();
        double[][] doubleArray46 = realMatrix44.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray46);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix47.copy();
        double[] doubleArray53 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix54 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray53);
        double[] doubleArray59 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix60 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray59);
        double[] doubleArray61 = realMatrix54.operate(doubleArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray61);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray61);
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray61);
        double[] doubleArray65 = realMatrix48.operate(doubleArray61);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray61);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray61);
        double[] doubleArray68 = realMatrix28.operate(doubleArray61);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray61);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[143055.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix69);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        java.math.MathContext mathContext1 = null;
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((double) 0.0f, mathContext1);
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf(10L);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.plus();
        double double9 = bigDecimal8.doubleValue();
        java.math.BigDecimal bigDecimal10 = bigDecimal4.max(bigDecimal8);
        java.math.BigDecimal bigDecimal11 = bigDecimal2.remainder(bigDecimal4);
        byte byte12 = bigDecimal2.byteValueExact();
        int int13 = bigDecimal2.scale();
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl20 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray19);
        int int23 = bigMatrix22.getColumnDimension();
        int int24 = bigMatrix22.getRowDimension();
        int int25 = bigMatrix22.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigInteger bigInteger10 = bigDecimal1.toBigIntegerExact();
        int int11 = bigDecimal1.precision();
        java.math.BigInteger bigInteger12 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(bigInteger12, 0);
        java.math.BigDecimal bigDecimal15 = null;
        java.math.RoundingMode roundingMode17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal18 = bigDecimal14.divide(bigDecimal15, (int) (byte) 10, roundingMode17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigInteger bigInteger29 = bigDecimal23.toBigInteger();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(bigInteger29);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.multiply(bigDecimal32);
        java.math.BigDecimal bigDecimal36 = bigDecimal30.negate();
        java.math.BigDecimal bigDecimal37 = bigDecimal21.add(bigDecimal36);
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal40 = bigDecimal39.stripTrailingZeros();
        float float41 = bigDecimal39.floatValue();
        java.math.BigDecimal bigDecimal42 = bigDecimal39.ulp();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        java.lang.String str45 = bigDecimal44.toString();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        int int49 = bigDecimal47.signum();
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal44.divideAndRemainder(bigDecimal47);
        java.math.BigDecimal bigDecimal52 = bigDecimal44.pow((int) 'a');
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        java.lang.String str55 = bigDecimal54.toString();
        java.math.BigDecimal bigDecimal57 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal58 = bigDecimal57.stripTrailingZeros();
        int int59 = bigDecimal57.signum();
        java.math.BigDecimal[] bigDecimalArray60 = bigDecimal54.divideAndRemainder(bigDecimal57);
        java.math.BigDecimal bigDecimal62 = bigDecimal54.pow((int) 'a');
        java.math.BigInteger bigInteger63 = bigDecimal54.toBigIntegerExact();
        java.math.BigDecimal bigDecimal64 = bigDecimal52.add(bigDecimal54);
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal67 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger68 = bigDecimal67.unscaledValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal65.add(bigDecimal67);
        java.math.BigDecimal bigDecimal70 = bigDecimal54.multiply(bigDecimal65);
        java.math.BigDecimal bigDecimal71 = bigDecimal42.divide(bigDecimal65);
        java.math.BigDecimal bigDecimal72 = bigDecimal36.remainder(bigDecimal42);
        double double73 = bigDecimal72.doubleValue();
        java.lang.String str74 = bigDecimal72.toString();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal("970");
        java.math.BigDecimal bigDecimal77 = bigDecimal72.divide(bigDecimal76);
        java.math.BigInteger bigInteger78 = bigDecimal76.unscaledValue();
        java.math.BigDecimal bigDecimal79 = new java.math.BigDecimal(bigInteger78);
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(0.0d);
        java.lang.String str82 = bigDecimal81.toString();
        java.math.BigDecimal bigDecimal84 = bigDecimal81.setScale(0);
        byte byte85 = bigDecimal84.byteValueExact();
        int int86 = bigDecimal84.precision();
        int int87 = bigDecimal84.intValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal90 = bigMatrix89.getDeterminant();
        java.math.BigDecimal[] bigDecimalArray91 = bigDecimal84.divideAndRemainder(bigDecimal90);
        java.math.BigDecimal bigDecimal93 = bigDecimal79.divide(bigDecimal90, (int) (short) 0);
        int int94 = bigDecimal90.scale();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + float41 + "' != '" + 97.0f + "'", float41 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigInteger63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0" + "'", str74, "0");
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertTrue("'" + byte85 + "' != '" + (byte) 0 + "'", byte85 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(bigMatrix89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimalArray91);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2880 + "'", int94 == 2880);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        double[] doubleArray3 = new double[] { 62.0d, 52.0d, (-35) };
        double[] doubleArray7 = new double[] { 62.0d, 52.0d, (-35) };
        double[] doubleArray11 = new double[] { 62.0d, 52.0d, (-35) };
        double[][] doubleArray12 = new double[][] { doubleArray3, doubleArray7, doubleArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[62.0, 52.0, -35.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[62.0, 52.0, -35.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[62.0, 52.0, -35.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.negate();
        double[] doubleArray7 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray7);
        double[] doubleArray13 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray13);
        double[] doubleArray15 = realMatrix8.operate(doubleArray13);
        double[] doubleArray20 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix22.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix8.multiply(realMatrix22);
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[] doubleArray37 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray38 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37 };
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray38);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl40.transpose();
        boolean boolean42 = bigMatrixImpl40.isSingular();
        double[] doubleArray44 = bigMatrixImpl40.getColumnAsDoubleArray(0);
        double[] doubleArray45 = realMatrix8.operate(doubleArray44);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray45);
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray45);
        java.math.BigDecimal bigDecimal48 = bigMatrix47.getNorm();
        java.math.BigDecimal bigDecimal50 = bigDecimal48.scaleByPowerOfTen((int) (byte) 32);
        java.math.BigDecimal bigDecimal51 = bigDecimal1.add(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[61.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode(10);
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray35 = bigDecimal32.divideAndRemainder(bigDecimal34);
        java.math.BigDecimal bigDecimal37 = bigDecimal34.movePointLeft((-1));
        long long38 = bigDecimal37.longValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarMultiply(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray41 = bigMatrixImpl27.getRow((int) (byte) 0);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal47 = bigDecimal46.stripTrailingZeros();
        int int48 = bigDecimal46.signum();
        java.math.BigDecimal[] bigDecimalArray49 = bigDecimal43.divideAndRemainder(bigDecimal46);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray49);
        int int51 = bigMatrixImpl50.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl50.transpose();
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        long long56 = bigDecimal54.longValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal54.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl50.scalarAdd(bigDecimal57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl27.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 970L + "'", long38 == 970L);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigMatrix58);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        org.apache.commons.math.linear.MatrixIndexException matrixIndexException1 = new org.apache.commons.math.linear.MatrixIndexException("1.00E-30");
        org.apache.commons.math.linear.InvalidMatrixException invalidMatrixException3 = new org.apache.commons.math.linear.InvalidMatrixException("org.apache.commons.math.linear.InvalidMatrixException: ");
        matrixIndexException1.addSuppressed((java.lang.Throwable) invalidMatrixException3);
        java.lang.String str5 = invalidMatrixException3.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.linear.InvalidMatrixException: org.apache.commons.math.linear.InvalidMatrixException: " + "'", str5, "org.apache.commons.math.linear.InvalidMatrixException: org.apache.commons.math.linear.InvalidMatrixException: ");
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        double[] doubleArray10 = bigMatrixImpl8.getRowAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray12 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray12 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray13);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray13);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray13);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(strArray13);
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray13);
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray13);
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray13);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray13);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl22 = new org.apache.commons.math.linear.BigMatrixImpl(strArray13);
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal[][] bigDecimalArray47 = new java.math.BigDecimal[][] { bigDecimalArray30, bigDecimalArray38, bigDecimalArray46 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        org.apache.commons.math.linear.BigMatrix bigMatrix49 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray47);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl50 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray47);
        java.math.BigDecimal[][] bigDecimalArray51 = bigMatrixImpl50.getDataRef();
        java.math.BigDecimal bigDecimal52 = bigMatrixImpl50.getNorm();
        boolean boolean53 = bigMatrixImpl50.isSquare();
        java.math.BigDecimal[][] bigDecimalArray54 = bigMatrixImpl50.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl50.transpose();
        bigMatrixImpl50.setRoundingMode(7);
        boolean boolean58 = bigMatrixImpl50.isSingular();
        int int59 = bigMatrixImpl50.getRowDimension();
        boolean boolean60 = bigMatrixImpl50.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl22.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl8.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(bigMatrix20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimalArray47);
        org.junit.Assert.assertNotNull(bigMatrix49);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(bigMatrix61);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf(1L, (int) (byte) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.toBigInteger();
        java.math.BigDecimal bigDecimal4 = bigDecimal2.ulp();
        java.math.BigInteger bigInteger5 = bigDecimal4.toBigInteger();
        double double6 = bigDecimal4.doubleValue();
        java.math.MathContext mathContext7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal8 = bigDecimal4.round(mathContext7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigInteger5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0E-100d + "'", double6 == 1.0E-100d);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal4 = bigDecimal2.scaleByPowerOfTen(3);
        byte byte5 = bigDecimal2.byteValueExact();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 97 + "'", byte5 == (byte) 97);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) 400L);
        org.junit.Assert.assertNotNull(bigDecimal1);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(charArray2);
        java.math.MathContext mathContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(charArray2, (int) (byte) -54, 2, mathContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        java.lang.Class<?> wildcardClass9 = bigDecimalArray7.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigInteger bigInteger26 = bigDecimal25.toBigIntegerExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl18.scalarAdd(bigDecimal25);
        int int28 = bigMatrixImpl18.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl18.getDataRef();
        double[] doubleArray34 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray34);
        double[] doubleArray40 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        double[] doubleArray42 = realMatrix35.operate(doubleArray40);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix44.transpose();
        double[][] doubleArray46 = realMatrix44.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl47 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray46);
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray60 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59 };
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl62.transpose();
        double[] doubleArray65 = bigMatrixImpl62.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str66 = bigMatrixImpl62.toString();
        int int67 = bigMatrixImpl62.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = bigMatrixImpl47.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl62);
        java.math.BigDecimal[] bigDecimalArray70 = bigMatrixImpl47.getRow((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray70);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray70);
        java.math.BigDecimal[] bigDecimalArray73 = bigMatrixImpl18.preMultiply(bigDecimalArray70);
        int int74 = bigMatrixImpl18.getScale();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str66, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 64 + "'", int67 == 64);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 64 + "'", int74 == 64);
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        float float3 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
        java.math.BigDecimal bigDecimal5 = bigDecimal4.ulp();
        java.lang.String str6 = bigDecimal4.toEngineeringString();
        java.math.BigDecimal bigDecimal7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal8 = bigDecimal4.add(bigDecimal7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(0.0d);
        java.lang.String str26 = bigDecimal25.toString();
        java.math.BigDecimal bigDecimal28 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal29 = bigDecimal28.stripTrailingZeros();
        int int30 = bigDecimal28.signum();
        java.math.BigDecimal[] bigDecimalArray31 = bigDecimal25.divideAndRemainder(bigDecimal28);
        java.math.BigDecimal bigDecimal33 = bigDecimal25.pow((int) 'a');
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        java.lang.String str36 = bigDecimal35.toString();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        int int40 = bigDecimal38.signum();
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal35.divideAndRemainder(bigDecimal38);
        java.math.BigDecimal bigDecimal43 = bigDecimal35.pow((int) 'a');
        java.math.BigInteger bigInteger44 = bigDecimal35.toBigIntegerExact();
        java.math.BigDecimal bigDecimal45 = bigDecimal33.add(bigDecimal35);
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        java.lang.String str48 = bigDecimal47.toString();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        int int52 = bigDecimal50.signum();
        java.math.BigDecimal[] bigDecimalArray53 = bigDecimal47.divideAndRemainder(bigDecimal50);
        java.math.BigDecimal bigDecimal55 = bigDecimal47.pow((int) 'a');
        java.math.BigInteger bigInteger56 = bigDecimal47.toBigIntegerExact();
        float float57 = bigDecimal47.floatValue();
        java.math.BigDecimal bigDecimal58 = bigDecimal33.add(bigDecimal47);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal61 = bigDecimal47.divideToIntegralValue(bigDecimal60);
        java.math.BigDecimal bigDecimal62 = bigDecimal23.divideToIntegralValue(bigDecimal60);
        boolean boolean63 = bigMatrixImpl14.equals((java.lang.Object) bigDecimal62);
        double[] doubleArray66 = new double[] { 1.0d, 100.0f };
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[] doubleArray72 = new double[] { 1.0d, 100.0f };
        double[] doubleArray75 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray76 = new double[][] { doubleArray66, doubleArray69, doubleArray72, doubleArray75 };
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray76);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray76);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl78.transpose();
        int int80 = bigMatrixImpl78.getColumnDimension();
        java.math.BigDecimal bigDecimal81 = bigMatrixImpl78.getNorm();
        int int82 = bigMatrixImpl78.getScale();
        boolean boolean83 = bigMatrixImpl78.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrixImpl78.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrixImpl14.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl78);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertTrue("'" + float57 + "' != '" + 0.0f + "'", float57 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 64 + "'", int82 == 64);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(bigMatrix84);
        org.junit.Assert.assertNotNull(bigMatrix85);
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl29.getNorm();
        java.math.BigInteger bigInteger31 = bigDecimal30.unscaledValue();
        java.lang.String str32 = bigDecimal30.toString();
        java.lang.String str33 = bigDecimal30.toPlainString();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        long long37 = bigDecimal35.longValue();
        long long38 = bigDecimal35.longValueExact();
        int int39 = bigDecimal35.precision();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        long long43 = bigDecimal41.longValue();
        long long44 = bigDecimal41.longValueExact();
        java.math.BigDecimal bigDecimal45 = bigDecimal35.add(bigDecimal41);
        java.math.BigDecimal bigDecimal47 = bigDecimal41.pow(3);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        java.lang.String str50 = bigDecimal49.toString();
        java.math.BigDecimal bigDecimal52 = bigDecimal49.setScale(0);
        byte byte53 = bigDecimal52.byteValueExact();
        java.math.BigDecimal bigDecimal54 = bigDecimal52.plus();
        java.math.BigDecimal bigDecimal55 = bigDecimal47.max(bigDecimal54);
        java.math.BigDecimal bigDecimal56 = bigDecimal54.abs();
        java.math.BigDecimal bigDecimal57 = bigDecimal54.stripTrailingZeros();
        java.math.BigDecimal bigDecimal58 = bigDecimal30.subtract(bigDecimal57);
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        java.lang.String str61 = bigDecimal60.toString();
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal64 = bigDecimal63.stripTrailingZeros();
        int int65 = bigDecimal63.signum();
        java.math.BigDecimal[] bigDecimalArray66 = bigDecimal60.divideAndRemainder(bigDecimal63);
        java.math.BigDecimal bigDecimal68 = bigDecimal60.pow((int) 'a');
        java.math.BigDecimal bigDecimal70 = new java.math.BigDecimal(0.0d);
        java.lang.String str71 = bigDecimal70.toString();
        java.math.BigDecimal bigDecimal73 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal74 = bigDecimal73.stripTrailingZeros();
        int int75 = bigDecimal73.signum();
        java.math.BigDecimal[] bigDecimalArray76 = bigDecimal70.divideAndRemainder(bigDecimal73);
        java.math.BigDecimal bigDecimal78 = bigDecimal70.pow((int) 'a');
        java.math.BigInteger bigInteger79 = bigDecimal70.toBigIntegerExact();
        java.math.BigDecimal bigDecimal80 = bigDecimal68.add(bigDecimal70);
        java.math.BigDecimal bigDecimal82 = bigDecimal80.pow((int) (byte) 97);
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger85 = bigDecimal84.unscaledValue();
        short short86 = bigDecimal84.shortValueExact();
        java.math.BigDecimal bigDecimal87 = bigDecimal82.divide(bigDecimal84);
        byte byte88 = bigDecimal84.byteValueExact();
        java.math.BigDecimal bigDecimal89 = bigDecimal84.plus();
        int int90 = bigDecimal84.intValueExact();
        boolean boolean91 = bigDecimal58.equals((java.lang.Object) bigDecimal84);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0" + "'", str50, "0");
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + byte53 + "' != '" + (byte) 0 + "'", byte53 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0" + "'", str61, "0");
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimal64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray66);
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertTrue("'" + short86 + "' != '" + (short) 100 + "'", short86 == (short) 100);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertTrue("'" + byte88 + "' != '" + (byte) 100 + "'", byte88 == (byte) 100);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[][] doubleArray6 = bigMatrixImpl5.getDataAsDoubleArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix11 = bigMatrixImpl5.getSubMatrix((int) (short) 0, (-35), (int) (short) 388, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double double9 = realMatrix6.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix6.copy();
        double[] doubleArray15 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix17.scalarAdd((double) 6);
        int int20 = realMatrix17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix17.scalarAdd(10.0d);
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double double29 = realMatrix28.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix22.preMultiply(realMatrix31);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 1.0f);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix41.scalarAdd((double) 6);
        int int44 = realMatrix41.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix41.scalarAdd(10.0d);
        double[] doubleArray51 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix52 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray51);
        double double53 = realMatrix52.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrix52.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix56 = realMatrix46.preMultiply(realMatrix55);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = realMatrix56.scalarAdd((double) 1.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix32.subtract(realMatrix58);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix32.scalarMultiply((double) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix10.multiply(realMatrix32);
        double[] doubleArray67 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix68 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray67);
        double[] doubleArray73 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix74 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray73);
        double[] doubleArray75 = realMatrix68.operate(doubleArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray73);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray73);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrix77.transpose();
        double[][] doubleArray79 = realMatrix77.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix80 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray79);
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrix62.multiply(realMatrix80);
        int int82 = realMatrix80.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix87 = realMatrix80.getSubMatrix((int) (short) -2805, (int) (short) -1, 44, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 63.0d + "'", double9 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.lang.String str3 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal5 = bigDecimal1.movePointRight(64);
        java.math.BigDecimal bigDecimal7 = bigDecimal5.movePointLeft((int) (short) 0);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        java.lang.String str10 = bigDecimal9.toString();
        java.math.BigDecimal bigDecimal12 = bigDecimal9.setScale(0);
        byte byte13 = bigDecimal12.byteValueExact();
        int int14 = bigDecimal12.precision();
        short short15 = bigDecimal12.shortValueExact();
        java.math.BigDecimal bigDecimal16 = bigDecimal5.multiply(bigDecimal12);
        long long17 = bigDecimal16.longValue();
        int int18 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal16.negate();
        byte byte20 = bigDecimal16.byteValue();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100" + "'", str3, "100");
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 0 + "'", byte13 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 0 + "'", short15 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + byte20 + "' != '" + (byte) 0 + "'", byte20 == (byte) 0);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        java.math.BigDecimal[][] bigDecimalArray15 = bigMatrix14.getData();
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray28 = new double[][] { doubleArray18, doubleArray21, doubleArray24, doubleArray27 };
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl30.transpose();
        double[] doubleArray33 = bigMatrixImpl30.getRowAsDoubleArray((int) (short) 0);
        boolean boolean34 = bigMatrixImpl30.isSingular();
        java.math.BigDecimal[][] bigDecimalArray35 = bigMatrixImpl30.getData();
        java.math.BigDecimal[][] bigDecimalArray36 = bigMatrixImpl30.getDataRef();
        int int37 = bigMatrixImpl30.getRoundingMode();
        int int38 = bigMatrixImpl30.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrix14.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl30);
        double[][] doubleArray40 = bigMatrixImpl30.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray40);
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertNotNull(realMatrix42);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigInteger bigInteger35 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        int int37 = bigDecimal36.precision();
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray50 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49 };
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        java.math.BigDecimal[] bigDecimalArray56 = bigMatrix54.getColumn(0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl57.getNorm();
        int int59 = bigDecimal36.compareTo(bigDecimal58);
        java.math.BigDecimal bigDecimal61 = bigDecimal58.movePointRight((int) (byte) 10);
        java.math.BigDecimal bigDecimal63 = new java.math.BigDecimal((long) (byte) 6);
        long long64 = bigDecimal63.longValue();
        java.math.BigDecimal bigDecimal65 = bigDecimal63.negate();
        boolean boolean66 = bigDecimal61.equals((java.lang.Object) bigDecimal65);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 6L + "'", long64 == 6L);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        double[][] doubleArray29 = bigMatrixImpl27.getDataAsDoubleArray();
        double[] doubleArray31 = bigMatrixImpl27.getRowAsDoubleArray((int) (short) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        byte byte5 = bigDecimal4.byteValueExact();
        int int6 = bigDecimal4.precision();
        double[] doubleArray9 = new double[] { 1.0d, 100.0f };
        double[] doubleArray12 = new double[] { 1.0d, 100.0f };
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray19 = new double[][] { doubleArray9, doubleArray12, doubleArray15, doubleArray18 };
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray19);
        boolean boolean21 = bigMatrix20.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrix20.copy();
        java.math.BigDecimal bigDecimal23 = bigMatrix20.getNorm();
        java.math.BigDecimal bigDecimal25 = bigDecimal23.scaleByPowerOfTen((int) '#');
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigInteger bigInteger36 = bigDecimal27.toBigIntegerExact();
        float float37 = bigDecimal27.floatValue();
        double[] doubleArray42 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        double[] doubleArray48 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        double[] doubleArray50 = realMatrix43.operate(doubleArray48);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray50);
        java.math.BigDecimal bigDecimal52 = bigMatrix51.getNorm();
        java.math.BigDecimal bigDecimal53 = bigDecimal27.subtract(bigDecimal52);
        java.math.BigDecimal bigDecimal54 = bigDecimal25.min(bigDecimal27);
        java.math.BigDecimal bigDecimal55 = bigDecimal4.min(bigDecimal54);
        java.lang.String[] strArray57 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray57);
        boolean boolean62 = bigDecimal4.equals((java.lang.Object) strArray57);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 0 + "'", byte5 == (byte) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(bigMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 0.0f + "'", float37 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl8.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl12 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray11);
        java.math.BigDecimal[] bigDecimalArray14 = bigMatrixImpl12.getColumn(0);
        int[] intArray21 = new int[] { (short) 1, (short) 2805, 5, 52, (byte) 6, 97 };
        int[] intArray22 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl12.getSubMatrix(intArray21, intArray22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: selected row and column index arrays must be non-empty");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1, 2805, 5, 52, 6, 97]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal31 = bigDecimal30.negate();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.scalarMultiply(bigDecimal30);
        java.math.BigInteger bigInteger33 = bigDecimal30.unscaledValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(bigInteger33);
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(0.0d);
        int int37 = bigDecimal36.intValue();
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal41 = bigDecimal36.min(bigDecimal39);
        java.math.BigDecimal[] bigDecimalArray42 = new java.math.BigDecimal[] { bigDecimal41 };
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(0.0d);
        int int45 = bigDecimal44.intValue();
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal44.min(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray50 = new java.math.BigDecimal[] { bigDecimal49 };
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        int int56 = bigDecimal55.intValue();
        java.math.BigDecimal bigDecimal57 = bigDecimal52.min(bigDecimal55);
        java.math.BigDecimal[] bigDecimalArray58 = new java.math.BigDecimal[] { bigDecimal57 };
        java.math.BigDecimal[][] bigDecimalArray59 = new java.math.BigDecimal[][] { bigDecimalArray42, bigDecimalArray50, bigDecimalArray58 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray59);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray59);
        java.math.BigDecimal[][] bigDecimalArray63 = bigMatrixImpl62.getDataRef();
        bigMatrixImpl62.setRoundingMode(10);
        int int66 = bigMatrixImpl62.getScale();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        java.lang.String str69 = bigDecimal68.toString();
        java.math.BigDecimal bigDecimal71 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal72 = bigDecimal71.stripTrailingZeros();
        int int73 = bigDecimal71.signum();
        java.math.BigDecimal[] bigDecimalArray74 = bigDecimal68.divideAndRemainder(bigDecimal71);
        java.math.BigDecimal bigDecimal76 = bigDecimal68.pow((int) 'a');
        java.math.BigDecimal bigDecimal78 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal79 = bigDecimal78.stripTrailingZeros();
        float float80 = bigDecimal78.floatValue();
        java.math.BigDecimal bigDecimal81 = bigDecimal76.divideToIntegralValue(bigDecimal78);
        java.math.BigDecimal bigDecimal82 = bigDecimal78.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl62.scalarMultiply(bigDecimal82);
        java.math.BigDecimal bigDecimal85 = new java.math.BigDecimal(0.0d);
        java.math.BigDecimal bigDecimal86 = bigDecimal85.stripTrailingZeros();
        java.math.BigDecimal bigDecimal89 = bigDecimal86.setScale((-100), 0);
        java.math.BigDecimal bigDecimal90 = bigDecimal82.multiply(bigDecimal89);
        java.math.MathContext mathContext91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal92 = bigDecimal34.multiply(bigDecimal82, mathContext91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 64 + "'", int66 == 64);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0" + "'", str69, "0");
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertTrue("'" + float80 + "' != '" + 97.0f + "'", float80 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigDecimal90);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray3 = realMatrix1.getColumn(4);
        double[][] doubleArray4 = realMatrix1.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double[] doubleArray9 = realMatrix7.getColumn(4);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray9);
        double[] doubleArray11 = realMatrix5.preMultiply(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix13);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        float float15 = bigDecimal13.floatValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal11.divideToIntegralValue(bigDecimal13);
        java.math.BigDecimal bigDecimal17 = bigDecimal1.max(bigDecimal11);
        java.math.BigDecimal bigDecimal18 = bigDecimal11.abs();
        java.math.BigDecimal bigDecimal19 = bigDecimal11.ulp();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 97.0f + "'", float15 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix15.scalarMultiply((double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix15.getSubMatrix((int) (short) 10, 0, (int) (short) 4, (int) (byte) 6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        java.lang.String[] strArray11 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl5.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl16);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl5.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray18);
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((double) 0L);
        java.math.BigDecimal bigDecimal24 = bigDecimal22.pow(97);
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrix20.scalarAdd(bigDecimal24);
        long long26 = bigDecimal24.longValueExact();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigMatrix20);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        long long39 = bigDecimal37.longValue();
        long long40 = bigDecimal37.longValueExact();
        int int41 = bigDecimal37.precision();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        long long45 = bigDecimal43.longValue();
        long long46 = bigDecimal43.longValueExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal37.add(bigDecimal43);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal bigDecimal55 = bigDecimal47.min(bigDecimal52);
        java.math.BigDecimal bigDecimal57 = bigDecimal55.movePointRight((int) (short) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl27.scalarAdd(bigDecimal55);
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) (short) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl27.scalarMultiply(bigDecimal60);
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrix61.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrix61.copy();
        double[] doubleArray66 = new double[] { 1.0d, 100.0f };
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[] doubleArray72 = new double[] { 1.0d, 100.0f };
        double[] doubleArray75 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray76 = new double[][] { doubleArray66, doubleArray69, doubleArray72, doubleArray75 };
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray76);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl78 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray76);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl78.transpose();
        double[] doubleArray81 = bigMatrixImpl78.getRowAsDoubleArray((int) (short) 0);
        boolean boolean82 = bigMatrixImpl78.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl78.copy();
        int int84 = bigMatrixImpl78.getScale();
        int int85 = bigMatrixImpl78.getRoundingMode();
        boolean boolean86 = bigMatrixImpl78.isSingular();
        java.math.BigDecimal bigDecimal87 = bigMatrixImpl78.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix88 = bigMatrix61.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 64 + "'", int84 == 64);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(bigDecimal87);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix9);
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str18 = bigMatrixImpl14.toString();
        int int19 = bigMatrixImpl14.getScale();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl14.getRowMatrix((int) (short) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrix22.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrix22.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrix22.getColumnMatrix((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str18, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 64 + "'", int19 == 64);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertNotNull(bigMatrix24);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getDataRef();
        double[][] doubleArray19 = bigMatrixImpl14.getDataAsDoubleArray();
        boolean boolean20 = bigMatrixImpl14.isSquare();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        float float24 = bigDecimal22.floatValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal22.ulp();
        double double26 = bigDecimal22.doubleValue();
        float float27 = bigDecimal22.floatValue();
        float float28 = bigDecimal22.floatValue();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl14.scalarAdd(bigDecimal22);
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigInteger bigInteger37 = bigDecimal31.toBigInteger();
        int int38 = bigDecimal31.precision();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal40.divideAndRemainder(bigDecimal42);
        java.math.BigDecimal bigDecimal44 = bigDecimal31.multiply(bigDecimal42);
        java.math.BigDecimal bigDecimal45 = bigDecimal31.abs();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) (byte) 97);
        java.math.BigDecimal bigDecimal48 = bigDecimal45.subtract(bigDecimal47);
        java.math.BigDecimal bigDecimal49 = bigDecimal47.stripTrailingZeros();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrix29.scalarAdd(bigDecimal47);
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[] doubleArray59 = new double[] { 1.0d, 100.0f };
        double[] doubleArray62 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray63 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix64 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl65 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray63);
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal74 = bigDecimal69.min(bigDecimal72);
        java.math.BigInteger bigInteger75 = bigDecimal69.toBigInteger();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(bigInteger75);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrix67.scalarAdd(bigDecimal76);
        java.math.BigDecimal bigDecimal78 = bigDecimal76.plus();
        long long79 = bigDecimal78.longValue();
        java.math.BigDecimal bigDecimal80 = bigDecimal78.ulp();
        java.lang.String[] strArray82 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray83 = new java.lang.String[][] { strArray82 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl84 = new org.apache.commons.math.linear.BigMatrixImpl(strArray83);
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray83);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray83);
        org.apache.commons.math.linear.BigMatrix bigMatrix87 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray83);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl88 = new org.apache.commons.math.linear.BigMatrixImpl(strArray83);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl89 = new org.apache.commons.math.linear.BigMatrixImpl(strArray83);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl90 = new org.apache.commons.math.linear.BigMatrixImpl(strArray83);
        boolean boolean91 = bigMatrixImpl90.isSquare();
        java.math.BigDecimal bigDecimal92 = bigMatrixImpl90.getDeterminant();
        java.math.BigDecimal bigDecimal93 = bigDecimal80.subtract(bigDecimal92);
        java.math.RoundingMode roundingMode94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal95 = bigDecimal47.divide(bigDecimal80, roundingMode94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 97.0f + "'", float24 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 97.0d + "'", double26 == 97.0d);
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 97.0f + "'", float27 == 97.0f);
        org.junit.Assert.assertTrue("'" + float28 + "' != '" + 97.0f + "'", float28 == 97.0f);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(bigMatrix64);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertNotNull(bigInteger75);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(bigMatrix85);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertNotNull(bigMatrix87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigDecimal93);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("0E-35");
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        float float3 = bigDecimal1.floatValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
        double double5 = bigDecimal1.doubleValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        int int11 = bigDecimal10.intValue();
        java.math.BigDecimal bigDecimal12 = bigDecimal7.min(bigDecimal10);
        java.math.BigDecimal[] bigDecimalArray13 = new java.math.BigDecimal[] { bigDecimal12 };
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal18 = new java.math.BigDecimal(0.0d);
        int int19 = bigDecimal18.intValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.min(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray21 = new java.math.BigDecimal[] { bigDecimal20 };
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        java.math.BigDecimal bigDecimal28 = bigDecimal23.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray29 = new java.math.BigDecimal[] { bigDecimal28 };
        java.math.BigDecimal[][] bigDecimalArray30 = new java.math.BigDecimal[][] { bigDecimalArray13, bigDecimalArray21, bigDecimalArray29 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray30);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl33.getDataRef();
        java.math.BigDecimal bigDecimal35 = bigMatrixImpl33.getNorm();
        boolean boolean36 = bigMatrixImpl33.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl33.copy();
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl33.getNorm();
        double double39 = bigDecimal38.doubleValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal1.max(bigDecimal38);
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        long long44 = bigDecimal42.longValue();
        long long45 = bigDecimal42.longValueExact();
        int int46 = bigDecimal42.precision();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        long long50 = bigDecimal48.longValue();
        long long51 = bigDecimal48.longValueExact();
        java.math.BigDecimal bigDecimal52 = bigDecimal42.add(bigDecimal48);
        java.math.BigDecimal bigDecimal54 = bigDecimal48.pow(3);
        java.math.BigInteger bigInteger55 = bigDecimal54.toBigIntegerExact();
        java.math.BigDecimal bigDecimal57 = bigDecimal54.setScale(7);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal59 = bigDecimal40.divide(bigDecimal57, (int) (byte) -112);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 97.0f + "'", float3 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 97.0d + "'", double5 == 97.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimalArray21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(bigDecimal57);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(strArray2);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl6 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl6.getTrace();
        java.math.BigDecimal bigDecimal9 = bigDecimal7.movePointRight((-3));
        long long10 = bigDecimal7.longValueExact();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        int int39 = bigMatrixImpl32.getScale();
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[] doubleArray51 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray52 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51 };
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl54.transpose();
        int int56 = bigMatrixImpl54.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl54.transpose();
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrix57.getData();
        java.math.BigDecimal bigDecimal59 = bigMatrix57.getNorm();
        java.math.BigDecimal bigDecimal60 = bigDecimal59.ulp();
        double[] doubleArray65 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray65);
        double[] doubleArray71 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix72 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray71);
        double[] doubleArray73 = realMatrix66.operate(doubleArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray73);
        java.math.BigDecimal bigDecimal75 = bigMatrix74.getNorm();
        java.math.BigDecimal bigDecimal77 = bigDecimal75.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal79 = bigDecimal75.pow((int) (short) 10);
        int int80 = bigDecimal60.compareTo(bigDecimal75);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrixImpl32.scalarMultiply(bigDecimal75);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrix81.copy();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 64 + "'", int39 == 64);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigDecimal75);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(bigMatrix81);
        org.junit.Assert.assertNotNull(bigMatrix82);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        java.math.BigDecimal bigDecimal14 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        java.lang.String str17 = bigDecimal16.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal20 = bigDecimal19.stripTrailingZeros();
        int int21 = bigDecimal19.signum();
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal16.divideAndRemainder(bigDecimal19);
        java.math.BigDecimal bigDecimal24 = bigDecimal16.pow((int) 'a');
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigInteger bigInteger35 = bigDecimal26.toBigIntegerExact();
        java.math.BigDecimal bigDecimal36 = bigDecimal24.add(bigDecimal26);
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        java.lang.String str39 = bigDecimal38.toString();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = bigDecimal41.stripTrailingZeros();
        int int43 = bigDecimal41.signum();
        java.math.BigDecimal[] bigDecimalArray44 = bigDecimal38.divideAndRemainder(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal38.pow((int) 'a');
        java.math.BigInteger bigInteger47 = bigDecimal38.toBigIntegerExact();
        float float48 = bigDecimal38.floatValue();
        java.math.BigDecimal bigDecimal49 = bigDecimal24.add(bigDecimal38);
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal52 = bigDecimal38.divideToIntegralValue(bigDecimal51);
        float float53 = bigDecimal52.floatValue();
        int int54 = bigDecimal52.intValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrix13.scalarAdd(bigDecimal52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrix13.getRowMatrix((int) (short) 7888);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertTrue("'" + float48 + "' != '" + 0.0f + "'", float48 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + float53 + "' != '" + 0.0f + "'", float53 == 0.0f);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigMatrix55);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = bigDecimal21.pow((int) (byte) 97);
        int int24 = bigDecimal21.scale();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int27 = bigDecimal26.signum();
        java.math.BigDecimal bigDecimal28 = bigDecimal21.add(bigDecimal26);
        java.math.BigDecimal bigDecimal30 = bigDecimal28.scaleByPowerOfTen((int) (short) -1);
        java.math.BigDecimal bigDecimal32 = bigDecimal28.movePointLeft(2805);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal32);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[] doubleArray70 = new double[] { 1.0d, 100.0f };
        double[] doubleArray73 = new double[] { 1.0d, 100.0f };
        double[] doubleArray76 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray77 = new double[][] { doubleArray67, doubleArray70, doubleArray73, doubleArray76 };
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray77);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl79.transpose();
        double[] doubleArray82 = bigMatrixImpl79.getRowAsDoubleArray((int) (short) 0);
        boolean boolean83 = bigMatrixImpl79.isSingular();
        boolean boolean84 = bigMatrixImpl79.isSquare();
        int int85 = bigMatrixImpl79.getScale();
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal88 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger89 = bigDecimal88.unscaledValue();
        java.math.BigDecimal bigDecimal90 = bigDecimal86.add(bigDecimal88);
        java.math.BigDecimal bigDecimal92 = bigDecimal88.setScale(100);
        boolean boolean93 = bigMatrixImpl79.equals((java.lang.Object) bigDecimal88);
        java.lang.String str94 = bigDecimal88.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl27.scalarAdd(bigDecimal88);
        double double96 = bigDecimal88.doubleValue();
        java.math.BigDecimal bigDecimal98 = bigDecimal88.movePointRight((int) (short) 970);
        java.math.BigInteger bigInteger99 = bigDecimal88.unscaledValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 64 + "'", int85 == 64);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigInteger89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "100" + "'", str94, "100");
        org.junit.Assert.assertNotNull(bigMatrix95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 100.0d + "'", double96 == 100.0d);
        org.junit.Assert.assertNotNull(bigDecimal98);
        org.junit.Assert.assertNotNull(bigInteger99);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 97);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigInteger bigInteger22 = bigDecimal13.toBigIntegerExact();
        java.math.BigDecimal bigDecimal23 = bigDecimal11.add(bigDecimal13);
        java.math.BigInteger bigInteger24 = bigDecimal23.unscaledValue();
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray37 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36 };
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray37);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigInteger bigInteger49 = bigDecimal43.toBigInteger();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(bigInteger49);
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrix41.scalarAdd(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal23, bigDecimal50 };
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix54 = bigMatrix53.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigMatrix53);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
        byte byte5 = bigDecimal4.byteValueExact();
        float float6 = bigDecimal4.floatValue();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        int int9 = bigDecimal8.intValue();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        int int12 = bigDecimal11.intValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.min(bigDecimal11);
        java.math.BigDecimal[] bigDecimalArray14 = new java.math.BigDecimal[] { bigDecimal13 };
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        java.math.BigDecimal bigDecimal21 = bigDecimal16.min(bigDecimal19);
        java.math.BigDecimal[] bigDecimalArray22 = new java.math.BigDecimal[] { bigDecimal21 };
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigDecimal[] bigDecimalArray30 = new java.math.BigDecimal[] { bigDecimal29 };
        java.math.BigDecimal[][] bigDecimalArray31 = new java.math.BigDecimal[][] { bigDecimalArray14, bigDecimalArray22, bigDecimalArray30 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        java.math.BigDecimal[][] bigDecimalArray33 = bigMatrixImpl32.getDataRef();
        int int34 = bigMatrixImpl32.getRowDimension();
        boolean boolean35 = bigMatrixImpl32.isSingular();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal48 = bigDecimal47.stripTrailingZeros();
        float float49 = bigDecimal47.floatValue();
        java.math.BigDecimal bigDecimal50 = bigDecimal45.divideToIntegralValue(bigDecimal47);
        java.math.BigDecimal bigDecimal51 = bigDecimal47.ulp();
        int int52 = bigDecimal47.precision();
        java.math.BigDecimal bigDecimal54 = bigDecimal47.scaleByPowerOfTen((-1));
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl32.scalarMultiply(bigDecimal54);
        java.math.BigDecimal bigDecimal57 = bigDecimal54.movePointRight((int) 'a');
        java.lang.String str58 = bigDecimal54.toPlainString();
        java.math.BigDecimal bigDecimal59 = bigDecimal4.min(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 1 + "'", byte5 == (byte) 1);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 1.0f + "'", float6 == 1.0f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 97.0f + "'", float49 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "9.7" + "'", str58, "9.7");
        org.junit.Assert.assertNotNull(bigDecimal59);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.lang.String str17 = bigMatrixImpl14.toString();
        java.math.BigDecimal bigDecimal19 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray22 = bigDecimal19.divideAndRemainder(bigDecimal21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl24 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        java.lang.String str25 = bigMatrixImpl24.toString();
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = bigMatrixImpl24.transpose();
        java.lang.String[] strArray28 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray29 = new java.lang.String[][] { strArray28 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(strArray29);
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl30.getData();
        int int32 = bigMatrixImpl30.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray33 = bigMatrixImpl30.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal36 = bigMatrix35.getDeterminant();
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl30.scalarMultiply(bigDecimal36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl24.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl30);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl14.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl24);
        bigMatrixImpl14.setScale(1);
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray54 = new double[][] { doubleArray44, doubleArray47, doubleArray50, doubleArray53 };
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = bigMatrixImpl56.transpose();
        int int58 = bigMatrixImpl56.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl56.getDataRef();
        bigMatrixImpl56.setScale((int) (short) 100);
        boolean boolean62 = bigMatrixImpl56.isSingular();
        int int63 = bigMatrixImpl56.getScale();
        int int64 = bigMatrixImpl56.getColumnDimension();
        double[] doubleArray66 = bigMatrixImpl56.getRowAsDoubleArray((int) (byte) 0);
        int int67 = bigMatrixImpl56.getRoundingMode();
        boolean boolean68 = bigMatrixImpl56.isSingular();
        int int69 = bigMatrixImpl56.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = bigMatrixImpl14.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl56);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal73 = bigMatrixImpl56.getEntry((int) (byte) 52, (int) (byte) -32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str17, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "BigMatrixImpl{{1},{0}}" + "'", str25, "BigMatrixImpl{{1},{0}}");
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertNotNull(bigMatrix70);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((-27110.0d));
        java.math.BigInteger bigInteger2 = bigDecimal1.toBigIntegerExact();
        org.junit.Assert.assertNotNull(bigInteger2);
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double double9 = realMatrix6.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix6.copy();
        double[] doubleArray15 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix17.scalarAdd((double) 6);
        double double20 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix17.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix21.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix6.subtract(realMatrix22);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        double double33 = realMatrix30.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix30.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix22.subtract(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix22.copy();
        boolean boolean37 = realMatrix36.isSingular();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 63.0d + "'", double9 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 63.0d + "'", double20 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 63.0d + "'", double33 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        boolean boolean27 = bigDecimal4.equals((java.lang.Object) realMatrix16);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double30 = realMatrix29.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix29.transpose();
        double[] doubleArray33 = realMatrix29.getColumn((int) (short) 10);
        double[] doubleArray35 = realMatrix29.getRow((int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray35);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray35);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix37.transpose();
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix45.scalarAdd((double) 6);
        int int48 = realMatrix45.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix45.scalarAdd(10.0d);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double double57 = realMatrix56.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix56.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix50.preMultiply(realMatrix59);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix60.scalarAdd((double) 1.0f);
        double[] doubleArray67 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix68 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray67);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray67);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix69.scalarAdd((double) 6);
        int int72 = realMatrix69.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrix69.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrix62.preMultiply(realMatrix69);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrix62.copy();
        boolean boolean77 = realMatrix76.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrix76.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix79 = realMatrix37.preMultiply(realMatrix78);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = realMatrix79.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix81 = realMatrix16.multiply(realMatrix79);
        double double82 = realMatrix79.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix83 = realMatrix79.copy();
        double[][] doubleArray84 = realMatrix83.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix85 = realMatrix83.transpose();
        double[] doubleArray87 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix88 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray87);
        org.apache.commons.math.linear.RealMatrix realMatrix89 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray87);
        org.apache.commons.math.linear.RealMatrix realMatrix90 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray87);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray87);
        double[] doubleArray92 = realMatrix83.preMultiply(doubleArray87);
        boolean boolean93 = realMatrix83.isSingular();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertNotNull(realMatrix79);
        org.junit.Assert.assertNotNull(realMatrix80);
        org.junit.Assert.assertNotNull(realMatrix81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 8668.0d + "'", double82 == 8668.0d);
        org.junit.Assert.assertNotNull(realMatrix83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(realMatrix89);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertNotNull(bigMatrix91);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5125556E7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigInteger bigInteger35 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal36 = new java.math.BigDecimal(bigInteger35);
        int int37 = bigDecimal36.precision();
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray50 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49 };
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        java.math.BigDecimal[] bigDecimalArray56 = bigMatrix54.getColumn(0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        java.math.BigDecimal bigDecimal58 = bigMatrixImpl57.getNorm();
        int int59 = bigDecimal36.compareTo(bigDecimal58);
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        int int65 = bigDecimal64.intValue();
        java.math.BigDecimal bigDecimal66 = bigDecimal61.min(bigDecimal64);
        java.math.BigInteger bigInteger67 = bigDecimal61.toBigInteger();
        int int68 = bigDecimal61.precision();
        java.math.BigDecimal bigDecimal70 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal71 = bigDecimal61.subtract(bigDecimal70);
        java.math.BigDecimal bigDecimal72 = bigDecimal70.ulp();
        java.math.BigDecimal bigDecimal73 = bigDecimal70.negate();
        java.math.BigDecimal bigDecimal76 = bigDecimal73.setScale((-2), 4);
        int int77 = bigDecimal76.signum();
        java.math.MathContext mathContext78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal79 = bigDecimal36.remainder(bigDecimal76, mathContext78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        boolean boolean17 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        java.lang.String str23 = bigDecimal22.toString();
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal26 = bigDecimal25.stripTrailingZeros();
        int int27 = bigDecimal25.signum();
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal22.divideAndRemainder(bigDecimal25);
        java.math.BigDecimal bigDecimal30 = bigDecimal22.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray31 = new java.math.BigDecimal[] { bigDecimal20, bigDecimal22 };
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray31);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl33 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray31);
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray38 = bigDecimal35.divideAndRemainder(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray39 = bigMatrixImpl33.preMultiply(bigDecimalArray38);
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray38);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray41 = bigMatrixImpl14.operate(bigDecimalArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigMatrix40);
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        int int39 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl32.getRowMatrix(0);
        int int42 = bigMatrixImpl32.getScale();
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[] doubleArray51 = new double[] { 1.0d, 100.0f };
        double[] doubleArray54 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray55 = new double[][] { doubleArray45, doubleArray48, doubleArray51, doubleArray54 };
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray55);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrixImpl57.transpose();
        java.math.BigDecimal bigDecimal60 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal62 = new java.math.BigDecimal(0.0d);
        java.lang.String str63 = bigDecimal62.toString();
        java.math.BigDecimal bigDecimal65 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal66 = bigDecimal65.stripTrailingZeros();
        int int67 = bigDecimal65.signum();
        java.math.BigDecimal[] bigDecimalArray68 = bigDecimal62.divideAndRemainder(bigDecimal65);
        java.math.BigDecimal bigDecimal70 = bigDecimal62.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray71 = new java.math.BigDecimal[] { bigDecimal60, bigDecimal62 };
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray71);
        java.math.BigDecimal[] bigDecimalArray74 = bigMatrix58.preMultiply(bigDecimalArray71);
        java.math.BigDecimal[] bigDecimalArray76 = bigMatrix58.getColumn(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray77 = bigMatrixImpl32.solve(bigDecimalArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: constant vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 64 + "'", int39 == 64);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 64 + "'", int42 == 64);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(0.0d);
        java.lang.String str9 = bigDecimal8.toString();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal12 = bigDecimal11.stripTrailingZeros();
        int int13 = bigDecimal11.signum();
        java.math.BigDecimal[] bigDecimalArray14 = bigDecimal8.divideAndRemainder(bigDecimal11);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray14);
        int int16 = bigMatrixImpl15.getRoundingMode();
        boolean boolean17 = bigMatrixImpl15.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrix6.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl15);
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl15.getData();
        java.math.BigDecimal bigDecimal21 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray24 = bigDecimal21.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal[] bigDecimalArray25 = bigMatrixImpl15.preMultiply(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray25);
        java.math.BigDecimal bigDecimal28 = bigMatrix27.getTrace();
        boolean boolean29 = bigMatrix27.isSingular();
        boolean boolean30 = bigMatrix27.isSingular();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        boolean boolean56 = bigMatrix55.isSingular();
        boolean boolean57 = bigMatrixImpl27.equals((java.lang.Object) boolean56);
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl27.getData();
        double[] doubleArray60 = bigMatrixImpl27.getRowAsDoubleArray(2);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray60);
        boolean boolean62 = realMatrix61.isSquare();
        double double63 = realMatrix61.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrix61.getSubMatrix((int) (short) 31464, (int) (byte) -11, 970, (int) (short) 7888);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl29 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray28);
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl29.getNorm();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        float float34 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.remainder(bigDecimal32);
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        long long39 = bigDecimal37.longValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal37.ulp();
        double double41 = bigDecimal37.doubleValue();
        short short42 = bigDecimal37.shortValueExact();
        byte byte43 = bigDecimal37.byteValueExact();
        java.math.BigDecimal bigDecimal44 = bigDecimal37.stripTrailingZeros();
        java.math.BigDecimal bigDecimal45 = bigDecimal32.multiply(bigDecimal37);
        java.math.BigInteger bigInteger46 = bigDecimal45.toBigIntegerExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + float34 + "' != '" + 97.0f + "'", float34 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) 0 + "'", short42 == (short) 0);
        org.junit.Assert.assertTrue("'" + byte43 + "' != '" + (byte) 0 + "'", byte43 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigInteger46);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        double[][] doubleArray20 = bigMatrixImpl14.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrix22.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(bigMatrix22);
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray35 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray36 = new java.lang.String[][] { strArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(strArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl27.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigInteger bigInteger61 = bigDecimal60.unscaledValue();
        java.math.BigInteger bigInteger62 = bigDecimal60.toBigIntegerExact();
        boolean boolean63 = bigMatrixImpl27.equals((java.lang.Object) bigInteger62);
        int int64 = bigMatrixImpl27.getRowDimension();
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[] doubleArray70 = new double[] { 1.0d, 100.0f };
        double[] doubleArray73 = new double[] { 1.0d, 100.0f };
        double[] doubleArray76 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray77 = new double[][] { doubleArray67, doubleArray70, doubleArray73, doubleArray76 };
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray77);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl79.transpose();
        double[] doubleArray82 = bigMatrixImpl79.getRowAsDoubleArray((int) (short) 0);
        boolean boolean83 = bigMatrixImpl79.isSingular();
        boolean boolean84 = bigMatrixImpl79.isSquare();
        int int85 = bigMatrixImpl79.getScale();
        java.math.BigDecimal bigDecimal86 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal88 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger89 = bigDecimal88.unscaledValue();
        java.math.BigDecimal bigDecimal90 = bigDecimal86.add(bigDecimal88);
        java.math.BigDecimal bigDecimal92 = bigDecimal88.setScale(100);
        boolean boolean93 = bigMatrixImpl79.equals((java.lang.Object) bigDecimal88);
        java.lang.String str94 = bigDecimal88.toPlainString();
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl27.scalarAdd(bigDecimal88);
        double double96 = bigDecimal88.doubleValue();
        java.math.BigInteger bigInteger97 = bigDecimal88.toBigInteger();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 64 + "'", int85 == 64);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimal88);
        org.junit.Assert.assertNotNull(bigInteger89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "100" + "'", str94, "100");
        org.junit.Assert.assertNotNull(bigMatrix95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 100.0d + "'", double96 == 100.0d);
        org.junit.Assert.assertNotNull(bigInteger97);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        double double10 = bigDecimal9.doubleValue();
        java.math.BigDecimal bigDecimal11 = bigDecimal9.stripTrailingZeros();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigInteger bigInteger22 = bigDecimal13.toBigIntegerExact();
        int int23 = bigDecimal13.precision();
        java.math.BigInteger bigInteger24 = bigDecimal13.toBigInteger();
        int int25 = bigDecimal11.compareTo(bigDecimal13);
        int int26 = bigDecimal13.signum();
        java.math.BigDecimal bigDecimal28 = new java.math.BigDecimal(0.0d);
        java.lang.String str29 = bigDecimal28.toString();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal32 = bigDecimal31.stripTrailingZeros();
        int int33 = bigDecimal31.signum();
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal28.divideAndRemainder(bigDecimal31);
        java.math.BigDecimal bigDecimal36 = bigDecimal28.pow((int) 'a');
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        java.lang.String str39 = bigDecimal38.toString();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = bigDecimal41.stripTrailingZeros();
        int int43 = bigDecimal41.signum();
        java.math.BigDecimal[] bigDecimalArray44 = bigDecimal38.divideAndRemainder(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal38.pow((int) 'a');
        java.math.BigInteger bigInteger47 = bigDecimal38.toBigIntegerExact();
        java.math.BigDecimal bigDecimal48 = bigDecimal36.add(bigDecimal38);
        java.math.BigDecimal bigDecimal50 = bigDecimal48.pow((int) (byte) 97);
        boolean boolean51 = bigDecimal13.equals((java.lang.Object) bigDecimal50);
        java.math.BigInteger bigInteger52 = bigDecimal50.unscaledValue();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(bigInteger52);
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl27.copy();
        boolean boolean37 = bigMatrixImpl27.isSingular();
        java.math.BigDecimal bigDecimal39 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray42 = bigDecimal39.divideAndRemainder(bigDecimal41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray42);
        double[] doubleArray45 = bigMatrixImpl43.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl43.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl43.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl43.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix49 = bigMatrixImpl27.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigMatrix48);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getDataRef();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl37.transpose();
        double[] doubleArray40 = bigMatrixImpl37.getRowAsDoubleArray((int) (short) 0);
        boolean boolean41 = bigMatrixImpl37.isSingular();
        boolean boolean42 = bigMatrixImpl37.isSquare();
        double[][] doubleArray43 = bigMatrixImpl37.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl37.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray50 = bigDecimal47.divideAndRemainder(bigDecimal49);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = bigMatrixImpl51.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl51.copy();
        bigMatrixImpl51.setRoundingMode(10);
        int int56 = bigMatrixImpl51.getRowDimension();
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrixImpl51.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix58 = bigMatrix45.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix17.copy();
        double[] doubleArray23 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix24 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray23);
        double[] doubleArray29 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray29);
        double[] doubleArray31 = realMatrix24.operate(doubleArray29);
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray31);
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray31);
        double[] doubleArray35 = realMatrix18.operate(doubleArray31);
        int int36 = realMatrix18.getColumnDimension();
        int[] intArray41 = new int[] { (byte) 32, (short) -1, (-100), 8667 };
        int[] intArray44 = new int[] { (byte) 35, 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix45 = realMatrix18.getSubMatrix(intArray41, intArray44);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix dimension mismatch");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[32, -1, -100, 8667]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[35, 1]");
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix5.multiply(realMatrix19);
        boolean boolean23 = realMatrix22.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarMultiply((double) 'a');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix25.inverse();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix26.getSubMatrix((int) (byte) 32, 546084, 546084, 98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode((int) '4');
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal32.min(bigDecimal35);
        java.math.BigDecimal[] bigDecimalArray38 = new java.math.BigDecimal[] { bigDecimal37 };
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        int int41 = bigDecimal40.intValue();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal45 = bigDecimal40.min(bigDecimal43);
        java.math.BigDecimal[] bigDecimalArray46 = new java.math.BigDecimal[] { bigDecimal45 };
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.min(bigDecimal51);
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal[][] bigDecimalArray55 = new java.math.BigDecimal[][] { bigDecimalArray38, bigDecimalArray46, bigDecimalArray54 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray55);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray55);
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl58.getDataRef();
        java.math.BigDecimal bigDecimal60 = bigMatrixImpl58.getNorm();
        boolean boolean61 = bigMatrixImpl58.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl58.copy();
        double[] doubleArray64 = bigMatrixImpl58.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray66 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray67 = new java.lang.String[][] { strArray66 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl68 = new org.apache.commons.math.linear.BigMatrixImpl(strArray67);
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl58.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl68);
        java.math.BigDecimal bigDecimal70 = bigMatrixImpl58.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = bigMatrixImpl27.scalarAdd(bigDecimal70);
        java.math.BigDecimal bigDecimal73 = bigDecimal70.movePointLeft((int) (byte) -1);
        java.math.BigDecimal bigDecimal75 = new java.math.BigDecimal((long) (byte) 97);
        java.lang.String str76 = bigDecimal75.toPlainString();
        int int77 = bigDecimal73.compareTo(bigDecimal75);
        float float78 = bigDecimal75.floatValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "97" + "'", str76, "97");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + float78 + "' != '" + 97.0f + "'", float78 == 97.0f);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        boolean boolean19 = bigMatrixImpl14.isSingular();
        int int20 = bigMatrixImpl14.getRoundingMode();
        java.lang.String str21 = bigMatrixImpl14.toString();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getData();
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray35 = realMatrix28.operate(doubleArray33);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix37.transpose();
        double[][] doubleArray39 = realMatrix37.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl40 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl14.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl40);
        int int42 = bigMatrixImpl40.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl40.copy();
        double[] doubleArray48 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray48);
        double[] doubleArray54 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix55 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray54);
        double[] doubleArray56 = realMatrix49.operate(doubleArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray54);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix58.transpose();
        double[][] doubleArray60 = realMatrix58.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray60);
        double[] doubleArray64 = new double[] { 1.0d, 100.0f };
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[] doubleArray70 = new double[] { 1.0d, 100.0f };
        double[] doubleArray73 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray74 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73 };
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray74);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray74);
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = bigMatrixImpl76.transpose();
        double[] doubleArray79 = bigMatrixImpl76.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str80 = bigMatrixImpl76.toString();
        int int81 = bigMatrixImpl76.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrixImpl61.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl76);
        java.math.BigDecimal[] bigDecimalArray84 = bigMatrixImpl61.getRow((int) (byte) 0);
        int int85 = bigMatrixImpl61.getRowDimension();
        double[][] doubleArray86 = bigMatrixImpl61.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix87 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray86);
        org.apache.commons.math.linear.BigMatrix bigMatrix88 = bigMatrixImpl40.subtract(bigMatrix87);
        java.math.BigDecimal[][] bigDecimalArray89 = bigMatrix87.getData();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal90 = bigMatrix87.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str21, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(bigMatrix41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str80, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 64 + "'", int81 == 64);
        org.junit.Assert.assertNotNull(bigMatrix82);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(bigMatrix87);
        org.junit.Assert.assertNotNull(bigMatrix88);
        org.junit.Assert.assertNotNull(bigDecimalArray89);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((long) (byte) 52, mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        boolean boolean7 = bigMatrixImpl5.isSingular();
        int int8 = bigMatrixImpl5.getRowDimension();
        bigMatrixImpl5.setRoundingMode((int) (byte) 10);
        java.math.BigDecimal[][] bigDecimalArray11 = bigMatrixImpl5.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(3, 10);
        int int15 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray16 = bigMatrixImpl14.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            bigMatrixImpl5.setSubMatrix(bigDecimalArray16, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (byte) 1);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (short) 4);
        short short2 = bigDecimal1.shortValue();
        org.junit.Assert.assertTrue("'" + short2 + "' != '" + (short) 4 + "'", short2 == (short) 4);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigMatrixImpl27.getColumnDimension();
        bigMatrixImpl27.setRoundingMode((int) (byte) -100);
        double[] doubleArray34 = bigMatrixImpl27.getRowAsDoubleArray(2);
        bigMatrixImpl27.setScale((int) (short) 0);
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        float float52 = bigDecimal50.floatValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.divideToIntegralValue(bigDecimal50);
        java.math.BigDecimal bigDecimal54 = bigDecimal38.max(bigDecimal48);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl27.scalarAdd(bigDecimal54);
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[] doubleArray64 = new double[] { 1.0d, 100.0f };
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray68 = new double[][] { doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        java.math.BigDecimal bigDecimal74 = new java.math.BigDecimal(0.0d);
        int int75 = bigDecimal74.intValue();
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        int int78 = bigDecimal77.intValue();
        java.math.BigDecimal bigDecimal79 = bigDecimal74.min(bigDecimal77);
        java.math.BigInteger bigInteger80 = bigDecimal74.toBigInteger();
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(bigInteger80);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrix72.scalarAdd(bigDecimal81);
        java.math.BigDecimal bigDecimal83 = bigDecimal81.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrixImpl27.scalarMultiply(bigDecimal81);
        int int85 = bigMatrixImpl27.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal86 = bigMatrixImpl27.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 97.0f + "'", float52 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertNotNull(bigMatrix82);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigMatrix84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(3, 32);
        int int3 = bigMatrixImpl2.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl2.getData();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        double[][] doubleArray19 = bigMatrixImpl18.getDataAsDoubleArray();
        double[][] doubleArray20 = bigMatrixImpl18.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl21 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray20);
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl21.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl23.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        short short8 = bigDecimal1.shortValueExact();
        int int9 = bigDecimal1.precision();
        long long10 = bigDecimal1.longValue();
        long long11 = bigDecimal1.longValueExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 0 + "'", short8 == (short) 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal35 = bigDecimal9.ulp();
        java.math.BigDecimal bigDecimal36 = bigDecimal9.negate();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal39 = bigDecimal38.negate();
        java.math.BigDecimal bigDecimal41 = bigDecimal38.pow((int) (byte) 100);
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal((long) (byte) -11);
        java.lang.String str44 = bigDecimal43.toString();
        java.math.BigDecimal bigDecimal46 = bigDecimal38.divide(bigDecimal43, 3);
        java.math.BigDecimal bigDecimal47 = bigDecimal36.remainder(bigDecimal46);
        java.math.BigInteger bigInteger48 = bigDecimal47.unscaledValue();
        long long49 = bigDecimal47.longValueExact();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-11" + "'", str44, "-11");
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        char[] charArray2 = new char[] { '4', '4' };
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(charArray2);
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(charArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(charArray2, 52, 546084);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: Bad offset or len arguments for char[] input.");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4, 4]");
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix5.multiply(realMatrix19);
        double double23 = realMatrix19.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix19.getRowMatrix((int) (byte) 1);
        double[] doubleArray30 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix31 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray30);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray30);
        double double33 = realMatrix32.getNorm();
        boolean boolean34 = realMatrix32.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix19.add(realMatrix32);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray37 = realMatrix32.getRow(8668);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 63.0d + "'", double23 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 63.0d + "'", double33 == 63.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realMatrix35);
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal32 = bigMatrixImpl27.getNorm();
        double[] doubleArray37 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix38 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray37);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray37);
        boolean boolean40 = bigMatrixImpl27.equals((java.lang.Object) doubleArray37);
        boolean boolean41 = bigMatrixImpl27.isSingular();
        java.math.BigDecimal[][] bigDecimalArray42 = bigMatrixImpl27.getDataRef();
        java.lang.String str43 = bigMatrixImpl27.toString();
        boolean boolean44 = bigMatrixImpl27.isSquare();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str43, "BigMatrixImpl{{0},{0},{0}}");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl8 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray7);
        int int9 = bigMatrixImpl8.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl8.transpose();
        double[][] doubleArray11 = bigMatrixImpl8.getDataAsDoubleArray();
        bigMatrixImpl8.setScale((int) (byte) -100);
        int int14 = bigMatrixImpl8.getRowDimension();
        java.lang.Class<?> wildcardClass15 = bigMatrixImpl8.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        java.lang.String[] strArray1 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix9 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(bigMatrix2);
        org.junit.Assert.assertNotNull(bigMatrix3);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(bigMatrix9);
        org.junit.Assert.assertNotNull(bigMatrix10);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 100);
        double[] doubleArray4 = new double[] { 1.0d, 100.0f };
        double[] doubleArray7 = new double[] { 1.0d, 100.0f };
        double[] doubleArray10 = new double[] { 1.0d, 100.0f };
        double[] doubleArray13 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray14 = new double[][] { doubleArray4, doubleArray7, doubleArray10, doubleArray13 };
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray14);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray14);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl16.transpose();
        double[] doubleArray19 = bigMatrixImpl16.getRowAsDoubleArray((int) (short) 0);
        boolean boolean20 = bigMatrixImpl16.isSingular();
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal("100");
        org.apache.commons.math.linear.BigMatrix bigMatrix23 = bigMatrixImpl16.scalarMultiply(bigDecimal22);
        boolean boolean24 = bigDecimal1.equals((java.lang.Object) bigDecimal22);
        java.math.BigDecimal bigDecimal26 = bigDecimal1.movePointRight((int) (byte) 11);
        java.math.MathContext mathContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal28 = bigDecimal26.round(mathContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(bigDecimal26);
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        java.math.BigDecimal[][] bigDecimalArray4 = bigMatrixImpl3.getData();
        int int5 = bigMatrixImpl3.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray6 = bigMatrixImpl3.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 10);
        java.math.BigDecimal bigDecimal9 = bigMatrix8.getDeterminant();
        org.apache.commons.math.linear.BigMatrix bigMatrix10 = bigMatrixImpl3.scalarMultiply(bigDecimal9);
        java.math.BigDecimal bigDecimal11 = bigDecimal9.plus();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray6);
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigMatrix10);
        org.junit.Assert.assertNotNull(bigDecimal11);
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        boolean boolean32 = bigMatrixImpl31.isSquare();
        int int33 = bigMatrixImpl31.getRowDimension();
        java.math.BigDecimal bigDecimal34 = bigMatrixImpl31.getNorm();
        bigMatrixImpl31.setRoundingMode((int) (byte) 0);
        bigMatrixImpl31.setRoundingMode((-3));
        bigMatrixImpl31.setRoundingMode((int) (byte) -11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix41 = bigMatrixImpl31.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(bigDecimal34);
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        int int38 = bigDecimal37.intValue();
        java.math.BigDecimal bigDecimal39 = bigDecimal34.min(bigDecimal37);
        java.math.BigDecimal[] bigDecimalArray40 = new java.math.BigDecimal[] { bigDecimal39 };
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        java.math.BigDecimal bigDecimal47 = bigDecimal42.min(bigDecimal45);
        java.math.BigDecimal[] bigDecimalArray48 = new java.math.BigDecimal[] { bigDecimal47 };
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal[][] bigDecimalArray57 = new java.math.BigDecimal[][] { bigDecimalArray40, bigDecimalArray48, bigDecimalArray56 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl60 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl60.getDataRef();
        java.math.BigDecimal bigDecimal62 = bigMatrixImpl60.getNorm();
        boolean boolean63 = bigMatrixImpl60.isSquare();
        java.math.BigDecimal[][] bigDecimalArray64 = bigMatrixImpl60.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl60.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl60.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl27.preMultiply(bigMatrix66);
        java.math.BigDecimal[][] bigDecimalArray68 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray69 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal71 = bigMatrix70.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray64);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(bigDecimalArray68);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertNotNull(bigMatrix70);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) (-1L));
        java.math.BigDecimal bigDecimal2 = bigDecimal1.negate();
        long long3 = bigDecimal1.longValue();
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        boolean boolean14 = bigMatrix13.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrix13.copy();
        java.math.BigDecimal bigDecimal16 = bigMatrix13.getNorm();
        java.math.BigDecimal bigDecimal17 = bigDecimal16.abs();
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        boolean boolean36 = bigMatrixImpl32.isSingular();
        java.math.BigDecimal[][] bigDecimalArray37 = bigMatrixImpl32.getData();
        java.math.BigDecimal bigDecimal38 = bigMatrixImpl32.getNorm();
        double[] doubleArray41 = new double[] { 1.0d, 100.0f };
        double[] doubleArray44 = new double[] { 1.0d, 100.0f };
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray51 = new double[][] { doubleArray41, doubleArray44, doubleArray47, doubleArray50 };
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray51);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray51);
        org.apache.commons.math.linear.BigMatrix bigMatrix54 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray51);
        boolean boolean55 = bigDecimal38.equals((java.lang.Object) doubleArray51);
        java.math.BigDecimal bigDecimal57 = bigDecimal16.divide(bigDecimal38, (int) (short) 1);
        int int58 = bigDecimal57.signum();
        double[] doubleArray65 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray72 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray79 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray86 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray87 = new double[][] { doubleArray65, doubleArray72, doubleArray79, doubleArray86 };
        org.apache.commons.math.linear.RealMatrix realMatrix88 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray87);
        double[][] doubleArray89 = realMatrix88.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix90 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray89);
        boolean boolean91 = realMatrix90.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix92 = realMatrix90.transpose();
        boolean boolean93 = bigDecimal57.equals((java.lang.Object) realMatrix92);
        java.lang.String str94 = bigDecimal57.toEngineeringString();
        java.lang.String str95 = bigDecimal57.toEngineeringString();
        java.math.BigDecimal bigDecimal96 = bigDecimal57.stripTrailingZeros();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertNotNull(bigMatrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(realMatrix88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(realMatrix90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1" + "'", str94, "1");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1" + "'", str95, "1");
        org.junit.Assert.assertNotNull(bigDecimal96);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix23.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix39 = realMatrix23.scalarMultiply((double) 3);
        double[] doubleArray44 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray44);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray44);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray44);
        double[] doubleArray52 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix53 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray52);
        double[] doubleArray58 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix59 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray58);
        double[] doubleArray60 = realMatrix53.operate(doubleArray58);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray60);
        double[] doubleArray62 = realMatrix47.preMultiply(doubleArray60);
        double[] doubleArray63 = realMatrix23.operate(doubleArray62);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrix23.scalarAdd((double) (short) 97);
        int int66 = realMatrix65.getColumnDimension();
        double[] doubleArray71 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix72 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray71);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray71);
        org.apache.commons.math.linear.RealMatrix realMatrix74 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray71);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray71);
        java.lang.String[] strArray78 = new java.lang.String[] { "0" };
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray78);
        double[] doubleArray81 = bigMatrix79.getColumnAsDoubleArray(0);
        org.apache.commons.math.linear.RealMatrix realMatrix82 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray81);
        double[] doubleArray83 = realMatrix76.preMultiply(doubleArray81);
        double[] doubleArray84 = realMatrix65.preMultiply(doubleArray81);
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-2805.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-2.431374E7]");
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0]");
        org.junit.Assert.assertNotNull(bigMatrix85);
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double2 = realMatrix1.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrix1.transpose();
        double[] doubleArray5 = realMatrix1.getColumn((int) (short) 10);
        double[] doubleArray7 = realMatrix1.getRow((int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix9.transpose();
        double[] doubleArray15 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix17.scalarAdd((double) 6);
        int int20 = realMatrix17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix17.scalarAdd(10.0d);
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double double29 = realMatrix28.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix22.preMultiply(realMatrix31);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 1.0f);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix41.scalarAdd((double) 6);
        int int44 = realMatrix41.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix41.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix34.preMultiply(realMatrix41);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix34.copy();
        boolean boolean49 = realMatrix48.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrix9.preMultiply(realMatrix50);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrix9.transpose();
        double[] doubleArray57 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray57);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray57);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix59.scalarAdd((double) 6);
        int int62 = realMatrix61.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrix61.scalarMultiply(1.0d);
        double[] doubleArray66 = realMatrix61.getRow(3);
        double[][] doubleArray67 = realMatrix61.getData();
        double[][] doubleArray68 = realMatrix61.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrix61.scalarAdd((double) (-100));
        org.apache.commons.math.linear.RealMatrix realMatrix71 = realMatrix70.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix9.preMultiply(realMatrix70);
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[6.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realMatrix72);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        java.lang.String[] strArray1 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl3 = new org.apache.commons.math.linear.BigMatrixImpl(strArray2);
        int int4 = bigMatrixImpl3.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray5 = bigMatrixImpl3.getData();
        int int6 = bigMatrixImpl3.getRoundingMode();
        java.math.BigDecimal bigDecimal7 = bigMatrixImpl3.getTrace();
        int int8 = bigMatrixImpl3.getColumnDimension();
        java.math.BigDecimal bigDecimal9 = bigMatrixImpl3.getTrace();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double12 = realMatrix11.getTrace();
        boolean boolean13 = realMatrix11.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix11.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix15.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix15.scalarMultiply((double) 10L);
        int int19 = realMatrix18.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix18.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix18.copy();
        boolean boolean22 = bigMatrixImpl3.equals((java.lang.Object) realMatrix18);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(1);
        double[] doubleArray8 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray8);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray8);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray8);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double[] doubleArray22 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        double[] doubleArray24 = realMatrix17.operate(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray24);
        double[] doubleArray26 = realMatrix11.preMultiply(doubleArray24);
        org.apache.commons.math.linear.RealMatrix realMatrix27 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray26);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix27.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrix27.inverse();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal[][] bigDecimalArray54 = new java.math.BigDecimal[][] { bigDecimalArray37, bigDecimalArray45, bigDecimalArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        int int58 = bigMatrixImpl57.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl57.copy();
        double[] doubleArray61 = bigMatrixImpl57.getRowAsDoubleArray((int) (byte) 1);
        double[] doubleArray62 = realMatrix29.operate(doubleArray61);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray62);
        double[] doubleArray64 = realMatrix3.solve(doubleArray62);
        int int65 = realMatrix3.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrix1.subtract(realMatrix3);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix68 = realMatrix66.solve(realMatrix67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(realMatrix66);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        int int30 = bigMatrixImpl27.getColumnDimension();
        bigMatrixImpl27.setRoundingMode((int) (byte) -100);
        double[] doubleArray34 = bigMatrixImpl27.getRowAsDoubleArray(2);
        bigMatrixImpl27.setScale((int) (short) 0);
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        float float52 = bigDecimal50.floatValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.divideToIntegralValue(bigDecimal50);
        java.math.BigDecimal bigDecimal54 = bigDecimal38.max(bigDecimal48);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl27.scalarAdd(bigDecimal54);
        double[] doubleArray58 = new double[] { 1.0d, 100.0f };
        double[] doubleArray61 = new double[] { 1.0d, 100.0f };
        double[] doubleArray64 = new double[] { 1.0d, 100.0f };
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray68 = new double[][] { doubleArray58, doubleArray61, doubleArray64, doubleArray67 };
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl70 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        org.apache.commons.math.linear.BigMatrix bigMatrix72 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray68);
        java.math.BigDecimal bigDecimal74 = new java.math.BigDecimal(0.0d);
        int int75 = bigDecimal74.intValue();
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        int int78 = bigDecimal77.intValue();
        java.math.BigDecimal bigDecimal79 = bigDecimal74.min(bigDecimal77);
        java.math.BigInteger bigInteger80 = bigDecimal74.toBigInteger();
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(bigInteger80);
        org.apache.commons.math.linear.BigMatrix bigMatrix82 = bigMatrix72.scalarAdd(bigDecimal81);
        java.math.BigDecimal bigDecimal83 = bigDecimal81.plus();
        org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrixImpl27.scalarMultiply(bigDecimal81);
        java.math.BigDecimal[][] bigDecimalArray85 = bigMatrixImpl27.getData();
        bigMatrixImpl27.setRoundingMode((-2));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix92 = bigMatrixImpl27.getSubMatrix(64, (int) (short) 35, 8668, (int) (short) 31464);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + float52 + "' != '" + 97.0f + "'", float52 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertNotNull(bigMatrix72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertNotNull(bigMatrix82);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigMatrix84);
        org.junit.Assert.assertNotNull(bigDecimalArray85);
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix19 = bigMatrixImpl14.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = bigMatrixImpl14.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = bigMatrixImpl14.getEntryAsDouble((int) (byte) 32, 5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigMatrix19);
        org.junit.Assert.assertNotNull(bigMatrix20);
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 101L);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        boolean boolean56 = bigMatrix55.isSingular();
        boolean boolean57 = bigMatrixImpl27.equals((java.lang.Object) boolean56);
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray58);
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        int int65 = bigDecimal64.intValue();
        java.math.BigDecimal bigDecimal66 = bigDecimal61.min(bigDecimal64);
        java.math.BigDecimal[] bigDecimalArray67 = new java.math.BigDecimal[] { bigDecimal66 };
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal72 = new java.math.BigDecimal(0.0d);
        int int73 = bigDecimal72.intValue();
        java.math.BigDecimal bigDecimal74 = bigDecimal69.min(bigDecimal72);
        java.math.BigDecimal[] bigDecimalArray75 = new java.math.BigDecimal[] { bigDecimal74 };
        java.math.BigDecimal bigDecimal77 = new java.math.BigDecimal(0.0d);
        int int78 = bigDecimal77.intValue();
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal(0.0d);
        int int81 = bigDecimal80.intValue();
        java.math.BigDecimal bigDecimal82 = bigDecimal77.min(bigDecimal80);
        java.math.BigDecimal[] bigDecimalArray83 = new java.math.BigDecimal[] { bigDecimal82 };
        java.math.BigDecimal[][] bigDecimalArray84 = new java.math.BigDecimal[][] { bigDecimalArray67, bigDecimalArray75, bigDecimalArray83 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray84);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray84);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl87 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray84);
        int int88 = bigMatrixImpl87.getColumnDimension();
        double[][] doubleArray89 = bigMatrixImpl87.getDataAsDoubleArray();
        double[][] doubleArray90 = bigMatrixImpl87.getDataAsDoubleArray();
        java.math.BigDecimal[] bigDecimalArray92 = bigMatrixImpl87.getColumn((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl93 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl94 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray92);
        java.math.BigDecimal[] bigDecimalArray95 = bigMatrixImpl59.preMultiply(bigDecimalArray92);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl96 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray92);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigDecimalArray67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(bigDecimal74);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertNotNull(bigDecimalArray83);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(bigDecimalArray92);
        org.junit.Assert.assertNotNull(bigDecimalArray95);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        double[] doubleArray1 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix2 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray1);
        org.apache.commons.math.linear.RealMatrix realMatrix3 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray1);
        org.apache.commons.math.linear.RealMatrix realMatrix4 = realMatrix3.copy();
        double[] doubleArray9 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix10 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray9);
        org.apache.commons.math.linear.RealMatrix realMatrix13 = realMatrix11.scalarAdd((double) 6);
        int int14 = realMatrix11.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix11.scalarAdd(10.0d);
        double[] doubleArray21 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray21);
        double double23 = realMatrix22.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix22.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix16.preMultiply(realMatrix25);
        org.apache.commons.math.linear.RealMatrix realMatrix28 = realMatrix26.scalarAdd((double) 1.0f);
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray33);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix35.scalarAdd((double) 6);
        int int38 = realMatrix35.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix35.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrix28.preMultiply(realMatrix35);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = realMatrix28.transpose();
        double double43 = realMatrix42.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = realMatrix3.solve(realMatrix42);
        double[] doubleArray46 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix47 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray46);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray46);
        double[] doubleArray53 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix54 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray53);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray53);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = realMatrix55.scalarAdd((double) 6);
        int int58 = realMatrix55.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix60 = realMatrix55.scalarAdd(10.0d);
        double[] doubleArray65 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray65);
        double double67 = realMatrix66.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrix66.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrix60.preMultiply(realMatrix69);
        double[][] doubleArray71 = realMatrix70.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix70.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix74 = realMatrix70.scalarAdd((double) (-1.0f));
        org.apache.commons.math.linear.RealMatrix realMatrix75 = realMatrix48.subtract(realMatrix74);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = realMatrix3.solve(realMatrix75);
        double[][] doubleArray77 = realMatrix75.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix2);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(realMatrix4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 8668.0d + "'", double43 == 8668.0d);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrix74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(bigMatrix78);
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.ulp();
        double double5 = bigDecimal1.doubleValue();
        short short6 = bigDecimal1.shortValueExact();
        java.math.BigDecimal bigDecimal7 = bigDecimal1.negate();
        java.math.BigDecimal bigDecimal9 = bigDecimal7.pow((int) (byte) 110);
        double[] doubleArray16 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray23 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray30 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray37 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray38 = new double[][] { doubleArray16, doubleArray23, doubleArray30, doubleArray37 };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray38);
        double[][] doubleArray40 = realMatrix39.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl41 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray40);
        java.math.BigDecimal[][] bigDecimalArray42 = bigMatrixImpl41.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl43 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray42);
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        java.lang.String str46 = bigDecimal45.toString();
        java.math.BigDecimal bigDecimal48 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal49 = bigDecimal48.stripTrailingZeros();
        int int50 = bigDecimal48.signum();
        java.math.BigDecimal[] bigDecimalArray51 = bigDecimal45.divideAndRemainder(bigDecimal48);
        java.math.BigDecimal bigDecimal53 = bigDecimal45.pow((int) 'a');
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        java.math.BigDecimal bigDecimal65 = bigDecimal53.add(bigDecimal55);
        double[] doubleArray70 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray70);
        double[] doubleArray76 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix77 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray76);
        double[] doubleArray78 = realMatrix71.operate(doubleArray76);
        boolean boolean79 = bigDecimal55.equals((java.lang.Object) doubleArray76);
        java.math.BigDecimal bigDecimal81 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal82 = bigDecimal81.stripTrailingZeros();
        float float83 = bigDecimal81.floatValue();
        java.math.BigDecimal bigDecimal84 = bigDecimal55.divideToIntegralValue(bigDecimal81);
        org.apache.commons.math.linear.BigMatrix bigMatrix85 = bigMatrixImpl43.scalarMultiply(bigDecimal84);
        java.math.MathContext mathContext86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal87 = bigDecimal9.divide(bigDecimal84, mathContext86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(bigDecimalArray42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray51);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigDecimal82);
        org.junit.Assert.assertTrue("'" + float83 + "' != '" + 97.0f + "'", float83 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigMatrix85);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double2 = realMatrix1.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrix1.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.getRowMatrix((int) (short) 10);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix12 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrix12.scalarAdd((double) 6);
        int int15 = realMatrix12.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix12.scalarAdd(10.0d);
        double[] doubleArray22 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        double double24 = realMatrix23.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix23.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix27 = realMatrix17.preMultiply(realMatrix26);
        double[][] doubleArray28 = realMatrix27.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = realMatrix27.inverse();
        double[] doubleArray34 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray34);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray34);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix36.scalarAdd((double) 6);
        int int39 = realMatrix36.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix41 = realMatrix36.scalarAdd(10.0d);
        double[] doubleArray46 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix47 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray46);
        double double48 = realMatrix47.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix47.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrix41.preMultiply(realMatrix50);
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrix51.scalarAdd((double) 1.0f);
        double[] doubleArray58 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix59 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray58);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray58);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix60.scalarAdd((double) 6);
        int int63 = realMatrix60.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrix60.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrix53.preMultiply(realMatrix60);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrix53.copy();
        boolean boolean68 = realMatrix67.isSquare();
        int int69 = realMatrix67.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix70 = realMatrix27.add(realMatrix67);
        double[] doubleArray72 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix73 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray72);
        double[] doubleArray74 = realMatrix27.operate(doubleArray72);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray76 = realMatrix5.solve(doubleArray72);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(realMatrix70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[7.5116889E7]");
        org.junit.Assert.assertNotNull(bigMatrix75);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal[][] bigDecimalArray31 = bigMatrixImpl27.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        bigMatrixImpl27.setRoundingMode(7);
        boolean boolean35 = bigMatrixImpl27.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal bigDecimal54 = new java.math.BigDecimal(0.0d);
        int int55 = bigDecimal54.intValue();
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal59 = bigDecimal54.min(bigDecimal57);
        java.math.BigDecimal[] bigDecimalArray60 = new java.math.BigDecimal[] { bigDecimal59 };
        java.math.BigDecimal[][] bigDecimalArray61 = new java.math.BigDecimal[][] { bigDecimalArray44, bigDecimalArray52, bigDecimalArray60 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray61);
        java.math.BigDecimal[][] bigDecimalArray63 = bigMatrixImpl62.getDataRef();
        double[] doubleArray66 = new double[] { 1.0d, 100.0f };
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[] doubleArray72 = new double[] { 1.0d, 100.0f };
        double[] doubleArray75 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray76 = new double[][] { doubleArray66, doubleArray69, doubleArray72, doubleArray75 };
        org.apache.commons.math.linear.BigMatrix bigMatrix77 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray76);
        boolean boolean78 = bigMatrixImpl62.equals((java.lang.Object) bigMatrix77);
        int int79 = bigMatrixImpl62.getRowDimension();
        boolean boolean80 = bigMatrixImpl62.isSquare();
        int int81 = bigMatrixImpl62.getColumnDimension();
        double[] doubleArray83 = bigMatrixImpl62.getColumnAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix84 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray83);
        org.apache.commons.math.linear.RealMatrix realMatrix85 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray83);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray83);
        org.apache.commons.math.linear.BigMatrix bigMatrix87 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray88 = bigMatrixImpl27.operate(doubleArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(bigMatrix77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(realMatrix85);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertNotNull(bigMatrix87);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal[][] bigDecimalArray36 = bigMatrixImpl27.getDataRef();
        double[][] doubleArray37 = bigMatrixImpl27.getDataAsDoubleArray();
        double[] doubleArray40 = new double[] { 1.0d, 100.0f };
        double[] doubleArray43 = new double[] { 1.0d, 100.0f };
        double[] doubleArray46 = new double[] { 1.0d, 100.0f };
        double[] doubleArray49 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray50 = new double[][] { doubleArray40, doubleArray43, doubleArray46, doubleArray49 };
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl52 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl52.transpose();
        double[] doubleArray55 = bigMatrixImpl52.getRowAsDoubleArray((int) (short) 0);
        boolean boolean56 = bigMatrixImpl52.isSingular();
        boolean boolean57 = bigMatrixImpl52.isSquare();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        java.lang.String str60 = bigDecimal59.toString();
        java.math.BigDecimal bigDecimal62 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal63 = bigDecimal62.stripTrailingZeros();
        int int64 = bigDecimal62.signum();
        java.math.BigDecimal[] bigDecimalArray65 = bigDecimal59.divideAndRemainder(bigDecimal62);
        java.math.BigDecimal bigDecimal67 = bigDecimal59.pow((int) 'a');
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        java.lang.String str70 = bigDecimal69.toString();
        java.math.BigDecimal bigDecimal72 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal73 = bigDecimal72.stripTrailingZeros();
        int int74 = bigDecimal72.signum();
        java.math.BigDecimal[] bigDecimalArray75 = bigDecimal69.divideAndRemainder(bigDecimal72);
        java.math.BigDecimal bigDecimal77 = bigDecimal69.pow((int) 'a');
        java.math.BigInteger bigInteger78 = bigDecimal69.toBigIntegerExact();
        java.math.BigDecimal bigDecimal79 = bigDecimal67.add(bigDecimal69);
        java.math.BigDecimal bigDecimal81 = new java.math.BigDecimal(0.0d);
        java.lang.String str82 = bigDecimal81.toString();
        java.math.BigDecimal bigDecimal84 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal85 = bigDecimal84.stripTrailingZeros();
        int int86 = bigDecimal84.signum();
        java.math.BigDecimal[] bigDecimalArray87 = bigDecimal81.divideAndRemainder(bigDecimal84);
        java.math.BigDecimal bigDecimal89 = bigDecimal81.pow((int) 'a');
        java.math.BigInteger bigInteger90 = bigDecimal81.toBigIntegerExact();
        float float91 = bigDecimal81.floatValue();
        java.math.BigDecimal bigDecimal92 = bigDecimal67.add(bigDecimal81);
        boolean boolean93 = bigMatrixImpl52.equals((java.lang.Object) bigDecimal67);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = bigMatrixImpl27.scalarMultiply(bigDecimal67);
        org.apache.commons.math.linear.BigMatrix bigMatrix95 = bigMatrixImpl27.transpose();
        // The following exception was thrown during execution in test generation
        try {
            double double98 = bigMatrixImpl27.getEntryAsDouble((int) (short) 400, (int) (byte) 62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray65);
        org.junit.Assert.assertNotNull(bigDecimal67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0" + "'", str70, "0");
        org.junit.Assert.assertNotNull(bigDecimal72);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertNotNull(bigDecimal84);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray87);
        org.junit.Assert.assertNotNull(bigDecimal89);
        org.junit.Assert.assertNotNull(bigInteger90);
        org.junit.Assert.assertTrue("'" + float91 + "' != '" + 0.0f + "'", float91 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(bigMatrix94);
        org.junit.Assert.assertNotNull(bigMatrix95);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        float float22 = bigDecimal21.floatValue();
        java.math.BigInteger bigInteger23 = bigDecimal21.unscaledValue();
        java.math.BigDecimal bigDecimal25 = new java.math.BigDecimal(bigInteger23, 0);
        short short26 = bigDecimal25.shortValueExact();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 0.0f + "'", float22 == 0.0f);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        int int21 = bigMatrixImpl14.getRoundingMode();
        int int22 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray23 = bigMatrixImpl14.getDataRef();
        boolean boolean24 = bigMatrixImpl14.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl14.transpose();
        int int26 = bigMatrixImpl14.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = bigMatrixImpl14.getEntryAsDouble((int) (byte) 6, (int) (short) -2805);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 1);
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(4);
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((int) (byte) 10);
        int int6 = bigDecimal5.scale();
        java.math.BigDecimal bigDecimal7 = bigDecimal3.divideToIntegralValue(bigDecimal5);
        java.math.MathContext mathContext9 = null;
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal((double) (byte) 0, mathContext9);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(0.0d);
        int int16 = bigDecimal15.intValue();
        java.math.BigDecimal bigDecimal17 = bigDecimal12.min(bigDecimal15);
        java.math.BigInteger bigInteger18 = bigDecimal12.toBigInteger();
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(bigInteger18);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(bigInteger18);
        java.math.BigDecimal bigDecimal21 = bigDecimal10.add(bigDecimal20);
        java.math.BigDecimal bigDecimal22 = bigDecimal20.ulp();
        java.math.BigDecimal bigDecimal23 = bigDecimal5.subtract(bigDecimal20);
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) (short) -2805, (int) (short) 1);
        java.math.BigDecimal bigDecimal27 = bigDecimal5.min(bigDecimal26);
        java.math.BigDecimal[] bigDecimalArray28 = bigDecimal1.divideAndRemainder(bigDecimal27);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal35 };
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal[] bigDecimalArray44 = new java.math.BigDecimal[] { bigDecimal43 };
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal51 = bigDecimal46.min(bigDecimal49);
        java.math.BigDecimal[] bigDecimalArray52 = new java.math.BigDecimal[] { bigDecimal51 };
        java.math.BigDecimal[][] bigDecimalArray53 = new java.math.BigDecimal[][] { bigDecimalArray36, bigDecimalArray44, bigDecimalArray52 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray53);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl56 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        java.math.BigDecimal[][] bigDecimalArray57 = bigMatrixImpl56.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl58 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray57);
        java.math.BigDecimal bigDecimal59 = bigMatrixImpl58.getNorm();
        java.math.BigInteger bigInteger60 = bigDecimal59.unscaledValue();
        java.math.BigDecimal bigDecimal61 = bigDecimal59.negate();
        int int62 = bigDecimal59.intValue();
        double[] doubleArray65 = new double[] { 1.0d, 100.0f };
        double[] doubleArray68 = new double[] { 1.0d, 100.0f };
        double[] doubleArray71 = new double[] { 1.0d, 100.0f };
        double[] doubleArray74 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray75 = new double[][] { doubleArray65, doubleArray68, doubleArray71, doubleArray74 };
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray75);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray75);
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl77.transpose();
        double[] doubleArray80 = bigMatrixImpl77.getRowAsDoubleArray((int) (short) 0);
        boolean boolean81 = bigMatrixImpl77.isSingular();
        java.math.BigDecimal[][] bigDecimalArray82 = bigMatrixImpl77.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray82);
        java.math.BigDecimal bigDecimal85 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal86 = bigDecimal85.negate();
        int int87 = bigDecimal86.scale();
        boolean boolean88 = bigMatrixImpl83.equals((java.lang.Object) bigDecimal86);
        java.math.BigDecimal bigDecimal90 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger91 = bigDecimal90.unscaledValue();
        java.lang.String str92 = bigDecimal90.toPlainString();
        java.math.BigDecimal bigDecimal93 = bigDecimal86.divideToIntegralValue(bigDecimal90);
        java.math.BigDecimal bigDecimal94 = bigDecimal86.stripTrailingZeros();
        java.math.BigDecimal bigDecimal95 = bigDecimal59.min(bigDecimal86);
        java.math.MathContext mathContext96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal97 = bigDecimal1.divideToIntegralValue(bigDecimal86, mathContext96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimalArray52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(bigDecimalArray57);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigInteger91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "100" + "'", str92, "100");
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigDecimal94);
        org.junit.Assert.assertNotNull(bigDecimal95);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray30 = new double[][] { doubleArray20, doubleArray23, doubleArray26, doubleArray29 };
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray30);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl32.transpose();
        double[] doubleArray35 = bigMatrixImpl32.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str36 = bigMatrixImpl32.toString();
        int int37 = bigMatrixImpl32.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl17.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl32);
        java.math.BigDecimal bigDecimal40 = new java.math.BigDecimal(0.0d);
        java.lang.String str41 = bigDecimal40.toString();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        int int45 = bigDecimal43.signum();
        java.math.BigDecimal[] bigDecimalArray46 = bigDecimal40.divideAndRemainder(bigDecimal43);
        java.math.BigDecimal bigDecimal48 = bigDecimal40.pow((int) 'a');
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        java.math.BigDecimal bigDecimal58 = bigDecimal50.pow((int) 'a');
        java.math.BigInteger bigInteger59 = bigDecimal50.toBigIntegerExact();
        java.math.BigDecimal bigDecimal60 = bigDecimal48.add(bigDecimal50);
        java.math.BigDecimal bigDecimal61 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger64 = bigDecimal63.unscaledValue();
        java.math.BigDecimal bigDecimal65 = bigDecimal61.add(bigDecimal63);
        java.math.BigDecimal bigDecimal66 = bigDecimal50.multiply(bigDecimal61);
        org.apache.commons.math.linear.BigMatrix bigMatrix67 = bigMatrixImpl32.scalarMultiply(bigDecimal66);
        java.math.BigDecimal[] bigDecimalArray69 = bigMatrixImpl32.getRow((int) (byte) 1);
        boolean boolean70 = bigMatrixImpl32.isSquare();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal73 = bigMatrixImpl32.getEntry((int) (short) 31464, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str36, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(bigDecimal60);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigDecimal66);
        org.junit.Assert.assertNotNull(bigMatrix67);
        org.junit.Assert.assertNotNull(bigDecimalArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl14.transpose();
        boolean boolean18 = bigMatrixImpl14.isSquare();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        int int20 = bigMatrixImpl14.getRowDimension();
        java.lang.Class<?> wildcardClass21 = bigMatrixImpl14.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        java.math.MathContext mathContext1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal("100.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", mathContext1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        long long8 = bigDecimal6.longValue();
        long long9 = bigDecimal6.longValueExact();
        short short10 = bigDecimal6.shortValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal6);
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigInteger bigInteger36 = bigDecimal30.toBigInteger();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(bigInteger36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrix28.scalarAdd(bigDecimal37);
        java.math.BigDecimal bigDecimal39 = bigDecimal37.plus();
        java.math.BigDecimal bigDecimal40 = bigDecimal11.min(bigDecimal39);
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        long long44 = bigDecimal42.longValue();
        long long45 = bigDecimal42.longValueExact();
        int int46 = bigDecimal42.precision();
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        long long50 = bigDecimal48.longValue();
        long long51 = bigDecimal48.longValueExact();
        java.math.BigDecimal bigDecimal52 = bigDecimal42.add(bigDecimal48);
        byte byte53 = bigDecimal42.byteValueExact();
        java.math.BigDecimal bigDecimal55 = new java.math.BigDecimal(0.0d);
        java.lang.String str56 = bigDecimal55.toString();
        java.math.BigDecimal bigDecimal58 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal59 = bigDecimal58.stripTrailingZeros();
        int int60 = bigDecimal58.signum();
        java.math.BigDecimal[] bigDecimalArray61 = bigDecimal55.divideAndRemainder(bigDecimal58);
        java.math.BigDecimal bigDecimal63 = bigDecimal55.pow((int) 'a');
        java.math.BigInteger bigInteger64 = bigDecimal55.toBigIntegerExact();
        float float65 = bigDecimal55.floatValue();
        double[] doubleArray70 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix71 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray70);
        double[] doubleArray76 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix77 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray76);
        double[] doubleArray78 = realMatrix71.operate(doubleArray76);
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray78);
        java.math.BigDecimal bigDecimal80 = bigMatrix79.getNorm();
        java.math.BigDecimal bigDecimal81 = bigDecimal55.subtract(bigDecimal80);
        int int82 = bigDecimal81.signum();
        java.math.BigInteger bigInteger83 = bigDecimal81.toBigInteger();
        java.math.BigDecimal bigDecimal85 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal87 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray88 = bigDecimal85.divideAndRemainder(bigDecimal87);
        java.math.BigDecimal bigDecimal90 = bigDecimal87.movePointLeft((-1));
        java.math.BigDecimal bigDecimal91 = bigDecimal81.max(bigDecimal87);
        java.math.BigDecimal bigDecimal92 = bigDecimal87.stripTrailingZeros();
        java.math.BigDecimal bigDecimal93 = bigDecimal42.remainder(bigDecimal87);
        java.math.BigInteger bigInteger94 = bigDecimal87.unscaledValue();
        java.math.BigDecimal bigDecimal95 = bigDecimal87.negate();
        int int96 = bigDecimal87.intValue();
        int int97 = bigDecimal39.compareTo(bigDecimal87);
        java.lang.String str98 = bigDecimal87.toPlainString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertTrue("'" + byte53 + "' != '" + (byte) 0 + "'", byte53 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertNotNull(bigDecimal58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertTrue("'" + float65 + "' != '" + 0.0f + "'", float65 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(bigDecimal80);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(bigDecimal85);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigDecimalArray88);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal91);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigDecimal93);
        org.junit.Assert.assertNotNull(bigInteger94);
        org.junit.Assert.assertNotNull(bigDecimal95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 97 + "'", int96 == 97);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "97" + "'", str98, "97");
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        java.math.BigDecimal bigDecimal25 = bigDecimal20.min(bigDecimal23);
        java.math.BigInteger bigInteger26 = bigDecimal25.toBigIntegerExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl18.scalarAdd(bigDecimal25);
        boolean boolean28 = bigMatrixImpl18.isSingular();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(3, 10);
        int int32 = bigMatrixImpl31.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray33 = bigMatrixImpl31.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl18.solve((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigInteger26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl18.getColumn(0);
        int int21 = bigMatrixImpl18.getRoundingMode();
        int int22 = bigMatrixImpl18.getScale();
        double[] doubleArray25 = new double[] { 1.0d, 100.0f };
        double[] doubleArray28 = new double[] { 1.0d, 100.0f };
        double[] doubleArray31 = new double[] { 1.0d, 100.0f };
        double[] doubleArray34 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray35 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34 };
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray35);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray35);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrixImpl37.transpose();
        int int39 = bigMatrixImpl37.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl37.getDataRef();
        bigMatrixImpl37.setScale((int) (short) 100);
        boolean boolean43 = bigMatrixImpl37.isSingular();
        int int44 = bigMatrixImpl37.getScale();
        int int45 = bigMatrixImpl37.getColumnDimension();
        double[] doubleArray47 = bigMatrixImpl37.getRowAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl18.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl37);
        double[][] doubleArray49 = bigMatrixImpl37.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal51 = bigMatrix50.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 64 + "'", int22 == 64);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(bigMatrix50);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        double[][] doubleArray30 = realMatrix29.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray30);
        java.math.BigDecimal[][] bigDecimalArray32 = bigMatrixImpl31.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl31.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix34 = bigMatrixImpl31.copy();
        java.math.BigDecimal bigDecimal37 = bigMatrixImpl31.getEntry((int) (short) 0, 2);
        int int38 = bigMatrixImpl31.getScale();
        org.apache.commons.math.linear.BigMatrix bigMatrix40 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        boolean boolean41 = bigMatrix40.isSquare();
        java.math.BigDecimal[] bigDecimalArray43 = bigMatrix40.getRow(0);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray44 = bigMatrixImpl31.operate(bigDecimalArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertNotNull(bigMatrix34);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 64 + "'", int38 == 64);
        org.junit.Assert.assertNotNull(bigMatrix40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray17);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl18.getColumn(0);
        int int21 = bigMatrixImpl18.getRoundingMode();
        double[] doubleArray23 = bigMatrixImpl18.getRowAsDoubleArray((int) (byte) 1);
        int int24 = bigMatrixImpl18.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl18.getSubMatrix((int) (byte) 32, 0, (int) (short) -3072, 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getRoundingMode();
        java.math.BigDecimal[][] bigDecimalArray22 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal25 = bigDecimal24.stripTrailingZeros();
        java.math.BigDecimal bigDecimal27 = bigDecimal25.scaleByPowerOfTen(3);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl14.scalarAdd(bigDecimal27);
        java.math.BigDecimal[][] bigDecimalArray29 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal[][] bigDecimalArray54 = new java.math.BigDecimal[][] { bigDecimalArray37, bigDecimalArray45, bigDecimalArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl57.getDataRef();
        java.math.BigDecimal bigDecimal59 = bigMatrixImpl57.getNorm();
        boolean boolean60 = bigMatrixImpl57.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl57.copy();
        double[] doubleArray63 = bigMatrixImpl57.getColumnAsDoubleArray((int) (byte) 0);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray65 = bigMatrixImpl14.operate(doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(bigDecimalArray22);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix64);
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        int int37 = realMatrix23.getColumnDimension();
        boolean boolean38 = realMatrix23.isSquare();
        double[] doubleArray40 = new double[] { 8667.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray40);
        double[] doubleArray42 = realMatrix23.preMultiply(doubleArray40);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray42);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[8667.0]");
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[7.5125556E7]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(realMatrix44);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = new java.math.BigDecimal(0.0d);
        java.lang.String str4 = bigDecimal3.toString();
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        int int8 = bigDecimal6.signum();
        java.math.BigDecimal[] bigDecimalArray9 = bigDecimal3.divideAndRemainder(bigDecimal6);
        java.math.BigDecimal bigDecimal11 = bigDecimal3.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray12 = new java.math.BigDecimal[] { bigDecimal1, bigDecimal3 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray12);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal16.divideAndRemainder(bigDecimal18);
        java.math.BigDecimal[] bigDecimalArray20 = bigMatrixImpl14.preMultiply(bigDecimalArray19);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal22 = bigMatrix21.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray9);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigMatrix21);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        java.lang.String[] strArray11 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray12 = new java.lang.String[][] { strArray11 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl13 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl15 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl16 = new org.apache.commons.math.linear.BigMatrixImpl(strArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl5.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl16);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl5.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        boolean boolean20 = bigMatrixImpl19.isSingular();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((double) ' ');
        int int23 = bigDecimal22.intValueExact();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl19.scalarAdd(bigDecimal22);
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        int int27 = bigDecimal26.intValue();
        long long28 = bigDecimal26.longValue();
        long long29 = bigDecimal26.longValueExact();
        int int30 = bigDecimal26.precision();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        long long34 = bigDecimal32.longValue();
        long long35 = bigDecimal32.longValueExact();
        java.math.BigDecimal bigDecimal36 = bigDecimal26.add(bigDecimal32);
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal41 = new java.math.BigDecimal(0.0d);
        int int42 = bigDecimal41.intValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal38.min(bigDecimal41);
        java.math.BigDecimal bigDecimal44 = bigDecimal36.min(bigDecimal41);
        java.math.BigDecimal bigDecimal46 = bigDecimal44.movePointRight((int) (short) 10);
        int int47 = bigDecimal46.intValueExact();
        java.math.BigDecimal bigDecimal48 = bigDecimal46.plus();
        short short49 = bigDecimal48.shortValueExact();
        byte byte50 = bigDecimal48.byteValueExact();
        java.math.MathContext mathContext51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal52 = bigDecimal22.add(bigDecimal48, mathContext51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 0 + "'", short49 == (short) 0);
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 0 + "'", byte50 == (byte) 0);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int32 = bigDecimal31.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix33 = bigMatrixImpl27.scalarMultiply(bigDecimal31);
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        java.lang.String str36 = bigDecimal35.toString();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        int int40 = bigDecimal38.signum();
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal35.divideAndRemainder(bigDecimal38);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl42 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray41);
        int int43 = bigMatrixImpl42.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrixImpl42.transpose();
        double[][] doubleArray45 = bigMatrix44.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray46 = bigMatrix44.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix47 = bigMatrixImpl27.multiply(bigMatrix44);
        java.math.BigDecimal bigDecimal48 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        java.lang.String str51 = bigDecimal50.toString();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        int int55 = bigDecimal53.signum();
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal50.divideAndRemainder(bigDecimal53);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray56);
        int int58 = bigMatrixImpl57.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl57.transpose();
        java.math.BigDecimal[][] bigDecimalArray60 = bigMatrixImpl57.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl61 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray60);
        int int62 = bigMatrixImpl61.getScale();
        boolean boolean63 = bigMatrixImpl61.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix64 = bigMatrixImpl27.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigMatrix33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(bigDecimalArray46);
        org.junit.Assert.assertNotNull(bigMatrix47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 64 + "'", int62 == 64);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        java.math.BigDecimal[][] bigDecimalArray27 = bigMatrixImpl25.getDataRef();
        bigMatrixImpl25.setScale((int) 'a');
        java.math.BigDecimal[][] bigDecimalArray30 = bigMatrixImpl25.getDataRef();
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[] doubleArray36 = new double[] { 1.0d, 100.0f };
        double[] doubleArray39 = new double[] { 1.0d, 100.0f };
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray43 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42 };
        org.apache.commons.math.linear.BigMatrix bigMatrix44 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray43);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray43);
        org.apache.commons.math.linear.BigMatrix bigMatrix46 = bigMatrixImpl45.transpose();
        double[] doubleArray48 = bigMatrixImpl45.getRowAsDoubleArray((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl45.getDataRef();
        java.math.BigDecimal bigDecimal50 = bigMatrixImpl45.getNorm();
        double[][] doubleArray51 = bigMatrixImpl45.getDataAsDoubleArray();
        boolean boolean52 = bigMatrixImpl45.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix53 = bigMatrixImpl25.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigDecimalArray30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(bigMatrix44);
        org.junit.Assert.assertNotNull(bigMatrix46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) 4);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        java.lang.String str5 = bigDecimal4.toString();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal8 = bigDecimal7.stripTrailingZeros();
        int int9 = bigDecimal7.signum();
        java.math.BigDecimal[] bigDecimalArray10 = bigDecimal4.divideAndRemainder(bigDecimal7);
        java.math.BigDecimal bigDecimal12 = bigDecimal4.pow((int) 'a');
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        java.lang.String str15 = bigDecimal14.toString();
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = bigDecimal17.stripTrailingZeros();
        int int19 = bigDecimal17.signum();
        java.math.BigDecimal[] bigDecimalArray20 = bigDecimal14.divideAndRemainder(bigDecimal17);
        java.math.BigDecimal bigDecimal22 = bigDecimal14.pow((int) 'a');
        java.math.BigInteger bigInteger23 = bigDecimal14.toBigIntegerExact();
        java.math.BigDecimal bigDecimal24 = bigDecimal12.add(bigDecimal14);
        java.math.BigDecimal bigDecimal26 = new java.math.BigDecimal(0.0d);
        java.lang.String str27 = bigDecimal26.toString();
        java.math.BigDecimal bigDecimal29 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal30 = bigDecimal29.stripTrailingZeros();
        int int31 = bigDecimal29.signum();
        java.math.BigDecimal[] bigDecimalArray32 = bigDecimal26.divideAndRemainder(bigDecimal29);
        java.math.BigDecimal bigDecimal34 = bigDecimal26.pow((int) 'a');
        java.math.BigInteger bigInteger35 = bigDecimal26.toBigIntegerExact();
        float float36 = bigDecimal26.floatValue();
        java.math.BigDecimal bigDecimal37 = bigDecimal12.add(bigDecimal26);
        java.math.BigInteger bigInteger38 = bigDecimal26.toBigIntegerExact();
        byte byte39 = bigDecimal26.byteValueExact();
        java.math.BigDecimal bigDecimal40 = bigDecimal26.negate();
        java.math.BigDecimal bigDecimal41 = bigDecimal2.multiply(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray20);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.0f + "'", float36 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 0 + "'", byte39 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl(5, 110);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        float float18 = bigDecimal16.floatValue();
        java.math.BigDecimal bigDecimal19 = bigDecimal14.divideToIntegralValue(bigDecimal16);
        java.math.BigDecimal bigDecimal20 = bigDecimal4.max(bigDecimal14);
        int int21 = bigDecimal14.intValueExact();
        java.math.BigDecimal bigDecimal22 = bigDecimal14.abs();
        boolean boolean23 = bigMatrixImpl2.equals((java.lang.Object) bigDecimal22);
        java.math.BigDecimal bigDecimal25 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray36 = new java.math.BigDecimal[] { bigDecimal25, bigDecimal27 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray36);
        java.math.BigDecimal[][] bigDecimalArray39 = bigMatrix38.getData();
        double[] doubleArray42 = new double[] { 1.0d, 100.0f };
        double[] doubleArray45 = new double[] { 1.0d, 100.0f };
        double[] doubleArray48 = new double[] { 1.0d, 100.0f };
        double[] doubleArray51 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray52 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51 };
        org.apache.commons.math.linear.BigMatrix bigMatrix53 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray52);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray52);
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl54.transpose();
        double[] doubleArray57 = bigMatrixImpl54.getRowAsDoubleArray((int) (short) 0);
        boolean boolean58 = bigMatrixImpl54.isSingular();
        java.math.BigDecimal[][] bigDecimalArray59 = bigMatrixImpl54.getData();
        java.math.BigDecimal[][] bigDecimalArray60 = bigMatrixImpl54.getDataRef();
        int int61 = bigMatrixImpl54.getRoundingMode();
        int int62 = bigMatrixImpl54.getRowDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrix38.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl54);
        double[][] doubleArray64 = bigMatrixImpl54.getDataAsDoubleArray();
        double[] doubleArray67 = new double[] { 1.0d, 100.0f };
        double[] doubleArray70 = new double[] { 1.0d, 100.0f };
        double[] doubleArray73 = new double[] { 1.0d, 100.0f };
        double[] doubleArray76 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray77 = new double[][] { doubleArray67, doubleArray70, doubleArray73, doubleArray76 };
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray77);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl79 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray77);
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl79.transpose();
        boolean boolean81 = bigMatrixImpl79.isSingular();
        double[] doubleArray83 = bigMatrixImpl79.getColumnAsDoubleArray(0);
        int int84 = bigMatrixImpl79.getRoundingMode();
        boolean boolean85 = bigMatrixImpl79.isSingular();
        int int86 = bigMatrixImpl79.getRoundingMode();
        java.math.BigDecimal bigDecimal88 = new java.math.BigDecimal((int) (byte) 100);
        org.apache.commons.math.linear.BigMatrix bigMatrix89 = bigMatrixImpl79.scalarMultiply(bigDecimal88);
        org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrixImpl54.add(bigMatrix89);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl54.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix92 = bigMatrixImpl2.add(bigMatrix91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 97.0f + "'", float18 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(bigMatrix53);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray59);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(bigMatrix89);
        org.junit.Assert.assertNotNull(bigMatrix90);
        org.junit.Assert.assertNotNull(bigMatrix91);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double double9 = realMatrix6.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix6.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrix6.scalarAdd((double) 0.0f);
        boolean boolean13 = realMatrix12.isSingular();
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrix12.transpose();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 63.0d + "'", double9 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(realMatrix14);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(0);
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        int int7 = bigDecimal6.intValue();
        long long8 = bigDecimal6.longValue();
        long long9 = bigDecimal6.longValueExact();
        short short10 = bigDecimal6.shortValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.add(bigDecimal6);
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray24 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23 };
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl26 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray24);
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        int int34 = bigDecimal33.intValue();
        java.math.BigDecimal bigDecimal35 = bigDecimal30.min(bigDecimal33);
        java.math.BigInteger bigInteger36 = bigDecimal30.toBigInteger();
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(bigInteger36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrix28.scalarAdd(bigDecimal37);
        java.math.BigDecimal bigDecimal39 = bigDecimal37.plus();
        java.math.BigDecimal bigDecimal40 = bigDecimal11.min(bigDecimal39);
        java.math.BigDecimal bigDecimal41 = bigDecimal40.abs();
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal((long) (-1));
        java.math.BigDecimal bigDecimal45 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger46 = bigDecimal45.unscaledValue();
        short short47 = bigDecimal45.shortValueExact();
        java.lang.String str48 = bigDecimal45.toEngineeringString();
        java.math.BigDecimal bigDecimal49 = bigDecimal43.min(bigDecimal45);
        int int50 = bigDecimal41.compareTo(bigDecimal49);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertTrue("'" + short47 + "' != '" + (short) 100 + "'", short47 == (short) 100);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "100" + "'", str48, "100");
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger2 = bigDecimal1.unscaledValue();
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal5 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger6 = bigDecimal5.unscaledValue();
        java.math.BigDecimal bigDecimal7 = bigDecimal3.add(bigDecimal5);
        java.math.BigDecimal bigDecimal9 = bigDecimal5.setScale(100);
        long long10 = bigDecimal9.longValueExact();
        java.math.BigDecimal bigDecimal11 = bigDecimal1.divideToIntegralValue(bigDecimal9);
        java.math.BigInteger bigInteger12 = bigDecimal9.toBigInteger();
        java.math.MathContext mathContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal15 = new java.math.BigDecimal(bigInteger12, 4, mathContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigInteger12);
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) (-2));
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) 4, 7);
        java.lang.String str3 = bigDecimal2.toPlainString();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger4 = bigDecimal2.toBigIntegerExact();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Rounding necessary");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0.0000004" + "'", str3, "0.0000004");
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getData();
        boolean boolean29 = bigMatrixImpl27.isSquare();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl27.getNorm();
        java.math.BigDecimal bigDecimal31 = bigMatrixImpl27.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix32 = bigMatrixImpl27.transpose();
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.valueOf((double) (short) -100);
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarAdd(bigDecimal34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl27.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix38 = bigMatrix36.getColumnMatrix((-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigMatrix32);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix36);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        long long3 = bigDecimal1.longValue();
        long long4 = bigDecimal1.longValueExact();
        int int5 = bigDecimal1.precision();
        short short6 = bigDecimal1.shortValueExact();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 0 + "'", short6 == (short) 0);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.transpose();
        java.math.BigDecimal[] bigDecimalArray37 = bigMatrixImpl27.getColumn((int) (short) 0);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        int int43 = bigDecimal39.precision();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        long long47 = bigDecimal45.longValue();
        long long48 = bigDecimal45.longValueExact();
        java.math.BigDecimal bigDecimal49 = bigDecimal39.add(bigDecimal45);
        java.math.BigDecimal bigDecimal51 = bigDecimal45.pow(3);
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        float float55 = bigDecimal53.floatValue();
        java.math.BigDecimal bigDecimal56 = bigDecimal53.ulp();
        java.math.BigDecimal bigDecimal57 = bigDecimal45.subtract(bigDecimal56);
        int int58 = bigDecimal57.precision();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl27.scalarMultiply(bigDecimal57);
        java.math.BigDecimal bigDecimal60 = bigMatrix59.getNorm();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 97.0f + "'", float55 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigDecimal60);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal18 = bigMatrixImpl17.getTrace();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix is not square");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix16);
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) (short) 100);
        bigMatrixImpl2.setScale((int) 'a');
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = bigMatrixImpl2.copy();
        org.junit.Assert.assertNotNull(bigMatrix5);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal8.negate();
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal16 = bigDecimal14.stripTrailingZeros();
        double[] doubleArray23 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray30 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray37 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray44 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray45 = new double[][] { doubleArray23, doubleArray30, doubleArray37, doubleArray44 };
        org.apache.commons.math.linear.RealMatrix realMatrix46 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray45);
        double[][] doubleArray47 = realMatrix46.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl48 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray47);
        java.math.BigDecimal[][] bigDecimalArray49 = bigMatrixImpl48.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl48.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix51 = bigMatrixImpl48.copy();
        java.math.BigDecimal bigDecimal54 = bigMatrixImpl48.getEntry((int) (short) 0, 2);
        double[] doubleArray57 = new double[] { 1.0d, 100.0f };
        double[] doubleArray60 = new double[] { 1.0d, 100.0f };
        double[] doubleArray63 = new double[] { 1.0d, 100.0f };
        double[] doubleArray66 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray67 = new double[][] { doubleArray57, doubleArray60, doubleArray63, doubleArray66 };
        org.apache.commons.math.linear.BigMatrix bigMatrix68 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray67);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl69 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray67);
        org.apache.commons.math.linear.BigMatrix bigMatrix70 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray67);
        org.apache.commons.math.linear.BigMatrix bigMatrix71 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray67);
        java.math.BigDecimal bigDecimal73 = new java.math.BigDecimal(0.0d);
        int int74 = bigDecimal73.intValue();
        java.math.BigDecimal bigDecimal76 = new java.math.BigDecimal(0.0d);
        int int77 = bigDecimal76.intValue();
        java.math.BigDecimal bigDecimal78 = bigDecimal73.min(bigDecimal76);
        java.math.BigInteger bigInteger79 = bigDecimal73.toBigInteger();
        java.math.BigDecimal bigDecimal80 = new java.math.BigDecimal(bigInteger79);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = bigMatrix71.scalarAdd(bigDecimal80);
        java.math.BigDecimal bigDecimal83 = bigDecimal80.scaleByPowerOfTen(97);
        java.math.BigInteger bigInteger84 = bigDecimal83.toBigIntegerExact();
        java.math.BigDecimal bigDecimal87 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        int int88 = bigDecimal87.intValue();
        java.math.BigDecimal[] bigDecimalArray89 = bigDecimal83.divideAndRemainder(bigDecimal87);
        java.math.BigDecimal bigDecimal90 = bigDecimal83.ulp();
        java.math.BigDecimal bigDecimal92 = bigDecimal83.movePointRight((int) (short) 35);
        java.math.BigDecimal bigDecimal93 = bigDecimal54.max(bigDecimal83);
        java.math.RoundingMode roundingMode94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal95 = bigDecimal14.divide(bigDecimal93, roundingMode94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 97.0f + "'", float12 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertNotNull(bigMatrix51);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(bigMatrix68);
        org.junit.Assert.assertNotNull(bigMatrix70);
        org.junit.Assert.assertNotNull(bigMatrix71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(bigMatrix81);
        org.junit.Assert.assertNotNull(bigDecimal83);
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(bigDecimalArray89);
        org.junit.Assert.assertNotNull(bigDecimal90);
        org.junit.Assert.assertNotNull(bigDecimal92);
        org.junit.Assert.assertNotNull(bigDecimal93);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = realMatrix5.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix5.scalarMultiply((double) 10L);
        int int9 = realMatrix8.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix8.inverse();
        double double11 = realMatrix10.getTrace();
        int int12 = realMatrix10.getRowDimension();
        double[] doubleArray15 = new double[] { 1.0d, 100.0f };
        double[] doubleArray18 = new double[] { 1.0d, 100.0f };
        double[] doubleArray21 = new double[] { 1.0d, 100.0f };
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray25 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24 };
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray25);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray25);
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = bigMatrixImpl27.transpose();
        boolean boolean29 = bigMatrixImpl27.isSingular();
        double[] doubleArray31 = bigMatrixImpl27.getColumnAsDoubleArray(0);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = realMatrix10.preMultiply(doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.010000000000000002d + "'", double11 == 0.010000000000000002d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(realMatrix32);
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal2 = bigDecimal1.stripTrailingZeros();
        int int3 = bigDecimal1.signum();
        byte byte4 = bigDecimal1.byteValueExact();
        int int5 = bigDecimal1.intValue();
        int int6 = bigDecimal1.signum();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 97 + "'", byte4 == (byte) 97);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        int int28 = bigMatrixImpl27.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = bigMatrixImpl27.copy();
        java.math.BigDecimal bigDecimal31 = new java.math.BigDecimal(0.0d);
        int int32 = bigDecimal31.intValue();
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        int int35 = bigDecimal34.intValue();
        java.math.BigDecimal bigDecimal36 = bigDecimal31.min(bigDecimal34);
        java.math.BigDecimal[] bigDecimalArray37 = new java.math.BigDecimal[] { bigDecimal36 };
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        java.math.BigDecimal bigDecimal42 = new java.math.BigDecimal(0.0d);
        int int43 = bigDecimal42.intValue();
        java.math.BigDecimal bigDecimal44 = bigDecimal39.min(bigDecimal42);
        java.math.BigDecimal[] bigDecimalArray45 = new java.math.BigDecimal[] { bigDecimal44 };
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        int int48 = bigDecimal47.intValue();
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal52 = bigDecimal47.min(bigDecimal50);
        java.math.BigDecimal[] bigDecimalArray53 = new java.math.BigDecimal[] { bigDecimal52 };
        java.math.BigDecimal[][] bigDecimalArray54 = new java.math.BigDecimal[][] { bigDecimalArray37, bigDecimalArray45, bigDecimalArray53 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl55 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray54);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl57 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray54);
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrixImpl57.getDataRef();
        java.math.BigDecimal bigDecimal59 = bigMatrixImpl57.getNorm();
        boolean boolean60 = bigMatrixImpl57.isSquare();
        java.math.BigDecimal[][] bigDecimalArray61 = bigMatrixImpl57.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl57.transpose();
        bigMatrixImpl57.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix65 = bigMatrixImpl57.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl57.copy();
        boolean boolean67 = bigMatrixImpl57.isSingular();
        boolean boolean68 = bigMatrixImpl57.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix69 = bigMatrixImpl27.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl57);
        boolean boolean70 = bigMatrixImpl57.isSquare();
        java.math.BigDecimal bigDecimal71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix72 = bigMatrixImpl57.scalarAdd(bigDecimal71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigMatrix29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertNotNull(bigDecimalArray45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(bigDecimal52);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigDecimal59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray61);
        org.junit.Assert.assertNotNull(bigMatrix62);
        org.junit.Assert.assertNotNull(bigMatrix65);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(bigMatrix69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double double9 = realMatrix6.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix6.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrix6.scalarAdd((double) 0.0f);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrix6.scalarMultiply((double) (byte) 0);
        double[][] doubleArray15 = realMatrix6.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix16 = realMatrix6.copy();
        boolean boolean17 = realMatrix16.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 100);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix19.copy();
        double double23 = realMatrix20.getEntry((int) (short) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix16.subtract(realMatrix20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 63.0d + "'", double9 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray12);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix15.scalarAdd((-1.0d));
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix17.transpose();
        double double19 = realMatrix17.getNorm();
        int int20 = realMatrix17.getColumnDimension();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2807.0d + "'", double19 == 2807.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getDataRef();
        double[][] doubleArray19 = bigMatrixImpl14.getDataAsDoubleArray();
        boolean boolean20 = bigMatrixImpl14.isSquare();
        bigMatrixImpl14.setScale(1);
        java.math.BigDecimal bigDecimal24 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray27 = bigDecimal24.divideAndRemainder(bigDecimal26);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl28 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        org.apache.commons.math.linear.BigMatrix bigMatrix29 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl31 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray32 = bigMatrixImpl14.operate(bigDecimalArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertNotNull(bigMatrix29);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        int int9 = realMatrix6.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix11 = realMatrix6.scalarAdd(10.0d);
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double double18 = realMatrix17.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix20 = realMatrix17.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix11.preMultiply(realMatrix20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix21.scalarAdd((double) 1.0f);
        double[] doubleArray28 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix30.scalarAdd((double) 6);
        int int33 = realMatrix30.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix30.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix36 = realMatrix23.preMultiply(realMatrix30);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = realMatrix23.copy();
        boolean boolean38 = realMatrix37.isSquare();
        int int39 = realMatrix37.getColumnDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = realMatrix37.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double43 = realMatrix42.getDeterminant();
        boolean boolean44 = realMatrix42.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix42.scalarAdd(8668.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix37.solve(realMatrix46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Incorrect row dimension");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(realMatrix46);
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) (byte) -100);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.abs();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        java.lang.String str5 = bigDecimal4.toString();
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal8 = bigDecimal7.stripTrailingZeros();
        int int9 = bigDecimal7.signum();
        java.math.BigDecimal[] bigDecimalArray10 = bigDecimal4.divideAndRemainder(bigDecimal7);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl11 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray10);
        java.math.BigDecimal bigDecimal12 = bigMatrixImpl11.getNorm();
        java.math.BigDecimal bigDecimal14 = new java.math.BigDecimal(0.0d);
        java.lang.String str15 = bigDecimal14.toString();
        java.math.BigDecimal bigDecimal17 = bigDecimal14.setScale(0);
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        int int20 = bigDecimal19.intValue();
        long long21 = bigDecimal19.longValue();
        long long22 = bigDecimal19.longValueExact();
        short short23 = bigDecimal19.shortValueExact();
        java.math.BigDecimal bigDecimal24 = bigDecimal14.add(bigDecimal19);
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = bigMatrixImpl11.scalarAdd(bigDecimal14);
        java.math.BigDecimal bigDecimal26 = bigDecimal1.multiply(bigDecimal14);
        double double27 = bigDecimal26.doubleValue();
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray10);
        org.junit.Assert.assertNotNull(bigDecimal12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) 0 + "'", short23 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((-1L), (int) (byte) 1);
        java.math.BigDecimal bigDecimal4 = bigDecimal2.pow(2);
        java.math.BigDecimal bigDecimal6 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal7 = bigDecimal6.stripTrailingZeros();
        java.math.BigDecimal bigDecimal9 = bigDecimal7.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal10 = bigDecimal4.add(bigDecimal7);
        java.lang.String str11 = bigDecimal4.toEngineeringString();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        java.lang.String str14 = bigDecimal13.toString();
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal17 = bigDecimal16.stripTrailingZeros();
        int int18 = bigDecimal16.signum();
        java.math.BigDecimal[] bigDecimalArray19 = bigDecimal13.divideAndRemainder(bigDecimal16);
        java.math.BigDecimal bigDecimal21 = bigDecimal13.pow((int) 'a');
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        java.math.BigDecimal bigDecimal33 = bigDecimal21.add(bigDecimal23);
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        java.lang.String str36 = bigDecimal35.toString();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        int int40 = bigDecimal38.signum();
        java.math.BigDecimal[] bigDecimalArray41 = bigDecimal35.divideAndRemainder(bigDecimal38);
        java.math.BigDecimal bigDecimal43 = bigDecimal35.pow((int) 'a');
        java.math.BigInteger bigInteger44 = bigDecimal35.toBigIntegerExact();
        float float45 = bigDecimal35.floatValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal21.add(bigDecimal35);
        java.math.BigDecimal bigDecimal48 = bigDecimal35.pow((int) ' ');
        java.math.BigDecimal bigDecimal49 = bigDecimal35.stripTrailingZeros();
        byte byte50 = bigDecimal49.byteValueExact();
        java.math.BigDecimal bigDecimal51 = bigDecimal49.abs();
        java.math.MathContext mathContext52 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal53 = bigDecimal4.divideToIntegralValue(bigDecimal49, mathContext52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0.01" + "'", str11, "0.01");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 0.0f + "'", float45 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertTrue("'" + byte50 + "' != '" + (byte) 0 + "'", byte50 == (byte) 0);
        org.junit.Assert.assertNotNull(bigDecimal51);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl2 = new org.apache.commons.math.linear.BigMatrixImpl((int) (byte) 10, (int) 'a');
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal6 = new java.math.BigDecimal(0.0d);
        java.lang.String str7 = bigDecimal6.toString();
        java.math.BigDecimal bigDecimal9 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal10 = bigDecimal9.stripTrailingZeros();
        int int11 = bigDecimal9.signum();
        java.math.BigDecimal[] bigDecimalArray12 = bigDecimal6.divideAndRemainder(bigDecimal9);
        java.math.BigDecimal bigDecimal14 = bigDecimal6.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal4, bigDecimal6 };
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray15);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray15);
        org.apache.commons.math.linear.BigMatrix bigMatrix18 = bigMatrixImpl17.transpose();
        int int19 = bigMatrixImpl17.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl17.getColumnMatrix((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix22 = bigMatrixImpl2.subtract(bigMatrix21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray12);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertNotNull(bigMatrix16);
        org.junit.Assert.assertNotNull(bigMatrix18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(bigMatrix21);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix6.scalarAdd((double) 6);
        double double9 = realMatrix6.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix6.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix12 = realMatrix6.scalarAdd((double) 0.0f);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix6.add(realMatrix21);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix22.scalarAdd(2.0E-10d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 63.0d + "'", double9 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double double6 = realMatrix5.getNorm();
        double[] doubleArray11 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix12 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray11);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        double[] doubleArray19 = realMatrix12.operate(doubleArray17);
        org.apache.commons.math.linear.BigMatrix bigMatrix20 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix21.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix23 = realMatrix5.subtract(realMatrix21);
        boolean boolean24 = realMatrix23.isSingular();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix23.getRowMatrix(110);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix20);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        double[] doubleArray17 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.scalarAdd((double) 6);
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix5.multiply(realMatrix19);
        double double23 = realMatrix19.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix19.getRowMatrix((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix26 = realMatrix25.copy();
        double[] doubleArray31 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix33 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray31);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = realMatrix33.scalarAdd((double) 6);
        int int36 = realMatrix33.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = realMatrix33.scalarAdd(10.0d);
        double[] doubleArray43 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray43);
        double double45 = realMatrix44.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix44.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix38.preMultiply(realMatrix47);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.scalarAdd((double) 1.0f);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix57 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray55);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = realMatrix57.scalarAdd((double) 6);
        int int60 = realMatrix57.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix57.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrix50.preMultiply(realMatrix57);
        org.apache.commons.math.linear.RealMatrix realMatrix64 = realMatrix50.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix66 = realMatrix50.scalarMultiply((double) 10L);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = realMatrix25.multiply(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix18);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 63.0d + "'", double23 == 63.0d);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realMatrix57);
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertNotNull(realMatrix64);
        org.junit.Assert.assertNotNull(realMatrix66);
        org.junit.Assert.assertNotNull(realMatrix67);
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 97);
        double double2 = realMatrix1.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix3 = realMatrix1.transpose();
        double[] doubleArray5 = realMatrix1.getColumn((int) (short) 10);
        double[] doubleArray7 = realMatrix1.getRow((int) (byte) 10);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix9 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray7);
        org.apache.commons.math.linear.RealMatrix realMatrix10 = realMatrix9.transpose();
        double[] doubleArray15 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray15);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = realMatrix17.scalarAdd((double) 6);
        int int20 = realMatrix17.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix22 = realMatrix17.scalarAdd(10.0d);
        double[] doubleArray27 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray27);
        double double29 = realMatrix28.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix31 = realMatrix28.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix32 = realMatrix22.preMultiply(realMatrix31);
        org.apache.commons.math.linear.RealMatrix realMatrix34 = realMatrix32.scalarAdd((double) 1.0f);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray39);
        org.apache.commons.math.linear.RealMatrix realMatrix43 = realMatrix41.scalarAdd((double) 6);
        int int44 = realMatrix41.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = realMatrix41.scalarAdd(10.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = realMatrix34.preMultiply(realMatrix41);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = realMatrix34.copy();
        boolean boolean49 = realMatrix48.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.copy();
        org.apache.commons.math.linear.RealMatrix realMatrix51 = realMatrix9.preMultiply(realMatrix50);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = realMatrix51.transpose();
        boolean boolean53 = realMatrix51.isSingular();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(realMatrix3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realMatrix10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(realMatrix22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(0.0d);
        java.lang.String str12 = bigDecimal11.toString();
        java.math.BigDecimal bigDecimal14 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal15 = bigDecimal14.stripTrailingZeros();
        int int16 = bigDecimal14.signum();
        java.math.BigDecimal[] bigDecimalArray17 = bigDecimal11.divideAndRemainder(bigDecimal14);
        java.math.BigDecimal bigDecimal19 = bigDecimal11.pow((int) 'a');
        java.math.BigInteger bigInteger20 = bigDecimal11.toBigIntegerExact();
        java.math.BigDecimal bigDecimal21 = bigDecimal9.add(bigDecimal11);
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        java.lang.String str24 = bigDecimal23.toString();
        java.math.BigDecimal bigDecimal26 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal27 = bigDecimal26.stripTrailingZeros();
        int int28 = bigDecimal26.signum();
        java.math.BigDecimal[] bigDecimalArray29 = bigDecimal23.divideAndRemainder(bigDecimal26);
        java.math.BigDecimal bigDecimal31 = bigDecimal23.pow((int) 'a');
        java.math.BigInteger bigInteger32 = bigDecimal23.toBigIntegerExact();
        float float33 = bigDecimal23.floatValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal9.add(bigDecimal23);
        java.math.BigDecimal bigDecimal36 = bigDecimal23.pow((int) ' ');
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        java.lang.String str39 = bigDecimal38.toString();
        java.math.BigDecimal bigDecimal41 = bigDecimal38.setScale(0);
        double[] doubleArray46 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix47 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray46);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray46);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = realMatrix48.scalarAdd((double) 6);
        int int51 = realMatrix48.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix53 = realMatrix48.scalarAdd(10.0d);
        double[] doubleArray58 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix59 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray58);
        double double60 = realMatrix59.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix62 = realMatrix59.scalarAdd((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix63 = realMatrix53.preMultiply(realMatrix62);
        boolean boolean64 = bigDecimal41.equals((java.lang.Object) realMatrix53);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = realMatrix53.transpose();
        double[] doubleArray67 = realMatrix53.getRow((int) (byte) 1);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = realMatrix53.scalarMultiply((double) 100);
        boolean boolean70 = bigDecimal23.equals((java.lang.Object) realMatrix69);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = realMatrix69.scalarAdd((double) 1L);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = realMatrix69.transpose();
        double double74 = realMatrix69.getNorm();
        org.apache.commons.math.linear.RealMatrix realMatrix76 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        org.apache.commons.math.linear.RealMatrix realMatrix77 = realMatrix76.transpose();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix78 = realMatrix69.add(realMatrix76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertTrue("'" + float33 + "' != '" + 0.0f + "'", float33 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 52.0d + "'", double60 == 52.0d);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[62.0]");
        org.junit.Assert.assertNotNull(realMatrix69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(realMatrix73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10100.0d + "'", double74 == 10100.0d);
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realMatrix77);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal bigDecimal34 = java.math.BigDecimal.TEN;
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.scalarMultiply(bigDecimal34);
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) (byte) 100, (int) ' ');
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl27.scalarAdd(bigDecimal38);
        java.math.BigDecimal bigDecimal42 = java.math.BigDecimal.valueOf((long) 2, (int) (byte) 10);
        java.math.BigDecimal bigDecimal43 = bigDecimal38.divideToIntegralValue(bigDecimal42);
        java.math.MathContext mathContext44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal45 = bigDecimal42.negate(mathContext44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigDecimal43);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) (byte) 52);
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        bigMatrixImpl27.setRoundingMode(10);
        int int31 = bigMatrixImpl27.getScale();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        java.lang.String str34 = bigDecimal33.toString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        int int38 = bigDecimal36.signum();
        java.math.BigDecimal[] bigDecimalArray39 = bigDecimal33.divideAndRemainder(bigDecimal36);
        java.math.BigDecimal bigDecimal41 = bigDecimal33.pow((int) 'a');
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal44 = bigDecimal43.stripTrailingZeros();
        float float45 = bigDecimal43.floatValue();
        java.math.BigDecimal bigDecimal46 = bigDecimal41.divideToIntegralValue(bigDecimal43);
        java.math.BigDecimal bigDecimal47 = bigDecimal43.ulp();
        org.apache.commons.math.linear.BigMatrix bigMatrix48 = bigMatrixImpl27.scalarMultiply(bigDecimal47);
        java.math.BigDecimal bigDecimal50 = new java.math.BigDecimal(0.0d);
        int int51 = bigDecimal50.intValue();
        java.math.BigDecimal bigDecimal53 = new java.math.BigDecimal(0.0d);
        int int54 = bigDecimal53.intValue();
        java.math.BigDecimal bigDecimal55 = bigDecimal50.min(bigDecimal53);
        java.math.BigDecimal[] bigDecimalArray56 = new java.math.BigDecimal[] { bigDecimal55 };
        java.math.BigDecimal bigDecimal58 = new java.math.BigDecimal(0.0d);
        int int59 = bigDecimal58.intValue();
        java.math.BigDecimal bigDecimal61 = new java.math.BigDecimal(0.0d);
        int int62 = bigDecimal61.intValue();
        java.math.BigDecimal bigDecimal63 = bigDecimal58.min(bigDecimal61);
        java.math.BigDecimal[] bigDecimalArray64 = new java.math.BigDecimal[] { bigDecimal63 };
        java.math.BigDecimal bigDecimal66 = new java.math.BigDecimal(0.0d);
        int int67 = bigDecimal66.intValue();
        java.math.BigDecimal bigDecimal69 = new java.math.BigDecimal(0.0d);
        int int70 = bigDecimal69.intValue();
        java.math.BigDecimal bigDecimal71 = bigDecimal66.min(bigDecimal69);
        java.math.BigDecimal[] bigDecimalArray72 = new java.math.BigDecimal[] { bigDecimal71 };
        java.math.BigDecimal[][] bigDecimalArray73 = new java.math.BigDecimal[][] { bigDecimalArray56, bigDecimalArray64, bigDecimalArray72 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray73);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl76 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray73);
        java.math.BigDecimal[][] bigDecimalArray77 = bigMatrixImpl76.getDataRef();
        java.math.BigDecimal bigDecimal78 = bigMatrixImpl76.getNorm();
        java.math.BigDecimal[] bigDecimalArray80 = bigMatrixImpl76.getColumn(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix81 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray80);
        java.math.BigDecimal[] bigDecimalArray82 = bigMatrixImpl27.preMultiply(bigDecimalArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray80);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl84 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray80);
        java.lang.String str85 = bigMatrixImpl84.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 64 + "'", int31 == 64);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal44);
        org.junit.Assert.assertTrue("'" + float45 + "' != '" + 97.0f + "'", float45 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigMatrix48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertNotNull(bigDecimalArray64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(bigDecimal71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigDecimalArray73);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigDecimalArray77);
        org.junit.Assert.assertNotNull(bigDecimal78);
        org.junit.Assert.assertNotNull(bigDecimalArray80);
        org.junit.Assert.assertNotNull(bigMatrix81);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "BigMatrixImpl{{0},{0},{0}}" + "'", str85, "BigMatrixImpl{{0},{0},{0}}");
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrix bigMatrix26 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray24);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl27 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray28 = bigMatrixImpl27.getDataRef();
        java.math.BigDecimal bigDecimal29 = bigMatrixImpl27.getNorm();
        boolean boolean30 = bigMatrixImpl27.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrixImpl27.copy();
        double[] doubleArray33 = bigMatrixImpl27.getColumnAsDoubleArray((int) (byte) 0);
        java.math.BigDecimal[][] bigDecimalArray34 = bigMatrixImpl27.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = bigMatrixImpl27.transpose();
        java.math.BigDecimal[] bigDecimalArray37 = bigMatrixImpl27.getColumn((int) (short) 0);
        java.math.BigDecimal bigDecimal39 = new java.math.BigDecimal(0.0d);
        int int40 = bigDecimal39.intValue();
        long long41 = bigDecimal39.longValue();
        long long42 = bigDecimal39.longValueExact();
        int int43 = bigDecimal39.precision();
        java.math.BigDecimal bigDecimal45 = new java.math.BigDecimal(0.0d);
        int int46 = bigDecimal45.intValue();
        long long47 = bigDecimal45.longValue();
        long long48 = bigDecimal45.longValueExact();
        java.math.BigDecimal bigDecimal49 = bigDecimal39.add(bigDecimal45);
        java.math.BigDecimal bigDecimal51 = bigDecimal45.pow(3);
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal54 = bigDecimal53.stripTrailingZeros();
        float float55 = bigDecimal53.floatValue();
        java.math.BigDecimal bigDecimal56 = bigDecimal53.ulp();
        java.math.BigDecimal bigDecimal57 = bigDecimal45.subtract(bigDecimal56);
        int int58 = bigDecimal57.precision();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl27.scalarMultiply(bigDecimal57);
        int int60 = bigMatrixImpl27.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix62 = bigMatrixImpl27.getColumnMatrix(35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigMatrix26);
        org.junit.Assert.assertNotNull(bigDecimalArray28);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigDecimalArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertTrue("'" + float55 + "' != '" + 97.0f + "'", float55 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal56);
        org.junit.Assert.assertNotNull(bigDecimal57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix6 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        org.apache.commons.math.linear.RealMatrix realMatrix7 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray4);
        double[] doubleArray12 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray12);
        double[] doubleArray18 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray18);
        double[] doubleArray20 = realMatrix13.operate(doubleArray18);
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray20);
        double[] doubleArray22 = realMatrix7.preMultiply(doubleArray20);
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        org.apache.commons.math.linear.RealMatrix realMatrix24 = realMatrix23.inverse();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = realMatrix23.inverse();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal30 = new java.math.BigDecimal(0.0d);
        int int31 = bigDecimal30.intValue();
        java.math.BigDecimal bigDecimal32 = bigDecimal27.min(bigDecimal30);
        java.math.BigDecimal[] bigDecimalArray33 = new java.math.BigDecimal[] { bigDecimal32 };
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(0.0d);
        int int36 = bigDecimal35.intValue();
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        int int39 = bigDecimal38.intValue();
        java.math.BigDecimal bigDecimal40 = bigDecimal35.min(bigDecimal38);
        java.math.BigDecimal[] bigDecimalArray41 = new java.math.BigDecimal[] { bigDecimal40 };
        java.math.BigDecimal bigDecimal43 = new java.math.BigDecimal(0.0d);
        int int44 = bigDecimal43.intValue();
        java.math.BigDecimal bigDecimal46 = new java.math.BigDecimal(0.0d);
        int int47 = bigDecimal46.intValue();
        java.math.BigDecimal bigDecimal48 = bigDecimal43.min(bigDecimal46);
        java.math.BigDecimal[] bigDecimalArray49 = new java.math.BigDecimal[] { bigDecimal48 };
        java.math.BigDecimal[][] bigDecimalArray50 = new java.math.BigDecimal[][] { bigDecimalArray33, bigDecimalArray41, bigDecimalArray49 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl51 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrix bigMatrix52 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl53 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray50);
        int int54 = bigMatrixImpl53.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix55 = bigMatrixImpl53.copy();
        double[] doubleArray57 = bigMatrixImpl53.getRowAsDoubleArray((int) (byte) 1);
        double[] doubleArray58 = realMatrix25.operate(doubleArray57);
        int int59 = realMatrix25.getRowDimension();
        org.apache.commons.math.linear.RealMatrix realMatrix61 = realMatrix25.scalarMultiply((double) (short) 2805);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(realMatrix6);
        org.junit.Assert.assertNotNull(realMatrix7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-2805.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimalArray41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimalArray49);
        org.junit.Assert.assertNotNull(bigDecimalArray50);
        org.junit.Assert.assertNotNull(bigMatrix52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(bigMatrix55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(realMatrix61);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        java.math.BigDecimal bigDecimal0 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal2 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger3 = bigDecimal2.unscaledValue();
        java.math.BigDecimal bigDecimal4 = bigDecimal0.add(bigDecimal2);
        float float5 = bigDecimal2.floatValue();
        java.lang.String str6 = bigDecimal2.toEngineeringString();
        java.math.BigDecimal bigDecimal7 = bigDecimal2.abs();
        java.math.BigDecimal bigDecimal9 = bigDecimal7.movePointLeft((int) (short) 1);
        byte byte10 = bigDecimal9.byteValueExact();
        float float11 = bigDecimal9.floatValue();
        org.junit.Assert.assertNotNull(bigDecimal0);
        org.junit.Assert.assertNotNull(bigDecimal2);
        org.junit.Assert.assertNotNull(bigInteger3);
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 100.0f + "'", float5 == 100.0f);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 10 + "'", byte10 == (byte) 10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 10.0f + "'", float11 == 10.0f);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        java.lang.String str2 = bigDecimal1.toString();
        java.math.BigDecimal bigDecimal4 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal5 = bigDecimal4.stripTrailingZeros();
        int int6 = bigDecimal4.signum();
        java.math.BigDecimal[] bigDecimalArray7 = bigDecimal1.divideAndRemainder(bigDecimal4);
        java.math.BigDecimal bigDecimal9 = bigDecimal1.pow((int) 'a');
        java.math.BigInteger bigInteger10 = bigDecimal1.toBigIntegerExact();
        float float11 = bigDecimal1.floatValue();
        double[] doubleArray16 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix17 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray16);
        double[] doubleArray22 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray22);
        double[] doubleArray24 = realMatrix17.operate(doubleArray22);
        org.apache.commons.math.linear.BigMatrix bigMatrix25 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray24);
        java.math.BigDecimal bigDecimal26 = bigMatrix25.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal1.subtract(bigDecimal26);
        int int28 = bigDecimal27.signum();
        java.math.BigInteger bigInteger29 = bigDecimal27.toBigInteger();
        java.math.BigDecimal bigDecimal31 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray34 = bigDecimal31.divideAndRemainder(bigDecimal33);
        java.math.BigDecimal bigDecimal36 = bigDecimal33.movePointLeft((-1));
        java.math.BigDecimal bigDecimal37 = bigDecimal27.max(bigDecimal33);
        int int38 = bigDecimal37.intValueExact();
        int int39 = bigDecimal37.signum();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.0f + "'", float11 == 0.0f);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix25);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimalArray34);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = new java.math.BigDecimal(0.0d);
        java.lang.String str11 = bigDecimal10.toString();
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal14 = bigDecimal13.stripTrailingZeros();
        int int15 = bigDecimal13.signum();
        java.math.BigDecimal[] bigDecimalArray16 = bigDecimal10.divideAndRemainder(bigDecimal13);
        java.math.BigDecimal bigDecimal18 = bigDecimal10.pow((int) 'a');
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        java.lang.String str21 = bigDecimal20.toString();
        java.math.BigDecimal bigDecimal23 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal24 = bigDecimal23.stripTrailingZeros();
        int int25 = bigDecimal23.signum();
        java.math.BigDecimal[] bigDecimalArray26 = bigDecimal20.divideAndRemainder(bigDecimal23);
        java.math.BigDecimal bigDecimal28 = bigDecimal20.pow((int) 'a');
        java.math.BigInteger bigInteger29 = bigDecimal20.toBigIntegerExact();
        java.math.BigDecimal bigDecimal30 = bigDecimal18.add(bigDecimal20);
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        java.lang.String str33 = bigDecimal32.toString();
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal36 = bigDecimal35.stripTrailingZeros();
        int int37 = bigDecimal35.signum();
        java.math.BigDecimal[] bigDecimalArray38 = bigDecimal32.divideAndRemainder(bigDecimal35);
        java.math.BigDecimal bigDecimal40 = bigDecimal32.pow((int) 'a');
        java.math.BigInteger bigInteger41 = bigDecimal32.toBigIntegerExact();
        float float42 = bigDecimal32.floatValue();
        java.math.BigDecimal bigDecimal43 = bigDecimal18.add(bigDecimal32);
        java.math.BigDecimal bigDecimal45 = bigDecimal32.pow((int) ' ');
        java.math.BigDecimal bigDecimal46 = bigDecimal8.subtract(bigDecimal45);
        java.math.BigDecimal bigDecimal48 = new java.math.BigDecimal(0.0d);
        int int49 = bigDecimal48.intValue();
        java.math.BigDecimal bigDecimal51 = new java.math.BigDecimal(0.0d);
        int int52 = bigDecimal51.intValue();
        java.math.BigDecimal bigDecimal53 = bigDecimal48.min(bigDecimal51);
        java.math.BigDecimal[] bigDecimalArray54 = new java.math.BigDecimal[] { bigDecimal53 };
        java.math.BigDecimal bigDecimal56 = new java.math.BigDecimal(0.0d);
        int int57 = bigDecimal56.intValue();
        java.math.BigDecimal bigDecimal59 = new java.math.BigDecimal(0.0d);
        int int60 = bigDecimal59.intValue();
        java.math.BigDecimal bigDecimal61 = bigDecimal56.min(bigDecimal59);
        java.math.BigDecimal[] bigDecimalArray62 = new java.math.BigDecimal[] { bigDecimal61 };
        java.math.BigDecimal bigDecimal64 = new java.math.BigDecimal(0.0d);
        int int65 = bigDecimal64.intValue();
        java.math.BigDecimal bigDecimal67 = new java.math.BigDecimal(0.0d);
        int int68 = bigDecimal67.intValue();
        java.math.BigDecimal bigDecimal69 = bigDecimal64.min(bigDecimal67);
        java.math.BigDecimal[] bigDecimalArray70 = new java.math.BigDecimal[] { bigDecimal69 };
        java.math.BigDecimal[][] bigDecimalArray71 = new java.math.BigDecimal[][] { bigDecimalArray54, bigDecimalArray62, bigDecimalArray70 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl72 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray71);
        org.apache.commons.math.linear.BigMatrix bigMatrix73 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray71);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl74 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray71);
        java.math.BigDecimal[][] bigDecimalArray75 = bigMatrixImpl74.getDataRef();
        java.math.BigDecimal bigDecimal76 = bigMatrixImpl74.getNorm();
        boolean boolean77 = bigMatrixImpl74.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix78 = bigMatrixImpl74.copy();
        double[] doubleArray80 = bigMatrixImpl74.getColumnAsDoubleArray((int) (byte) 0);
        boolean boolean81 = bigDecimal45.equals((java.lang.Object) bigMatrixImpl74);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigDecimal28);
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray38);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.0f + "'", float42 == 0.0f);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimalArray54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(bigDecimal61);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertNotNull(bigDecimalArray70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigMatrix73);
        org.junit.Assert.assertNotNull(bigDecimalArray75);
        org.junit.Assert.assertNotNull(bigDecimal76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(bigMatrix78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        boolean boolean19 = bigMatrixImpl14.isSquare();
        int int20 = bigMatrixImpl14.getScale();
        bigMatrixImpl14.setRoundingMode((-1));
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal("0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
        boolean boolean25 = bigMatrixImpl14.equals((java.lang.Object) bigDecimal24);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal28 = bigMatrixImpl14.getEntry(110, 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: matrix entry does not exist");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64 + "'", int20 == 64);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal8 = new java.math.BigDecimal(bigInteger7);
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        float float12 = bigDecimal10.floatValue();
        java.math.BigDecimal bigDecimal13 = bigDecimal8.multiply(bigDecimal10);
        java.math.BigDecimal bigDecimal14 = bigDecimal8.negate();
        int int15 = bigDecimal14.intValue();
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        long long19 = bigDecimal17.longValue();
        long long20 = bigDecimal17.longValueExact();
        int int21 = bigDecimal17.precision();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(0.0d);
        int int24 = bigDecimal23.intValue();
        long long25 = bigDecimal23.longValue();
        long long26 = bigDecimal23.longValueExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal17.add(bigDecimal23);
        java.math.BigDecimal bigDecimal29 = bigDecimal23.pow(3);
        int int30 = bigDecimal14.compareTo(bigDecimal23);
        java.math.BigDecimal bigDecimal32 = bigDecimal23.pow((int) (byte) 10);
        java.math.BigDecimal bigDecimal34 = new java.math.BigDecimal(0.0d);
        java.lang.String str35 = bigDecimal34.toString();
        java.math.BigDecimal bigDecimal37 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal38 = bigDecimal37.stripTrailingZeros();
        int int39 = bigDecimal37.signum();
        java.math.BigDecimal[] bigDecimalArray40 = bigDecimal34.divideAndRemainder(bigDecimal37);
        java.math.BigDecimal bigDecimal42 = bigDecimal34.pow((int) 'a');
        java.math.BigInteger bigInteger43 = bigDecimal34.toBigInteger();
        java.math.BigDecimal bigDecimal44 = new java.math.BigDecimal(bigInteger43);
        java.math.BigDecimal bigDecimal46 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigDecimal bigDecimal47 = bigDecimal46.negate();
        java.math.BigDecimal[] bigDecimalArray48 = bigDecimal44.divideAndRemainder(bigDecimal46);
        boolean boolean49 = bigDecimal23.equals((java.lang.Object) bigDecimal46);
        java.lang.String str50 = bigDecimal46.toEngineeringString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 97.0f + "'", float12 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimalArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100" + "'", str50, "100");
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        java.lang.String[] strArray1 = new java.lang.String[] { "970" };
        org.apache.commons.math.linear.BigMatrix bigMatrix2 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix3 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix4 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(strArray1);
        org.apache.commons.math.linear.BigMatrix bigMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(strArray1);
        java.math.BigDecimal bigDecimal6 = bigMatrix5.getNorm();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(bigMatrix2);
        org.junit.Assert.assertNotNull(bigMatrix3);
        org.junit.Assert.assertNotNull(bigMatrix4);
        org.junit.Assert.assertNotNull(bigMatrix5);
        org.junit.Assert.assertNotNull(bigDecimal6);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal17 = bigMatrixImpl14.getNorm();
        int int18 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal19 = bigMatrixImpl14.getNorm();
        int int20 = bigMatrixImpl14.getRoundingMode();
        boolean boolean21 = bigMatrixImpl14.isSingular();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 64 + "'", int18 == 64);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(8668.0d);
        java.math.BigDecimal bigDecimal2 = bigDecimal1.ulp();
        java.math.BigDecimal bigDecimal3 = null;
        java.math.MathContext mathContext4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray5 = bigDecimal2.divideAndRemainder(bigDecimal3, mathContext4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal2);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix14 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray12);
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[] doubleArray23 = new double[] { 1.0d, 100.0f };
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray27 = new double[][] { doubleArray17, doubleArray20, doubleArray23, doubleArray26 };
        org.apache.commons.math.linear.BigMatrix bigMatrix28 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray27);
        boolean boolean29 = bigMatrix28.isSingular();
        int int30 = bigMatrix28.getColumnDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix31 = bigMatrix14.solve(bigMatrix28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(bigMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigDecimal[] bigDecimalArray7 = new java.math.BigDecimal[] { bigDecimal6 };
        java.math.BigDecimal bigDecimal9 = new java.math.BigDecimal(0.0d);
        int int10 = bigDecimal9.intValue();
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(0.0d);
        int int13 = bigDecimal12.intValue();
        java.math.BigDecimal bigDecimal14 = bigDecimal9.min(bigDecimal12);
        java.math.BigDecimal[] bigDecimalArray15 = new java.math.BigDecimal[] { bigDecimal14 };
        java.math.BigDecimal bigDecimal17 = new java.math.BigDecimal(0.0d);
        int int18 = bigDecimal17.intValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(0.0d);
        int int21 = bigDecimal20.intValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal17.min(bigDecimal20);
        java.math.BigDecimal[] bigDecimalArray23 = new java.math.BigDecimal[] { bigDecimal22 };
        java.math.BigDecimal[][] bigDecimalArray24 = new java.math.BigDecimal[][] { bigDecimalArray7, bigDecimalArray15, bigDecimalArray23 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl25 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray24);
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl25.getDataRef();
        int int27 = bigMatrixImpl25.getRowDimension();
        boolean boolean28 = bigMatrixImpl25.isSquare();
        int int29 = bigMatrixImpl25.getRowDimension();
        java.math.BigDecimal bigDecimal30 = bigMatrixImpl25.getNorm();
        java.lang.String str31 = bigDecimal30.toString();
        java.math.BigDecimal bigDecimal33 = new java.math.BigDecimal(0.0d);
        java.lang.String str34 = bigDecimal33.toString();
        java.math.BigDecimal bigDecimal36 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal37 = bigDecimal36.stripTrailingZeros();
        int int38 = bigDecimal36.signum();
        java.math.BigDecimal[] bigDecimalArray39 = bigDecimal33.divideAndRemainder(bigDecimal36);
        java.math.BigDecimal bigDecimal40 = bigDecimal33.abs();
        java.math.MathContext mathContext41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal42 = bigDecimal30.add(bigDecimal40, mathContext41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigDecimalArray7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(bigDecimal14);
        org.junit.Assert.assertNotNull(bigDecimalArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimalArray23);
        org.junit.Assert.assertNotNull(bigDecimalArray24);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(bigDecimal36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray39);
        org.junit.Assert.assertNotNull(bigDecimal40);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        double[] doubleArray6 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray13 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray20 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[] doubleArray27 = new double[] { 97.0f, 2, (-1.0d), 10, 10, 0L };
        double[][] doubleArray28 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27 };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        org.apache.commons.math.linear.RealMatrix realMatrix30 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray28);
        org.apache.commons.math.linear.BigMatrix bigMatrix31 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray28);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl32 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray28);
        int int33 = bigMatrixImpl32.getColumnDimension();
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((double) 4);
        int int36 = bigDecimal35.scale();
        java.math.BigDecimal bigDecimal38 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal39 = bigDecimal38.stripTrailingZeros();
        java.math.BigDecimal bigDecimal41 = bigDecimal39.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal42 = bigDecimal35.multiply(bigDecimal39);
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl32.scalarAdd(bigDecimal42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix44 = bigMatrix43.inverse();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[97.0, 2.0, -1.0, 10.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(bigMatrix31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertNotNull(bigMatrix43);
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        org.apache.commons.math.linear.RealMatrix realMatrix17 = realMatrix14.scalarMultiply((double) (byte) 10);
        java.math.BigDecimal bigDecimal19 = new java.math.BigDecimal(0.0d);
        java.lang.String str20 = bigDecimal19.toString();
        java.math.BigDecimal bigDecimal22 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal23 = bigDecimal22.stripTrailingZeros();
        int int24 = bigDecimal22.signum();
        java.math.BigDecimal[] bigDecimalArray25 = bigDecimal19.divideAndRemainder(bigDecimal22);
        java.math.BigDecimal bigDecimal27 = bigDecimal19.pow((int) 'a');
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        java.lang.String str30 = bigDecimal29.toString();
        java.math.BigDecimal bigDecimal32 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal33 = bigDecimal32.stripTrailingZeros();
        int int34 = bigDecimal32.signum();
        java.math.BigDecimal[] bigDecimalArray35 = bigDecimal29.divideAndRemainder(bigDecimal32);
        java.math.BigDecimal bigDecimal37 = bigDecimal29.pow((int) 'a');
        java.math.BigInteger bigInteger38 = bigDecimal29.toBigIntegerExact();
        java.math.BigDecimal bigDecimal39 = bigDecimal27.add(bigDecimal29);
        double[] doubleArray44 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix45 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray44);
        double[] doubleArray50 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix51 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray50);
        double[] doubleArray52 = realMatrix45.operate(doubleArray50);
        boolean boolean53 = bigDecimal29.equals((java.lang.Object) doubleArray50);
        org.apache.commons.math.linear.RealMatrix realMatrix54 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray50);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = realMatrix14.subtract(realMatrix54);
        org.apache.commons.math.linear.BigMatrix bigMatrix57 = org.apache.commons.math.linear.MatrixUtils.createBigIdentityMatrix((int) (short) 100);
        boolean boolean58 = bigMatrix57.isSquare();
        java.math.BigDecimal[] bigDecimalArray60 = bigMatrix57.getRow(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray60);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl62 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray60);
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray60);
        double[] doubleArray65 = bigMatrix63.getRowAsDoubleArray((int) (short) 4);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray66 = realMatrix55.solve(doubleArray65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: coefficient matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(realMatrix17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(bigDecimal32);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigInteger38);
        org.junit.Assert.assertNotNull(bigDecimal39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(bigMatrix57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0]");
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((long) 7);
        java.math.BigDecimal bigDecimal3 = bigDecimal1.pow((int) 'a');
        java.math.BigDecimal bigDecimal5 = new java.math.BigDecimal((int) (byte) 100);
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        java.lang.String str8 = bigDecimal7.toString();
        java.math.BigDecimal bigDecimal10 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal11 = bigDecimal10.stripTrailingZeros();
        int int12 = bigDecimal10.signum();
        java.math.BigDecimal[] bigDecimalArray13 = bigDecimal7.divideAndRemainder(bigDecimal10);
        java.math.BigDecimal bigDecimal15 = bigDecimal7.pow((int) 'a');
        java.math.BigDecimal bigDecimal17 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal18 = bigDecimal17.stripTrailingZeros();
        float float19 = bigDecimal17.floatValue();
        java.math.BigDecimal bigDecimal20 = bigDecimal15.divideToIntegralValue(bigDecimal17);
        java.math.BigDecimal bigDecimal21 = bigDecimal5.max(bigDecimal15);
        java.math.BigInteger bigInteger22 = bigDecimal15.unscaledValue();
        java.math.BigDecimal bigDecimal23 = new java.math.BigDecimal(bigInteger22);
        java.math.MathContext mathContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal25 = bigDecimal3.multiply(bigDecimal23, mathContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(bigDecimal10);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray13);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal17);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 97.0f + "'", float19 == 97.0f);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(bigInteger22);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal("org.apache.commons.math.linear.MatrixIndexException: org.apache.commons.math.linear.MatrixIndexException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal(0.0d);
        int int2 = bigDecimal1.intValue();
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal6 = bigDecimal1.min(bigDecimal4);
        java.math.BigInteger bigInteger7 = bigDecimal6.toBigIntegerExact();
        java.math.BigDecimal bigDecimal8 = bigDecimal6.stripTrailingZeros();
        int int9 = bigDecimal8.signum();
        int int10 = bigDecimal8.intValueExact();
        java.math.BigDecimal bigDecimal11 = java.math.BigDecimal.TEN;
        java.math.BigDecimal bigDecimal13 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger14 = bigDecimal13.unscaledValue();
        java.math.BigDecimal bigDecimal15 = bigDecimal11.add(bigDecimal13);
        java.math.BigDecimal bigDecimal16 = bigDecimal8.max(bigDecimal13);
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) (short) 100);
        java.math.BigInteger bigInteger19 = bigDecimal18.unscaledValue();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal(bigInteger19);
        java.math.BigInteger bigInteger21 = bigDecimal20.unscaledValue();
        java.math.BigDecimal bigDecimal22 = bigDecimal20.abs();
        java.math.BigDecimal bigDecimal23 = bigDecimal13.max(bigDecimal20);
        java.math.MathContext mathContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal25 = bigDecimal20.round(mathContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(bigDecimal6);
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(bigDecimal15);
        org.junit.Assert.assertNotNull(bigDecimal16);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertNotNull(bigDecimal23);
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray17 = bigMatrixImpl14.getDataRef();
        bigMatrixImpl14.setScale((int) (short) 100);
        boolean boolean20 = bigMatrixImpl14.isSingular();
        int int21 = bigMatrixImpl14.getScale();
        java.math.BigDecimal bigDecimal22 = bigMatrixImpl14.getNorm();
        int int23 = bigMatrixImpl14.getColumnDimension();
        java.lang.String str24 = bigMatrixImpl14.toString();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = bigMatrixImpl14.getColumnAsDoubleArray((-3));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(bigDecimal22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str24, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        java.math.MathContext mathContext1 = null;
        java.math.BigDecimal bigDecimal2 = new java.math.BigDecimal((double) (byte) 0, mathContext1);
        java.math.BigDecimal bigDecimal4 = new java.math.BigDecimal(0.0d);
        int int5 = bigDecimal4.intValue();
        java.math.BigDecimal bigDecimal7 = new java.math.BigDecimal(0.0d);
        int int8 = bigDecimal7.intValue();
        java.math.BigDecimal bigDecimal9 = bigDecimal4.min(bigDecimal7);
        java.math.BigInteger bigInteger10 = bigDecimal4.toBigInteger();
        java.math.BigDecimal bigDecimal11 = new java.math.BigDecimal(bigInteger10);
        java.math.BigDecimal bigDecimal12 = new java.math.BigDecimal(bigInteger10);
        java.math.BigDecimal bigDecimal13 = bigDecimal2.add(bigDecimal12);
        java.math.BigDecimal bigDecimal16 = java.math.BigDecimal.valueOf((long) 32, 1);
        java.math.RoundingMode roundingMode17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal18 = bigDecimal12.divide(bigDecimal16, roundingMode17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(bigDecimal9);
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(bigDecimal13);
        org.junit.Assert.assertNotNull(bigDecimal16);
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix(100);
        double[] doubleArray3 = realMatrix1.getRow(0);
        double double4 = realMatrix1.getNorm();
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 1.0E-24f);
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        double[] doubleArray17 = bigMatrixImpl14.getRowAsDoubleArray((int) (short) 0);
        boolean boolean18 = bigMatrixImpl14.isSingular();
        java.math.BigDecimal[][] bigDecimalArray19 = bigMatrixImpl14.getData();
        java.math.BigDecimal bigDecimal20 = bigMatrixImpl14.getNorm();
        java.math.BigDecimal bigDecimal21 = bigMatrixImpl14.getNorm();
        double[] doubleArray24 = new double[] { 1.0d, 100.0f };
        double[] doubleArray27 = new double[] { 1.0d, 100.0f };
        double[] doubleArray30 = new double[] { 1.0d, 100.0f };
        double[] doubleArray33 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray34 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33 };
        org.apache.commons.math.linear.BigMatrix bigMatrix35 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray34);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl36 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray34);
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = bigMatrixImpl36.transpose();
        boolean boolean38 = bigMatrixImpl36.isSingular();
        double[] doubleArray40 = bigMatrixImpl36.getColumnAsDoubleArray(0);
        int int41 = bigMatrixImpl36.getRoundingMode();
        boolean boolean42 = bigMatrixImpl36.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix43 = bigMatrixImpl14.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl36);
        int int44 = bigMatrixImpl36.getRoundingMode();
        double[] doubleArray49 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix50 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray49);
        double[] doubleArray55 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray55);
        double[] doubleArray57 = realMatrix50.operate(doubleArray55);
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray57);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = org.apache.commons.math.linear.MatrixUtils.createColumnRealMatrix(doubleArray57);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray57);
        org.apache.commons.math.linear.RealMatrix realMatrix63 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray64 = bigMatrixImpl36.operate(doubleArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertNotNull(bigDecimal20);
        org.junit.Assert.assertNotNull(bigDecimal21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(bigMatrix35);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(bigMatrix43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(realMatrix61);
        org.junit.Assert.assertNotNull(realMatrix62);
        org.junit.Assert.assertNotNull(realMatrix63);
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl18 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix19 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix21 = realMatrix19.getColumnMatrix((int) (short) 31464);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal column argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realMatrix19);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        double[] doubleArray7 = bigMatrixImpl5.getRowAsDoubleArray(0);
        org.apache.commons.math.linear.BigMatrix bigMatrix8 = bigMatrixImpl5.copy();
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray21 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray21);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl23 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray21);
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrixImpl23.transpose();
        int int25 = bigMatrixImpl23.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray26 = bigMatrixImpl23.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix27 = bigMatrixImpl5.preMultiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl23);
        int int28 = bigMatrixImpl5.getScale();
        double[][] doubleArray29 = bigMatrixImpl5.getDataAsDoubleArray();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl30 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray29);
        int int31 = bigMatrixImpl30.getRowDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl30.getSubMatrix((int) '#', 52, 3, (-32));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertNotNull(bigMatrix8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray26);
        org.junit.Assert.assertNotNull(bigMatrix27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 64 + "'", int28 == 64);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((double) 6);
        java.math.BigInteger bigInteger2 = bigDecimal1.toBigInteger();
        java.math.BigDecimal bigDecimal3 = bigDecimal1.ulp();
        java.math.MathContext mathContext4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal5 = bigDecimal1.negate(mathContext4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(bigDecimal3);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        org.apache.commons.math.linear.RealMatrix realMatrix1 = org.apache.commons.math.linear.MatrixUtils.createRealIdentityMatrix((int) (byte) 10);
        double double2 = realMatrix1.getTrace();
        boolean boolean3 = realMatrix1.isSquare();
        org.apache.commons.math.linear.RealMatrix realMatrix5 = realMatrix1.scalarMultiply((double) 100);
        double double6 = realMatrix5.getDeterminant();
        org.apache.commons.math.linear.RealMatrix realMatrix8 = realMatrix5.scalarMultiply(0.0d);
        double[][] doubleArray9 = realMatrix5.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix14 = realMatrix5.getSubMatrix((int) (short) -3072, (int) (byte) 85, 4, 5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: invalid row or column index selection");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(realMatrix1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.0d + "'", double2 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0E20d + "'", double6 == 1.0E20d);
        org.junit.Assert.assertNotNull(realMatrix8);
        org.junit.Assert.assertNotNull(doubleArray9);
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        boolean boolean16 = bigMatrixImpl14.isSingular();
        double[] doubleArray18 = bigMatrixImpl14.getColumnAsDoubleArray(0);
        int int19 = bigMatrixImpl14.getRoundingMode();
        bigMatrixImpl14.setRoundingMode((int) '4');
        int int22 = bigMatrixImpl14.getColumnDimension();
        double[][] doubleArray23 = bigMatrixImpl14.getDataAsDoubleArray();
        double[] doubleArray26 = new double[] { 1.0d, 100.0f };
        double[] doubleArray29 = new double[] { 1.0d, 100.0f };
        double[] doubleArray32 = new double[] { 1.0d, 100.0f };
        double[] doubleArray35 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray36 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35 };
        org.apache.commons.math.linear.BigMatrix bigMatrix37 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl38 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix39 = bigMatrixImpl38.transpose();
        double[] doubleArray41 = bigMatrixImpl38.getRowAsDoubleArray((int) (short) 0);
        java.lang.String str42 = bigMatrixImpl38.toString();
        int int43 = bigMatrixImpl38.getScale();
        boolean boolean44 = bigMatrixImpl38.isSingular();
        double[] doubleArray47 = new double[] { 1.0d, 100.0f };
        double[] doubleArray50 = new double[] { 1.0d, 100.0f };
        double[] doubleArray53 = new double[] { 1.0d, 100.0f };
        double[] doubleArray56 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray57 = new double[][] { doubleArray47, doubleArray50, doubleArray53, doubleArray56 };
        org.apache.commons.math.linear.BigMatrix bigMatrix58 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray57);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl59 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray57);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrixImpl59.transpose();
        int int61 = bigMatrixImpl59.getColumnDimension();
        java.math.BigDecimal[][] bigDecimalArray62 = bigMatrixImpl59.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix63 = bigMatrixImpl59.copy();
        double[][] doubleArray64 = bigMatrixImpl59.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal65 = bigMatrixImpl59.getNorm();
        org.apache.commons.math.linear.BigMatrix bigMatrix66 = bigMatrixImpl38.scalarMultiply(bigDecimal65);
        double[] doubleArray69 = new double[] { 1.0d, 100.0f };
        double[] doubleArray72 = new double[] { 1.0d, 100.0f };
        double[] doubleArray75 = new double[] { 1.0d, 100.0f };
        double[] doubleArray78 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray79 = new double[][] { doubleArray69, doubleArray72, doubleArray75, doubleArray78 };
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray79);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl81 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray79);
        bigMatrixImpl81.setRoundingMode((int) (short) 0);
        java.math.BigDecimal[][] bigDecimalArray84 = bigMatrixImpl81.getDataRef();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray84);
        java.math.BigDecimal[] bigDecimalArray87 = bigMatrixImpl85.getColumn(0);
        int int88 = bigMatrixImpl85.getRoundingMode();
        int int89 = bigMatrixImpl85.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix90 = bigMatrix66.add((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl14.preMultiply(bigMatrix90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(bigMatrix37);
        org.junit.Assert.assertNotNull(bigMatrix39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}" + "'", str42, "BigMatrixImpl{{1,100},{1,100},{1,100},{1,100}}");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 64 + "'", int43 == 64);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(bigMatrix58);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(bigDecimalArray62);
        org.junit.Assert.assertNotNull(bigMatrix63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(bigDecimal65);
        org.junit.Assert.assertNotNull(bigMatrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertNotNull(bigDecimalArray84);
        org.junit.Assert.assertNotNull(bigDecimalArray87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(bigMatrix90);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        java.math.BigDecimal bigDecimal18 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal19 = bigDecimal18.stripTrailingZeros();
        int int20 = bigDecimal18.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix21 = bigMatrixImpl14.scalarMultiply(bigDecimal18);
        double[][] doubleArray22 = bigMatrixImpl14.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        java.math.BigDecimal bigDecimal29 = bigDecimal24.min(bigDecimal27);
        java.math.BigInteger bigInteger30 = bigDecimal24.toBigInteger();
        int int31 = bigDecimal24.precision();
        java.math.BigDecimal bigDecimal33 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal35 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray36 = bigDecimal33.divideAndRemainder(bigDecimal35);
        java.math.BigDecimal bigDecimal37 = bigDecimal24.multiply(bigDecimal35);
        java.math.BigDecimal bigDecimal38 = bigDecimal24.abs();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) (byte) 97);
        java.math.BigDecimal bigDecimal41 = bigDecimal38.subtract(bigDecimal40);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = bigMatrixImpl14.scalarAdd(bigDecimal40);
        java.math.MathContext mathContext44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal45 = bigDecimal40.pow((int) (byte) -1, mathContext44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(bigMatrix21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigDecimal37);
        org.junit.Assert.assertNotNull(bigDecimal38);
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigMatrix42);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl17 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray16);
        org.apache.commons.math.linear.RealMatrix realMatrix18 = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = realMatrix18.getDeterminant();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.InvalidMatrixException; message: matrix is not square");
        } catch (org.apache.commons.math.linear.InvalidMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        bigMatrixImpl14.setRoundingMode((int) (short) 0);
        int int17 = bigMatrixImpl14.getScale();
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrixImpl14.getDataRef();
        java.math.BigDecimal bigDecimal20 = new java.math.BigDecimal((double) 100.0f);
        java.math.BigDecimal bigDecimal22 = new java.math.BigDecimal(0.0d);
        int int23 = bigDecimal22.intValue();
        long long24 = bigDecimal22.longValue();
        long long25 = bigDecimal22.longValueExact();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        java.lang.String str28 = bigDecimal27.toString();
        java.math.BigDecimal bigDecimal30 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal31 = bigDecimal30.stripTrailingZeros();
        int int32 = bigDecimal30.signum();
        java.math.BigDecimal[] bigDecimalArray33 = bigDecimal27.divideAndRemainder(bigDecimal30);
        java.math.BigDecimal bigDecimal35 = bigDecimal27.pow((int) 'a');
        java.math.BigDecimal bigDecimal37 = new java.math.BigDecimal(0.0d);
        java.lang.String str38 = bigDecimal37.toString();
        java.math.BigDecimal bigDecimal40 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal41 = bigDecimal40.stripTrailingZeros();
        int int42 = bigDecimal40.signum();
        java.math.BigDecimal[] bigDecimalArray43 = bigDecimal37.divideAndRemainder(bigDecimal40);
        java.math.BigDecimal bigDecimal45 = bigDecimal37.pow((int) 'a');
        java.math.BigInteger bigInteger46 = bigDecimal37.toBigIntegerExact();
        java.math.BigDecimal bigDecimal47 = bigDecimal35.add(bigDecimal37);
        java.math.BigDecimal bigDecimal48 = bigDecimal22.min(bigDecimal37);
        java.math.BigDecimal bigDecimal49 = bigDecimal20.min(bigDecimal48);
        org.apache.commons.math.linear.BigMatrix bigMatrix50 = bigMatrixImpl14.scalarAdd(bigDecimal48);
        int int51 = bigMatrixImpl14.getRowDimension();
        java.math.BigDecimal bigDecimal53 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal55 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray56 = bigDecimal53.divideAndRemainder(bigDecimal55);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal[] bigDecimalArray57 = bigMatrixImpl14.preMultiply(bigDecimalArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: vector has wrong length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 64 + "'", int17 == 64);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(bigDecimal30);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray33);
        org.junit.Assert.assertNotNull(bigDecimal35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(bigDecimal40);
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigInteger46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertNotNull(bigDecimal48);
        org.junit.Assert.assertNotNull(bigDecimal49);
        org.junit.Assert.assertNotNull(bigMatrix50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(bigDecimal53);
        org.junit.Assert.assertNotNull(bigDecimal55);
        org.junit.Assert.assertNotNull(bigDecimalArray56);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        java.math.BigDecimal bigDecimal1 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal3 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray4 = bigDecimal1.divideAndRemainder(bigDecimal3);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl5 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray4);
        org.apache.commons.math.linear.BigMatrix bigMatrix6 = bigMatrixImpl5.copy();
        org.apache.commons.math.linear.BigMatrix bigMatrix7 = bigMatrixImpl5.copy();
        bigMatrixImpl5.setRoundingMode(10);
        int int10 = bigMatrixImpl5.getRowDimension();
        java.math.BigDecimal bigDecimal11 = bigMatrixImpl5.getNorm();
        java.math.BigDecimal bigDecimal13 = new java.math.BigDecimal(0.0d);
        int int14 = bigDecimal13.intValue();
        java.math.BigDecimal bigDecimal16 = new java.math.BigDecimal(0.0d);
        int int17 = bigDecimal16.intValue();
        java.math.BigDecimal bigDecimal18 = bigDecimal13.min(bigDecimal16);
        java.math.BigDecimal[] bigDecimalArray19 = new java.math.BigDecimal[] { bigDecimal18 };
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        java.math.BigDecimal bigDecimal24 = new java.math.BigDecimal(0.0d);
        int int25 = bigDecimal24.intValue();
        java.math.BigDecimal bigDecimal26 = bigDecimal21.min(bigDecimal24);
        java.math.BigDecimal[] bigDecimalArray27 = new java.math.BigDecimal[] { bigDecimal26 };
        java.math.BigDecimal bigDecimal29 = new java.math.BigDecimal(0.0d);
        int int30 = bigDecimal29.intValue();
        java.math.BigDecimal bigDecimal32 = new java.math.BigDecimal(0.0d);
        int int33 = bigDecimal32.intValue();
        java.math.BigDecimal bigDecimal34 = bigDecimal29.min(bigDecimal32);
        java.math.BigDecimal[] bigDecimalArray35 = new java.math.BigDecimal[] { bigDecimal34 };
        java.math.BigDecimal[][] bigDecimalArray36 = new java.math.BigDecimal[][] { bigDecimalArray19, bigDecimalArray27, bigDecimalArray35 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl37 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrix bigMatrix38 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray36);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl39 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray36);
        java.math.BigDecimal[][] bigDecimalArray40 = bigMatrixImpl39.getData();
        boolean boolean41 = bigMatrixImpl39.isSquare();
        java.math.BigDecimal bigDecimal43 = java.math.BigDecimal.valueOf((long) (short) 100);
        int int44 = bigDecimal43.signum();
        org.apache.commons.math.linear.BigMatrix bigMatrix45 = bigMatrixImpl39.scalarMultiply(bigDecimal43);
        java.math.BigDecimal bigDecimal47 = new java.math.BigDecimal(0.0d);
        java.lang.String str48 = bigDecimal47.toString();
        java.math.BigDecimal bigDecimal50 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal51 = bigDecimal50.stripTrailingZeros();
        int int52 = bigDecimal50.signum();
        java.math.BigDecimal[] bigDecimalArray53 = bigDecimal47.divideAndRemainder(bigDecimal50);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl54 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray53);
        int int55 = bigMatrixImpl54.getRoundingMode();
        org.apache.commons.math.linear.BigMatrix bigMatrix56 = bigMatrixImpl54.transpose();
        double[][] doubleArray57 = bigMatrix56.getDataAsDoubleArray();
        java.math.BigDecimal[][] bigDecimalArray58 = bigMatrix56.getData();
        org.apache.commons.math.linear.BigMatrix bigMatrix59 = bigMatrixImpl39.multiply(bigMatrix56);
        org.apache.commons.math.linear.BigMatrix bigMatrix60 = bigMatrix56.transpose();
        org.apache.commons.math.linear.BigMatrix bigMatrix61 = bigMatrixImpl5.subtract(bigMatrix60);
        java.math.BigDecimal bigDecimal63 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        java.lang.String str66 = bigDecimal65.toString();
        java.math.BigDecimal bigDecimal68 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal69 = bigDecimal68.stripTrailingZeros();
        int int70 = bigDecimal68.signum();
        java.math.BigDecimal[] bigDecimalArray71 = bigDecimal65.divideAndRemainder(bigDecimal68);
        java.math.BigDecimal bigDecimal73 = bigDecimal65.pow((int) 'a');
        java.math.BigDecimal[] bigDecimalArray74 = new java.math.BigDecimal[] { bigDecimal63, bigDecimal65 };
        org.apache.commons.math.linear.BigMatrix bigMatrix75 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray74);
        org.apache.commons.math.linear.BigMatrix bigMatrix76 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(bigDecimalArray74);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl77 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray74);
        java.math.BigDecimal bigDecimal79 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal81 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal[] bigDecimalArray82 = bigDecimal79.divideAndRemainder(bigDecimal81);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl83 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray82);
        org.apache.commons.math.linear.BigMatrix bigMatrix84 = bigMatrixImpl83.copy();
        boolean boolean85 = bigMatrixImpl77.equals((java.lang.Object) bigMatrixImpl83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrix61.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Matrices are not multiplication compatible.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(bigDecimal1);
        org.junit.Assert.assertNotNull(bigDecimal3);
        org.junit.Assert.assertNotNull(bigDecimalArray4);
        org.junit.Assert.assertNotNull(bigMatrix6);
        org.junit.Assert.assertNotNull(bigMatrix7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(bigDecimal11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(bigDecimal18);
        org.junit.Assert.assertNotNull(bigDecimalArray19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(bigDecimal26);
        org.junit.Assert.assertNotNull(bigDecimalArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(bigDecimal34);
        org.junit.Assert.assertNotNull(bigDecimalArray35);
        org.junit.Assert.assertNotNull(bigDecimalArray36);
        org.junit.Assert.assertNotNull(bigMatrix38);
        org.junit.Assert.assertNotNull(bigDecimalArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(bigMatrix45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(bigDecimal50);
        org.junit.Assert.assertNotNull(bigDecimal51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(bigMatrix56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(bigDecimalArray58);
        org.junit.Assert.assertNotNull(bigMatrix59);
        org.junit.Assert.assertNotNull(bigMatrix60);
        org.junit.Assert.assertNotNull(bigMatrix61);
        org.junit.Assert.assertNotNull(bigDecimal63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(bigDecimal68);
        org.junit.Assert.assertNotNull(bigDecimal69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigDecimal73);
        org.junit.Assert.assertNotNull(bigDecimalArray74);
        org.junit.Assert.assertNotNull(bigMatrix75);
        org.junit.Assert.assertNotNull(bigMatrix76);
        org.junit.Assert.assertNotNull(bigDecimal79);
        org.junit.Assert.assertNotNull(bigDecimal81);
        org.junit.Assert.assertNotNull(bigDecimalArray82);
        org.junit.Assert.assertNotNull(bigMatrix84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = bigMatrixImpl14.transpose();
        int int16 = bigMatrixImpl14.getColumnDimension();
        org.apache.commons.math.linear.BigMatrix bigMatrix17 = bigMatrixImpl14.transpose();
        java.math.BigDecimal[][] bigDecimalArray18 = bigMatrix17.getData();
        java.math.BigDecimal bigDecimal19 = bigMatrix17.getNorm();
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        long long23 = bigDecimal21.longValue();
        java.math.BigDecimal bigDecimal24 = bigDecimal21.ulp();
        double double25 = bigDecimal21.doubleValue();
        short short26 = bigDecimal21.shortValueExact();
        java.math.BigDecimal bigDecimal27 = bigDecimal21.negate();
        long long28 = bigDecimal21.longValueExact();
        java.math.BigDecimal bigDecimal29 = bigDecimal19.add(bigDecimal21);
        java.lang.String str30 = bigDecimal19.toPlainString();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(bigMatrix17);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertNotNull(bigDecimal19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + short26 + "' != '" + (short) 0 + "'", short26 == (short) 0);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "101" + "'", str30, "101");
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((double) 97);
        java.lang.String str2 = bigDecimal1.toPlainString();
        java.math.BigDecimal bigDecimal4 = bigDecimal1.setScale(97);
        java.math.BigDecimal bigDecimal7 = java.math.BigDecimal.valueOf((long) 0, (int) (short) -100);
        java.math.BigDecimal bigDecimal8 = bigDecimal1.subtract(bigDecimal7);
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[] doubleArray14 = new double[] { 1.0d, 100.0f };
        double[] doubleArray17 = new double[] { 1.0d, 100.0f };
        double[] doubleArray20 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray21 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20 };
        org.apache.commons.math.linear.BigMatrix bigMatrix22 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray21);
        boolean boolean23 = bigMatrix22.isSingular();
        org.apache.commons.math.linear.BigMatrix bigMatrix24 = bigMatrix22.copy();
        java.math.BigDecimal bigDecimal25 = bigMatrix22.getNorm();
        java.math.BigDecimal bigDecimal27 = bigDecimal25.scaleByPowerOfTen((int) '#');
        int int28 = bigDecimal27.scale();
        double[] doubleArray33 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray33);
        double[] doubleArray39 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray39);
        double[] doubleArray41 = realMatrix34.operate(doubleArray39);
        org.apache.commons.math.linear.BigMatrix bigMatrix42 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(doubleArray41);
        java.math.BigDecimal bigDecimal43 = bigMatrix42.getNorm();
        java.math.BigDecimal bigDecimal45 = bigDecimal43.scaleByPowerOfTen(3);
        java.math.BigDecimal bigDecimal47 = bigDecimal43.pow((int) (short) 10);
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigDecimal[] bigDecimalArray63 = new java.math.BigDecimal[] { bigDecimal62 };
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal65.min(bigDecimal68);
        java.math.BigDecimal[] bigDecimalArray71 = new java.math.BigDecimal[] { bigDecimal70 };
        java.math.BigDecimal[][] bigDecimalArray72 = new java.math.BigDecimal[][] { bigDecimalArray55, bigDecimalArray63, bigDecimalArray71 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        java.math.BigDecimal[][] bigDecimalArray76 = bigMatrixImpl75.getDataRef();
        java.math.BigDecimal bigDecimal77 = bigMatrixImpl75.getNorm();
        boolean boolean78 = bigMatrixImpl75.isSquare();
        java.math.BigDecimal[][] bigDecimalArray79 = bigMatrixImpl75.getDataRef();
        org.apache.commons.math.linear.BigMatrix bigMatrix80 = bigMatrixImpl75.transpose();
        bigMatrixImpl75.setRoundingMode(7);
        org.apache.commons.math.linear.BigMatrix bigMatrix83 = bigMatrixImpl75.transpose();
        int int84 = bigMatrixImpl75.getColumnDimension();
        boolean boolean85 = bigMatrixImpl75.isSquare();
        java.math.BigDecimal bigDecimal86 = bigMatrixImpl75.getNorm();
        java.math.BigDecimal bigDecimal87 = bigDecimal43.multiply(bigDecimal86);
        java.math.BigDecimal bigDecimal88 = bigDecimal27.min(bigDecimal86);
        java.math.MathContext mathContext89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigDecimal bigDecimal90 = bigDecimal8.add(bigDecimal88, mathContext89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "97" + "'", str2, "97");
        org.junit.Assert.assertNotNull(bigDecimal4);
        org.junit.Assert.assertNotNull(bigDecimal7);
        org.junit.Assert.assertNotNull(bigDecimal8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(bigMatrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(bigMatrix24);
        org.junit.Assert.assertNotNull(bigDecimal25);
        org.junit.Assert.assertNotNull(bigDecimal27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-35) + "'", int28 == (-35));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix42);
        org.junit.Assert.assertNotNull(bigDecimal43);
        org.junit.Assert.assertNotNull(bigDecimal45);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(bigDecimalArray79);
        org.junit.Assert.assertNotNull(bigMatrix80);
        org.junit.Assert.assertNotNull(bigMatrix83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(bigDecimal86);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigDecimal88);
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        double[] doubleArray4 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix5 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray4);
        double[] doubleArray10 = new double[] { (-1.0f), '4', (byte) 10, 0.0d };
        org.apache.commons.math.linear.RealMatrix realMatrix11 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        double[] doubleArray12 = realMatrix5.operate(doubleArray10);
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createColumnBigMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = org.apache.commons.math.linear.MatrixUtils.createRowRealMatrix(doubleArray10);
        org.apache.commons.math.linear.RealMatrix realMatrix15 = realMatrix14.transpose();
        double[][] doubleArray16 = realMatrix14.getData();
        double[][] doubleArray17 = realMatrix14.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix18 = realMatrix14.copy();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = realMatrix18.getRow(400);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: illegal row argument");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(realMatrix11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2805.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realMatrix15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrix18);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        double[] doubleArray2 = new double[] { 1.0d, 100.0f };
        double[] doubleArray5 = new double[] { 1.0d, 100.0f };
        double[] doubleArray8 = new double[] { 1.0d, 100.0f };
        double[] doubleArray11 = new double[] { 1.0d, 100.0f };
        double[][] doubleArray12 = new double[][] { doubleArray2, doubleArray5, doubleArray8, doubleArray11 };
        org.apache.commons.math.linear.BigMatrix bigMatrix13 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl14 = new org.apache.commons.math.linear.BigMatrixImpl(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix15 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        org.apache.commons.math.linear.BigMatrix bigMatrix16 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(doubleArray12);
        java.math.BigDecimal[] bigDecimalArray18 = bigMatrix16.getColumn(0);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl19 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray18);
        java.math.BigDecimal bigDecimal21 = new java.math.BigDecimal(0.0d);
        int int22 = bigDecimal21.intValue();
        long long23 = bigDecimal21.longValue();
        long long24 = bigDecimal21.longValueExact();
        int int25 = bigDecimal21.precision();
        java.math.BigDecimal bigDecimal27 = new java.math.BigDecimal(0.0d);
        int int28 = bigDecimal27.intValue();
        long long29 = bigDecimal27.longValue();
        long long30 = bigDecimal27.longValueExact();
        java.math.BigDecimal bigDecimal31 = bigDecimal21.add(bigDecimal27);
        java.math.BigDecimal bigDecimal33 = bigDecimal27.pow(3);
        java.math.BigInteger bigInteger34 = bigDecimal33.toBigIntegerExact();
        java.math.BigDecimal bigDecimal35 = new java.math.BigDecimal(bigInteger34);
        org.apache.commons.math.linear.BigMatrix bigMatrix36 = bigMatrixImpl19.scalarAdd(bigDecimal35);
        java.math.BigDecimal bigDecimal38 = new java.math.BigDecimal(0.0d);
        java.lang.String str39 = bigDecimal38.toString();
        java.math.BigDecimal bigDecimal41 = java.math.BigDecimal.valueOf((long) 'a');
        java.math.BigDecimal bigDecimal42 = bigDecimal41.stripTrailingZeros();
        int int43 = bigDecimal41.signum();
        java.math.BigDecimal[] bigDecimalArray44 = bigDecimal38.divideAndRemainder(bigDecimal41);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl45 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray44);
        java.math.BigDecimal bigDecimal46 = bigMatrixImpl45.getNorm();
        java.math.BigDecimal bigDecimal47 = java.math.BigDecimal.ZERO;
        java.math.BigDecimal bigDecimal49 = new java.math.BigDecimal(0.0d);
        int int50 = bigDecimal49.intValue();
        java.math.BigDecimal bigDecimal52 = new java.math.BigDecimal(0.0d);
        int int53 = bigDecimal52.intValue();
        java.math.BigDecimal bigDecimal54 = bigDecimal49.min(bigDecimal52);
        java.math.BigDecimal[] bigDecimalArray55 = new java.math.BigDecimal[] { bigDecimal54 };
        java.math.BigDecimal bigDecimal57 = new java.math.BigDecimal(0.0d);
        int int58 = bigDecimal57.intValue();
        java.math.BigDecimal bigDecimal60 = new java.math.BigDecimal(0.0d);
        int int61 = bigDecimal60.intValue();
        java.math.BigDecimal bigDecimal62 = bigDecimal57.min(bigDecimal60);
        java.math.BigDecimal[] bigDecimalArray63 = new java.math.BigDecimal[] { bigDecimal62 };
        java.math.BigDecimal bigDecimal65 = new java.math.BigDecimal(0.0d);
        int int66 = bigDecimal65.intValue();
        java.math.BigDecimal bigDecimal68 = new java.math.BigDecimal(0.0d);
        int int69 = bigDecimal68.intValue();
        java.math.BigDecimal bigDecimal70 = bigDecimal65.min(bigDecimal68);
        java.math.BigDecimal[] bigDecimalArray71 = new java.math.BigDecimal[] { bigDecimal70 };
        java.math.BigDecimal[][] bigDecimalArray72 = new java.math.BigDecimal[][] { bigDecimalArray55, bigDecimalArray63, bigDecimalArray71 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl73 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrix bigMatrix74 = org.apache.commons.math.linear.MatrixUtils.createBigMatrix(bigDecimalArray72);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl75 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray72);
        java.math.BigDecimal[][] bigDecimalArray76 = bigMatrixImpl75.getDataRef();
        java.math.BigDecimal bigDecimal77 = bigMatrixImpl75.getNorm();
        boolean boolean78 = bigMatrixImpl75.isSquare();
        org.apache.commons.math.linear.BigMatrix bigMatrix79 = bigMatrixImpl75.copy();
        double[] doubleArray81 = bigMatrixImpl75.getColumnAsDoubleArray((int) (byte) 0);
        java.lang.String[] strArray83 = new java.lang.String[] { "0.0" };
        java.lang.String[][] strArray84 = new java.lang.String[][] { strArray83 };
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl85 = new org.apache.commons.math.linear.BigMatrixImpl(strArray84);
        org.apache.commons.math.linear.BigMatrix bigMatrix86 = bigMatrixImpl75.multiply((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl85);
        java.math.BigDecimal bigDecimal87 = bigMatrixImpl75.getNorm();
        java.math.BigDecimal[][] bigDecimalArray88 = bigMatrixImpl75.getData();
        int int89 = bigMatrixImpl75.getScale();
        boolean boolean90 = bigDecimal47.equals((java.lang.Object) bigMatrixImpl75);
        org.apache.commons.math.linear.BigMatrix bigMatrix91 = bigMatrixImpl45.scalarMultiply(bigDecimal47);
        java.math.BigDecimal[] bigDecimalArray93 = bigMatrixImpl45.getRow(1);
        org.apache.commons.math.linear.BigMatrix bigMatrix94 = org.apache.commons.math.linear.MatrixUtils.createRowBigMatrix(bigDecimalArray93);
        org.apache.commons.math.linear.BigMatrixImpl bigMatrixImpl95 = new org.apache.commons.math.linear.BigMatrixImpl(bigDecimalArray93);
        double[][] doubleArray96 = bigMatrixImpl95.getDataAsDoubleArray();
        java.math.BigDecimal bigDecimal97 = bigMatrixImpl95.getTrace();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.BigMatrix bigMatrix98 = bigMatrixImpl19.subtract((org.apache.commons.math.linear.BigMatrix) bigMatrixImpl95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: matrix dimension mismatch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(bigMatrix13);
        org.junit.Assert.assertNotNull(bigMatrix15);
        org.junit.Assert.assertNotNull(bigMatrix16);
        org.junit.Assert.assertNotNull(bigDecimalArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bigDecimal31);
        org.junit.Assert.assertNotNull(bigDecimal33);
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(bigMatrix36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertNotNull(bigDecimal41);
        org.junit.Assert.assertNotNull(bigDecimal42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(bigDecimalArray44);
        org.junit.Assert.assertNotNull(bigDecimal46);
        org.junit.Assert.assertNotNull(bigDecimal47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(bigDecimal54);
        org.junit.Assert.assertNotNull(bigDecimalArray55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(bigDecimal62);
        org.junit.Assert.assertNotNull(bigDecimalArray63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(bigDecimal70);
        org.junit.Assert.assertNotNull(bigDecimalArray71);
        org.junit.Assert.assertNotNull(bigDecimalArray72);
        org.junit.Assert.assertNotNull(bigMatrix74);
        org.junit.Assert.assertNotNull(bigDecimalArray76);
        org.junit.Assert.assertNotNull(bigDecimal77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(bigMatrix79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(bigMatrix86);
        org.junit.Assert.assertNotNull(bigDecimal87);
        org.junit.Assert.assertNotNull(bigDecimalArray88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 64 + "'", int89 == 64);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(bigMatrix91);
        org.junit.Assert.assertNotNull(bigDecimalArray93);
        org.junit.Assert.assertNotNull(bigMatrix94);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertNotNull(bigDecimal97);
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        java.math.BigDecimal bigDecimal1 = new java.math.BigDecimal((int) (short) 4);
        long long2 = bigDecimal1.longValue();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 4L + "'", long2 == 4L);
    }
}


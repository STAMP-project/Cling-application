import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest34 {

    public static boolean debug = false;

    @Test
    public void test17001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17001");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(53);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        boolean boolean9 = localTime5.isSupported(durationFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime5.millisOfDay();
        int int11 = localTime5.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime14 = localTime5.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime19 = dateTime16.withFieldAdded(durationFieldType17, 0);
        org.joda.time.DateTime.Property property20 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        org.joda.time.DateTime.Property property23 = dateTime21.secondOfDay();
        org.joda.time.DateTime dateTime25 = dateTime21.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime21.withDurationAdded((long) 11, 52);
        org.joda.time.DateTime dateTime29 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime28.getMillisOfDay();
        org.joda.time.DateTime.Property property31 = dateTime28.weekOfWeekyear();
        org.joda.time.DateTime dateTime33 = property31.addToCopy((long) 54032124);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 54180572 + "'", int30 == 54180572);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test17002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17002");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfDay();
        java.util.Date date10 = new java.util.Date((long) (byte) 0);
        int int11 = date10.getMinutes();
        int int12 = date10.getDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) date10, chronology13);
        boolean boolean15 = property8.equals((java.lang.Object) chronology13);
        org.joda.time.DurationField durationField16 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField17 = property8.getField();
        org.joda.time.DateTime dateTime18 = property8.withMaximumValue();
        int int19 = dateTime18.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime18.withTime(54092578, 368, 54180552, 54085382);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54092578 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
    }

    @Test
    public void test17003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17003");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 32772, dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.plus(readablePeriod3);
        java.lang.String str5 = localDate2.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
    }

    @Test
    public void test17004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17004");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(849, 98);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 849 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17005");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        int int6 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.minusWeeks(272);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfYear();
        org.joda.time.LocalDate localDate10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property11 = localDate10.era();
        java.util.Date date12 = localDate10.toDate();
        org.joda.time.LocalDate localDate14 = localDate10.plusYears(53728689);
        org.joda.time.LocalDate.Property property15 = localDate10.year();
        org.joda.time.DateTime dateTime16 = localDate10.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime16.withEra(54052779);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54052779 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Oct 15 00:00:00 GMT+00:00 1964");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test17006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17006");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime6 = localTime4.plusMillis(53666732);
        int int7 = localTime6.getHourOfDay();
        org.joda.time.LocalTime localTime9 = localTime6.withMillisOfDay(515);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test17007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17007");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        java.util.Date date3 = new java.util.Date((long) (byte) 0);
        int int4 = date3.getMinutes();
        int int5 = date3.getMinutes();
        boolean boolean6 = date1.before(date3);
        int int7 = date3.getYear();
        java.time.Instant instant8 = date3.toInstant();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test17008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17008");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfCentury();
        org.joda.time.Instant instant4 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone5 = instant4.getZone();
        long long7 = dateTimeZone5.nextTransition((long) 893);
        org.joda.time.Chronology chronology8 = copticChronology0.withZone(dateTimeZone5);
        org.joda.time.DurationField durationField9 = chronology8.minutes();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        long long14 = calendar13.getTimeInMillis();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar13);
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) localDate15, 57600000L);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(chronology19);
        int int21 = localTime20.getHourOfDay();
        org.joda.time.LocalTime.Property property22 = localTime20.secondOfMinute();
        org.joda.time.LocalTime localTime23 = property22.withMaximumValue();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str27 = locale26.getISO3Language();
        java.lang.String str28 = localTime23.toString("+00:00", locale26);
        java.lang.String str29 = locale26.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = localDate15.toString("", locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 893L + "'", long7 == 893L);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455785729,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=6,MILLISECOND=14,ZONE_OFFSET=285,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455785729L + "'", long14 == 1645455785729L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1686, 4, 23]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test17009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17009");
        java.util.Date date6 = new java.util.Date((int) '#', (int) (byte) 0, 20, 2, 12, 100);
        long long7 = date6.getTime();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.LocalDate localDate10 = localDate8.withDayOfYear(92);
        org.joda.time.LocalDate.Property property11 = localDate8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 20 02:13:40 GMT+00:00 1935");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1102887980589L) + "'", long7 == (-1102887980589L));
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17010");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.year();
        boolean boolean17 = localDateTime10.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.minusWeeks(20);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.plusSeconds(17);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        long long24 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime21, (long) 53642140);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.year();
        org.joda.time.Chronology chronology26 = localDateTime21.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.years();
        long long30 = durationField27.getDifferenceAsLong((long) 2790, 10598050732862L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10598051002766L + "'", long24 == 10598051002766L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-335L) + "'", long30 == (-335L));
    }

    @Test
    public void test17011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17011");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.joda.time.LocalTime localTime18 = property15.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime19 = property15.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test17012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17012");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime10 = dateTime7.withFieldAdded(durationFieldType8, 0);
        org.joda.time.DateTime.Property property11 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
        org.joda.time.DateTime.Property property14 = dateTime12.secondOfDay();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded(readableDuration15, 6);
        org.joda.time.LocalDate localDate18 = dateTime17.toLocalDate();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTime17);
        int int20 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime19.withEarlierOffsetAtOverlap();
        java.util.GregorianCalendar gregorianCalendar22 = dateTime19.toGregorianCalendar();
        org.joda.time.DateTime.Property property23 = dateTime19.year();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test17013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17013");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance();
        long long14 = copticChronology8.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField15 = copticChronology8.months();
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType7.getField((org.joda.time.Chronology) copticChronology8);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = copticChronology8.getZone();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology8);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology8.monthOfYear();
        org.joda.time.Chronology chronology25 = copticChronology8.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(337, 977, 2021, 292272708, 21660000, 763, 31536900, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292272708 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(copticChronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 57634718L + "'", long14 == 57634718L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test17014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17014");
        java.util.Date date5 = new java.util.Date(832, (-899590), 554, 25, 53936831);
        date5.setSeconds(53661050);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 06 06:01:50 GMT+00:00 72130");
    }

    @Test
    public void test17015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17015");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList11, strMap12);
        boolean boolean14 = strSet1.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11);
        java.util.Date date16 = new java.util.Date((long) (byte) 0);
        int int17 = date16.getMinutes();
        int int18 = date16.getDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) date16, chronology19);
        org.joda.time.LocalDate localDate22 = localDate20.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        long long26 = dateTimeZone24.nextTransition((long) 893);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone28, 0L);
        org.joda.time.DateTime dateTime31 = localDate20.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.LocalDate localDate33 = localDate20.minusDays(20);
        boolean boolean34 = strSet1.contains((java.lang.Object) localDate20);
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet1.spliterator();
        java.util.Iterator<java.lang.String> strItor36 = strSet1.iterator();
        java.lang.Object[] objArray37 = strSet1.toArray();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 893L + "'", long26 == 893L);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test17016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17016");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset((long) '#');
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3);
        boolean boolean8 = dateTimeZone2.equals((java.lang.Object) 3);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 940, dateTimeZone2);
        java.util.TimeZone timeZone10 = dateTimeZone2.toTimeZone();
        timeZone10.setRawOffset(10);
        java.lang.String str13 = timeZone10.getID();
        java.time.ZoneId zoneId14 = timeZone10.toZoneId();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Locale locale17 = new java.util.Locale("16");
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Calendar.Builder builder19 = builder15.setLocale(locale17);
        java.lang.String str20 = locale17.getISO3Country();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone10, locale17);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertEquals(locale17.toString(), "16");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455785854,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=5,MILLISECOND=864,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test17017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17017");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks(10);
        org.joda.time.DateTime.Property property6 = dateTime2.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar7 = dateTime2.toGregorianCalendar();
        gregorianCalendar7.clear();
        java.util.Locale locale11 = new java.util.Locale("hi!", "");
        boolean boolean12 = locale11.hasExtensions();
        boolean boolean13 = gregorianCalendar7.after((java.lang.Object) locale11);
        java.util.Locale locale17 = new java.util.Locale("+00:00", "Property[monthOfYear]", "java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale11.getDisplayCountry(locale17);
        java.lang.String str22 = nameProvider0.getShortName(locale11, "7", "1738");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 903 + "'", int3 == 903);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals(locale17.toString(), "+00:00_PROPERTY[MONTHOFYEAR]_java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test17018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17018");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.monthOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 43);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance();
        long long19 = copticChronology13.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology13.clockhourOfDay();
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        org.joda.time.Instant instant24 = instant22.withMillis((long) 1);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) instant22, dateTimeZone30);
        org.joda.time.LocalTime localTime35 = localTime33.minusMillis(12);
        org.joda.time.LocalTime localTime37 = localTime33.plusMillis((int) (short) 10);
        int[] intArray39 = copticChronology13.get((org.joda.time.ReadablePartial) localTime37, (long) 17);
        int int40 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localTime12, intArray39);
        org.joda.time.LocalTime localTime42 = localTime12.minusMillis(70);
        org.joda.time.LocalTime localTime44 = localTime42.plusMinutes(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime46 = localTime42.withMinuteOfHour(971);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 971 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str8, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 57634718L + "'", long19 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 302]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 13 + "'", int40 == 13);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
    }

    @Test
    public void test17019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17019");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList11, strMap12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.lang.String[] strArray18 = new java.lang.String[] { "DateTimeField[year]", "2022-5-2 14:59:13" };
        java.lang.Comparable<java.lang.String>[] strComparableArray19 = strSet15.toArray((java.lang.Comparable<java.lang.String>[]) strArray18);
        java.lang.String str20 = java.util.Locale.lookupTag(languageRangeList11, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime27 = dateTime24.withFieldAdded(durationFieldType25, 0);
        org.joda.time.DateTime.Property property28 = dateTime24.minuteOfDay();
        org.joda.time.DateTime dateTime29 = property28.withMinimumValue();
        org.joda.time.DateTime.Property property30 = dateTime29.secondOfMinute();
        org.joda.time.DateTime dateTime31 = property30.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(1970);
        boolean boolean34 = strSet22.remove((java.lang.Object) dateTime31);
        java.lang.String str35 = java.util.Locale.lookupTag(languageRangeList11, (java.util.Collection<java.lang.String>) strSet22);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strComparableArray19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test17020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17020");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfCentury(10);
        int int23 = localDate20.getDayOfMonth();
        int int24 = localDate20.getDayOfYear();
        org.joda.time.LocalDate localDate26 = localDate20.minusWeeks(54154547);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 18 + "'", int23 == 18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 352 + "'", int24 == 352);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test17021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17021");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        java.util.Date date39 = new java.util.Date((long) (byte) 0);
        int int40 = date39.getMinutes();
        int int41 = date39.getDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) date39, chronology42);
        org.joda.time.LocalDate localDate45 = localDate43.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant46 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone47 = instant46.getZone();
        long long49 = dateTimeZone47.nextTransition((long) 893);
        org.joda.time.Instant instant50 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone51 = instant50.getZone();
        long long53 = dateTimeZone47.getMillisKeepLocal(dateTimeZone51, 0L);
        org.joda.time.DateTime dateTime54 = localDate43.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.LocalDate localDate56 = localDate43.minusDays(20);
        org.joda.time.LocalDate localDate58 = localDate56.plusWeeks(53);
        org.joda.time.LocalDate localDate60 = localDate58.withYearOfCentury(10);
        int int61 = localDate37.compareTo((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.LocalDate localDate63 = localDate37.withYear(7);
        org.joda.time.LocalDate.Property property64 = localDate37.weekOfWeekyear();
        org.joda.time.LocalDate.Property property65 = localDate37.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType66.getDurationType();
        boolean boolean68 = localDate37.isSupported(durationFieldType67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstance();
        long long76 = copticChronology70.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField77 = copticChronology70.months();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology70.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField79 = copticChronology70.weekyear();
        boolean boolean80 = dateTimeFieldType69.isSupported((org.joda.time.Chronology) copticChronology70);
        org.joda.time.DurationField durationField81 = durationFieldType67.getField((org.joda.time.Chronology) copticChronology70);
        org.joda.time.DateTimeField dateTimeField82 = copticChronology70.weekOfWeekyear();
        org.joda.time.DurationField durationField83 = copticChronology70.minutes();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 893L + "'", long49 == 893L);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(copticChronology70);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 57634718L + "'", long76 == 57634718L);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
    }

    @Test
    public void test17022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17022");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.millisOfSecond();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DurationField durationField4 = copticChronology0.months();
        long long7 = durationField4.add((long) 935, 879);
        long long10 = durationField4.getValueAsLong(26748639888000L, (-27180002880L));
        org.joda.time.DurationFieldType durationFieldType11 = durationField4.getType();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology12.hourOfDay();
        org.joda.time.DurationField durationField15 = durationFieldType11.getField((org.joda.time.Chronology) copticChronology12);
        long long19 = copticChronology12.add(10598050621218L, (long) 335, 138);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime24 = dateTime21.withFieldAdded(durationFieldType22, 0);
        org.joda.time.DateTime dateTime26 = dateTime21.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTime.Property property27 = dateTime21.monthOfYear();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        java.lang.String str29 = property27.toString();
        int int30 = property27.getMinimumValue();
        org.joda.time.DateTime dateTime31 = property27.roundCeilingCopy();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withEra(1);
        int int36 = localDateTime35.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = localDateTime35.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = localDateTime35.getFields();
        org.joda.time.LocalDateTime.Property property40 = localDateTime35.year();
        boolean boolean42 = localDateTime35.equals((java.lang.Object) (byte) 0);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.plus(readableDuration43);
        int int45 = localDateTime35.getMillisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withEra(1);
        int int50 = localDateTime49.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = localDateTime49.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray53 = localDateTime49.getFields();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.minusWeeks((int) ' ');
        boolean boolean56 = localDateTime35.isEqual((org.joda.time.ReadablePartial) localDateTime55);
        int int57 = property27.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        long long59 = copticChronology12.set((org.joda.time.ReadablePartial) localDateTime35, (long) 669);
        org.joda.time.DateTimeField dateTimeField60 = copticChronology12.weekyearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str3, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2135116800935L + "'", long7 == 2135116800935L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 11019L + "'", long10 == 11019L);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10598050667448L + "'", long19 == 10598050667448L);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[monthOfYear]" + "'", str29, "Property[monthOfYear]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 301 + "'", int45 == 301);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeFieldArray53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10598050986016L + "'", long59 == 10598050986016L);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test17023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17023");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test17024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17024");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMaximumValue();
        java.lang.String str5 = property3.getAsString();
        org.joda.time.DateTime dateTime6 = property3.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test17025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17025");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter3.getLocale();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withOffsetParsed();
        java.lang.Integer int7 = dateTimeFormatter3.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test17026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17026");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(300, 11);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime7 = dateTime4.withFieldAdded(durationFieldType5, 0);
        org.joda.time.DateTime.Property property8 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.withMinimumValue();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        int int15 = localDateTime14.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = localDateTime14.getFieldType(2);
        java.lang.String str18 = dateTimeFieldType17.getName();
        int int19 = dateTime9.get(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(2);
        boolean boolean24 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean25 = dateTime9.isEqualNow();
        int int26 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime28 = dateTime9.withYear(0);
        org.joda.time.DateTime dateTime30 = dateTime9.minusMillis(796);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "dayOfMonth" + "'", str18, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21 + "'", int19 == 21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1080660000 + "'", int26 == 1080660000);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test17027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17027");
        java.util.Locale locale2 = new java.util.Locale("hi!", "");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        java.util.Date date5 = new java.util.Date((long) (byte) 0);
        java.util.Date date7 = new java.util.Date((long) (byte) 0);
        int int8 = date7.getMinutes();
        int int9 = date7.getMinutes();
        boolean boolean10 = date5.before(date7);
        date5.setHours(11);
        date5.setMinutes(852);
        java.lang.String str15 = date5.toGMTString();
        calendar3.setTime(date5);
        int int18 = calendar3.getActualMaximum(0);
        int int19 = calendar3.getFirstDayOfWeek();
        int int20 = calendar3.getFirstDayOfWeek();
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=90720000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=hi!,offset=589,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=12,SECOND=0,MILLISECOND=589,ZONE_OFFSET=589,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 02 01:12:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2 Jan 1970 01:12:00 GMT" + "'", str15, "2 Jan 1970 01:12:00 GMT");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test17028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17028");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology10 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.hourOfDay();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        java.util.Date date16 = new java.util.Date((long) (byte) 0);
        int int17 = date16.getMinutes();
        int int18 = date16.getDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) date16, chronology19);
        org.joda.time.LocalDate localDate22 = localDate20.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        long long26 = dateTimeZone24.nextTransition((long) 893);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone28, 0L);
        org.joda.time.DateTime dateTime31 = localDate20.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.LocalDate localDate33 = localDate20.minusDays(20);
        org.joda.time.LocalDate localDate35 = localDate33.withWeekOfWeekyear(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property37 = localDate33.property(dateTimeFieldType36);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology38.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType36.getField((org.joda.time.Chronology) copticChronology38);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType36.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime46 = localTime13.withField(dateTimeFieldType36, 40528000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str8, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 893L + "'", long26 == 893L);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationFieldType44);
    }

    @Test
    public void test17029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17029");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale locale4 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.removeUnicodeLocaleAttribute("DurationField[days]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: DurationField[days] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test17030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17030");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusHours(616);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minus(readableDuration5);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test17031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17031");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField9 = copticChronology0.millis();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((org.joda.time.Chronology) copticChronology0);
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test17032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17032");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.withMinimumValue();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime19 = property17.roundCeilingCopy();
        int int20 = localTime19.size();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test17033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17033");
        long long6 = java.util.Date.UTC(691, 313, 53669992, 53854, 53767443, 53664);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4660927232244000L + "'", long6 == 4660927232244000L);
    }

    @Test
    public void test17034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17034");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField9 = copticChronology1.months();
        boolean boolean10 = durationFieldType0.isSupported((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.yearOfCentury();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.year();
        org.joda.time.DurationField durationField14 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology1.yearOfCentury();
        int int18 = dateTimeField16.get(129L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57634718L + "'", long7 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 86 + "'", int18 == 86);
    }

    @Test
    public void test17035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17035");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        int int2 = localDateTime0.getEra();
        int int3 = localDateTime0.getYearOfEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        int int6 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusMillis(53642140);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.LocalDateTime.Property property11 = localDateTime0.property(dateTimeFieldType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime0.getFieldType(178);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 178");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test17036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17036");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property4.addNoWrapToCopy(43);
        org.joda.time.LocalTime localTime8 = property4.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test17037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17037");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test17038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17038");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) chronology1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMonthOfYear(8);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        int int8 = localDateTime7.getWeekOfWeekyear();
        boolean boolean9 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.withYear(2022);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, 0);
        org.joda.time.DateTime.Property property19 = dateTime15.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(2);
        java.lang.String str29 = dateTimeFieldType28.getName();
        int int30 = dateTime20.get(dateTimeFieldType28);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstance();
        long long37 = copticChronology31.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField38 = copticChronology31.months();
        java.lang.String str39 = copticChronology31.toString();
        int int40 = copticChronology31.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField41 = copticChronology31.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology31.dayOfYear();
        java.lang.String str43 = copticChronology31.toString();
        boolean boolean44 = dateTimeFieldType28.isSupported((org.joda.time.Chronology) copticChronology31);
        org.joda.time.DateTimeField dateTimeField45 = copticChronology31.weekOfWeekyear();
        boolean boolean46 = dateTimeZone13.equals((java.lang.Object) dateTimeField45);
        long long49 = dateTimeZone13.convertLocalToUTC(3304800000L, false);
        org.joda.time.DateTime dateTime50 = localDateTime11.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(10598050635705L, dateTimeZone13);
        java.util.TimeZone timeZone52 = dateTimeZone13.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int59 = timeZone52.getOffset(53663, 53921515, 30, 490, 56770311, 418);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 53663");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfMonth" + "'", str29, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
        org.junit.Assert.assertNotNull(copticChronology31);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 57634718L + "'", long37 == 57634718L);
        org.junit.Assert.assertNotNull(durationField38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str39, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str43, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3304800000L + "'", long49 == 3304800000L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
    }

    @Test
    public void test17039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17039");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, (-176634179), 1817, 53913219, 900000, 780);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Jan 13 03:13:00 GMT+00:00 14711359");
    }

    @Test
    public void test17040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17040");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 348);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test17041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17041");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(53913219, 1447200000, 53977);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53913219 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17042");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(151, (-292269337), 702, 2030, 136, 353, 53928);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2030 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17043");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.era();
        org.joda.time.DurationField durationField8 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.weekyearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17044");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(285);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime2.withTime(112, 54168022, 474, 677);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 112 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test17045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17045");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(11);
        java.util.Locale locale10 = new java.util.Locale("java.util.GregorianCalendar[time=6,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]", "millisOfSecond", "11");
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withEra(1);
        int int17 = localDateTime16.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = localDateTime16.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = localDateTime16.getFields();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category26, locale27);
        java.util.Calendar calendar29 = dateTime25.toCalendar(locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstance();
        long long37 = copticChronology31.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField38 = copticChronology31.months();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType30.getField((org.joda.time.Chronology) copticChronology31);
        org.joda.time.DateTimeField dateTimeField40 = copticChronology31.yearOfCentury();
        boolean boolean41 = dateTime25.equals((java.lang.Object) dateTimeField40);
        java.util.Locale locale45 = new java.util.Locale("hi!", "");
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str47 = dateTimeField40.getAsShortText((int) (byte) 10, locale45);
        java.lang.String str48 = locale45.getDisplayScript();
        java.lang.String str49 = locale10.getDisplayName(locale45);
        boolean boolean50 = localDateTime4.equals((java.lang.Object) str49);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertEquals(locale10.toString(), "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]_MILLISOFSECOND_11");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]_MILLISOFSECOND_11");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1640995199715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(copticChronology31);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 57634718L + "'", long37 == 57634718L);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "10" + "'", str47, "10");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0] (MILLISOFSECOND,11)" + "'", str49, "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0] (MILLISOFSECOND,11)");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test17046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17046");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime11.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusSeconds((int) (byte) 10);
        int int17 = localDateTime16.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusYears(0);
        boolean boolean20 = copticChronology0.equals((java.lang.Object) localDateTime19);
        org.joda.time.DurationField durationField21 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology0.minuteOfHour();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 53760);
        org.joda.time.LocalTime localTime29 = localTime27.withMillisOfDay(723);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstance();
        long long37 = copticChronology31.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField38 = copticChronology31.months();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology31.dayOfWeek();
        org.joda.time.DurationField durationField42 = copticChronology31.years();
        java.util.Date date44 = new java.util.Date((long) (byte) 0);
        int int45 = date44.getMinutes();
        int int46 = date44.getDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) date44, chronology47);
        org.joda.time.LocalDate localDate50 = localDate48.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant51 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone52 = instant51.getZone();
        long long54 = dateTimeZone52.nextTransition((long) 893);
        org.joda.time.Instant instant55 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone56 = instant55.getZone();
        long long58 = dateTimeZone52.getMillisKeepLocal(dateTimeZone56, 0L);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtMidnight(dateTimeZone52);
        java.util.Date date61 = new java.util.Date((long) (byte) 0);
        int int62 = date61.getMinutes();
        int int63 = date61.getDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) date61, chronology64);
        org.joda.time.LocalDate localDate67 = localDate65.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant68 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone69 = instant68.getZone();
        long long71 = dateTimeZone69.nextTransition((long) 893);
        org.joda.time.Instant instant72 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone73 = instant72.getZone();
        long long75 = dateTimeZone69.getMillisKeepLocal(dateTimeZone73, 0L);
        org.joda.time.DateTime dateTime76 = localDate65.toDateTimeAtMidnight(dateTimeZone69);
        org.joda.time.DateTime dateTime77 = localDate48.toDateTimeAtStartOfDay(dateTimeZone69);
        org.joda.time.DateTime dateTime78 = localDate48.toDateTimeAtCurrentTime();
        int[] intArray79 = localDate48.getValues();
        int[] intArray81 = copticChronology31.get((org.joda.time.ReadablePartial) localDate48, 1645455322690L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = dateTimeField25.add((org.joda.time.ReadablePartial) localTime27, 328, intArray81, 54157045);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 328");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(copticChronology31);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 57634718L + "'", long37 == 57634718L);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 893L + "'", long54 == 893L);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 893L + "'", long71 == 893L);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1738, 6, 14]");
    }

    @Test
    public void test17047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17047");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.hours();
        org.joda.time.DurationField durationField9 = copticChronology0.minutes();
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.secondOfMinute();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17048");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = copticChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology3.getZone();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime11 = localTime9.minusMillis(292272708);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime16 = dateTime13.withFieldAdded(durationFieldType14, 0);
        java.util.Date date17 = dateTime16.toDate();
        int int18 = dateTime16.getHourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.withWeekyear(294);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) chronology21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMonthOfYear(8);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        int int28 = localDateTime27.getWeekOfWeekyear();
        boolean boolean29 = localDateTime23.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.withYear(2022);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime38 = dateTime35.withFieldAdded(durationFieldType36, 0);
        org.joda.time.DateTime.Property property39 = dateTime35.minuteOfDay();
        org.joda.time.DateTime dateTime40 = property39.withMinimumValue();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withEra(1);
        int int46 = localDateTime45.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = localDateTime45.getFieldType(2);
        java.lang.String str49 = dateTimeFieldType48.getName();
        int int50 = dateTime40.get(dateTimeFieldType48);
        org.joda.time.chrono.CopticChronology copticChronology51 = org.joda.time.chrono.CopticChronology.getInstance();
        long long57 = copticChronology51.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField58 = copticChronology51.months();
        java.lang.String str59 = copticChronology51.toString();
        int int60 = copticChronology51.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField61 = copticChronology51.weekyears();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology51.dayOfYear();
        java.lang.String str63 = copticChronology51.toString();
        boolean boolean64 = dateTimeFieldType48.isSupported((org.joda.time.Chronology) copticChronology51);
        org.joda.time.DateTimeField dateTimeField65 = copticChronology51.weekOfWeekyear();
        boolean boolean66 = dateTimeZone33.equals((java.lang.Object) dateTimeField65);
        long long69 = dateTimeZone33.convertLocalToUTC(3304800000L, false);
        org.joda.time.DateTime dateTime70 = localDateTime31.toDateTime(dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str72 = dateTimeFieldType71.toString();
        int int73 = localDateTime31.get(dateTimeFieldType71);
        int int74 = dateTime20.get(dateTimeFieldType71);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = localTime9.get(dateTimeFieldType71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Mon Feb 21 15:03:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "dayOfMonth" + "'", str49, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 21 + "'", int50 == 21);
        org.junit.Assert.assertNotNull(copticChronology51);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 57634718L + "'", long57 == 57634718L);
        org.junit.Assert.assertNotNull(durationField58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str59, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str63, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3304800000L + "'", long69 == 3304800000L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "dayOfMonth" + "'", str72, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 21 + "'", int73 == 21);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 19 + "'", int74 == 19);
    }

    @Test
    public void test17049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17049");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0, 9, (int) (byte) 1, 0, 15);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds(0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test17050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17050");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean21 = localDateTime16.isSupported(dateTimeFieldType20);
        boolean boolean22 = localDateTime3.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime3.plusMillis(2);
        int int25 = localDateTime24.getYear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusYears((-1971));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withMillisOfSecond(53977);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53977 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test17051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17051");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate localDate22 = localDate18.plusWeeks(20);
        org.joda.time.LocalDate localDate24 = localDate18.withYearOfCentury(6);
        org.joda.time.LocalDate localDate26 = localDate18.plusMonths(5);
        org.joda.time.LocalDate localDate28 = localDate18.plusDays(53640);
        org.joda.time.LocalDate.Property property29 = localDate28.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate32 = localDate28.withPeriodAdded(readablePeriod30, 538);
        org.joda.time.Instant instant34 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone35 = instant34.getZone();
        long long37 = dateTimeZone35.nextTransition((long) 893);
        java.lang.String str39 = dateTimeZone35.getName((long) 100);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant42 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone43 = instant42.getZone();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate40.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 893, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight47 = localDate28.toDateMidnight(dateTimeZone43);
        int int48 = dateMidnight47.getDayOfMonth();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 893L + "'", long37 == 893L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
    }

    @Test
    public void test17052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17052");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 538);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfYear();
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder3.setInstant((long) 6);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        timeZone6.setID("hi!");
        java.util.Calendar.Builder builder9 = builder5.setTimeZone(timeZone6);
        java.util.Calendar calendar10 = builder5.build();
        java.util.Calendar.Builder builder14 = builder5.setWeekDate((int) (byte) 100, 44, (-292275054));
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.clearExtensions();
        java.util.Locale locale19 = builder16.build();
        java.util.Locale.Builder builder21 = builder16.addUnicodeLocaleAttribute("years");
        java.util.Locale.Builder builder23 = builder16.setLanguage("");
        java.util.Locale locale24 = builder16.build();
        java.util.Calendar.Builder builder25 = builder5.setLocale(locale24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale24);
        java.lang.String str27 = property2.getAsShortText(locale24);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=6,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=hi!,offset=589,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=595,ZONE_OFFSET=589,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645455786522,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=hi!,offset=589,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=7,MILLISECOND=111,ZONE_OFFSET=589,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
    }

    @Test
    public void test17053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category13, locale14);
        java.util.Calendar calendar16 = dateTime12.toCalendar(locale14);
        calendar16.setLenient(true);
        calendar16.set(258, (int) (short) 1, 0);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("\u4e2d\u6587\u4e2d\u56fd)");
        calendar16.setTimeZone(timeZone24);
        timeZone24.setRawOffset(631);
        java.lang.String str28 = timeZone24.getID();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str30 = timeZone24.getID();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=631,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=258,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GMT" + "'", str28, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GMT" + "'", str30, "GMT");
    }

    @Test
    public void test17054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17054");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 713, dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test17055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17055");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField4 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test17056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17056");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate.Property property21 = localDate20.year();
        org.joda.time.LocalDate localDate22 = property21.getLocalDate();
        org.joda.time.LocalDate localDate23 = property21.roundHalfFloorCopy();
        java.util.Locale locale26 = new java.util.Locale("5");
        org.joda.time.LocalDate localDate27 = property21.setCopy("470", locale26);
        java.lang.String str28 = property21.getAsText();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals(locale26.toString(), "5");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970" + "'", str28, "1970");
    }

    @Test
    public void test17057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17057");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(32769);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime17 = dateTime14.withFieldAdded(durationFieldType15, 0);
        org.joda.time.DateTime.Property property18 = dateTime14.minuteOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfMinute();
        int int21 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDateTime10.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime10.plusMillis(53825);
        org.joda.time.tz.Provider provider27 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet28 = provider27.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        boolean boolean32 = strSet28.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30);
        boolean boolean33 = localDateTime26.equals((java.lang.Object) languageRangeList30);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream34 = languageRangeList30.stream();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(provider27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(languageRangeStream34);
    }

    @Test
    public void test17058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17058");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField9 = copticChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test17059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17059");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        int int9 = localDateTime8.getYearOfCentury();
        java.lang.String str10 = localDateTime8.toString();
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDayOfMonth(22);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withDurationAdded(readableDuration22, 53640);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str28 = dateTimeFieldType27.getName();
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.property(dateTimeFieldType27);
        int int30 = property29.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:03:16.923" + "'", str10, "2022-02-21T15:03:16.923");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
    }

    @Test
    public void test17060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17060");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.Chronology chronology16 = copticChronology1.withUTC();
        org.joda.time.DurationField durationField17 = copticChronology1.eras();
        boolean boolean18 = durationField17.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = durationField17.subtract(10598050853292L, (-285L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57634718L + "'", long7 == 57634718L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17061");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear(131);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withZoneUTC();
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test17062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17062");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(9);
        int int4 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime6 = dateTime1.plusYears(909);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime1.withTime(1447200000, 341, 53801, 53774);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1447200000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test17063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17063");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withPeriodAdded(readablePeriod7, 339);
        boolean boolean11 = localDateTime9.equals((java.lang.Object) 10598050502861L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime16 = dateTime13.withFieldAdded(durationFieldType14, 0);
        org.joda.time.DateTime.Property property17 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime18 = property17.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfMinute();
        org.joda.time.DateTime.Property property20 = dateTime18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime25 = dateTime22.withFieldAdded(durationFieldType23, 0);
        org.joda.time.DateTime.Property property26 = dateTime22.minuteOfDay();
        org.joda.time.DateTime dateTime27 = property26.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfMinute();
        java.lang.String str29 = property28.toString();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str32 = property28.getAsShortText(locale31);
        java.lang.String str33 = property20.getAsShortText(locale31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property20.getFieldType();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.secondOfMinute();
        org.joda.time.DurationField durationField37 = copticChronology35.months();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology35.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        long long43 = copticChronology35.add(readablePeriod40, (long) 816, (int) '#');
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType34.getField((org.joda.time.Chronology) copticChronology35);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime9.withField(dateTimeFieldType34, 921);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime9.withPeriodAdded(readablePeriod47, 900000);
        java.util.Date date51 = new java.util.Date((long) (-292275054));
        date51.setHours(423);
        boolean boolean54 = localDateTime49.equals((java.lang.Object) 423);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[secondOfMinute]" + "'", str29, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "54180" + "'", str33, "54180");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 816L + "'", long43 == 816L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Wed Jan 14 15:48:45 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test17064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17064");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (short) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(616);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = property15.withMinimumValue();
        int int18 = localDateTime17.getMillisOfSecond();
        int int19 = localDateTime17.getEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusHours(0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 999 + "'", int18 == 999);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test17065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17065");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.withMaximumValue();
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = instant5.getZone();
        long long8 = dateTimeZone6.nextTransition((long) 893);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = dateTimeZone6.getName((long) (short) 0, locale10);
        java.util.TimeZone timeZone12 = dateTimeZone6.toTimeZone();
        long long15 = dateTimeZone6.adjustOffset(25L, false);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = dateTimeZone6.getShortName((long) (byte) 100, locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleKeys();
        java.lang.String str22 = locale18.getLanguage();
        java.util.Locale locale23 = locale18.stripExtensions();
        int int24 = property3.getMaximumTextLength(locale18);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 893L + "'", long8 == 893L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25L + "'", long15 == 25L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
    }

    @Test
    public void test17066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17066");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime10 = dateTime6.withWeekyear(852);
        org.joda.time.DateTime dateTime12 = dateTime6.withWeekyear((-14));
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17067");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u53f0\u7063");
        java.util.TimeZone.setDefault(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = timeZone1.getDisplayName(false, 146937);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 146937");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
    }

    @Test
    public void test17068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17068");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(32769);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = property11.addWrapFieldToCopy(56770311);
        int int15 = localDateTime14.getMinuteOfHour();
        int int16 = localDateTime14.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusMonths(763);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54 + "'", int15 == 54);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17069");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime11 = dateTime8.withFieldAdded(durationFieldType9, 0);
        org.joda.time.DateTime.Property property12 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime15 = property12.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime17 = property12.addWrapFieldToCopy(616);
        org.joda.time.DateTime dateTime18 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = property12.getDateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks(56770311);
        boolean boolean23 = dateTime19.isBeforeNow();
        org.joda.time.DateTime dateTime25 = dateTime19.plusSeconds(986);
        org.joda.time.DateTime dateTime27 = dateTime19.withYear(538);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime19.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime19.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(245, 900, 53833, 1946, 899, 53931487, 53919748, dateTimeZone29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1946 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test17070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17070");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Chronology chronology1 = instant0.getChronology();
        org.joda.time.Instant instant3 = instant0.plus(1645455324838L);
        org.joda.time.Instant instant5 = instant0.plus((-1806581999000L));
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Instant instant8 = instant5.withDurationAdded(readableDuration6, 13);
        org.joda.time.Chronology chronology9 = instant5.getChronology();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test17071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17071");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withEra(1);
        int int5 = localDateTime4.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = localDateTime4.getFieldType(2);
        java.lang.String str8 = dateTimeFieldType7.getName();
        org.joda.time.DateTime dateTime10 = dateTime0.withField(dateTimeFieldType7, (int) (byte) 10);
        int int11 = dateTime0.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfMonth" + "'", str8, "dayOfMonth");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test17072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17072");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 845);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime8 = dateTime5.withFieldAdded(durationFieldType6, 0);
        org.joda.time.DateTime.Property property9 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime10 = property9.withMinimumValue();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime15.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime15.getFieldType(2);
        java.lang.String str19 = dateTimeFieldType18.getName();
        int int20 = dateTime10.get(dateTimeFieldType18);
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance();
        long long27 = copticChronology21.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField28 = copticChronology21.months();
        java.lang.String str29 = copticChronology21.toString();
        int int30 = copticChronology21.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField31 = copticChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology21.dayOfYear();
        java.lang.String str33 = copticChronology21.toString();
        boolean boolean34 = dateTimeFieldType18.isSupported((org.joda.time.Chronology) copticChronology21);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTime.Property property36 = dateTime3.property(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfMonth" + "'", str19, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertNotNull(copticChronology21);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 57634718L + "'", long27 == 57634718L);
        org.junit.Assert.assertNotNull(durationField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str29, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str33, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test17073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17073");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        long long4 = dateTimeZone2.nextTransition((long) 893);
        java.lang.String str6 = dateTimeZone2.getName((long) 100);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 893, dateTimeZone10);
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundFloorCopy();
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 893L + "'", long4 == 893L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test17074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17074");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.secondOfMinute();
        org.joda.time.DurationField durationField6 = copticChronology4.months();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology4.getZone();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withZone(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(53716584);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeFormatter9.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withPivotYear(29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter9.withDefaultYear((-6048001));
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter9.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(0L, dateTimeZone17);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test17075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17075");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = localDateTime8.getFieldType(2);
        java.lang.String str12 = dateTimeFieldType11.getName();
        int int13 = localDateTime4.get(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withYearOfCentury(2);
        org.joda.time.DateTime dateTime16 = localDateTime15.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.property(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfMonth" + "'", str12, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test17076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17076");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.months();
        org.joda.time.DurationField durationField9 = copticChronology0.days();
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DurationField durationField11 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test17077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17077");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(category0, locale4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime10 = dateTime7.withFieldAdded(durationFieldType8, 0);
        org.joda.time.DateTime.Property property11 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property11.withMinimumValue();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withEra(1);
        int int18 = localDateTime17.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime17.getFieldType(2);
        java.lang.String str21 = dateTimeFieldType20.getName();
        int int22 = dateTime12.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime24 = dateTime12.plusMinutes(53631987);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime27 = dateTime24.withFieldAdded(durationFieldType25, 796);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime32 = dateTime29.withFieldAdded(durationFieldType30, 0);
        org.joda.time.DateTime.Property property33 = dateTime29.minuteOfDay();
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withEra(1);
        int int40 = localDateTime39.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDateTime39.getFieldType(2);
        java.lang.String str43 = dateTimeFieldType42.getName();
        int int44 = dateTime34.get(dateTimeFieldType42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfWeek(2);
        boolean boolean49 = dateTime34.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime54 = dateTime51.withFieldAdded(durationFieldType52, 0);
        org.joda.time.DateTime.Property property55 = dateTime51.minuteOfDay();
        org.joda.time.DateTime dateTime56 = property55.withMinimumValue();
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withEra(1);
        int int62 = localDateTime61.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = localDateTime61.getFieldType(2);
        java.lang.String str65 = dateTimeFieldType64.getName();
        int int66 = dateTime56.get(dateTimeFieldType64);
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstance();
        long long73 = copticChronology67.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField74 = copticChronology67.months();
        java.lang.String str75 = copticChronology67.toString();
        int int76 = copticChronology67.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField77 = copticChronology67.weekyears();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology67.dayOfYear();
        java.lang.String str79 = copticChronology67.toString();
        boolean boolean80 = dateTimeFieldType64.isSupported((org.joda.time.Chronology) copticChronology67);
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType64.getDurationType();
        boolean boolean82 = dateTime34.isSupported(dateTimeFieldType64);
        boolean boolean83 = dateTime27.equals((java.lang.Object) dateTimeFieldType64);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.DateTime dateTime85 = dateTime27.plus(readableDuration84);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.DateTime dateTime88 = dateTime27.withDurationAdded(readableDuration86, 956);
        org.joda.time.DateMidnight dateMidnight89 = dateTime27.toDateMidnight();
        boolean boolean90 = locale4.equals((java.lang.Object) dateMidnight89);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "dayOfMonth" + "'", str21, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 21 + "'", int22 == 21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "dayOfMonth" + "'", str43, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "dayOfMonth" + "'", str65, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 21 + "'", int66 == 21);
        org.junit.Assert.assertNotNull(copticChronology67);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 57634718L + "'", long73 == 57634718L);
        org.junit.Assert.assertNotNull(durationField74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str75, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str79, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test17078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17078");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime5 = property3.withMaximumValue();
        int int6 = localTime5.getMillisOfSecond();
        org.joda.time.LocalTime.Property property7 = localTime5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, 0);
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfMinute();
        org.joda.time.DateTime.Property property17 = dateTime15.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 0);
        org.joda.time.DateTime.Property property23 = dateTime19.minuteOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfMinute();
        java.lang.String str26 = property25.toString();
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str29 = property25.getAsShortText(locale28);
        java.lang.String str30 = property17.getAsShortText(locale28);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = property17.getAsText(locale31);
        java.lang.String str33 = locale31.getDisplayVariant();
        int int34 = property7.getMaximumTextLength(locale31);
        java.lang.String str35 = locale31.getVariant();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 269 + "'", int6 == 269);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[secondOfMinute]" + "'", str26, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "54180" + "'", str30, "54180");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "54180" + "'", str32, "54180");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test17079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17079");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime1.toGregorianCalendar();
        int int7 = gregorianCalendar6.getFirstDayOfWeek();
        gregorianCalendar6.setMinimalDaysInFirstWeek((int) (byte) 1);
        gregorianCalendar6.setFirstDayOfWeek((int) '#');
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        boolean boolean14 = property13.isLeap();
        boolean boolean15 = gregorianCalendar6.before((java.lang.Object) property13);
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfCeilingCopy();
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.dayOfWeek();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-03-01T00:00:00.000" + "'", str17, "2022-03-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test17080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17080");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(9);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(241);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.plus(readablePeriod7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(3);
        long long11 = dateTime8.getMillis();
        java.lang.String str12 = dateTime8.toString();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.minus(readablePeriod13);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime8.toGregorianCalendar();
        java.lang.String str16 = gregorianCalendar15.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455787063L + "'", long11 == 1645455787063L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T15:03:07.348+00:00:00.285" + "'", str12, "2022-02-21T15:03:07.348+00:00:00.285");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.util.GregorianCalendar[time=1645455787063,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=7,MILLISECOND=348,ZONE_OFFSET=285,DST_OFFSET=0]" + "'", str16, "java.util.GregorianCalendar[time=1645455787063,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=7,MILLISECOND=348,ZONE_OFFSET=285,DST_OFFSET=0]");
    }

    @Test
    public void test17081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17081");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean10 = localDateTime5.isSupported(dateTimeFieldType9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withMillisOfDay(879);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        int int20 = localDateTime19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = localDateTime19.getFieldType(2);
        boolean boolean23 = localDateTime15.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDateTime5.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.property(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime28 = property27.withMaximumValue();
        int int29 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.dayOfYear();
        int int32 = localDateTime28.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minusMillis(53679726);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 26 + "'", int32 == 26);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test17082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17082");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = copticChronology0.getZone();
        long long15 = dateTimeZone11.convertLocalToUTC(852L, true, (long) 616);
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str8, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 567L + "'", long15 == 567L);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17083");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.dayOfMonth();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test17084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17084");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category13, locale14);
        java.util.Calendar calendar16 = dateTime12.toCalendar(locale14);
        calendar16.setLenient(true);
        calendar16.set(258, (int) (short) 1, 0);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("\u4e2d\u6587\u4e2d\u56fd)");
        calendar16.setTimeZone(timeZone24);
        timeZone24.setRawOffset(631);
        timeZone24.setID("53764720");
        timeZone24.setRawOffset(54055);
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance();
        long long38 = copticChronology32.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField39 = copticChronology32.halfdayOfDay();
        org.joda.time.Chronology chronology40 = copticChronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.hourOfDay();
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale47 = new java.util.Locale("clockhourOfHalfday", "English (Canada)", "");
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str51 = nameProvider43.getName(locale47, "2022-02-21T14:54:51.332", "\u52a0\u62ff\u5927");
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str55 = nameProvider43.getShortName(locale52, "894", "87");
        java.lang.String str56 = dateTimeField41.getAsText((-1), locale52);
        java.lang.String str57 = locale52.getDisplayLanguage();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone24, locale52);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"53764720\",offset=54055,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=258,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(copticChronology32);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 57634718L + "'", long38 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertEquals(locale47.toString(), "clockhourofhalfday_ENGLISH (CANADA)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "clockhourofhalfday_ENGLISH (CANADA)");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-1" + "'", str56, "-1");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str57, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645455787126,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"53764720\",offset=54055,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=4,SECOND=1,MILLISECOND=181,ZONE_OFFSET=54055,DST_OFFSET=0]");
    }

    @Test
    public void test17085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17085");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 510);
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        long long5 = dateTimeZone3.nextTransition((long) 893);
        java.lang.String str7 = dateTimeZone3.getName((long) 100);
        org.joda.time.Interval interval8 = localDate1.toInterval(dateTimeZone3);
        org.joda.time.LocalDate localDate10 = localDate1.plusWeeks(136);
        java.util.Date date11 = localDate1.toDate();
        date11.setMonth(122);
        java.lang.String str14 = date11.toLocaleString();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 893L + "'", long5 == 893L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Mar 01 00:00:00 GMT 1980");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1980-3-1 0:00:00" + "'", str14, "1980-3-1 0:00:00");
    }

    @Test
    public void test17086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17086");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(893);
        int int6 = localDateTime3.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withMillisOfDay(53924300);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(469);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(802);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 802 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test17087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17087");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.halfdays();
        long long12 = copticChronology0.add((long) 272, 40140000L, 538);
        org.joda.time.DurationField durationField13 = copticChronology0.days();
        org.joda.time.DurationField durationField14 = copticChronology0.centuries();
        org.joda.time.DurationFieldType durationFieldType15 = durationField14.getType();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        long long23 = copticChronology17.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField24 = copticChronology17.months();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology17.era();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology17.clockhourOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 15, (org.joda.time.Chronology) copticChronology17);
        org.joda.time.Chronology chronology28 = copticChronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology17.era();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology17.secondOfMinute();
        org.joda.time.DurationField durationField32 = durationFieldType15.getField((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DurationField durationField33 = copticChronology17.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 21595320272L + "'", long12 == 21595320272L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(copticChronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 57634718L + "'", long23 == 57634718L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test17088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17088");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("hi!");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        int int4 = calendar3.getFirstDayOfWeek();
        calendar3.clear();
        java.util.TimeZone timeZone6 = calendar3.getTimeZone();
        timeZone6.setRawOffset(895);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        int int12 = dateTime11.getMinuteOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks(10);
        org.joda.time.DateTime.Property property15 = dateTime11.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime11.toGregorianCalendar();
        gregorianCalendar16.clear();
        java.util.Locale locale20 = new java.util.Locale("hi!", "");
        boolean boolean21 = locale20.hasExtensions();
        boolean boolean22 = gregorianCalendar16.after((java.lang.Object) locale20);
        java.lang.String str23 = timeZone6.getDisplayName(locale20);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=895,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455787236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=895,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=131,ZONE_OFFSET=895,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 903 + "'", int12 == 903);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GMT+00:00" + "'", str23, "GMT+00:00");
    }

    @Test
    public void test17089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17089");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int4 = localDateTime2.get(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy(893L);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        int int17 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology18 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.withCenturyOfEra(53663);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.year();
        int int23 = localDateTime21.getDayOfMonth();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21 + "'", int23 == 21);
    }

    @Test
    public void test17090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17090");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = property14.setCopy("2022-02-21T15:02:05.161");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:02:05.161\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17091");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.Instant instant13 = instant0.withMillis((long) 6);
        org.joda.time.DateTime dateTime14 = instant0.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property16.getAsText(locale17);
        org.joda.time.DateTime dateTime20 = property16.addWrapFieldToCopy(990);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(54107045);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54107045 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test17092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17092");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        int int5 = dateTime4.getMillisOfSecond();
        java.util.Date date6 = dateTime4.toDate();
        date6.setSeconds(22);
        date6.setDate(849);
        int int11 = date6.getTimezoneOffset();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromDateFields(date6);
        int int13 = localDateTime12.getYearOfEra();
        int int14 = localDateTime12.getEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusDays(904);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 595 + "'", int5 == 595);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Aug 26 15:03:22 GMT 2024");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2024 + "'", int13 == 2024);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test17093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17093");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        int int38 = localDate37.getYear();
        int int39 = localDate37.getDayOfWeek();
        org.joda.time.LocalDate localDate41 = localDate37.plusDays(669);
        org.joda.time.LocalDate localDate43 = localDate37.plusMonths(16);
        org.joda.time.LocalDate localDate45 = localDate37.minusMonths(53640000);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = localDate37.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = localDate37.toString("15 Feb 2022 15:01:53 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
    }

    @Test
    public void test17094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17094");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(394, (-283), 830);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -283 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17095");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        long long4 = dateTimeZone2.nextTransition((long) 893);
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = dateTimeZone2.getName((long) (short) 0, locale6);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        java.lang.String str10 = dateTimeZone2.getName((long) 12);
        java.lang.String str11 = dateTimeZone2.toString();
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        boolean boolean13 = durationFieldType0.isSupported((org.joda.time.Chronology) copticChronology12);
        java.lang.String str14 = copticChronology12.toString();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology12.hourOfHalfday();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 893L + "'", long4 == 893L);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[UTC]" + "'", str14, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17096");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfWeek();
        org.joda.time.DurationField durationField9 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test17097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17097");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra(21);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime44 = dateTime41.withFieldAdded(durationFieldType42, 0);
        org.joda.time.DateTime.Property property45 = dateTime41.minuteOfDay();
        org.joda.time.DateTime dateTime46 = property45.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property47 = dateTime46.secondOfMinute();
        org.joda.time.DateTime.Property property48 = dateTime46.secondOfDay();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime51 = dateTime46.withDurationAdded(readableDuration49, 6);
        org.joda.time.LocalDate localDate52 = dateTime51.toLocalDate();
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime();
        org.joda.time.DateTime dateTime54 = dateTime53.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime54.getZone();
        org.joda.time.DateTime dateTime56 = localDate39.toDateTimeAtMidnight(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = localDate39.plusYears(53850682);
        org.joda.time.LocalDate.Property property59 = localDate58.monthOfYear();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        int int62 = localDateTime61.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.plusMillis(53642140);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.monthOfYear();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withMillisOfSecond(225);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str69 = dateTimeFieldType68.getName();
        int int70 = localDateTime64.indexOf(dateTimeFieldType68);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = localDate58.compareTo((org.joda.time.ReadablePartial) localDateTime64);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "monthOfYear" + "'", str69, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test17098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17098");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        boolean boolean1 = instant0.isAfterNow();
        org.joda.time.Instant instant3 = instant0.plus((long) 53671795);
        org.joda.time.Chronology chronology4 = instant0.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.year();
        java.util.Locale locale10 = new java.util.Locale("hi!", "");
        boolean boolean11 = locale10.hasExtensions();
        long long12 = dateTimeField5.set(0L, "895", locale10);
        int int14 = dateTimeField5.getLeapAmount((long) 389);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        int int17 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusHours((int) (byte) -1);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        int int24 = localDateTime23.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDateTime23.getFieldType(2);
        java.lang.String str27 = dateTimeFieldType26.getName();
        int int28 = localDateTime19.get(dateTimeFieldType26);
        int int29 = localDateTime19.getYear();
        int int30 = localDateTime19.getYearOfEra();
        int int31 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-33923664000000L) + "'", long12 == (-33923664000000L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "dayOfMonth" + "'", str27, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 21 + "'", int28 == 21);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
    }

    @Test
    public void test17099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17099");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 6);
        java.util.Date date4 = new java.util.Date((long) (byte) 0);
        java.util.Date date6 = new java.util.Date((long) (byte) 0);
        int int7 = date6.getMinutes();
        int int8 = date6.getMinutes();
        boolean boolean9 = date4.before(date6);
        java.util.Calendar.Builder builder10 = builder0.setInstant(date6);
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder13 = builder11.setInstant((long) 6);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        timeZone14.setID("hi!");
        java.util.Calendar.Builder builder17 = builder13.setTimeZone(timeZone14);
        timeZone14.setRawOffset(20);
        int int21 = timeZone14.getOffset(25L);
        java.util.Calendar.Builder builder22 = builder0.setTimeZone(timeZone14);
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder25 = builder23.setInstant((long) 6);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        timeZone26.setID("hi!");
        java.util.Calendar.Builder builder29 = builder25.setTimeZone(timeZone26);
        timeZone26.setRawOffset(20);
        timeZone26.setRawOffset(852);
        boolean boolean34 = timeZone14.hasSameRules(timeZone26);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.util.Date date38 = new java.util.Date((long) (byte) 0);
        int int39 = date38.getMinutes();
        int int40 = date38.getDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) date38, chronology41);
        int int43 = localDate42.getDayOfWeek();
        org.joda.time.LocalDate localDate45 = localDate42.minusWeeks(272);
        org.joda.time.Instant instant47 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone48 = instant47.getZone();
        long long50 = dateTimeZone48.nextTransition((long) 893);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = dateTimeZone48.getName((long) (short) 0, locale52);
        java.lang.String str54 = localDate42.toString("+00:00", locale52);
        java.lang.String str55 = locale52.getISO3Country();
        java.lang.String str56 = locale35.getDisplayCountry(locale52);
        java.lang.String str57 = locale35.getLanguage();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone14, locale35);
        java.lang.String str59 = locale35.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 893L + "'", long50 == 893L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CAN" + "'", str55, "CAN");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ko" + "'", str57, "ko");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645455787410,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=20,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=7,MILLISECOND=430,ZONE_OFFSET=20,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test17100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17100");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 14);
        java.util.Calendar.Builder builder4 = builder2.setLenient(false);
        java.util.Calendar calendar5 = builder2.build();
        java.util.Calendar.Builder builder7 = builder2.setLenient(true);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        timeZone8.setID("hi!");
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8);
        boolean boolean12 = calendar11.isWeekDateSupported();
        java.util.Date date13 = calendar11.getTime();
        java.util.Calendar.Builder builder14 = builder7.setInstant(date13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder18 = builder7.setDate(2028, 53968, 53849022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=14,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=14,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455787428,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=7,MILLISECOND=428,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 21 15:03:07 GMT 2022");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test17101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17101");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        java.lang.String str7 = copticChronology0.toString();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.year();
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = durationField10.subtract((long) 53937143, (long) 53674252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str7, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test17102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17102");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.setCopy(437);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        org.joda.time.DurationField durationField12 = property10.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test17103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17103");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.hourOfHalfday();
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.secondOfMinute();
        org.joda.time.DurationField durationField17 = copticChronology15.months();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology15.weekyearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localDateTime25.getFields();
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.year();
        boolean boolean32 = localDateTime25.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.minusWeeks(20);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime25.plusSeconds(17);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        long long39 = copticChronology15.set((org.joda.time.ReadablePartial) localDateTime36, (long) 53642140);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.withDayOfYear(348);
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.lang.String str43 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime36, locale42);
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withEra(1);
        int int49 = localDateTime48.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = localDateTime48.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusSeconds((int) (short) 1);
        int int54 = localDateTime48.getYear();
        org.joda.time.LocalDateTime.Property property55 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime.Property property56 = localDateTime48.secondOfMinute();
        int[] intArray57 = localDateTime48.getValues();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withEra(1);
        int int62 = localDateTime61.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = localDateTime61.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.plusSeconds((int) (byte) 10);
        int int67 = localDateTime66.getYearOfCentury();
        java.lang.String str68 = localDateTime66.toString();
        org.joda.time.Instant instant69 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone70 = instant69.getZone();
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int73 = localDateTime71.get(dateTimeFieldType72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime71.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime76 = property74.roundHalfFloorCopy();
        boolean boolean77 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withDayOfMonth(22);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.withDurationAdded(readableDuration80, 53640);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str86 = dateTimeFieldType85.getName();
        org.joda.time.LocalDateTime.Property property87 = localDateTime84.property(dateTimeFieldType85);
        boolean boolean88 = localDateTime48.isSupported(dateTimeFieldType85);
        boolean boolean89 = strSet44.equals((java.lang.Object) dateTimeFieldType85);
        java.util.Date date96 = new java.util.Date(897, 476, 860, 0, 751, 53875100);
        int int97 = date96.getYear();
        boolean boolean98 = strSet44.remove((java.lang.Object) date96);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57634718L + "'", long7 == 57634718L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10598051004467L + "'", long39 == 10598051004467L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "3" + "'", str43, "3");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[2022, 2, 21, 54187752]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 22 + "'", int67 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-21T15:03:17.752" + "'", str68, "2022-02-21T15:03:17.752");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "monthOfYear" + "'", str86, "monthOfYear");
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals(date96.toString(), "Sun Sep 23 01:49:20 GMT 2840");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 940 + "'", int97 == 940);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test17104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17104");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Calendar calendar9 = dateTime6.toCalendar(locale8);
        java.lang.String str10 = locale8.toLanguageTag();
        java.lang.String str12 = locale8.getExtension('u');
        java.util.Locale.setDefault(locale8);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455779715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=0,MILLISECOND=0,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en-CA" + "'", str10, "en-CA");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test17105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17105");
        java.util.Date date6 = new java.util.Date(393, 532, 53, 53861721, 884, 459);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Dec 26 23:51:39 GMT 8481");
    }

    @Test
    public void test17106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17106");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime5 = property3.withMaximumValue();
        int int6 = localTime5.getMillisOfSecond();
        org.joda.time.LocalTime.Property property7 = localTime5.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.LocalTime localTime9 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property7.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property7.setCopy("1970-01-01T00:00:00.035Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.035Z\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 843 + "'", int6 == 843);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test17107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17107");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.weekOfWeekyear();
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property5.setCopy("14:59:49.404", locale7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"14:59:49.404\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test17108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17108");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = property8.getMaximumValueOverall();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone13.nextTransition((long) 893);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = dateTimeZone13.getName((long) (short) 0, locale17);
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant22 = dateTime21.toInstant();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded(readableDuration23, 16);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        java.lang.String str27 = property26.getName();
        org.joda.time.DateTime dateTime29 = property26.addWrapFieldToCopy(2124);
        org.joda.time.DateTime dateTime30 = property26.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths(1439);
        int int33 = dateTime30.getEra();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 893L + "'", long15 == 893L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfHour" + "'", str27, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test17109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17109");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minusWeeks(20);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.plusSeconds(17);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(0);
        int int18 = property15.get();
        org.joda.time.LocalDateTime localDateTime20 = property15.addToCopy((long) 163);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMonths(292272708);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test17110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17110");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        long long9 = dateTimeZone7.nextTransition((long) 893);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        long long13 = dateTimeZone7.getMillisKeepLocal(dateTimeZone11, 0L);
        long long16 = dateTimeZone7.convertLocalToUTC((long) 11, false);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra(1);
        int int22 = localDateTime21.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = localDateTime21.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusSeconds((int) (short) 1);
        int int27 = localDateTime26.getHourOfDay();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfCeilingCopy();
        java.util.Locale locale31 = java.util.Locale.UK;
        org.joda.time.LocalDateTime localDateTime32 = property28.setCopy("0", locale31);
        java.lang.String str33 = dateTimeZone7.getName(31536900000L, locale31);
        boolean boolean35 = dateTimeZone7.isStandardOffset((long) 993);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withZone(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime38 = dateTimeFormatter2.parseLocalTime("DurationField[minutes]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 893L + "'", long9 == 893L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 11L + "'", long16 == 11L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test17111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17111");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        int int6 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.minusWeeks(272);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfYear();
        org.joda.time.LocalDate localDate10 = property9.roundHalfCeilingCopy();
        int int11 = property9.getMaximumValueOverall();
        org.joda.time.LocalDate localDate12 = property9.withMinimumValue();
        org.joda.time.LocalDate localDate14 = property9.addToCopy(879);
        int[] intArray15 = localDate14.getValues();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 366 + "'", int11 == 366);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[1967, 3, 13]");
    }

    @Test
    public void test17112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17112");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.halfdays();
        long long12 = copticChronology0.add((long) 272, 40140000L, 538);
        org.joda.time.DurationField durationField13 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.minuteOfHour();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField16 = copticChronology0.years();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 21595320272L + "'", long12 == 21595320272L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test17113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17113");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.lang.String str5 = dateTimeZone1.getName((long) 100);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int7 = localDate6.getEra();
        org.joda.time.LocalDate localDate9 = localDate6.minusDays(401);
        int int10 = localDate6.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test17114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17114");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfDay();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded(readableDuration9, 6);
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        org.joda.time.DateTime dateTime17 = dateTime14.minusWeeks(54037905);
        org.joda.time.DateTime.Property property18 = dateTime14.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime14.withDayOfMonth(56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test17115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17115");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.era();
        org.joda.time.DurationField durationField9 = copticChronology0.weeks();
        org.joda.time.DurationField durationField10 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = copticChronology0.get(readablePeriod12, (long) 990);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test17116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17116");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfWeek(2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) dateTime1);
        int int5 = dateTime4.getEra();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime4.toTimeOfDay();
        org.joda.time.DateTime dateTime8 = dateTime4.minusMillis((int) '#');
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.DateTime dateTime11 = dateTime8.withWeekyear((int) 'x');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        int int14 = localDateTime13.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusMillis(53642140);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMillisOfSecond(225);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str21 = dateTimeFieldType20.getName();
        int int22 = localDateTime16.indexOf(dateTimeFieldType20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime11.withField(dateTimeFieldType20, 54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "monthOfYear" + "'", str21, "monthOfYear");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test17117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17117");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = property8.getMaximumValueOverall();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone13.nextTransition((long) 893);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = dateTimeZone13.getName((long) (short) 0, locale17);
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant22 = dateTime21.toInstant();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded(readableDuration23, 16);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillis(61879161600L);
        org.joda.time.DateTime.Property property28 = dateTime25.secondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime25.plusYears(599);
        org.joda.time.DateTime.Property property31 = dateTime25.weekyear();
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime25.toYearMonthDay();
        org.joda.time.DateTime dateTime34 = dateTime25.plusWeeks(53737076);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 893L + "'", long15 == 893L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test17118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17118");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 1, 7, (int) (short) 0, 276);
        org.joda.time.ReadablePartial readablePartial5 = null;
        org.joda.time.LocalTime localTime6 = localTime4.withFields(readablePartial5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime9 = localTime4.withMillisOfDay(53975756);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Calendar calendar13 = dateTime11.toCalendar(locale12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields(calendar13);
        org.joda.time.LocalDate localDate16 = localDate14.withYear(1970);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        java.util.Date date35 = new java.util.Date((long) (byte) 0);
        int int36 = date35.getMinutes();
        int int37 = date35.getDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) date35, chronology38);
        org.joda.time.LocalDate localDate41 = localDate39.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant42 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone43 = instant42.getZone();
        long long45 = dateTimeZone43.nextTransition((long) 893);
        org.joda.time.Instant instant46 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone47 = instant46.getZone();
        long long49 = dateTimeZone43.getMillisKeepLocal(dateTimeZone47, 0L);
        org.joda.time.DateTime dateTime50 = localDate39.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.DateTime dateTime51 = localDate22.toDateTimeAtStartOfDay(dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDate localDate54 = localDate22.withPeriodAdded(readablePeriod52, 122);
        int int55 = localDate54.getYear();
        org.joda.time.LocalDate localDate57 = localDate54.plusYears(510);
        java.util.Date date59 = new java.util.Date((long) (byte) 0);
        int int60 = date59.getMinutes();
        int int61 = date59.getDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) date59, chronology62);
        org.joda.time.LocalDate localDate65 = localDate63.withYear((-1));
        org.joda.time.LocalDate.Property property66 = localDate65.yearOfEra();
        org.joda.time.LocalDate localDate67 = property66.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getDurationType();
        org.joda.time.LocalDate localDate71 = localDate67.withFieldAdded(durationFieldType69, 16);
        boolean boolean72 = localDate57.isSupported(durationFieldType69);
        boolean boolean73 = localDate14.isSupported(durationFieldType69);
        org.joda.time.chrono.CopticChronology copticChronology74 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField75 = copticChronology74.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField76 = copticChronology74.dayOfYear();
        org.joda.time.DateTimeField dateTimeField77 = copticChronology74.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField78 = copticChronology74.halfdayOfDay();
        org.joda.time.DurationField durationField79 = copticChronology74.years();
        boolean boolean80 = durationFieldType69.isSupported((org.joda.time.Chronology) copticChronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime82 = localTime9.withFieldAdded(durationFieldType69, 53845610);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455787765,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=50,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 893L + "'", long45 == 893L);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertEquals(date59.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(copticChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test17119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17119");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.plus((long) 53);
        org.joda.time.Instant instant3 = instant0.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant0.minus(readableDuration4);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.Instant instant8 = instant5.withMillis((-53663331L));
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test17120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17120");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        long long4 = dateTimeZone2.nextTransition((long) 893);
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = instant5.getZone();
        long long8 = dateTimeZone2.getMillisKeepLocal(dateTimeZone6, 0L);
        java.lang.String str10 = dateTimeZone6.getName((long) 5);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        java.util.Date date14 = dateTime12.toDate();
        int int15 = dateTime12.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean17 = dateTime12.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime12.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 893L + "'", long4 == 893L);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon Feb 21 15:03:07 GMT 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test17121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17121");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:55:51.436");
        java.lang.String str2 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
    }

    @Test
    public void test17122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17122");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList11, strMap12);
        boolean boolean14 = strSet1.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11);
        java.util.Date date16 = new java.util.Date((long) (byte) 0);
        int int17 = date16.getMinutes();
        int int18 = date16.getDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) date16, chronology19);
        org.joda.time.LocalDate localDate22 = localDate20.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        long long26 = dateTimeZone24.nextTransition((long) 893);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone28, 0L);
        org.joda.time.DateTime dateTime31 = localDate20.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.LocalDate localDate33 = localDate20.minusDays(20);
        boolean boolean34 = strSet1.contains((java.lang.Object) localDate20);
        org.joda.time.DateTime dateTime35 = localDate20.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property36 = localDate20.dayOfMonth();
        org.joda.time.LocalDate localDate37 = property36.withMinimumValue();
        java.util.Date date39 = new java.util.Date((long) (byte) 0);
        int int40 = date39.getMinutes();
        int int41 = date39.getDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) date39, chronology42);
        org.joda.time.LocalDate localDate45 = localDate43.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant46 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone47 = instant46.getZone();
        long long49 = dateTimeZone47.nextTransition((long) 893);
        org.joda.time.Instant instant50 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone51 = instant50.getZone();
        long long53 = dateTimeZone47.getMillisKeepLocal(dateTimeZone51, 0L);
        org.joda.time.DateTime dateTime54 = localDate43.toDateTimeAtMidnight(dateTimeZone47);
        java.util.Date date56 = new java.util.Date((long) (byte) 0);
        int int57 = date56.getMinutes();
        int int58 = date56.getDay();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) date56, chronology59);
        org.joda.time.LocalDate localDate62 = localDate60.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant63 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone64 = instant63.getZone();
        long long66 = dateTimeZone64.nextTransition((long) 893);
        org.joda.time.Instant instant67 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone68 = instant67.getZone();
        long long70 = dateTimeZone64.getMillisKeepLocal(dateTimeZone68, 0L);
        org.joda.time.DateTime dateTime71 = localDate60.toDateTimeAtMidnight(dateTimeZone64);
        org.joda.time.DateTime dateTime72 = localDate43.toDateTimeAtStartOfDay(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDate localDate75 = localDate43.withPeriodAdded(readablePeriod73, 122);
        org.joda.time.LocalDate localDate77 = localDate75.withYearOfEra(21);
        org.joda.time.LocalDate.Property property78 = localDate75.monthOfYear();
        org.joda.time.LocalDate.Property property79 = localDate75.dayOfWeek();
        org.joda.time.LocalDate localDate81 = localDate75.withYearOfEra(29);
        org.joda.time.LocalDate.Property property82 = localDate75.monthOfYear();
        org.joda.time.LocalDate localDate83 = property82.roundFloorCopy();
        int int84 = localDate37.compareTo((org.joda.time.ReadablePartial) localDate83);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 893L + "'", long26 == 893L);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertEquals(date39.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 893L + "'", long49 == 893L);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 893L + "'", long66 == 893L);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test17123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17123");
        java.util.Locale locale2 = new java.util.Locale("hi!", "");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        java.util.Date date5 = new java.util.Date((long) (byte) 0);
        java.util.Date date7 = new java.util.Date((long) (byte) 0);
        int int8 = date7.getMinutes();
        int int9 = date7.getMinutes();
        boolean boolean10 = date5.before(date7);
        date5.setHours(11);
        date5.setMinutes(852);
        java.lang.String str15 = date5.toGMTString();
        calendar3.setTime(date5);
        long long17 = calendar3.getTimeInMillis();
        java.util.Date date21 = new java.util.Date(943, 881, 5);
        date21.setDate(207);
        calendar3.setTime(date21);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=29883772800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2916,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=359,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 02 01:12:00 GMT 1970");
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2 Jan 1970 01:12:00 GMT" + "'", str15, "2 Jan 1970 01:12:00 GMT");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 90720000L + "'", long17 == 90720000L);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Dec 24 00:00:00 GMT 2916");
    }

    @Test
    public void test17124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17124");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455787891,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=7,MILLISECOND=891,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test17125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17125");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra(116);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusSeconds(176);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test17126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17126");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfWeek(2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) dateTime1);
        int int5 = dateTime4.getEra();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime4.toTimeOfDay();
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(21);
        org.joda.time.DateTime dateTime10 = dateTime8.withCenturyOfEra(887);
        int int11 = dateTime8.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.withDurationAdded(readableDuration12, 53976428);
        org.joda.time.Chronology chronology15 = dateTime8.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test17127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17127");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime localTime15 = localTime13.minusMinutes(21);
        org.joda.time.LocalTime.Property property16 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime19 = localTime17.plusMinutes((-552));
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfDay(379);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test17128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17128");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        long long4 = calendar3.getTimeInMillis();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        java.util.TimeZone timeZone6 = calendar3.getTimeZone();
        int int7 = calendar3.getWeekYear();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455787943,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=228,ZONE_OFFSET=285,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455787943L + "'", long4 == 1645455787943L);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test17129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17129");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        int int9 = localDateTime8.getYearOfCentury();
        java.lang.String str10 = localDateTime8.toString();
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDayOfMonth(22);
        int int22 = localDateTime18.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:03:18.244" + "'", str10, "2022-02-21T15:03:18.244");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 959 + "'", int22 == 959);
    }

    @Test
    public void test17130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17130");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfCentury(10);
        org.joda.time.LocalDate localDate24 = localDate22.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate26 = localDate24.minusYears(900000);
        org.joda.time.LocalDate.Property property27 = localDate24.dayOfMonth();
        org.joda.time.LocalDate localDate28 = property27.roundCeilingCopy();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test17131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17131");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField4 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField5 = copticChronology0.hours();
        long long8 = durationField5.add((long) 764, (long) 775);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2790000764L + "'", long8 == 2790000764L);
    }

    @Test
    public void test17132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17132");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.secondOfDay();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.era();
        int int11 = dateTimeField10.getMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test17133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17133");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DurationField durationField6 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfMonth();
        org.joda.time.DurationField durationField9 = copticChronology0.millis();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfHalfday();
        long long12 = dateTimeField10.roundHalfEven(1645455600016L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645455599715L + "'", long12 == 1645455599715L);
    }

    @Test
    public void test17134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17134");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        org.joda.time.LocalDate.Property property38 = localDate37.centuryOfEra();
        java.lang.String str39 = property38.getAsString();
        org.joda.time.LocalDate localDate40 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate41 = property38.getLocalDate();
        org.joda.time.LocalDate localDate42 = property38.roundFloorCopy();
        int int43 = localDate42.getYearOfEra();
        int int44 = localDate42.size();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "19" + "'", str39, "19");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1900 + "'", int43 == 1900);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
    }

    @Test
    public void test17135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17135");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(timeZone0);
        java.util.Date date3 = new java.util.Date((long) (byte) 0);
        int int4 = date3.getMinutes();
        int int5 = date3.getDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) date3, chronology6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate localDate10 = localDate7.minusWeeks(272);
        int int11 = localDate10.getDayOfYear();
        java.lang.String str12 = localDate10.toString();
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTime dateTime14 = localDate10.toDateTime(localTime13);
        org.joda.time.DateMidnight dateMidnight15 = localDate10.toDateMidnight();
        java.util.Date date16 = dateMidnight15.toDate();
        date16.setMinutes(324);
        calendar1.setTime(date16);
        boolean boolean21 = calendar1.after((java.lang.Object) "53820");
        long long22 = calendar1.getTimeInMillis();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-164489700285,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1964,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=289,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=24,SECOND=59,MILLISECOND=715,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 289 + "'", int11 == 289);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1964-10-15" + "'", str12, "1964-10-15");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Oct 15 04:24:59 GMT 1964");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-164489700285L) + "'", long22 == (-164489700285L));
    }

    @Test
    public void test17136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17136");
        java.util.Date date3 = new java.util.Date((int) (byte) 1, (int) (short) 1, 2);
        date3.setHours(28);
        int int6 = date3.getDate();
        org.junit.Assert.assertEquals(date3.toString(), "Sun Feb 03 04:00:00 GMT 1901");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test17137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17137");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "DateTimeField[yearOfCentury]", "100", "gregory", "2022-02-21T14:53:54.648", "53640", "DateTimeField[yearOfCentury]", "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList16);
        boolean boolean19 = strSet9.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        int int20 = strSet9.size();
        java.lang.String[] strArray22 = java.util.TimeZone.getAvailableIDs(14);
        java.io.Serializable[] serializableArray23 = strSet9.toArray((java.io.Serializable[]) strArray22);
        boolean boolean24 = strSet9.isEmpty();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test17138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17138");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 612);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withPeriodAdded(readablePeriod2, 54090);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test17139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17139");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        java.lang.String str9 = copticChronology1.toString();
        int int10 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.monthOfYear();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 43);
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance();
        long long20 = copticChronology14.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology14.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology14.clockhourOfDay();
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.Instant instant25 = instant23.withMillis((long) 1);
        org.joda.time.Instant instant26 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone27 = instant26.getZone();
        long long29 = dateTimeZone27.nextTransition((long) 893);
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone31, 0L);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((java.lang.Object) instant23, dateTimeZone31);
        org.joda.time.LocalTime localTime36 = localTime34.minusMillis(12);
        org.joda.time.LocalTime localTime38 = localTime34.plusMillis((int) (short) 10);
        int[] intArray40 = copticChronology14.get((org.joda.time.ReadablePartial) localTime38, (long) 17);
        int int41 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localTime13, intArray40);
        java.util.Calendar.Builder builder42 = builder0.setFields(intArray40);
        java.util.Calendar.Builder builder46 = builder42.setTimeOfDay(670, (int) (short) 100, 437);
        java.util.Calendar.Builder builder50 = builder42.setWeekDate(993, 0, 241);
        java.util.Calendar.Builder builder55 = builder42.setTimeOfDay(272, 437, 669, 902);
        java.util.Calendar.Builder builder59 = builder42.setWeekDate(53728689, (int) ' ', 53737076);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder61 = builder42.setCalendarType("Chinesisch");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: Chinesisch");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57634718L + "'", long7 == 57634718L);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str9, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology14);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 57634718L + "'", long20 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 893L + "'", long29 == 893L);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 302]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 13 + "'", int41 == 13);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test17140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17140");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int4 = localDateTime2.get(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy(893L);
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField9 = property5.getRangeDurationField();
        int int12 = durationField9.getValue((long) 188, 10713481236013L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test17141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17141");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        int int8 = calendar7.getWeeksInWeekYear();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645455788143,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=143,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
    }

    @Test
    public void test17142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17142");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.addWrapFieldToCopy(54078704);
        org.joda.time.LocalTime localTime7 = property4.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test17143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17143");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime1.toGregorianCalendar();
        int int7 = gregorianCalendar6.getFirstDayOfWeek();
        gregorianCalendar6.setMinimalDaysInFirstWeek((int) (byte) 1);
        gregorianCalendar6.setFirstDayOfWeek((int) '#');
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        boolean boolean14 = property13.isLeap();
        boolean boolean15 = gregorianCalendar6.before((java.lang.Object) property13);
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfCeilingCopy();
        java.lang.String str18 = localDateTime16.toString("+08:00");
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plus(readablePeriod19);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+08:00" + "'", str18, "+08:00");
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test17144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17144");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime19 = property15.addCopy(1645455446792L);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfMonth();
        int int24 = dateTimeField22.getMinimumValue((-674704799L));
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test17145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17145");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("hi!");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        int int4 = calendar3.getFirstDayOfWeek();
        calendar3.setFirstDayOfWeek(348);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromCalendarFields(calendar3);
        calendar3.clear();
        int int9 = calendar3.getFirstDayOfWeek();
        calendar3.setMinimalDaysInFirstWeek(56841456);
        calendar3.clear();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=348,minimalDaysInFirstWeek=56841456,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 348 + "'", int9 == 348);
    }

    @Test
    public void test17146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17146");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField9 = copticChronology1.months();
        boolean boolean10 = durationFieldType0.isSupported((org.joda.time.Chronology) copticChronology1);
        org.joda.time.Chronology chronology11 = copticChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.weekyear();
        java.util.Set<java.lang.String> strSet15 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "DateTimeField[yearOfCentury]", "100", "gregory", "2022-02-21T14:53:54.648", "53640", "DateTimeField[yearOfCentury]", "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList32);
        boolean boolean35 = strSet25.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(2);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) dateTime37);
        int int41 = dateTime40.getYearOfCentury();
        boolean boolean42 = strSet25.remove((java.lang.Object) int41);
        strSet25.clear();
        java.util.Iterator<java.lang.String> strItor44 = strSet25.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList50);
        java.lang.String[] strArray54 = new java.lang.String[] { "Property[secondOfMinute]" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.lang.String str57 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, strMap58);
        boolean boolean60 = strSet25.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList59, strMap61);
        boolean boolean63 = strSet15.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream64 = languageRangeList59.stream();
        boolean boolean65 = copticChronology1.equals((java.lang.Object) languageRangeList59);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream66 = languageRangeList59.parallelStream();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57634718L + "'", long7 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(languageRangeStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(languageRangeStream66);
    }

    @Test
    public void test17147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17147");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.setCopy(437);
        int int10 = property5.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime11 = property5.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = localDateTime11.toString("DateTimeField[era]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test17148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17148");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        calendar3.roll(3, true);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar3.getMaximum((-42));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -42");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French" + "'", str2, "French");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=10,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=246,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test17149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17149");
        java.util.Date date3 = new java.util.Date(0, 650, 335);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromDateFields(date3);
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = localDateTime8.get(dateTimeFieldType9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = property11.roundHalfEvenCopy();
        java.lang.String str15 = property11.toString();
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale19 = new java.util.Locale("53664488");
        java.lang.String str20 = locale17.getDisplayScript(locale19);
        java.lang.String str21 = property11.getAsText(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = localTime4.toString("", locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Sat Jan 29 00:00:00 GMT 1955");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[millisOfSecond]" + "'", str15, "Property[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals(locale19.toString(), "53664488");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "253" + "'", str21, "253");
    }

    @Test
    public void test17150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17150");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withYear(348);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plus(readableDuration13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear(9);
        int int19 = dateTime18.getMonthOfYear();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMillis(53638);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis(40);
        org.joda.time.DateTime dateTime24 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test17151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17151");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645455588983L);
    }

    @Test
    public void test17152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17152");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1645455475289L);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekyear(9);
        int int7 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, 0);
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfMinute();
        org.joda.time.DateTime.Property property17 = dateTime15.secondOfDay();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.withDurationAdded(readableDuration18, 6);
        org.joda.time.LocalDate localDate21 = dateTime20.toLocalDate();
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight24 = dateTime23.toDateMidnight();
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.util.Calendar calendar26 = dateMidnight24.toCalendar(locale25);
        boolean boolean27 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateMidnight24);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645401599715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test17153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17153");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks(13);
        int int10 = localDate7.getWeekyear();
        java.lang.String[] strArray12 = java.util.TimeZone.getAvailableIDs((int) (short) -1);
        boolean boolean13 = localDate7.equals((java.lang.Object) strArray12);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant14.withDurationAdded(readableDuration16, 2);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTime((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Instant instant21 = instant18.withMillis((long) 53663);
        org.joda.time.Instant instant23 = instant21.minus((long) 365);
        org.joda.time.Instant instant25 = instant23.minus(291834176L);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test17154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17154");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) 0);
        int int2 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMonths(44);
        int int5 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withEra(0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime11.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime11.getFields();
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.year();
        boolean boolean18 = localDateTime11.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.minusWeeks(20);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.plusSeconds(17);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = property23.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plus(readableDuration26);
        org.joda.time.Instant instant28 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localDateTime30.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        int int34 = localDateTime30.get(dateTimeFieldType32);
        boolean boolean35 = localDateTime25.isSupported(dateTimeFieldType32);
        boolean boolean36 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField38 = localDateTime25.getField(54055207);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54055207");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test17155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17155");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(130690782720000000L, dateTimeZone1);
    }

    @Test
    public void test17156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17156");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withYear(348);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMillis(387);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withMillisOfSecond(54012530);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54012530 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17157");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 0, locale5);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.lang.String str9 = dateTimeZone1.getName((long) 12);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.era();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (short) 0);
        int int15 = localDateTime14.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusWeeks(222);
        int[] intArray19 = copticChronology11.get((org.joda.time.ReadablePartial) localDateTime17, (long) 54052779);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1686, 4, 23, 54052779]");
    }

    @Test
    public void test17158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17158");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("minuteOfDay");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 52);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone5);
        boolean boolean7 = timeZone1.hasSameRules(timeZone5);
        boolean boolean8 = timeZone5.observesDaylightTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime12.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime12.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime12.getFields();
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDateTime18.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property22 = dateTime20.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime20.getZone();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime29 = dateTime26.withFieldAdded(durationFieldType27, 0);
        org.joda.time.DateTime.Property property30 = dateTime26.minuteOfDay();
        org.joda.time.DateTime dateTime31 = property30.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property32 = dateTime31.secondOfMinute();
        java.lang.String str33 = property32.toString();
        java.lang.String str34 = property32.getAsShortText();
        org.joda.time.DateTime dateTime35 = property32.roundHalfEvenCopy();
        int int36 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology38.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology38.yearOfCentury();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withEra(1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusHours(893);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.minus(readablePeriod47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime44.dayOfYear();
        java.util.Locale.Category category51 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category51, locale52);
        java.util.Locale locale54 = java.util.Locale.getDefault(category51);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(category51, locale55);
        java.util.Locale locale57 = java.util.Locale.getDefault(category51);
        java.lang.String str58 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime44, 660, locale57);
        java.lang.String str59 = dateTimeZone23.getName((long) 676, locale57);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone5, locale57);
        java.util.Locale locale64 = new java.util.Locale("java.util.GregorianCalendar[time=6,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]", "millisOfSecond", "11");
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale57.getDisplayVariant(locale64);
        java.lang.String str67 = locale64.getDisplayScript();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:52");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455788389,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:52\",offset=3120000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=55,SECOND=8,MILLISECOND=389,ZONE_OFFSET=3120000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[secondOfMinute]" + "'", str33, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 285 + "'", int36 == 285);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.FORMAT + "'", category51.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "660" + "'", str58, "660");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.285" + "'", str59, "+00:00:00.285");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645455788390,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+00:52\",offset=3120000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=55,SECOND=8,MILLISECOND=390,ZONE_OFFSET=3120000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale64.toString(), "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]_MILLISOFSECOND_11");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]" + "'", str65, "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test17159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17159");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.String str2 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test17160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17160");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.lang.String str8 = property7.toString();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str11 = property7.getAsShortText(locale10);
        org.joda.time.DateTime dateTime12 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance();
        long long22 = copticChronology16.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField23 = copticChronology16.months();
        java.util.Date date25 = new java.util.Date((long) (byte) 0);
        int int26 = date25.getMinutes();
        int int27 = date25.getDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) date25, chronology28);
        int int30 = localDate29.getDayOfWeek();
        org.joda.time.LocalDate localDate32 = localDate29.minusWeeks(272);
        int[] intArray34 = copticChronology16.get((org.joda.time.ReadablePartial) localDate32, (long) 21);
        org.joda.time.DateTimeField dateTimeField35 = copticChronology16.year();
        org.joda.time.DateTimeZone dateTimeZone36 = copticChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology16.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = copticChronology16.getZone();
        boolean boolean39 = dateTimeFieldType15.isSupported((org.joda.time.Chronology) copticChronology16);
        org.joda.time.DateTimeField dateTimeField40 = copticChronology16.year();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology16.centuryOfEra();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[secondOfMinute]" + "'", str8, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(copticChronology16);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 57634718L + "'", long22 == 57634718L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1686, 4, 23]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test17161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17161");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("736");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("15 Feb 2022 14:58:04 GMT");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test17162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17162");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime11.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(2);
        java.lang.String str15 = dateTimeFieldType14.getName();
        int int16 = dateTime6.get(dateTimeFieldType14);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        long long23 = copticChronology17.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField24 = copticChronology17.months();
        java.lang.String str25 = copticChronology17.toString();
        int int26 = copticChronology17.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField27 = copticChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology17.dayOfYear();
        java.lang.String str29 = copticChronology17.toString();
        boolean boolean30 = dateTimeFieldType14.isSupported((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology17.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long35 = dateTimeField32.add((-35375270399484L), 54143760);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1119409269 for year must be in the range [-292269337,292272708]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfMonth" + "'", str15, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
        org.junit.Assert.assertNotNull(copticChronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 57634718L + "'", long23 == 57634718L);
        org.junit.Assert.assertNotNull(durationField24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str25, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str29, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test17163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17163");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        int int6 = localDate5.getDayOfWeek();
        org.joda.time.LocalDate localDate8 = localDate5.minusWeeks(272);
        int int9 = localDate8.getDayOfYear();
        java.lang.String str10 = localDate8.toString();
        org.joda.time.LocalTime localTime11 = null;
        org.joda.time.DateTime dateTime12 = localDate8.toDateTime(localTime11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime17 = dateTime14.withFieldAdded(durationFieldType15, 0);
        org.joda.time.DateTime.Property property18 = dateTime14.minuteOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfMinute();
        org.joda.time.DateTime.Property property21 = dateTime19.secondOfDay();
        java.util.Date date23 = new java.util.Date((long) (byte) 0);
        int int24 = date23.getMinutes();
        int int25 = date23.getDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) date23, chronology26);
        boolean boolean28 = property21.equals((java.lang.Object) chronology26);
        org.joda.time.DurationField durationField29 = property21.getDurationField();
        org.joda.time.DateTime dateTime30 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime32 = property21.addToCopy(0L);
        org.joda.time.DateTime dateTime33 = property21.getDateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.minusDays(1970);
        org.joda.time.DateTime dateTime36 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate39 = localDate8.withPeriodAdded(readablePeriod37, 21);
        java.util.Date date41 = new java.util.Date((long) (byte) 0);
        int int42 = date41.getMinutes();
        int int43 = date41.getDay();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) date41, chronology44);
        org.joda.time.LocalDate localDate47 = localDate45.withYear((-1));
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfEra();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        timeZone49.setID("hi!");
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49);
        long long53 = calendar52.getTimeInMillis();
        calendar52.set(32772, 669, 935);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getTimeZone("\u4e2d\u6587\u4e2d\u56fd)");
        calendar52.setTimeZone(timeZone59);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        boolean boolean62 = localDate47.equals((java.lang.Object) dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDate39.toDateTimeAtStartOfDay(dateTimeZone61);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 289 + "'", int9 == 289);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1964-10-15" + "'", str10, "1964-10-15");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertEquals(date41.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=32772,MONTH=669,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=935,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=544,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645455788544L + "'", long53 == 1645455788544L);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test17164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17164");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(311);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((-2L), dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test17165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17165");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 14);
        java.util.Calendar.Builder builder4 = builder2.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        int int7 = dateTime6.getMinuteOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks(10);
        int int10 = dateTime9.getMillisOfSecond();
        java.util.Date date11 = dateTime9.toDate();
        date11.setSeconds(22);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date11);
        java.lang.String str15 = date11.toGMTString();
        java.util.Calendar.Builder builder16 = builder2.setInstant(date11);
        java.lang.String str17 = date11.toLocaleString();
        int int18 = date11.getYear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 903 + "'", int7 == 903);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 872 + "'", int10 == 872);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon May 02 15:03:22 GMT 2022");
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2 May 2022 15:03:22 GMT" + "'", str15, "2 May 2022 15:03:22 GMT");
        org.junit.Assert.assertNotNull(builder16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-5-2 15:03:22" + "'", str17, "2022-5-2 15:03:22");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 122 + "'", int18 == 122);
    }

    @Test
    public void test17166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17166");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear(867);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(650);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.lang.String str14 = dateTimeZone11.getName((long) 32769, locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter9.withZone(dateTimeZone11);
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter9.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 53688260);
        boolean boolean19 = dateTimeFormatter18.isOffsetParsed();
        java.util.Locale locale20 = dateTimeFormatter18.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeFormatter18.parseMillis("53640");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.650" + "'", str14, "+00:00:00.650");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(dateTimeParser16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(locale20);
    }

    @Test
    public void test17167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17167");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 0, locale5);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.lang.String str9 = dateTimeZone1.getName((long) 12);
        java.lang.String str10 = dateTimeZone1.toString();
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        long long15 = dateTimeZone1.convertLocalToUTC((-29848986114572L), true, 5337586920000L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-29848986114572L) + "'", long15 == (-29848986114572L));
    }

    @Test
    public void test17168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17168");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale4 = new java.util.Locale("clockhourOfHalfday", "English (Canada)", "");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str8 = nameProvider0.getName(locale4, "2022-02-21T14:54:51.332", "\u52a0\u62ff\u5927");
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        long long16 = copticChronology10.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField17 = copticChronology10.months();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType9.getField((org.joda.time.Chronology) copticChronology10);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology10.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = copticChronology10.getZone();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology10.secondOfMinute();
        java.util.Date date25 = new java.util.Date((long) (byte) 0);
        int int26 = date25.getMinutes();
        int int27 = date25.getDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) date25, chronology28);
        int int30 = localDate29.getDayOfWeek();
        org.joda.time.LocalDate localDate32 = localDate29.minusWeeks(272);
        org.joda.time.Instant instant34 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone35 = instant34.getZone();
        long long37 = dateTimeZone35.nextTransition((long) 893);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = dateTimeZone35.getName((long) (short) 0, locale39);
        java.lang.String str41 = localDate29.toString("+00:00", locale39);
        java.lang.String str43 = locale39.getExtension('x');
        int int44 = dateTimeField23.getMaximumShortTextLength(locale39);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(600100L);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDate46, 616, locale48);
        org.joda.time.Instant instant50 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone51 = instant50.getZone();
        long long53 = dateTimeZone51.nextTransition((long) 893);
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.lang.String str56 = dateTimeZone51.getName((long) (short) 0, locale55);
        java.util.TimeZone timeZone57 = dateTimeZone51.toTimeZone();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone57);
        java.time.ZoneId zoneId59 = timeZone57.toZoneId();
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        java.util.Date date63 = new java.util.Date((long) (byte) 0);
        int int64 = date63.getMinutes();
        int int65 = date63.getDay();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) date63, chronology66);
        int int68 = localDate67.getDayOfWeek();
        org.joda.time.LocalDate localDate70 = localDate67.minusWeeks(272);
        org.joda.time.Instant instant72 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone73 = instant72.getZone();
        long long75 = dateTimeZone73.nextTransition((long) 893);
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.lang.String str78 = dateTimeZone73.getName((long) (short) 0, locale77);
        java.lang.String str79 = localDate67.toString("+00:00", locale77);
        java.lang.String str80 = locale77.getISO3Country();
        java.lang.String str81 = locale60.getDisplayCountry(locale77);
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone57, locale60);
        int int83 = dateTimeField23.getMaximumShortTextLength(locale60);
        java.lang.String str86 = nameProvider0.getName(locale60, "14:55:21.267", "");
        java.util.Set<java.lang.String> strSet87 = locale60.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale4.toString(), "clockhourofhalfday_ENGLISH (CANADA)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "clockhourofhalfday_ENGLISH (CANADA)");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(copticChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 57634718L + "'", long16 == 57634718L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 893L + "'", long37 == 893L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "616" + "'", str49, "616");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 893L + "'", long53 == 893L);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645455788652,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=652,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(zoneId59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals(date63.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 893L + "'", long75 == 893L);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "CAN" + "'", str80, "CAN");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(calendar82);
// flaky:         org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=1645455788653,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=653,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strSet87);
    }

    @Test
    public void test17169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17169");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap10);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream12 = languageRangeList1.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeStream12);
    }

    @Test
    public void test17170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17170");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.withMinuteOfHour(15);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.Instant instant16 = instant14.plus((long) 53);
        org.joda.time.Instant instant17 = instant14.toInstant();
        org.joda.time.Instant instant20 = instant14.withDurationAdded(0L, (int) ' ');
        org.joda.time.Instant instant23 = instant20.withDurationAdded(27738633602000L, 52);
        org.joda.time.Instant instant24 = instant20.toInstant();
        org.joda.time.DateTime dateTime25 = localTime11.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology26.millisOfSecond();
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.Instant instant32 = instant30.withMillis((long) 1);
        org.joda.time.Instant instant33 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        long long36 = dateTimeZone34.nextTransition((long) 893);
        org.joda.time.Instant instant37 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        long long40 = dateTimeZone34.getMillisKeepLocal(dateTimeZone38, 0L);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((java.lang.Object) instant30, dateTimeZone38);
        org.joda.time.Chronology chronology42 = copticChronology26.withZone(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime25.toMutableDateTime(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight44 = dateTime25.toDateMidnight();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 893L + "'", long36 == 893L);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
    }

    @Test
    public void test17171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17171");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DateTimeField[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=datetimefield[millisofsecond]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17172");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField11 = durationFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.era();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial14 = null;
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder17 = builder15.setInstant((long) 6);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        timeZone18.setID("hi!");
        java.util.Calendar.Builder builder21 = builder17.setTimeZone(timeZone18);
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone23 = instant22.getZone();
        long long25 = dateTimeZone23.nextTransition((long) 893);
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = dateTimeZone23.getName((long) (short) 0, locale27);
        java.util.TimeZone timeZone29 = dateTimeZone23.toTimeZone();
        timeZone29.setID("Property[secondOfMinute]");
        timeZone29.setRawOffset(650);
        java.util.Calendar.Builder builder34 = builder21.setTimeZone(timeZone29);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromMillisOfDay((long) 5);
        java.util.Calendar.Builder builder37 = new java.util.Calendar.Builder();
        org.joda.time.Instant instant38 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone39 = instant38.getZone();
        long long41 = dateTimeZone39.nextTransition((long) 893);
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = dateTimeZone39.getName((long) (short) 0, locale43);
        java.util.TimeZone timeZone45 = dateTimeZone39.toTimeZone();
        timeZone45.setID("Property[secondOfMinute]");
        java.util.Calendar.Builder builder48 = builder37.setTimeZone(timeZone45);
        timeZone45.setRawOffset(0);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone45, locale51);
        boolean boolean53 = localTime36.equals((java.lang.Object) locale51);
        java.lang.String str54 = locale51.getDisplayVariant();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone29, locale51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = dateTimeField13.getAsText(readablePartial14, locale51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57634718L + "'", long7 == 57634718L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 893L + "'", long25 == 893L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 893L + "'", long41 == 893L);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645455788800,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Property[secondOfMinute],offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=8,MILLISECOND=800,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645455788800,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Property[secondOfMinute],offset=650,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=9,MILLISECOND=450,ZONE_OFFSET=650,DST_OFFSET=0]");
    }

    @Test
    public void test17173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17173");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.secondOfMinute();
        org.joda.time.DurationField durationField6 = copticChronology4.months();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology4.getZone();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter3.withZone(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(53716584);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeFormatter9.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withPivotYear(29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear(122);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant17 = org.joda.time.Instant.parse("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test17174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17174");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withEra(1);
        int int6 = localDateTime5.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime5.getFieldType(2);
        boolean boolean9 = localDateTime1.isSupported(dateTimeFieldType8);
        int int10 = localDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        int int15 = localDateTime14.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = localDateTime14.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDateTime14.getFields();
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.year();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        long long22 = dateTimeField20.roundHalfEven((long) (byte) -1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withEra(1);
        int int27 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withDayOfMonth(9);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusHours(59);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime29);
        int int33 = localDateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property34 = localDateTime1.millisOfSecond();
        boolean boolean35 = property34.isLeap();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-292275054) + "'", int27 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test17175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17175");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 0);
        boolean boolean6 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime0.getMillisOfDay();
        org.joda.time.DateTime dateTime9 = dateTime0.minusYears((int) (short) 0);
        org.joda.time.DateTime dateTime12 = dateTime0.withDurationAdded((long) 22, 4);
        int int13 = dateTime0.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 54189152 + "'", int7 == 54189152);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test17176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17176");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 199);
    }

    @Test
    public void test17177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17177");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "DateTimeField[yearOfCentury]", "100", "gregory", "2022-02-21T14:53:54.648", "53640", "DateTimeField[yearOfCentury]", "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList16);
        boolean boolean19 = strSet9.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear(9);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(241);
        boolean boolean27 = strSet9.equals((java.lang.Object) dateTime26);
        java.util.Iterator<java.lang.String> strItor28 = strSet9.iterator();
        boolean boolean30 = strSet9.add("2022-02-21T14:58:52.568");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test17178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17178");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfDay();
        java.util.Date date10 = new java.util.Date((long) (byte) 0);
        int int11 = date10.getMinutes();
        int int12 = date10.getDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) date10, chronology13);
        boolean boolean15 = property8.equals((java.lang.Object) chronology13);
        org.joda.time.DurationField durationField16 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField17 = property8.getField();
        org.joda.time.DateTime dateTime18 = property8.roundHalfEvenCopy();
        java.util.Locale locale22 = new java.util.Locale("clockhourOfHalfday", "English (Canada)", "");
        java.lang.String str23 = locale22.getDisplayVariant();
        java.lang.String str24 = property8.getAsShortText(locale22);
        org.joda.time.DateTime dateTime25 = property8.roundFloorCopy();
        java.util.Date date26 = dateTime25.toDate();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals(locale22.toString(), "clockhourofhalfday_ENGLISH (CANADA)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "54180" + "'", str24, "54180");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Mon Feb 21 15:02:59 GMT 2022");
    }

    @Test
    public void test17179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17179");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = property8.getMaximumValueOverall();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone13.nextTransition((long) 893);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = dateTimeZone13.getName((long) (short) 0, locale17);
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.Instant instant22 = dateTime21.toInstant();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.withDurationAdded(readableDuration23, 16);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime26.getZone();
        boolean boolean29 = dateTimeZone27.isStandardOffset((long) 35);
        java.lang.Object obj30 = null;
        boolean boolean31 = dateTimeZone27.equals(obj30);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 893L + "'", long15 == 893L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test17180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17180");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:57:47.196");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale1.getDisplayLanguage(locale2);
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance();
        long long11 = copticChronology5.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology5);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        long long21 = copticChronology15.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology15.dayOfYear();
        boolean boolean24 = copticChronology5.equals((java.lang.Object) copticChronology15);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology15.yearOfEra();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.halfdayOfDay();
        long long32 = copticChronology27.add((long) '#', 10L, (-1));
        org.joda.time.DateTimeField dateTimeField33 = copticChronology27.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = copticChronology27.add(readablePeriod34, (long) 'u', 816);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology27.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime46 = dateTime43.withFieldAdded(durationFieldType44, 0);
        org.joda.time.DateTime.Property property47 = dateTime43.minuteOfDay();
        org.joda.time.DateTime dateTime48 = property47.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property49 = dateTime48.secondOfMinute();
        org.joda.time.DateTime.Property property50 = dateTime48.secondOfDay();
        org.joda.time.DateTime dateTime52 = dateTime48.minusMonths((int) (byte) 10);
        org.joda.time.DateTime dateTime55 = dateTime48.withDurationAdded((long) 11, 52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime60 = dateTime57.withFieldAdded(durationFieldType58, 0);
        org.joda.time.DateTime.Property property61 = dateTime57.minuteOfDay();
        org.joda.time.DateTime dateTime62 = property61.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property63 = dateTime62.secondOfMinute();
        long long64 = property63.remainder();
        java.util.Locale locale65 = java.util.Locale.CHINESE;
        int int66 = property63.getMaximumTextLength(locale65);
        java.util.Calendar calendar67 = dateTime55.toCalendar(locale65);
        java.lang.String str68 = dateTimeField40.getAsShortText((-44485113599759L), locale65);
        int int69 = dateTimeField26.getMaximumShortTextLength(locale65);
        java.lang.String str70 = locale2.getDisplayCountry(locale65);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(copticChronology5);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 57634718L + "'", long11 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 57634718L + "'", long21 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 25L + "'", long32 == 25L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 117L + "'", long37 == 117L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645455780287,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=0,MILLISECOND=572,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "24" + "'", str68, "24");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test17181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17181");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        int int4 = dateTime3.getMinuteOfDay();
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime6 = instant0.toDateTime();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.secondOfMinute();
        org.joda.time.DurationField durationField9 = copticChronology7.months();
        org.joda.time.DateTimeZone dateTimeZone10 = copticChronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology7.monthOfYear();
        long long13 = dateTimeField11.roundHalfCeiling((long) (short) 100);
        long long15 = dateTimeField11.remainder((long) 69);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str18 = locale17.getISO3Language();
        int int19 = dateTimeField11.getMaximumShortTextLength(locale17);
        int int20 = dateTime6.get(dateTimeField11);
        org.joda.time.DateTime dateTime22 = dateTime6.withMillis((long) (byte) 100);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime.Property property24 = dateTime22.era();
        int int25 = property24.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval26 = property24.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 903 + "'", int4 == 903);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 691199715L + "'", long13 == 691199715L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1900800354L + "'", long15 == 1900800354L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.385+00:00:00.285" + "'", str23, "1970-01-01T00:00:00.385+00:00:00.285");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test17182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17182");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(893);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy((long) 53700);
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMonths(738);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17183");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = property8.getMaximumValueOverall();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone13.nextTransition((long) 893);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = dateTimeZone13.getName((long) (short) 0, locale17);
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime21 = localDate11.toDateTimeAtMidnight();
        java.lang.String str22 = localDate11.toString();
        org.joda.time.LocalDate.Property property23 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        boolean boolean26 = property23.isLeap();
        org.joda.time.LocalDate localDate27 = property23.roundFloorCopy();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 893L + "'", long15 == 893L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-0001-01-01" + "'", str22, "-0001-01-01");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test17184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17184");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(9);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(241);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.plus(readablePeriod7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(3);
        long long11 = dateTime8.getMillis();
        java.lang.String str12 = dateTime8.toString();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.minus(readablePeriod13);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime8.toGregorianCalendar();
        int int16 = dateTime8.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455788997L + "'", long11 == 1645455788997L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T15:03:09.282+00:00:00.285" + "'", str12, "2022-02-21T15:03:09.282+00:00:00.285");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54189282 + "'", int16 == 54189282);
    }

    @Test
    public void test17185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17185");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate localDate22 = localDate18.plusWeeks(20);
        org.joda.time.LocalDate localDate24 = localDate18.withYearOfCentury(6);
        org.joda.time.LocalDate localDate26 = localDate18.plusMonths(5);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks(10);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate26.withPeriodAdded(readablePeriod29, 33);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDate26.getFields();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
    }

    @Test
    public void test17186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17186");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(893);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusSeconds(0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minus(readableDuration12);
        int int14 = localDateTime10.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
    }

    @Test
    public void test17187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17187");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        boolean boolean1 = instant0.isAfterNow();
        org.joda.time.Instant instant3 = instant0.plus((long) 53671795);
        org.joda.time.Chronology chronology4 = instant0.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyear();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test17188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17188");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DurationField durationField10 = dateTimeField9.getRangeDurationField();
        org.joda.time.DurationField durationField11 = dateTimeField9.getRangeDurationField();
        java.util.Date date13 = new java.util.Date((long) (byte) 0);
        int int14 = date13.getMinutes();
        int int15 = date13.getDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) date13, chronology16);
        org.joda.time.LocalDate localDate19 = localDate17.withYear((-1));
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        int int22 = property20.getMaximumValueOverall();
        org.joda.time.LocalDate localDate23 = property20.roundCeilingCopy();
        int int24 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate26 = localDate23.plusDays(53637233);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate26.minus(readablePeriod27);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = locale30.getScript();
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = locale30.getDisplayCountry(locale32);
        java.lang.String str34 = localDate26.toString("0", locale32);
        org.joda.time.LocalDate localDate36 = localDate26.plusDays(669);
        org.joda.time.Instant instant38 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone39 = instant38.getZone();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 16, dateTimeZone39);
        org.joda.time.Interval interval41 = localDate26.toInterval(dateTimeZone39);
        org.joda.time.LocalDate localDate43 = localDate26.plusDays(818);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ub300\ub9cc" + "'", str33, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test17189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17189");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField9 = copticChronology1.months();
        boolean boolean10 = durationFieldType0.isSupported((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.yearOfCentury();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.year();
        org.joda.time.DurationField durationField14 = copticChronology1.years();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57634718L + "'", long7 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test17190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17190");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology0.add(readablePeriod10, (long) (-52), 990);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.hourOfHalfday();
        int int15 = dateTimeField14.getMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-52L) + "'", long13 == (-52L));
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test17191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17191");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime11.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(2);
        java.lang.String str15 = dateTimeFieldType14.getName();
        int int16 = dateTime6.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime18 = dateTime6.plusMinutes(53631987);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime21 = dateTime18.withFieldAdded(durationFieldType19, 796);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime26 = dateTime23.withFieldAdded(durationFieldType24, 0);
        org.joda.time.DateTime.Property property27 = dateTime23.minuteOfDay();
        org.joda.time.DateTime dateTime28 = property27.withMinimumValue();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        int int34 = localDateTime33.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime33.getFieldType(2);
        java.lang.String str37 = dateTimeFieldType36.getName();
        int int38 = dateTime28.get(dateTimeFieldType36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfWeek(2);
        boolean boolean43 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime48 = dateTime45.withFieldAdded(durationFieldType46, 0);
        org.joda.time.DateTime.Property property49 = dateTime45.minuteOfDay();
        org.joda.time.DateTime dateTime50 = property49.withMinimumValue();
        org.joda.time.DateTime.Property property51 = dateTime50.era();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withEra(1);
        int int56 = localDateTime55.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = localDateTime55.getFieldType(2);
        java.lang.String str59 = dateTimeFieldType58.getName();
        int int60 = dateTime50.get(dateTimeFieldType58);
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstance();
        long long67 = copticChronology61.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField68 = copticChronology61.months();
        java.lang.String str69 = copticChronology61.toString();
        int int70 = copticChronology61.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField71 = copticChronology61.weekyears();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology61.dayOfYear();
        java.lang.String str73 = copticChronology61.toString();
        boolean boolean74 = dateTimeFieldType58.isSupported((org.joda.time.Chronology) copticChronology61);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType58.getDurationType();
        boolean boolean76 = dateTime28.isSupported(dateTimeFieldType58);
        boolean boolean77 = dateTime21.equals((java.lang.Object) dateTimeFieldType58);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTime dateTime79 = dateTime21.plus(readableDuration78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusMinutes(511);
        org.joda.time.DateTime dateTime82 = dateTime79.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfMonth" + "'", str15, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "dayOfMonth" + "'", str37, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21 + "'", int38 == 21);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "dayOfMonth" + "'", str59, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 21 + "'", int60 == 21);
        org.junit.Assert.assertNotNull(copticChronology61);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 57634718L + "'", long67 == 57634718L);
        org.junit.Assert.assertNotNull(durationField68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str69, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str73, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test17192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17192");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        java.util.Date date3 = new java.util.Date((long) (byte) 0);
        int int4 = date3.getMinutes();
        int int5 = date3.getMinutes();
        boolean boolean6 = date1.before(date3);
        date1.setHours(11);
        int int9 = date1.getTimezoneOffset();
        java.util.Date date11 = new java.util.Date((long) (byte) 0);
        java.util.Date date13 = new java.util.Date((long) (byte) 0);
        int int14 = date13.getMinutes();
        int int15 = date13.getMinutes();
        boolean boolean16 = date11.before(date13);
        boolean boolean17 = date1.after(date11);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromDateFields(date11);
        org.joda.time.LocalTime localTime20 = localTime18.plusMinutes(54006513);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 11:00:00 GMT 1970");
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test17193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17193");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.lang.String str5 = locale1.getDisplayLanguage(locale4);
        java.util.Set<java.lang.String> strSet6 = locale1.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor7 = strSet6.iterator();
        boolean boolean9 = strSet6.equals((java.lang.Object) "2022-02-21T14:54:13.248");
        java.lang.Object[] objArray10 = strSet6.toArray();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strItor7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test17194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17194");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.withCenturyOfEra(14);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate21 = localDate18.plusYears(740);
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(localTime22);
        org.joda.time.LocalDate.Property property24 = localDate21.yearOfEra();
        java.util.Date date25 = localDate21.toDate();
        date25.setDate(54189282);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Mar 19 00:00:00 GMT 150575");
    }

    @Test
    public void test17195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17195");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.LocalTime localTime7 = property4.withMinimumValue();
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds(51);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test17196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17196");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int4 = localDateTime2.get(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy(893L);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withEra(1);
        int int16 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        int int17 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology18 = localDateTime7.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.withCenturyOfEra(53663);
        int int22 = localDateTime7.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = localDateTime7.getField(54020);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54020");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
    }

    @Test
    public void test17197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17197");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        int int5 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17198");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("209");
        boolean boolean3 = dateTime1.isAfter(1645455303685L);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusHours((int) (byte) -1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime12.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime12.getFieldType(2);
        java.lang.String str16 = dateTimeFieldType15.getName();
        int int17 = localDateTime8.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears((int) '#');
        boolean boolean22 = dateTime1.equals((java.lang.Object) localDateTime19);
        org.joda.time.DateTime dateTime24 = dateTime1.withYear(93);
        java.util.Date date26 = new java.util.Date((long) (byte) 0);
        int int27 = date26.getMinutes();
        int int28 = date26.getDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) date26, chronology29);
        org.joda.time.LocalDate localDate32 = localDate30.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant33 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        long long36 = dateTimeZone34.nextTransition((long) 893);
        org.joda.time.Instant instant37 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        long long40 = dateTimeZone34.getMillisKeepLocal(dateTimeZone38, 0L);
        org.joda.time.DateTime dateTime41 = localDate30.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.LocalDate localDate43 = localDate30.minusDays(20);
        org.joda.time.LocalDate localDate45 = localDate43.plusWeeks(53);
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property48 = localDate45.yearOfCentury();
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime50.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property52 = dateTime50.era();
        org.joda.time.DateMidnight dateMidnight53 = dateTime50.toDateMidnight();
        org.joda.time.DateTime dateTime55 = dateTime50.withCenturyOfEra(241);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int57 = dateTime50.get(dateTimeFieldType56);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = dateTime1.withField(dateTimeFieldType56, 443);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 443 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "dayOfMonth" + "'", str16, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21 + "'", int17 == 21);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 893L + "'", long36 == 893L);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 352 + "'", int57 == 352);
    }

    @Test
    public void test17199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17199");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.hourOfHalfday();
        org.joda.time.DurationField durationField11 = copticChronology0.days();
        long long13 = durationField11.getMillis(54099330);
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4674182112000000L + "'", long13 == 4674182112000000L);
    }

    @Test
    public void test17200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17200");
        java.util.Locale locale3 = new java.util.Locale("DateTimeField[hourOfDay]", "1970-1-1 0:00:02", "14:59:22.567");
        org.junit.Assert.assertEquals(locale3.toString(), "datetimefield[hourofday]_1970-1-1 0:00:02_14:59:22.567");
    }

    @Test
    public void test17201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17201");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        int int38 = localDate37.getYear();
        org.joda.time.LocalDate localDate40 = localDate37.plusYears(510);
        org.joda.time.LocalDate localDate42 = localDate37.withYearOfEra(53672844);
        org.joda.time.Interval interval43 = localDate37.toInterval();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(interval43);
    }

    @Test
    public void test17202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17202");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks(13);
        int int10 = localDate7.getWeekyear();
        java.lang.String[] strArray12 = java.util.TimeZone.getAvailableIDs((int) (short) -1);
        boolean boolean13 = localDate7.equals((java.lang.Object) strArray12);
        org.joda.time.LocalDate.Property property14 = localDate7.monthOfYear();
        int int15 = property14.getMinimumValue();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test17203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17203");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 6);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        timeZone3.setID("hi!");
        java.util.Calendar.Builder builder6 = builder2.setTimeZone(timeZone3);
        java.util.Calendar calendar7 = builder2.build();
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = dateTimeZone9.getName((long) (short) 0, locale13);
        java.util.TimeZone timeZone15 = dateTimeZone9.toTimeZone();
        java.lang.String str16 = timeZone15.getID();
        java.util.Calendar.Builder builder17 = builder2.setTimeZone(timeZone15);
        java.util.Date date19 = new java.util.Date((long) (byte) 0);
        int int20 = date19.getMinutes();
        int int21 = date19.getDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) date19, chronology22);
        org.joda.time.LocalDate localDate25 = localDate23.withYear((-1));
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        int int28 = property26.getMaximumValueOverall();
        org.joda.time.LocalDate localDate29 = property26.roundCeilingCopy();
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        long long33 = dateTimeZone31.nextTransition((long) 893);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = dateTimeZone31.getName((long) (short) 0, locale35);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDate29.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.LocalDate localDate40 = localDate29.minusWeeks((int) (short) 0);
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str43 = localDate29.toString("7", locale42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone15, locale42);
        calendar44.set(136, 122, 70);
        int int49 = calendar44.getFirstDayOfWeek();
        java.lang.String str50 = calendar44.getCalendarType();
        calendar44.set(53751409, 217, 403, 241, 53811828, 444);
        int int58 = calendar44.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = calendar44.isSet(599);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 599");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=6,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 893L + "'", long33 == 893L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "7" + "'", str43, "7");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53751409,MONTH=217,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=403,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=241,MINUTE=53811828,SECOND=444,MILLISECOND=408,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "gregory" + "'", str50, "gregory");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test17204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17204");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap10);
        java.lang.String[] strArray36 = new java.lang.String[] { "CAN", "hi!", "9", "java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-21T14:54:11.392", "1970", "secondOfMinute", "\uc911\uad6d", "DateTimeField[yearOfEra]", "15 Feb 2022 14:54:13 GMT", "2022-02-21T14:54:25.436", "14:54:04.005", "secondOfMinute", "53664488", "minutes", "Coordinated Universal Time", "Sat Feb 07 05:00:00 UTC 1970", "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]", "CopticChronology[Etc/UTC]", "gregory", "days", "clockhourOfHalfday", "Chine", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.util.Iterator<java.lang.String> strItor39 = strSet37.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet37.spliterator();
        strSet37.clear();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strSet37);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream43 = languageRangeList11.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeStream43);
    }

    @Test
    public void test17205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17205");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(3120348L);
    }

    @Test
    public void test17206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17206");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks(13);
        int int10 = localDate7.getWeekyear();
        java.lang.String[] strArray12 = java.util.TimeZone.getAvailableIDs((int) (short) -1);
        boolean boolean13 = localDate7.equals((java.lang.Object) strArray12);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant18 = instant14.withDurationAdded(readableDuration16, 2);
        org.joda.time.DateTime dateTime19 = localDate7.toDateTime((org.joda.time.ReadableInstant) instant18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant18.minus(readableDuration20);
        boolean boolean23 = instant21.isAfter(1645455447881L);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test17207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17207");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.lang.String str8 = property7.toString();
        java.lang.String str9 = property7.getAsShortText();
        org.joda.time.DateTime dateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTimeISO();
        int int12 = mutableDateTime11.getSecondOfDay();
        java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime11.toGregorianCalendar();
        int int14 = gregorianCalendar13.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.roll(54182869, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[secondOfMinute]" + "'", str8, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 54180 + "'", int12 == 54180);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test17208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17208");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 0, locale5);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        calendar8.setFirstDayOfWeek(20);
        int int11 = calendar8.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = calendar8.isSet(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455789497,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=20,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=9,MILLISECOND=497,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    public void test17209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17209");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 0);
        boolean boolean6 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime0.getMillisOfDay();
        org.joda.time.DateTime dateTime9 = dateTime0.minusYears((int) (short) 0);
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(21859200000L, (int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = dateTime9.toTimeOfDay();
        org.joda.time.LocalTime localTime14 = dateTime9.toLocalTime();
        org.joda.time.DateTime dateTime16 = dateTime9.withCenturyOfEra(635);
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        java.lang.String str19 = dateTime16.toString("14");
        java.util.GregorianCalendar gregorianCalendar20 = dateTime16.toGregorianCalendar();
        org.joda.time.DateTime dateTime22 = dateTime16.withCenturyOfEra(554);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 54189826 + "'", int7 == 54189826);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "14" + "'", str19, "14");
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test17210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17210");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-21T15:02:00.818");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t15:02:00.818");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17211");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        int int5 = dateTime4.getMillisOfSecond();
        java.util.Date date6 = dateTime4.toDate();
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime4.plusHours((int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(907);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 846 + "'", int5 == 846);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon May 02 15:03:09 GMT 2022");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test17212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17212");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        long long6 = dateTimeField4.roundHalfCeiling((long) (short) 100);
        long long8 = dateTimeField4.remainder((long) 69);
        java.util.Locale locale11 = new java.util.Locale("893", "15 Feb 2022 14:54:08 GMT");
        int int12 = dateTimeField4.getMaximumTextLength(locale11);
        java.lang.String str13 = locale11.getLanguage();
        java.lang.String str15 = locale11.getExtension('a');
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 691199715L + "'", long6 == 691199715L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1900800354L + "'", long8 == 1900800354L);
        org.junit.Assert.assertEquals(locale11.toString(), "893_15 FEB 2022 14:54:08 GMT");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "893" + "'", str13, "893");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test17213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17213");
        java.util.Locale locale2 = new java.util.Locale("2022-02-21T14:58:55.796Z", "\u4e0b\u5348 03:00:48");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u4e0b\u5348 03:00:48");
    }

    @Test
    public void test17214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17214");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        int int5 = dateTime4.getMillisOfSecond();
        java.util.Date date6 = dateTime4.toDate();
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.minusMinutes((-1));
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime10.plus(readablePeriod11);
        org.joda.time.LocalTime localTime14 = localTime12.plusHours((int) 'u');
        org.joda.time.LocalTime.Property property15 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property15.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = property15.setCopy("2022-02-21T00:00:48.084Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T00:00:48.084Z\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 872 + "'", int5 == 872);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon May 02 15:03:09 GMT 2022");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test17215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17215");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(783);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17216");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.secondOfMinute();
        org.joda.time.DurationField durationField4 = copticChronology2.months();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = copticChronology2.weeks();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology2.minuteOfHour();
        boolean boolean9 = durationFieldType1.isSupported((org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology2.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = copticChronology2.centuries();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology2.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(chronology13);
        int int15 = localTime14.getHourOfDay();
        org.joda.time.LocalTime.Property property16 = localTime14.hourOfDay();
        org.joda.time.LocalTime.Property property17 = localTime14.millisOfSecond();
        org.joda.time.LocalTime localTime18 = property17.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime20 = localTime18.minusMinutes(53);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.days();
        boolean boolean22 = localTime18.isSupported(durationFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(chronology23);
        int int25 = localTime24.getHourOfDay();
        org.joda.time.LocalTime.Property property26 = localTime24.secondOfMinute();
        org.joda.time.LocalTime localTime27 = property26.roundCeilingCopy();
        org.joda.time.LocalTime localTime29 = localTime27.plusMillis(53666732);
        int int30 = localTime18.compareTo((org.joda.time.ReadablePartial) localTime27);
        org.joda.time.LocalTime localTime32 = localTime27.minusSeconds(6);
        org.joda.time.LocalTime localTime34 = localTime32.minusSeconds((-2));
        long long36 = copticChronology2.set((org.joda.time.ReadablePartial) localTime32, (long) 764);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 54183715L + "'", long36 == 54183715L);
    }

    @Test
    public void test17217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17217");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-21T14:56:28.624");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:56:28.624\" is malformed at \"22-02-21T14:56:28.624\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17218");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusYears(53642140);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.era();
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy(54118137);
        org.joda.time.LocalDateTime localDateTime10 = property6.setCopy(51);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test17219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17219");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.monthOfYear();
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.Instant instant13 = instant11.withMillis((long) 1);
        org.joda.time.Instant instant14 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        long long17 = dateTimeZone15.nextTransition((long) 893);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        long long21 = dateTimeZone15.getMillisKeepLocal(dateTimeZone19, 0L);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) instant11, dateTimeZone19);
        org.joda.time.LocalTime localTime24 = localTime22.minusMillis(12);
        org.joda.time.LocalTime localTime26 = localTime22.plusMillis((int) (short) 10);
        int[] intArray32 = new int[] { 53663, 53659644, 5, 100, 13 };
        int int33 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localTime26, intArray32);
        org.joda.time.LocalTime localTime35 = localTime26.minusHours(618);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType37 = localTime26.getFieldType(582);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 582");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str8, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 893L + "'", long17 == 893L);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[53663, 53659644, 5, 100, 13]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 13 + "'", int33 == 13);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test17220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17220");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime2 = property1.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays(70);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekyear(19);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plus(readablePeriod7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.era();
        int[] intArray10 = localDateTime4.getValues();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 10, 12, 54189954]");
    }

    @Test
    public void test17221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17221");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minusWeeks(20);
        int int13 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime3.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17222");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Property[millisOfSecond]");
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.joda.time.tz.Provider provider9 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet10 = provider9.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        boolean boolean14 = strSet10.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime19 = dateTime16.withFieldAdded(durationFieldType17, 0);
        org.joda.time.DateTime.Property property20 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundHalfEvenCopy();
        int int22 = dateTime21.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.minus(readablePeriod23);
        org.joda.time.DateTime dateTime26 = dateTime21.withYearOfEra(740);
        org.joda.time.DateTime dateTime28 = dateTime26.withYear(999);
        org.joda.time.DateTime.Property property29 = dateTime26.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.minus(readableDuration30);
        boolean boolean32 = strSet10.remove((java.lang.Object) dateTime31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.parse("Canada", strMap34);
        org.joda.time.tz.Provider provider36 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet37 = provider36.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        boolean boolean41 = strSet37.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList35, (java.util.Collection<java.lang.String>) strSet37, filteringMode42);
        java.util.Locale locale44 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        org.joda.time.Instant instant46 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone47 = instant46.getZone();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusHours(616);
        boolean boolean51 = strSet45.remove((java.lang.Object) 616);
        java.util.Iterator<java.lang.String> strItor52 = strSet45.iterator();
        java.lang.String str53 = java.util.Locale.lookupTag(languageRangeList35, (java.util.Collection<java.lang.String>) strSet45);
        boolean boolean54 = strSet10.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35);
        boolean boolean55 = strSet8.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(provider36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode42.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test17223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17223");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.dayOfWeek();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.year();
        int int15 = dateTimeField13.getLeapAmount((long) (-27423370));
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test17224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17224");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withEra(1);
        int int8 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean10 = localDateTime5.isSupported(dateTimeFieldType9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.hourOfDay();
        int int12 = localDateTime5.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime5.hourOfDay();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) 10);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plusDays(490);
        org.joda.time.DateTime dateTime23 = dateTime19.withWeekyear(104);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withEra(1);
        int int28 = localDateTime27.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDateTime27.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localDateTime27.getFields();
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.year();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category37, locale38);
        java.util.Calendar calendar40 = dateTime36.toCalendar(locale38);
        org.joda.time.DateTime dateTime42 = dateTime36.withMillis(27738633602000L);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime48 = dateTime45.withFieldAdded(durationFieldType46, 0);
        org.joda.time.DateTime.Property property49 = dateTime45.minuteOfDay();
        org.joda.time.DateTime dateTime50 = property49.withMinimumValue();
        org.joda.time.DateTime dateTime52 = property49.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime53 = property49.roundCeilingCopy();
        org.joda.time.DateTime dateTime54 = property49.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime55 = property49.roundCeilingCopy();
        org.joda.time.DateTime dateTime57 = property49.setCopy(0);
        org.joda.time.DateTime.Property property58 = dateTime57.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        int int60 = dateTime42.get(dateTimeFieldType59);
        int int61 = dateTime19.get(dateTimeFieldType59);
        boolean boolean62 = localDateTime5.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime5.withMillisOfDay(53781124);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime69 = localDateTime5.withTime(944, 54109455, 971, 53846393);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 944 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + category37 + "' != '" + java.util.Locale.Category.FORMAT + "'", category37.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1640995199715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2849 + "'", int60 == 2849);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test17225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17225");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime5 = property3.withMaximumValue();
        int int6 = localTime5.getMillisOfSecond();
        org.joda.time.LocalTime.Property property7 = localTime5.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis(53700);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, 53950343);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 62 + "'", int6 == 62);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test17226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17226");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime10 = dateTime7.withFieldAdded(durationFieldType8, 0);
        org.joda.time.DateTime.Property property11 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundHalfEvenCopy();
        int int13 = dateTime12.getYearOfCentury();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) dateTime12);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfMinute();
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(260, 241, 54060, 495, 53963177, 54144004, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 495 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test17227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17227");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate6 = localDate4.withWeekyear((int) '#');
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test17228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17228");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(650);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = dateTimeZone10.getName((long) 32769, locale12);
        org.joda.time.Chronology chronology14 = copticChronology0.withZone(dateTimeZone10);
        java.lang.String str15 = dateTimeZone10.getID();
        java.util.TimeZone timeZone16 = dateTimeZone10.toTimeZone();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        long long23 = copticChronology17.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology17.hourOfHalfday();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        int int29 = dateTimeField27.getMaximumTextLength(locale28);
        java.util.Date date31 = new java.util.Date((long) (byte) 0);
        int int32 = date31.getMinutes();
        int int33 = date31.getDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) date31, chronology34);
        int int36 = localDate35.getDayOfWeek();
        org.joda.time.LocalDate localDate38 = localDate35.minusWeeks(272);
        org.joda.time.Instant instant40 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone41 = instant40.getZone();
        long long43 = dateTimeZone41.nextTransition((long) 893);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = dateTimeZone41.getName((long) (short) 0, locale45);
        java.lang.String str47 = localDate35.toString("+00:00", locale45);
        java.lang.String str48 = locale45.getScript();
        java.lang.String str49 = locale45.getVariant();
        java.lang.String str50 = locale28.getDisplayScript(locale45);
        java.lang.String str51 = timeZone16.getDisplayName(locale28);
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.650" + "'", str13, "+00:00:00.650");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.650" + "'", str15, "+00:00:00.650");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(copticChronology17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 57634718L + "'", long23 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 893L + "'", long43 == 893L);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GMT+00:00" + "'", str51, "GMT+00:00");
    }

    @Test
    public void test17229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17229");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.monthOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 43);
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance();
        long long19 = copticChronology13.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology13.clockhourOfDay();
        org.joda.time.Instant instant22 = org.joda.time.Instant.now();
        org.joda.time.Instant instant24 = instant22.withMillis((long) 1);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) instant22, dateTimeZone30);
        org.joda.time.LocalTime localTime35 = localTime33.minusMillis(12);
        org.joda.time.LocalTime localTime37 = localTime33.plusMillis((int) (short) 10);
        int[] intArray39 = copticChronology13.get((org.joda.time.ReadablePartial) localTime37, (long) 17);
        int int40 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localTime12, intArray39);
        org.joda.time.LocalTime localTime42 = localTime12.minusMillis(70);
        org.joda.time.LocalTime localTime44 = localTime12.withMillisOfDay(53874535);
        org.joda.time.LocalTime localTime46 = localTime12.withMillisOfDay(687);
        int int47 = localTime12.getMillisOfSecond();
        java.util.Date date49 = new java.util.Date((long) (byte) 0);
        int int50 = date49.getMinutes();
        int int51 = date49.getDay();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) date49, chronology52);
        org.joda.time.LocalDate localDate55 = localDate53.withYear((-1));
        org.joda.time.LocalDate.Property property56 = localDate55.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = property56.getField();
        int int58 = property56.getMaximumValueOverall();
        org.joda.time.LocalDate localDate59 = property56.roundCeilingCopy();
        org.joda.time.LocalDate localDate60 = property56.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = localTime12.compareTo((org.joda.time.ReadablePartial) localDate60);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str8, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 57634718L + "'", long19 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 302]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 13 + "'", int40 == 13);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 328 + "'", int47 == 328);
        org.junit.Assert.assertEquals(date49.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test17230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17230");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        long long8 = property7.remainder();
        int int9 = property7.get();
        org.joda.time.DateTime dateTime10 = property7.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.plus(readableDuration11);
        org.joda.time.Instant instant13 = dateTime10.toInstant();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test17231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17231");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime1.toGregorianCalendar();
        int int7 = gregorianCalendar6.getFirstDayOfWeek();
        gregorianCalendar6.setMinimalDaysInFirstWeek((int) (byte) 1);
        gregorianCalendar6.setFirstDayOfWeek((int) '#');
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        boolean boolean14 = property13.isLeap();
        boolean boolean15 = gregorianCalendar6.before((java.lang.Object) property13);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar6);
        gregorianCalendar6.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = gregorianCalendar6.getActualMaximum(53642140);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 53642140");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test17232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17232");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.util.Date date8 = dateTime6.toDate();
        java.util.Date date10 = new java.util.Date((long) (byte) 0);
        int int11 = date10.getMinutes();
        date10.setHours(893);
        boolean boolean14 = date8.before(date10);
        date10.setMinutes((-2720));
        date10.setSeconds(53788542);
        java.util.Date date20 = new java.util.Date((long) (byte) 0);
        int int21 = date20.getMinutes();
        int int22 = date20.getDay();
        int int23 = date20.getDay();
        date20.setYear(0);
        date20.setHours(631);
        boolean boolean28 = date10.before(date20);
        java.lang.Object obj29 = date20.clone();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Feb 21 15:02:59 GMT 2022");
        org.junit.Assert.assertEquals(date10.toString(), "Wed Oct 20 20:55:42 GMT 1971");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(date20.toString(), "Sat Jan 27 07:00:00 GMT 1900");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "Sat Jan 27 07:00:00 GMT 1900");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "Sat Jan 27 07:00:00 GMT 1900");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "Sat Jan 27 07:00:00 GMT 1900");
    }

    @Test
    public void test17233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17233");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        java.lang.String str5 = copticChronology0.toString();
        org.joda.time.DurationField durationField6 = copticChronology0.minutes();
        org.joda.time.DurationField durationField7 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField8 = copticChronology0.years();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str5, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17234");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(893);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMonths(44);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plus(readablePeriod12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime19 = dateTime16.withFieldAdded(durationFieldType17, 0);
        org.joda.time.DateTime.Property property20 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        int int23 = dateTime21.getDayOfMonth();
        org.joda.time.DateTime.Property property24 = dateTime21.monthOfYear();
        boolean boolean25 = property14.equals((java.lang.Object) dateTime21);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 21 + "'", int23 == 21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test17235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17235");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 52);
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1L), dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime6.withDayOfWeek(53790819);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53790819 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test17236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17236");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.weekOfWeekyear();
        int int11 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test17237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17237");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(10598050642779L);
        org.joda.time.DateTime dateTime2 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property3 = dateTime2.year();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test17238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17238");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.clear();
        int int3 = calendar1.getMinimalDaysInFirstWeek();
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale4.getISO3Language();
        boolean boolean6 = calendar1.before((java.lang.Object) locale4);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar1.get(480);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 480");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test17239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17239");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        int int9 = localDateTime8.getYearOfCentury();
        java.lang.String str10 = localDateTime8.toString();
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDayOfMonth(22);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusWeeks(53659);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.dayOfWeek();
        org.joda.time.DateTime dateTime25 = localDateTime18.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.plusSeconds(846);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:03:20.300" + "'", str10, "2022-02-21T15:03:20.300");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test17240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17240");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime4 = dateTime1.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.DateTime.Property property5 = dateTime1.millisOfSecond();
        org.joda.time.DateTime dateTime7 = property5.addToCopy((long) 272);
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, 0);
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.DateTime dateTime17 = property14.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime19 = property14.addWrapFieldToCopy(616);
        org.joda.time.DateTime dateTime20 = property14.roundHalfEvenCopy();
        int int21 = property8.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17241");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int4 = localDateTime2.get(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy(893L);
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = property5.setCopy(831);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundHalfFloorCopy();
        int int13 = localDateTime12.size();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test17242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17242");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.dayOfWeek();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.millisOfDay();
        org.joda.time.DurationField durationField14 = copticChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology0.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17243");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.minuteOfHour();
        org.joda.time.DurationField durationField11 = copticChronology0.seconds();
        org.joda.time.DurationField durationField12 = copticChronology0.centuries();
        org.joda.time.DurationField durationField13 = copticChronology0.minutes();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test17244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17244");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime4 = dateTime1.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime4.withDurationAdded((long) 16, 22);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime12.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime12.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusHours(32769);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        int int21 = localDateTime19.size();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusWeeks(437);
        int int24 = localDateTime19.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusWeeks(53845856);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readablePeriod27);
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        long long33 = dateTimeZone31.nextTransition((long) 893);
        org.joda.time.Instant instant34 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone35 = instant34.getZone();
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone35, 0L);
        java.lang.String str39 = dateTimeZone35.getName((long) 5);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(0L, dateTimeZone35);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        java.util.Date date43 = dateTime41.toDate();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime41.toMutableDateTime();
        org.joda.time.Instant instant45 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone46 = instant45.getZone();
        org.joda.time.Instant instant47 = instant45.toInstant();
        org.joda.time.DateTimeZone dateTimeZone48 = instant45.getZone();
        int int50 = dateTimeZone48.getOffsetFromLocal(25L);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime44.toMutableDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = localDateTime28.toDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = dateTime7.toDateTime(dateTimeZone48);
        int int54 = dateTime53.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 893L + "'", long33 == 893L);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Mon Feb 21 15:03:10 GMT 2022");
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
    }

    @Test
    public void test17245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17245");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(32769);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime17 = dateTime14.withFieldAdded(durationFieldType15, 0);
        org.joda.time.DateTime.Property property18 = dateTime14.minuteOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfMinute();
        int int21 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDateTime10.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime10.plusMillis(53825);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test17246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17246");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getDayOfYear();
        int int2 = localDate0.getYear();
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths(779);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 52 + "'", int1 == 52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test17247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17247");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 0, locale5);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        int int10 = timeZone7.getOffset((long) 4);
        java.util.Locale locale11 = java.util.Locale.UK;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone7, locale11);
        calendar13.clear();
        boolean boolean16 = calendar13.before((java.lang.Object) 1645455670833L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455790166,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=10,MILLISECOND=166,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test17248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17248");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.millisOfSecond();
        java.lang.String str3 = copticChronology0.toString();
        org.joda.time.DurationField durationField4 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfDay();
        org.joda.time.DurationField durationField7 = copticChronology0.centuries();
        org.joda.time.DurationField durationField8 = copticChronology0.seconds();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str3, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test17249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17249");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime7 = dateTime4.withFieldAdded(durationFieldType5, 0);
        org.joda.time.DateTime.Property property8 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfMinute();
        java.lang.String str11 = property10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime16 = dateTime13.withFieldAdded(durationFieldType14, 0);
        org.joda.time.DateTime.Property property17 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime18 = property17.roundHalfEvenCopy();
        int int19 = dateTime18.getYearOfCentury();
        long long20 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime18);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.lang.String str26 = locale22.getDisplayLanguage(locale25);
        int int27 = property10.getMaximumTextLength(locale25);
        java.util.Locale.Builder builder28 = builder2.setLocale(locale25);
        java.util.Locale.Builder builder29 = builder2.clearExtensions();
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale.Builder builder33 = builder31.setVariant("Catalan");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[secondOfMinute]" + "'", str11, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test17250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17250");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded((long) 12, 28);
        org.joda.time.DateTime dateTime9 = dateTime5.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455790212,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=10,MILLISECOND=497,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test17251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17251");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear(867);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        long long16 = copticChronology10.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology10.halfdayOfDay();
        org.joda.time.DurationField durationField18 = copticChronology10.hours();
        org.joda.time.DurationField durationField19 = copticChronology10.minutes();
        org.joda.time.DurationField durationField20 = copticChronology10.hours();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology10.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) copticChronology10);
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.secondOfMinute();
        org.joda.time.DurationField durationField27 = copticChronology25.months();
        org.joda.time.DateTimeZone dateTimeZone28 = copticChronology25.getZone();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology25.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withChronology((org.joda.time.Chronology) copticChronology25);
        java.lang.Integer int32 = dateTimeFormatter2.getPivotYear();
        java.io.Writer writer33 = null;
        org.joda.time.Instant instant34 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone35 = instant34.getZone();
        long long37 = dateTimeZone35.nextTransition((long) 893);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = dateTimeZone35.getName((long) (short) 0, locale39);
        java.util.TimeZone timeZone41 = dateTimeZone35.toTimeZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone41);
        boolean boolean44 = calendar42.before((java.lang.Object) 10L);
        calendar42.clear();
        calendar42.setLenient(false);
        java.util.Date date48 = calendar42.getTime();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.fromDateFields(date48);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer33, (org.joda.time.ReadablePartial) localDateTime49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(copticChronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 57634718L + "'", long16 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 893L + "'", long37 == 893L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test17252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17252");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime1.toGregorianCalendar();
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder9 = builder7.setInstant((long) 6);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        timeZone10.setID("hi!");
        java.util.Calendar.Builder builder13 = builder9.setTimeZone(timeZone10);
        gregorianCalendar6.setTimeZone(timeZone10);
        int int15 = timeZone10.getRawOffset();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test17253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17253");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.dayOfYear();
        java.lang.String str12 = copticChronology0.toString();
        java.lang.String str13 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfDay();
        java.util.Date date16 = new java.util.Date((long) (byte) 0);
        int int17 = date16.getMinutes();
        int int18 = date16.getDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) date16, chronology19);
        org.joda.time.LocalDate localDate22 = localDate20.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        long long26 = dateTimeZone24.nextTransition((long) 893);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone28, 0L);
        org.joda.time.DateTime dateTime31 = localDate20.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.LocalDate localDate33 = localDate20.withCenturyOfEra(14);
        long long35 = copticChronology0.set((org.joda.time.ReadablePartial) localDate33, 19439481600100L);
        org.joda.time.DateTimeField dateTimeField36 = copticChronology0.yearOfEra();
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = copticChronology0.getDateTimeMillis(54111173, 613, (-51), 53732913);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 613 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str8, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str12, "CopticChronology[+00:00:00.285]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str13, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 893L + "'", long26 == 893L);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-6826118399900L) + "'", long35 == (-6826118399900L));
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test17254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17254");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("hi!");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        int int4 = calendar3.getFirstDayOfWeek();
        int int5 = calendar3.getWeeksInWeekYear();
        calendar3.setFirstDayOfWeek(430);
        long long8 = calendar3.getTimeInMillis();
        java.util.TimeZone timeZone9 = calendar3.getTimeZone();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        timeZone10.setID("hi!");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10);
        long long14 = calendar13.getTimeInMillis();
        java.util.Date date15 = calendar13.getTime();
        int int16 = date15.getSeconds();
        boolean boolean17 = timeZone9.inDaylightTime(date15);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455790271,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=430,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=10,MILLISECOND=271,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645455790271L + "'", long8 == 1645455790271L);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455790272,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=10,MILLISECOND=272,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645455790272L + "'", long14 == 1645455790272L);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Feb 21 15:03:10 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test17255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17255");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category13, locale14);
        java.util.Calendar calendar16 = dateTime12.toCalendar(locale14);
        calendar16.setLenient(true);
        calendar16.set(258, (int) (short) 1, 0);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("\u4e2d\u6587\u4e2d\u56fd)");
        calendar16.setTimeZone(timeZone24);
        boolean boolean26 = timeZone24.observesDaylightTime();
        boolean boolean27 = timeZone24.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = timeZone24.getDisplayName(false, 2021);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 2021");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=258,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test17256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17256");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 0, locale5);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        long long10 = dateTimeZone1.adjustOffset(25L, false);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str14 = locale13.getISO3Language();
        java.lang.String str15 = dateTimeZone1.getShortName((long) (byte) 100, locale13);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter18.withPivotYear(952);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Date date25 = new java.util.Date((long) (byte) 0);
        int int26 = date25.getMinutes();
        int int27 = date25.getDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) date25, chronology28);
        int int30 = localDate29.getDayOfWeek();
        org.joda.time.LocalDate localDate32 = localDate29.minusWeeks(272);
        org.joda.time.Instant instant34 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone35 = instant34.getZone();
        long long37 = dateTimeZone35.nextTransition((long) 893);
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = dateTimeZone35.getName((long) (short) 0, locale39);
        java.lang.String str41 = localDate29.toString("+00:00", locale39);
        java.lang.String str42 = locale39.getISO3Country();
        java.lang.String str43 = locale22.getDisplayCountry(locale39);
        java.util.Date date45 = new java.util.Date((long) (byte) 0);
        int int46 = date45.getMinutes();
        int int47 = date45.getDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) date45, chronology48);
        org.joda.time.LocalDate localDate51 = localDate49.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant52 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone53 = instant52.getZone();
        long long55 = dateTimeZone53.nextTransition((long) 893);
        org.joda.time.Instant instant56 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone57 = instant56.getZone();
        long long59 = dateTimeZone53.getMillisKeepLocal(dateTimeZone57, 0L);
        org.joda.time.DateTime dateTime60 = localDate49.toDateTimeAtMidnight(dateTimeZone53);
        org.joda.time.LocalDate localDate62 = localDate49.withCenturyOfEra(14);
        java.util.Locale locale66 = new java.util.Locale("hi!", "");
        boolean boolean67 = locale66.hasExtensions();
        java.lang.String str68 = locale66.getISO3Language();
        java.lang.String str69 = localDate49.toString("14:54:04.005", locale66);
        java.lang.String str70 = locale39.getDisplayCountry(locale66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter18.withLocale(locale39);
        java.lang.String str72 = locale13.getDisplayVariant(locale39);
        java.lang.String str73 = locale39.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = locale39.getUnicodeLocaleType("2022-02-21T15:02:00.818");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-21T15:02:00.818");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 25L + "'", long10 == 25L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 893L + "'", long37 == 893L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CAN" + "'", str42, "CAN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 893L + "'", long55 == 893L);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "14:54:04.005" + "'", str69, "14:54:04.005");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Canada" + "'", str70, "Canada");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test17257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17257");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        long long5 = copticChronology0.add((long) '#', 10L, (-1));
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.centuryOfEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        int int11 = localTime10.getHourOfDay();
        org.joda.time.LocalTime.Property property12 = localTime10.hourOfDay();
        org.joda.time.LocalTime localTime14 = property12.addWrapFieldToCopy((int) 'u');
        org.joda.time.LocalTime localTime15 = property12.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property12.addCopy((long) 674);
        org.joda.time.LocalTime localTime19 = localTime17.plusHours(53782602);
        int[] intArray21 = copticChronology0.get((org.joda.time.ReadablePartial) localTime19, 348L);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology0.weekyear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 25L + "'", long5 == 25L);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 633]");
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test17258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17258");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 10);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 242);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.joda.time.DateTime.Property property5 = dateTime4.weekOfWeekyear();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test17259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17259");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.secondOfMinute();
        org.joda.time.DurationField durationField9 = copticChronology7.months();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology7.yearOfCentury();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = dateTimeField10.getAsShortText(100, locale12);
        java.util.Date date15 = new java.util.Date((long) (byte) 0);
        int int16 = date15.getMinutes();
        int int17 = date15.getDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) date15, chronology18);
        int int20 = localDate19.getDayOfWeek();
        org.joda.time.LocalDate localDate22 = localDate19.minusWeeks(272);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        long long27 = dateTimeZone25.nextTransition((long) 893);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = dateTimeZone25.getName((long) (short) 0, locale29);
        java.lang.String str31 = localDate19.toString("+00:00", locale29);
        int int32 = dateTimeField10.getMaximumShortTextLength(locale29);
        java.lang.String str33 = dateTimeField5.getAsShortText(16, locale29);
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = null;
        org.joda.time.format.DateTimeParser dateTimeParser36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser36);
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter37.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter37.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter37.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter42.withPivotYear((java.lang.Integer) 14);
        int int47 = dateTimeFormatter42.getDefaultYear();
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter42.withLocale(locale48);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.lang.String str51 = locale48.getDisplayScript(locale50);
        java.lang.String str52 = locale48.getDisplayCountry();
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstance();
        long long59 = copticChronology53.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField60 = copticChronology53.months();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology53.yearOfCentury();
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str64 = dateTimeField61.getAsText(31536000000L, locale63);
        java.lang.String str65 = locale48.getDisplayCountry(locale63);
        java.lang.String str66 = dateTimeField5.getAsShortText(453, locale63);
        java.lang.String str67 = locale63.getDisplayVariant();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100" + "'", str13, "100");
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 893L + "'", long27 == 893L);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "16" + "'", str33, "16");
        org.junit.Assert.assertNull(dateTimeParser38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2000 + "'", int47 == 2000);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Canada" + "'", str52, "Canada");
        org.junit.Assert.assertNotNull(copticChronology53);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 57634718L + "'", long59 == 57634718L);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "87" + "'", str64, "87");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Canada" + "'", str65, "Canada");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "453" + "'", str66, "453");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test17260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17260");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate localDate22 = localDate18.plusWeeks(20);
        org.joda.time.LocalDate localDate24 = localDate18.withYearOfCentury(6);
        org.joda.time.LocalDate localDate26 = localDate18.plusMonths(5);
        org.joda.time.LocalDate.Property property27 = localDate18.monthOfYear();
        org.joda.time.LocalDate localDate28 = property27.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate29 = property27.roundCeilingCopy();
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.halfdayOfDay();
        long long35 = copticChronology30.add((long) '#', 10L, (-1));
        org.joda.time.DateTimeField dateTimeField36 = copticChronology30.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        long long40 = copticChronology30.add(readablePeriod37, (long) 'u', 816);
        org.joda.time.DurationField durationField41 = copticChronology30.weekyears();
        org.joda.time.DurationField durationField42 = copticChronology30.days();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology30.weekyear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withEra(1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withEra(1);
        int int52 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean54 = localDateTime49.isSupported(dateTimeFieldType53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime49.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime49.withMillisOfDay(879);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.minusHours(53631987);
        int[] intArray61 = copticChronology30.get((org.joda.time.ReadablePartial) localDateTime59, 1645455293140L);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = localDate29.compareTo((org.joda.time.ReadablePartial) localDateTime59);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 25L + "'", long35 == 25L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 117L + "'", long40 == 117L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1738, 6, 14, 53693425]");
    }

    @Test
    public void test17261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17261");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.millisOfDay();
        org.joda.time.DurationField durationField15 = copticChronology1.years();
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        org.joda.time.Instant instant18 = instant16.withMillis((long) 1);
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        long long22 = dateTimeZone20.nextTransition((long) 893);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        long long26 = dateTimeZone20.getMillisKeepLocal(dateTimeZone24, 0L);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((java.lang.Object) instant16, dateTimeZone24);
        org.joda.time.LocalTime localTime29 = localTime27.minusMillis(12);
        org.joda.time.LocalTime localTime31 = localTime27.plusMinutes((int) (short) 0);
        java.lang.String str32 = localTime27.toString();
        long long34 = copticChronology1.set((org.joda.time.ReadablePartial) localTime27, (long) 363);
        org.joda.time.LocalTime.Property property35 = localTime27.millisOfSecond();
        org.joda.time.LocalTime localTime37 = property35.setCopy(0);
        org.joda.time.DurationField durationField38 = property35.getRangeDurationField();
        org.joda.time.LocalTime localTime39 = property35.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57634718L + "'", long7 == 57634718L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 893L + "'", long22 == 893L);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "15:03:10.444" + "'", str32, "15:03:10.444");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 54190159L + "'", long34 == 54190159L);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(localTime39);
    }

    @Test
    public void test17262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17262");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        java.util.Date date10 = new java.util.Date((long) (byte) 0);
        int int11 = date10.getMinutes();
        int int12 = date10.getDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) date10, chronology13);
        int int15 = localDate14.getDayOfWeek();
        org.joda.time.LocalDate localDate17 = localDate14.minusWeeks(272);
        int[] intArray19 = copticChronology1.get((org.joda.time.ReadablePartial) localDate17, (long) 21);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(191980853753L, (org.joda.time.Chronology) copticChronology1);
        int int21 = localDate20.getEra();
        org.junit.Assert.assertNotNull(copticChronology1);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57634718L + "'", long7 == 57634718L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1686, 4, 23]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test17263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17263");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.lang.String str8 = property7.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, 0);
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        int int16 = dateTime15.getYearOfCentury();
        long long17 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime15);
        java.lang.String str18 = property7.getAsString();
        org.joda.time.DateTime dateTime20 = property7.addWrapFieldToCopy(53);
        org.joda.time.DateTime.Property property21 = dateTime20.secondOfMinute();
        org.joda.time.DurationField durationField22 = property21.getDurationField();
        org.joda.time.DateTime dateTime23 = property21.withMaximumValue();
        org.joda.time.DateTime dateTime24 = property21.roundHalfCeilingCopy();
        int int25 = dateTime24.getDayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime24.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[secondOfMinute]" + "'", str8, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21 + "'", int25 == 21);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test17264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17264");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.year();
        boolean boolean17 = localDateTime10.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.minusWeeks(20);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.plusSeconds(17);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        long long24 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime21, (long) 53642140);
        org.joda.time.DurationField durationField25 = copticChronology0.halfdays();
        java.lang.String str26 = copticChronology0.toString();
        org.joda.time.Chronology chronology27 = copticChronology0.withUTC();
        org.joda.time.DurationField durationField28 = copticChronology0.hours();
        org.joda.time.DurationField durationField29 = copticChronology0.centuries();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10598051007515L + "'", long24 == 10598051007515L);
        org.junit.Assert.assertNotNull(durationField25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str26, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test17265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17265");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime1.toGregorianCalendar();
        java.lang.Object obj7 = null;
        boolean boolean8 = gregorianCalendar6.before(obj7);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("DurationField[seconds]");
        gregorianCalendar6.setTimeZone(timeZone10);
        boolean boolean12 = timeZone10.observesDaylightTime();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17266");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DurationField durationField10 = dateTimeField9.getRangeDurationField();
        org.joda.time.DurationField durationField11 = dateTimeField9.getRangeDurationField();
        java.util.Date date13 = new java.util.Date((long) (byte) 0);
        int int14 = date13.getMinutes();
        int int15 = date13.getDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) date13, chronology16);
        org.joda.time.LocalDate localDate19 = localDate17.withYear((-1));
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        int int22 = property20.getMaximumValueOverall();
        org.joda.time.LocalDate localDate23 = property20.roundCeilingCopy();
        int int24 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate26 = localDate23.withWeekyear(953);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = localDate23.getValue(62);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 62");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test17267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17267");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.lang.String str5 = dateTimeZone1.getName((long) 100);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(dateTimeZone1);
        int int7 = localDate6.getEra();
        org.joda.time.LocalDate localDate9 = localDate6.minusDays(401);
        org.joda.time.LocalDate localDate11 = localDate9.minusYears(677);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.LocalDate localDate15 = localDate11.withWeekyear(511);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test17268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17268");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        long long4 = dateTimeZone2.nextTransition((long) 893);
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = instant5.getZone();
        long long8 = dateTimeZone2.getMillisKeepLocal(dateTimeZone6, 0L);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 11, false);
        boolean boolean12 = dateTimeZone2.isFixed();
        java.lang.String str13 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((-51544713565282L), dateTimeZone2);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 893L + "'", long4 == 893L);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 11L + "'", long11 == 11L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test17269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17269");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime10.minus(readablePeriod11);
        int int13 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime12);
        long long16 = dateTimeField8.set(10598050623576L, "50");
        long long18 = dateTimeField8.roundHalfEven(0L);
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 11450213823576L + "'", long16 == 11450213823576L);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-9936000285L) + "'", long18 == (-9936000285L));
    }

    @Test
    public void test17270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17270");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(9);
        int int9 = dateTime8.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        long long11 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime8.millisOfSecond();
        boolean boolean13 = dateTime8.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime8.getZone();
        long long16 = dateTimeZone14.previousTransition((long) 427);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 61879161600L + "'", long11 == 61879161600L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 427L + "'", long16 == 427L);
    }

    @Test
    public void test17271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17271");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField4 = copticChronology0.halfdays();
        org.joda.time.DurationField durationField5 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test17272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17272");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra(1);
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = localDateTime13.getFieldType(2);
        boolean boolean17 = localDateTime9.isSupported(dateTimeFieldType16);
        int int18 = localDateTime7.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime.Property property19 = localDateTime7.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.withDayOfYear(145);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test17273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17273");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        int int4 = dateTime3.getMinuteOfDay();
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime3);
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        int int12 = dateTime11.getMinuteOfDay();
        int int13 = instant8.compareTo((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Calendar calendar15 = dateTime11.toCalendar(locale14);
        boolean boolean16 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime17 = dateTime3.toLocalDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime3.minus(readableDuration18);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.format.DateTimeParser dateTimeParser23 = dateTimeFormatter22.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter22.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter22.withDefaultYear(867);
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance();
        long long36 = copticChronology30.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology30.halfdayOfDay();
        org.joda.time.DurationField durationField38 = copticChronology30.hours();
        org.joda.time.DurationField durationField39 = copticChronology30.minutes();
        org.joda.time.DurationField durationField40 = copticChronology30.hours();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology30.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter22.withChronology((org.joda.time.Chronology) copticChronology30);
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.secondOfMinute();
        org.joda.time.DurationField durationField47 = copticChronology45.months();
        org.joda.time.DateTimeZone dateTimeZone48 = copticChronology45.getZone();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology45.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology45.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter22.withChronology((org.joda.time.Chronology) copticChronology45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = dateTime3.toString(dateTimeFormatter51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 903 + "'", int4 == 903);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645455790666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=10,MILLISECOND=951,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 903 + "'", int12 == 903);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455790666,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=10,MILLISECOND=951,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNull(dateTimeParser23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(copticChronology30);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 57634718L + "'", long36 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
    }

    @Test
    public void test17274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17274");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra(1);
        int int10 = localDateTime9.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime9.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localDateTime9.getFields();
        int int14 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.DateTime dateTime16 = property5.addToCopy(1);
        org.joda.time.DateTime dateTime17 = property5.roundCeilingCopy();
        long long18 = property5.remainder();
        org.joda.time.DateTime dateTime19 = property5.withMaximumValue();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property5.getAsText(locale20);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10971L + "'", long18 == 10971L);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "903" + "'", str21, "903");
    }

    @Test
    public void test17275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17275");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        int int9 = localDateTime8.getYearOfCentury();
        java.lang.String str10 = localDateTime8.toString();
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDayOfMonth(22);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusWeeks(53659);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.dayOfWeek();
        java.util.Date date25 = localDateTime18.toDate();
        org.joda.time.LocalDateTime.Property property26 = localDateTime18.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property26.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minus(readableDuration28);
        int int30 = localDateTime29.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusHours(54119);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:03:20.988" + "'", str10, "2022-02-21T15:03:20.988");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Mon Feb 21 15:03:10 GMT 2022");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test17276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17276");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime localTime15 = localTime11.plusMillis((int) (short) 10);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter18.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter18.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        java.util.Locale locale28 = dateTimeFormatter26.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 902);
        org.joda.time.Instant instant32 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 16, dateTimeZone33);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter30.withZone(dateTimeZone33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = localTime11.toString(dateTimeFormatter36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test17277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17277");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(9);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime3.withMinuteOfHour(19);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime10 = dateTime7.plusSeconds(1439);
        org.joda.time.DateTime dateTime12 = dateTime7.plusHours((-335));
        int int13 = dateTime12.getEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test17278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17278");
        java.util.Locale locale2 = new java.util.Locale("hi!", "");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        long long4 = calendar3.getTimeInMillis();
        calendar3.set(2124, 53640000, 53768363, 87, 2033, 53640000);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar3);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withPeriodAdded(readablePeriod13, 897);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=145710075732780755,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4619338,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=27,DAY_OF_YEAR=178,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=53,SECOND=0,MILLISECOND=755,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455790755L + "'", long4 == 1645455790755L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17279");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(4638350267872000L);
        org.joda.time.LocalTime localTime3 = localTime1.plusMinutes(53640);
        org.joda.time.LocalTime localTime5 = localTime1.plusSeconds(614);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category7);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        int int16 = dateTime15.getMinuteOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks(10);
        org.joda.time.DateTime.Property property19 = dateTime15.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar20 = dateTime15.toGregorianCalendar();
        gregorianCalendar20.clear();
        java.util.Locale locale24 = new java.util.Locale("hi!", "");
        boolean boolean25 = locale24.hasExtensions();
        boolean boolean26 = gregorianCalendar20.after((java.lang.Object) locale24);
        java.util.Locale locale30 = new java.util.Locale("+00:00", "Property[monthOfYear]", "java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale24.getDisplayCountry(locale30);
        java.util.Locale.setDefault(category7, locale24);
        java.lang.String str34 = localTime5.toString("+300:11", locale24);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime39 = dateTime36.withFieldAdded(durationFieldType37, 0);
        org.joda.time.DateTime.Property property40 = dateTime36.minuteOfDay();
        org.joda.time.DateTime dateTime41 = property40.withMinimumValue();
        org.joda.time.DateTime dateTime43 = property40.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime45 = property40.addWrapFieldToCopy(616);
        org.joda.time.DateTime dateTime46 = property40.getDateTime();
        int int47 = property40.getMaximumValueOverall();
        org.joda.time.DateTime dateTime49 = property40.addToCopy(32280867L);
        org.joda.time.chrono.CopticChronology copticChronology50 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology50.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology50.hourOfDay();
        long long54 = dateTimeField52.roundHalfFloor((long) 129);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = dateTimeField52.getType();
        int int56 = dateTime49.get(dateTimeFieldType55);
        org.joda.time.LocalTime.Property property57 = localTime5.property(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 903 + "'", int16 == 903);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "+00:00_PROPERTY[MONTHOFYEAR]_java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+300:11" + "'", str34, "+300:11");
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1439 + "'", int47 == 1439);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(copticChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-285L) + "'", long54 == (-285L));
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 21 + "'", int56 == 21);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test17280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17280");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime1.toMutableDateTime(dateTimeZone4);
        int int6 = dateTime1.getCenturyOfEra();
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = dateTime1.isEqual(readableInstant7);
        java.util.Date date10 = new java.util.Date((long) (byte) 0);
        int int11 = date10.getMinutes();
        int int12 = date10.getDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) date10, chronology13);
        org.joda.time.LocalDate localDate16 = localDate14.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        long long20 = dateTimeZone18.nextTransition((long) 893);
        org.joda.time.Instant instant21 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone22, 0L);
        org.joda.time.DateTime dateTime25 = localDate14.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime26 = dateTime1.withZoneRetainFields(dateTimeZone18);
        java.util.TimeZone timeZone27 = dateTimeZone18.toTimeZone();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone27);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromCalendarFields(calendar28);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = calendar28.getMaximum(53702963);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53702963");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 893L + "'", long20 == 893L);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455790799,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=10,MILLISECOND=799,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test17281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17281");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime4 = dateTime1.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime4.withDurationAdded((long) 16, 22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime4.withYearOfCentury(53725516);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53725516 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test17282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17282");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime1.toGregorianCalendar();
        gregorianCalendar6.clear();
        java.util.Locale locale10 = new java.util.Locale("hi!", "");
        boolean boolean11 = locale10.hasExtensions();
        boolean boolean12 = gregorianCalendar6.after((java.lang.Object) locale10);
        gregorianCalendar6.roll(1, false);
        java.util.TimeZone timeZone16 = gregorianCalendar6.getTimeZone();
        gregorianCalendar6.setTimeInMillis(10598050623576L);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test17283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17283");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.withCenturyOfEra(14);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate21 = localDate18.withYear(876);
        org.joda.time.LocalDate localDate23 = localDate21.withYearOfEra(448);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime24.withMinuteOfHour(276);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 276 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test17284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17284");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        int int9 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks(12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str17 = dateTimeFieldType16.toString();
        boolean boolean18 = localDateTime13.isSupported(dateTimeFieldType16);
        java.util.Date date20 = new java.util.Date((long) (byte) 0);
        int int21 = date20.getMinutes();
        int int22 = date20.getDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) date20, chronology23);
        org.joda.time.LocalDate localDate26 = localDate24.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        long long30 = dateTimeZone28.nextTransition((long) 893);
        org.joda.time.Instant instant31 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone32 = instant31.getZone();
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone32, 0L);
        org.joda.time.DateTime dateTime35 = localDate24.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.LocalDate localDate37 = localDate24.withCenturyOfEra(14);
        org.joda.time.DateTime dateTime38 = localDate37.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate40 = localDate37.plusYears(740);
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(localTime41);
        org.joda.time.LocalDate.Property property43 = localDate40.yearOfEra();
        org.joda.time.LocalDate localDate45 = localDate40.minusDays(776);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDate45);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "monthOfYear" + "'", str17, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 893L + "'", long30 == 893L);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test17285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17285");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645455338964L);
        int int2 = dateTime1.getEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test17286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17286");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean21 = localDateTime16.isSupported(dateTimeFieldType20);
        boolean boolean22 = localDateTime3.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime3.withHourOfDay(5);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.property(dateTimeFieldType26);
        int int28 = localDateTime3.indexOf(dateTimeFieldType26);
        org.joda.time.LocalDateTime.Property property29 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime3.minusYears(237);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime3.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime3.minusWeeks(728);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test17287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17287");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(53637233L);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance();
        long long10 = copticChronology4.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField11 = copticChronology4.months();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType3.getField((org.joda.time.Chronology) copticChronology4);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology4.hourOfHalfday();
        int int15 = dateTime2.get(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(copticChronology4);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 57634718L + "'", long10 == 57634718L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test17288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17288");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 3);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(650);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.lang.String str6 = dateTimeZone3.getName((long) 32769, locale5);
        boolean boolean7 = dateTimeZone3.isFixed();
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTime(dateTimeZone3);
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property10.setCopy("DateTimeField[halfdayOfDay]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[halfdayOfDay]\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.650" + "'", str6, "+00:00:00.650");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test17289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17289");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfCentury(10);
        org.joda.time.LocalDate.Property property23 = localDate20.yearOfCentury();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime25.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime25.era();
        org.joda.time.DateMidnight dateMidnight28 = dateTime25.toDateMidnight();
        org.joda.time.DateTime dateTime30 = dateTime25.withCenturyOfEra(241);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.days();
        java.lang.String str32 = durationFieldType31.toString();
        java.lang.String str33 = durationFieldType31.getName();
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology34.millisOfSecond();
        org.joda.time.DurationField durationField37 = durationFieldType31.getField((org.joda.time.Chronology) copticChronology34);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateTime30, (org.joda.time.Chronology) copticChronology34);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate40 = localDate38.minus(readablePeriod39);
        int int41 = localDate38.getDayOfWeek();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "days" + "'", str32, "days");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "days" + "'", str33, "days");
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test17290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17290");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, 38, 28);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfDay();
        int int5 = localTime3.getHourOfDay();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test17291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17291");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        java.util.Locale locale12 = dateTimeFormatter10.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 902);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        long long18 = dateTimeZone16.nextTransition((long) 893);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = dateTimeZone16.getName((long) (short) 0, locale20);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(dateTimeZone16);
        int int24 = dateTimeZone16.getStandardOffset(1645455234217L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter14.withZone(dateTimeZone16);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance();
        long long33 = copticChronology27.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology27.halfdayOfDay();
        org.joda.time.DurationField durationField35 = copticChronology27.months();
        boolean boolean36 = durationFieldType26.isSupported((org.joda.time.Chronology) copticChronology27);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology27.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        long long41 = copticChronology27.add(readablePeriod38, 60000L, 852);
        org.joda.time.DateTimeField dateTimeField42 = copticChronology27.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter14.withChronology((org.joda.time.Chronology) copticChronology27);
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.secondOfMinute();
        org.joda.time.DurationField durationField46 = copticChronology44.months();
        org.joda.time.DateTimeZone dateTimeZone47 = copticChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField48 = copticChronology44.hourOfHalfday();
        int int49 = copticChronology44.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = copticChronology44.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = copticChronology44.getZone();
        java.lang.String str53 = dateTimeZone52.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter43.withZone(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeFormatter54.getZone();
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 893L + "'", long18 == 893L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(copticChronology27);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 57634718L + "'", long33 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 60000L + "'", long41 == 60000L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.285" + "'", str53, "+00:00:00.285");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
    }

    @Test
    public void test17292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17292");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "DateTimeField[yearOfCentury]", "100", "gregory", "2022-02-21T14:53:54.648", "53640", "DateTimeField[yearOfCentury]", "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList16);
        boolean boolean19 = strSet9.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear(9);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(241);
        boolean boolean27 = strSet9.equals((java.lang.Object) dateTime26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes(21);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfYear();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test17293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17293");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology8 = copticChronology0.withUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withEra(1);
        int int13 = localDateTime12.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime12.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime12.getFields();
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.year();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minusSeconds(43);
        long long22 = copticChronology0.set((org.joda.time.ReadablePartial) localDateTime12, 0L);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField25 = copticChronology0.halfdays();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10598050991015L + "'", long22 == 10598050991015L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test17294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17294");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        int int5 = dateTime4.getMillisOfSecond();
        java.util.Date date6 = dateTime4.toDate();
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        int int8 = dateTime7.getMinuteOfHour();
        org.joda.time.DateTime.Property property9 = dateTime7.hourOfDay();
        org.joda.time.DateTime.Property property10 = dateTime7.era();
        int int11 = dateTime7.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime7.withPeriodAdded(readablePeriod12, 53919748);
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.secondOfMinute();
        org.joda.time.DurationField durationField17 = copticChronology15.months();
        org.joda.time.DateTimeZone dateTimeZone18 = copticChronology15.getZone();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology15);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology15.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology15.era();
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime((org.joda.time.Chronology) copticChronology15);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 317 + "'", int5 == 317);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon May 02 15:03:11 GMT 2022");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54191317 + "'", int11 == 54191317);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test17295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17295");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        int int18 = dateTimeZone9.getOffsetFromLocal((long) 53);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone9);
        int[] intArray20 = localDate19.getValues();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2022, 2, 21]");
    }

    @Test
    public void test17296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17296");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = copticChronology0.days();
        java.lang.String str11 = durationField10.getName();
        org.junit.Assert.assertNotNull(copticChronology0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57634718L + "'", long6 == 57634718L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+00:00:00.285]" + "'", str8, "CopticChronology[+00:00:00.285]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "days" + "'", str11, "days");
    }

    @Test
    public void test17297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17297");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "DateTimeField[yearOfCentury]", "100", "gregory", "2022-02-21T14:53:54.648", "53640", "DateTimeField[yearOfCentury]", "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList16);
        boolean boolean19 = strSet9.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        java.util.Spliterator<java.lang.String> strSpliterator20 = strSet9.spliterator();
        java.util.Iterator<java.lang.String> strItor21 = strSet9.iterator();
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        int int24 = calendar23.getFirstDayOfWeek();
        org.joda.time.tz.Provider provider25 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone27 = provider25.getZone("Property[millisOfSecond]");
        org.joda.time.DateTimeZone dateTimeZone29 = provider25.getZone("");
        java.util.Set<java.lang.String> strSet30 = provider25.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strMap39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, strMap41);
        java.lang.String[] strArray67 = new java.lang.String[] { "CAN", "hi!", "9", "java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-21T14:54:11.392", "1970", "secondOfMinute", "\uc911\uad6d", "DateTimeField[yearOfEra]", "15 Feb 2022 14:54:13 GMT", "2022-02-21T14:54:25.436", "14:54:04.005", "secondOfMinute", "53664488", "minutes", "Coordinated Universal Time", "Sat Feb 07 05:00:00 UTC 1970", "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]", "CopticChronology[Etc/UTC]", "gregory", "days", "clockhourOfHalfday", "Chine", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        java.util.Iterator<java.lang.String> strItor70 = strSet68.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator71 = strSet68.spliterator();
        strSet68.clear();
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList42, (java.util.Collection<java.lang.String>) strSet68);
        boolean boolean74 = strSet30.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap75 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList76 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList42, strMap75);
        boolean boolean77 = calendar23.after((java.lang.Object) languageRangeList76);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList76, strMap78);
        boolean boolean80 = strSet9.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSpliterator20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645455791080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=11,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNull(dateTimeZone27);
        org.junit.Assert.assertNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertNotNull(strSpliterator71);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(languageRangeList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(languageRangeList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test17298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17298");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks(13);
        int int10 = localDate7.getWeekyear();
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.LocalDate localDate13 = property11.roundHalfCeilingCopy();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test17299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17299");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        int int9 = calendar7.getActualMaximum(0);
        java.util.Date date11 = new java.util.Date((long) (byte) 0);
        date11.setSeconds(0);
        int int14 = date11.getDay();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromDateFields(date11);
        date11.setSeconds(149);
        calendar7.setTime(date11);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=149000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2,SECOND=29,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:02:29 GMT 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17300");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category13, locale14);
        java.util.Calendar calendar16 = dateTime12.toCalendar(locale14);
        java.lang.String str17 = locale14.getISO3Language();
        java.lang.String str18 = locale14.getDisplayCountry();
        java.lang.String str19 = locale14.getISO3Country();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1640995199715,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.285,offset=285,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=285,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "China" + "'", str18, "China");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CHN" + "'", str19, "CHN");
    }

    @Test
    public void test17301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17301");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology8 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.clockhourOfHalfday();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime11, 53664488, locale13);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str17 = locale16.getScript();
        java.lang.String str18 = dateTimeField9.getAsText(10598050619282L, locale16);
        int int20 = dateTimeField9.getMinimumValue(4668679150369000L);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "53664488" + "'", str14, "53664488");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2" + "'", str18, "2");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test17302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17302");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(53);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        boolean boolean9 = localTime5.isSupported(durationFieldType8);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) localTime5);
        org.joda.time.LocalTime.Property property11 = localTime5.millisOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter14.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter14.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 14);
        int int24 = dateTimeFormatter19.getDefaultYear();
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter19.withLocale(locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        int int29 = property11.getMaximumTextLength(locale27);
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str31 = locale27.toLanguageTag();
        java.util.Locale locale32 = locale27.stripExtensions();
        java.lang.String str33 = locale27.getLanguage();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(dateTimeParser15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2000 + "'", int24 == 2000);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en-CA" + "'", str31, "en-CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
    }

    @Test
    public void test17303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17303");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale4 = new java.util.Locale("clockhourOfHalfday", "English (Canada)", "");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str8 = nameProvider0.getName(locale4, "2022-02-21T14:54:51.332", "\u52a0\u62ff\u5927");
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.lang.String str12 = nameProvider0.getShortName(locale9, "894", "87");
        java.util.Locale locale13 = null;
        java.lang.String str16 = nameProvider0.getName(locale13, "dayOfYear", "secondOfMinute");
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Date date20 = new java.util.Date((long) (byte) 0);
        int int21 = date20.getMinutes();
        int int22 = date20.getDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) date20, chronology23);
        int int25 = localDate24.getDayOfWeek();
        org.joda.time.LocalDate localDate27 = localDate24.minusWeeks(272);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone30.nextTransition((long) 893);
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = dateTimeZone30.getName((long) (short) 0, locale34);
        java.lang.String str36 = localDate24.toString("+00:00", locale34);
        java.lang.String str37 = locale34.getISO3Country();
        java.lang.String str38 = locale17.getDisplayCountry(locale34);
        java.lang.String str41 = nameProvider0.getShortName(locale34, "4", "2022-02-21T14:56:55.555");
        java.util.Locale.Category category42 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category42, locale43);
        java.lang.String str45 = locale43.getDisplayName();
        java.lang.String str46 = locale43.getVariant();
        java.lang.String str49 = nameProvider0.getShortName(locale43, "2042-03-21T15:01:29.629Z", "53844");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale4.toString(), "clockhourofhalfday_ENGLISH (CANADA)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "clockhourofhalfday_ENGLISH (CANADA)");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 893L + "'", long32 == 893L);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CAN" + "'", str37, "CAN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.FORMAT + "'", category42.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese (China)" + "'", str45, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test17304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17304");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (short) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(616);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = property15.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        int int20 = dateTime19.getMinuteOfDay();
        org.joda.time.Instant instant21 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime(dateTimeZone22);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant28 = instant24.withDurationAdded(readableDuration26, 2);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        int int31 = dateTime30.getMinuteOfDay();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks(10);
        org.joda.time.DateTime.Property property34 = dateTime30.minuteOfDay();
        org.joda.time.Instant instant35 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        long long38 = dateTimeZone36.nextTransition((long) 893);
        org.joda.time.Instant instant39 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone40 = instant39.getZone();
        long long42 = dateTimeZone36.getMillisKeepLocal(dateTimeZone40, 0L);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime30.toMutableDateTime(dateTimeZone36);
        boolean boolean44 = instant28.isEqual((org.joda.time.ReadableInstant) dateTime30);
        int int45 = dateTime19.compareTo((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Instant instant48 = instant28.withDurationAdded((long) 70, 467);
        org.joda.time.Chronology chronology49 = instant28.getChronology();
        long long50 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) instant28);
        boolean boolean51 = instant28.isBeforeNow();
        org.joda.time.DateTime dateTime52 = instant28.toDateTime();
        boolean boolean54 = instant28.isEqual(10598050696109L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 903 + "'", int20 == 903);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(instant28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 903 + "'", int31 == 903);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 893L + "'", long38 == 893L);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test17305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17305");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        long long8 = copticChronology2.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology2.halfdayOfDay();
        org.joda.time.DurationField durationField10 = copticChronology2.halfdays();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology11);
        int int13 = localTime12.getHourOfDay();
        org.joda.time.LocalTime.Property property14 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property14.addCopy((long) 52);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance();
        long long24 = copticChronology18.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField25 = copticChronology18.months();
        java.lang.String str26 = copticChronology18.toString();
        int int27 = copticChronology18.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology18.monthOfYear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 43);
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstance();
        long long37 = copticChronology31.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology31.clockhourOfDay();
        org.joda.time.Instant instant40 = org.joda.time.Instant.now();
        org.joda.time.Instant instant42 = instant40.withMillis((long) 1);
        org.joda.time.Instant instant43 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        long long46 = dateTimeZone44.nextTransition((long) 893);
        org.joda.time.Instant instant47 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone48 = instant47.getZone();
        long long50 = dateTimeZone44.getMillisKeepLocal(dateTimeZone48, 0L);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((java.lang.Object) instant40, dateTimeZone48);
        org.joda.time.LocalTime localTime53 = localTime51.minusMillis(12);
        org.joda.time.LocalTime localTime55 = localTime51.plusMillis((int) (short) 10);
        int[] intArray57 = copticChronology31.get((org.joda.time.ReadablePartial) localTime55, (long) 17);
        int int58 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime30, intArray57);
        java.util.Calendar.Builder builder59 = builder17.setFields(intArray57);
        copticChronology2.validate((org.joda.time.ReadablePartial) localTime16, intArray57);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) 10, (org.joda.time.Chronology) copticChronology2);
        boolean boolean62 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) copticChronology2);
        java.lang.String str63 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 57635003L + "'", long8 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 57635003L + "'", long24 == 57635003L);
        org.junit.Assert.assertNotNull(durationField25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CopticChronology[UTC]" + "'", str26, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 57635003L + "'", long37 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 893L + "'", long46 == 893L);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 17]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 13 + "'", int58 == 13);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "millisOfSecond" + "'", str63, "millisOfSecond");
    }

    @Test
    public void test17306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17306");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(588, 526, 54123692, (-457070), 580, 424);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -457070 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17307");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = localTime5.plusSeconds((int) (byte) 1);
        java.lang.String str9 = localTime5.toString("14:59:44.576");
        java.lang.String str10 = localTime5.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "14:59:44.576" + "'", str9, "14:59:44.576");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "15:03:11.351" + "'", str10, "15:03:11.351");
    }

    @Test
    public void test17308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17308");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.hourOfHalfday();
        java.lang.String str15 = dateTimeField14.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField14.getType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57635003L + "'", long7 == 57635003L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str15, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test17309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17309");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(10598050700000L);
    }

    @Test
    public void test17310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17310");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.setExtension('x', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.addUnicodeLocaleAttribute("1970-01-01T00:00:00.100Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1970-01-01T00:00:00.100Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test17311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17311");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        java.util.Locale locale12 = dateTimeFormatter10.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 902);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        long long18 = dateTimeZone16.nextTransition((long) 893);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = dateTimeZone16.getName((long) (short) 0, locale20);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(dateTimeZone16);
        int int24 = dateTimeZone16.getStandardOffset(1645455234217L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter14.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatter14.getParser();
        org.joda.time.Chronology chronology27 = dateTimeFormatter14.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter14.withPivotYear((-52));
        boolean boolean30 = dateTimeFormatter14.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter14.withZoneUTC();
        java.io.Writer writer33 = null;
        java.util.Date date35 = new java.util.Date((long) (byte) 0);
        int int36 = date35.getMinutes();
        int int37 = date35.getDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) date35, chronology38);
        org.joda.time.LocalDate.Property property40 = localDate39.dayOfWeek();
        org.joda.time.LocalDate.Property property41 = localDate39.monthOfYear();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.LocalDate localDate43 = property41.roundHalfCeilingCopy();
        org.joda.time.Instant instant44 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        int int48 = dateTime47.getMinuteOfDay();
        int int49 = instant44.compareTo((org.joda.time.ReadableInstant) dateTime47);
        int int50 = property41.compareTo((org.joda.time.ReadableInstant) dateTime47);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(writer33, (org.joda.time.ReadableInstant) dateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 893L + "'", long18 == 893L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimeParser26);
        org.junit.Assert.assertNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 903 + "'", int48 == 903);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test17312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17312");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        boolean boolean8 = dateTimeFormatter7.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 53638);
        org.joda.time.Chronology chronology11 = dateTimeFormatter7.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withDefaultYear(53669992);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter7.withPivotYear(53788542);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter7.withPivotYear(53737013);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime19 = dateTimeFormatter17.parseMutableDateTime("149093-02-25T14:01:51.366Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test17313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17313");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime13.minus(readablePeriod14);
        org.joda.time.DateTime dateTime16 = localTime15.toDateTimeToday();
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(669);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.plus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 96);
        boolean boolean23 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.minusHours(539);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withPeriodAdded(readablePeriod26, (-1971));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTime25.toString("GMT+00:52");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test17314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17314");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str2 = locale1.getISO3Language();
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.lang.String str5 = locale1.getDisplayLanguage(locale4);
        java.util.Set<java.lang.String> strSet6 = locale1.getUnicodeLocaleKeys();
        java.lang.Object[] objArray7 = strSet6.toArray();
        strSet6.clear();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strSet6.spliterator();
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(strSpliterator9);
        org.junit.Assert.assertNotNull(strItor10);
    }

    @Test
    public void test17315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17315");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra(21);
        org.joda.time.LocalDate.Property property40 = localDate39.monthOfYear();
        org.joda.time.LocalDate.Property property41 = localDate39.weekOfWeekyear();
        org.joda.time.LocalDate localDate43 = property41.addWrapFieldToCopy(294);
        int int44 = localDate43.getMonthOfYear();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
    }

    @Test
    public void test17316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17316");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property13 = dateTime11.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded((long) (byte) 10, (int) 'a');
        org.joda.time.DateTime.Property property20 = dateTime16.millisOfSecond();
        org.joda.time.DateTime dateTime22 = property20.addToCopy((long) 272);
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        boolean boolean24 = dateTimeZone14.equals((java.lang.Object) property23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone14.getName((long) 518, locale27);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test17317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17317");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("minuteOfDay");
        timeZone1.setID("minuteOfDay");
        int int5 = timeZone1.getOffset(1645455591147L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeZone1.getDisplayName(true, 687);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 687");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test17318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17318");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfCentury();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeField3.getAsShortText(100, locale5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusSeconds((int) (byte) 10);
        int int16 = localDateTime15.getYearOfCentury();
        java.lang.String str17 = localDateTime15.toString();
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfFloorCopy();
        boolean boolean26 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int[] intArray33 = new int[] { 53637233, 69, (short) -1, (short) 10, 16, 616 };
        int int34 = dateTimeField3.getMaximumValue((org.joda.time.ReadablePartial) localDateTime15, intArray33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime15.hourOfDay();
        java.lang.String str36 = localDateTime15.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int38 = localDateTime15.get(dateTimeFieldType37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime15.plusMillis(986);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-21T15:03:21.524" + "'", str17, "2022-02-21T15:03:21.524");
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[53637233, 69, -1, 10, 16, 616]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-21T15:03:21.524" + "'", str36, "2022-02-21T15:03:21.524");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 524 + "'", int38 == 524);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test17319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17319");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology1.getZone();
        org.joda.time.DurationField durationField13 = copticChronology1.years();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.millisOfSecond();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addToCopy(19044);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57635003L + "'", long7 == 57635003L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test17320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17320");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.dayOfYear();
        java.lang.String str12 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.centuryOfEra();
        org.joda.time.Chronology chronology15 = copticChronology0.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology0.millisOfSecond();
        long long19 = dateTimeField16.add(19044L, 1645455461842L);
        int int21 = dateTimeField16.getMinimumValue((-126197631000L));
        long long23 = dateTimeField16.roundHalfEven((long) 53992814);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[UTC]" + "'", str8, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455480886L + "'", long19 == 1645455480886L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53992814L + "'", long23 == 53992814L);
    }

    @Test
    public void test17321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17321");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 0);
        boolean boolean6 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime0.getMillisOfDay();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime10 = dateTime0.withFieldAdded(durationFieldType8, 836);
        java.lang.String str11 = durationFieldType8.toString();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 54191569 + "'", int7 == 54191569);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "minutes" + "'", str11, "minutes");
    }

    @Test
    public void test17322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17322");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.hourOfHalfday();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeZone dateTimeZone11 = copticChronology0.getZone();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test17323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17323");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField5 = copticChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.clockhourOfDay();
        long long10 = copticChronology0.add(1607294151734400000L, 1645455263014L, 2018);
        int int11 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1610614680455162252L + "'", long10 == 1610614680455162252L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17324");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime localTime15 = localTime11.plusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfDay();
        long long17 = property16.remainder();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        java.lang.String str20 = dateTimeField18.getAsText(10598050791355L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "53991355" + "'", str20, "53991355");
    }

    @Test
    public void test17325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17325");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMillis(912);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int14 = localDateTime12.get(dateTimeFieldType13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withWeekyear(53868432);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17326");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.addCopy(100L);
        org.joda.time.LocalTime localTime7 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = localTime7.plusMinutes(74);
        int int10 = localTime9.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 58632000 + "'", int10 == 58632000);
    }

    @Test
    public void test17327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17327");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField8 = copticChronology0.hours();
        org.joda.time.DurationField durationField9 = copticChronology0.minutes();
        org.joda.time.DurationField durationField10 = copticChronology0.hours();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test17328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17328");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        java.util.Date date3 = new java.util.Date((long) (byte) 0);
        int int4 = date3.getMinutes();
        int int5 = date3.getMinutes();
        boolean boolean6 = date1.before(date3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        int int10 = localTime9.getHourOfDay();
        org.joda.time.LocalTime.Property property11 = localTime9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime16 = dateTime13.withFieldAdded(durationFieldType14, 0);
        boolean boolean17 = localTime9.isSupported(durationFieldType14);
        org.joda.time.LocalTime localTime19 = localTime7.withFieldAdded(durationFieldType14, 8);
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance();
        long long26 = copticChronology20.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology20.era();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology20.dayOfWeek();
        boolean boolean31 = durationFieldType14.isSupported((org.joda.time.Chronology) copticChronology20);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology20.minuteOfHour();
        org.joda.time.Chronology chronology33 = copticChronology20.withUTC();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 57635003L + "'", long26 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test17329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17329");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.withCenturyOfEra(14);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate21 = localDate18.withWeekyear(437);
        org.joda.time.DateTime dateTime22 = localDate21.toDateTimeAtCurrentTime();
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        boolean boolean24 = instant23.isAfterNow();
        org.joda.time.Instant instant26 = instant23.plus((long) 53671795);
        org.joda.time.Instant instant27 = instant23.toInstant();
        org.joda.time.Instant instant29 = instant23.plus(1645455303685L);
        int int30 = dateTime22.compareTo((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime.Property property31 = dateTime22.weekOfWeekyear();
        org.joda.time.DateTime.Property property32 = dateTime22.millisOfDay();
        int int33 = dateTime22.getEra();
        org.joda.time.YearMonthDay yearMonthDay34 = dateTime22.toYearMonthDay();
        boolean boolean36 = dateTime22.isBefore(272L);
        org.joda.time.DateTime dateTime38 = dateTime22.withYear(1397);
        org.joda.time.DateTime dateTime39 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.plusMinutes((-1006));
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test17330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17330");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("112");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=112");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17331");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.weekyearOfCentury();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime10.minus(readablePeriod11);
        int int13 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime.Property property14 = localTime12.millisOfSecond();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.DurationField durationField16 = property14.getLeapDurationField();
        org.joda.time.LocalTime localTime17 = property14.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test17332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17332");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "DateTimeField[yearOfCentury]", "100", "gregory", "2022-02-21T14:53:54.648", "53640", "DateTimeField[yearOfCentury]", "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList16);
        boolean boolean19 = strSet9.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfWeek(2);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) dateTime21);
        int int25 = dateTime24.getYearOfCentury();
        boolean boolean26 = strSet9.remove((java.lang.Object) int25);
        strSet9.clear();
        java.util.Iterator<java.lang.String> strItor28 = strSet9.iterator();
        boolean boolean30 = strSet9.add("668");
        strSet9.clear();
        java.lang.Object obj32 = null;
        boolean boolean33 = strSet9.contains(obj32);
        int int34 = strSet9.size();
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology35.hourOfDay();
        boolean boolean39 = strSet9.contains((java.lang.Object) copticChronology35);
        java.lang.String[] strArray44 = new java.lang.String[] { "14:57:20.100", "819", "1970-1-1 0:52:00", "30" };
        java.lang.String[] strArray49 = new java.lang.String[] { "14:57:20.100", "819", "1970-1-1 0:52:00", "30" };
        java.lang.String[][] strArray50 = new java.lang.String[][] { strArray44, strArray49 };
        java.lang.String[][][] strArray51 = new java.lang.String[][][] { strArray50 };
        java.lang.String[] strArray56 = new java.lang.String[] { "14:57:20.100", "819", "1970-1-1 0:52:00", "30" };
        java.lang.String[] strArray61 = new java.lang.String[] { "14:57:20.100", "819", "1970-1-1 0:52:00", "30" };
        java.lang.String[][] strArray62 = new java.lang.String[][] { strArray56, strArray61 };
        java.lang.String[][][] strArray63 = new java.lang.String[][][] { strArray62 };
        java.lang.String[] strArray68 = new java.lang.String[] { "14:57:20.100", "819", "1970-1-1 0:52:00", "30" };
        java.lang.String[] strArray73 = new java.lang.String[] { "14:57:20.100", "819", "1970-1-1 0:52:00", "30" };
        java.lang.String[][] strArray74 = new java.lang.String[][] { strArray68, strArray73 };
        java.lang.String[][][] strArray75 = new java.lang.String[][][] { strArray74 };
        java.lang.String[][][][] strArray76 = new java.lang.String[][][][] { strArray51, strArray63, strArray75 };
        java.lang.String[][][][] strArray77 = strSet9.toArray(strArray76);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
    }

    @Test
    public void test17333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17333");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int4 = localDateTime2.get(dateTimeFieldType3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance();
        long long16 = copticChronology10.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField17 = copticChronology10.months();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType9.getField((org.joda.time.Chronology) copticChronology10);
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime8.withField(dateTimeFieldType9, 119);
        org.joda.time.LocalDateTime.Property property22 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime8.withWeekyear(758);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 57635003L + "'", long16 == 57635003L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test17334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17334");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.year();
        int int16 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(893L);
        org.joda.time.LocalDateTime localDateTime20 = property17.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusHours(1795);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime28 = dateTime25.withFieldAdded(durationFieldType26, 0);
        org.joda.time.DateTime.Property property29 = dateTime25.minuteOfDay();
        org.joda.time.DateTime dateTime30 = property29.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property31 = dateTime30.secondOfMinute();
        java.lang.String str32 = property31.toString();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str35 = property31.getAsShortText(locale34);
        org.joda.time.DateTime dateTime36 = property31.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfDay();
        org.joda.time.DateTime dateTime38 = property37.roundCeilingCopy();
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.Instant instant40 = dateTime38.toInstant();
        int int41 = dateTime38.getMinuteOfHour();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withEra(1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusHours(893);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.minus(readablePeriod48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.plusMonths(44);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.property(dateTimeFieldType52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.minusMillis(2);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withEra(1);
        int int61 = localDateTime60.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = localDateTime60.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray64 = localDateTime60.getFields();
        org.joda.time.LocalDateTime.Property property65 = localDateTime60.year();
        org.joda.time.LocalDateTime localDateTime66 = property65.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = localDateTime66.toDateTime((org.joda.time.ReadableInstant) dateTime68);
        java.util.Locale.Category category70 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale71 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category70, locale71);
        java.util.Calendar calendar73 = dateTime69.toCalendar(locale71);
        org.joda.time.DateTime dateTime75 = dateTime69.withMillis(27738633602000L);
        org.joda.time.DateTime.Property property76 = dateTime75.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(dateTimeZone77);
        org.joda.time.DurationFieldType durationFieldType79 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime81 = dateTime78.withFieldAdded(durationFieldType79, 0);
        org.joda.time.DateTime.Property property82 = dateTime78.minuteOfDay();
        org.joda.time.DateTime dateTime83 = property82.withMinimumValue();
        org.joda.time.DateTime dateTime85 = property82.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime86 = property82.roundCeilingCopy();
        org.joda.time.DateTime dateTime87 = property82.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime88 = property82.roundCeilingCopy();
        org.joda.time.DateTime dateTime90 = property82.setCopy(0);
        org.joda.time.DateTime.Property property91 = dateTime90.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property91.getFieldType();
        int int93 = dateTime75.get(dateTimeFieldType92);
        int int94 = localDateTime56.get(dateTimeFieldType92);
        org.joda.time.DateTime.Property property95 = dateTime38.property(dateTimeFieldType92);
        boolean boolean96 = localDateTime23.isSupported(dateTimeFieldType92);
        org.joda.time.LocalDateTime localDateTime98 = localDateTime23.plusMinutes(485);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[secondOfMinute]" + "'", str32, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(instant40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeFieldArray64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + category70 + "' != '" + java.util.Locale.Category.FORMAT + "'", category70.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2849 + "'", int93 == 2849);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2025 + "'", int94 == 2025);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(localDateTime98);
    }

    @Test
    public void test17335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17335");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear(0);
        java.util.Locale locale14 = dateTimeFormatter13.getLocale();
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(locale14);
    }

    @Test
    public void test17336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17336");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime11.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusSeconds((int) (byte) 10);
        int int17 = localDateTime16.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusYears(0);
        boolean boolean20 = copticChronology0.equals((java.lang.Object) localDateTime19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology0.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance();
        long long28 = copticChronology22.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology22.halfdayOfDay();
        org.joda.time.Chronology chronology30 = copticChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfDay();
        boolean boolean32 = copticChronology0.equals((java.lang.Object) dateTimeField31);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.era();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology0.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = dateTimeField35.set((long) (-6047984), "2022-02-21T14:55:34.334");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:55:34.334\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 57635003L + "'", long28 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test17337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17337");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        int int7 = dateTime6.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.minus(readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime6.withYearOfEra(740);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        int int13 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        int int16 = dateTime15.getMinuteOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks(10);
        int int19 = dateTime18.getMillisOfSecond();
        java.util.Date date20 = dateTime18.toDate();
        org.joda.time.DateTime dateTime21 = dateTime18.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime11, dateTimeZone24);
        java.util.TimeZone timeZone26 = dateTimeZone24.toTimeZone();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 903 + "'", int16 == 903);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 884 + "'", int19 == 884);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon May 02 15:03:11 GMT 2022");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test17338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17338");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.property(dateTimeFieldType1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(31);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths(90);
        int int8 = localDateTime5.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test17339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17339");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfDay();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded(readableDuration9, 6);
        org.joda.time.DateTime dateTime13 = dateTime6.minusMinutes((int) 'a');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17340");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        java.util.Locale locale12 = dateTimeFormatter10.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 902);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        long long18 = dateTimeZone16.nextTransition((long) 893);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = dateTimeZone16.getName((long) (short) 0, locale20);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(dateTimeZone16);
        int int24 = dateTimeZone16.getStandardOffset(1645455234217L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter14.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatter14.getParser();
        org.joda.time.Chronology chronology27 = dateTimeFormatter14.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter14.withPivotYear((-52));
        boolean boolean30 = dateTimeFormatter14.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter14.withZoneUTC();
        java.io.Writer writer33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        int int36 = localDateTime35.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusMillis(53642140);
        java.lang.String str39 = localDateTime35.toString();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withYear(474);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMillisOfSecond(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(writer33, (org.joda.time.ReadablePartial) localDateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 893L + "'", long18 == 893L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(dateTimeParser26);
        org.junit.Assert.assertNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-21T15:03:11.923" + "'", str39, "2022-02-21T15:03:11.923");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test17341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17341");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.DurationField durationField5 = property3.getRangeDurationField();
        org.joda.time.LocalTime localTime6 = property3.roundCeilingCopy();
        int int7 = localTime6.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance();
        long long15 = copticChronology9.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField16 = copticChronology9.months();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType8.getField((org.joda.time.Chronology) copticChronology9);
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType8.getRangeDurationType();
        java.lang.String str19 = durationFieldType18.toString();
        boolean boolean20 = localTime6.isSupported(durationFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = localTime6.withSecondOfMinute(810);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 810 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 57635003L + "'", long15 == 57635003L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "years" + "'", str19, "years");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test17342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17342");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks(13);
        org.joda.time.LocalDate localDate11 = localDate7.plusWeeks(339);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfYear();
        org.joda.time.LocalDate.Property property13 = localDate11.year();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate11.minus(readablePeriod14);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test17343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17343");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.property(dateTimeFieldType1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(31);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plus(readableDuration6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        long long18 = dateTimeZone9.convertLocalToUTC((long) 11, false);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra(1);
        int int24 = localDateTime23.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDateTime23.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusSeconds((int) (short) 1);
        int int29 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfCeilingCopy();
        java.util.Locale locale33 = java.util.Locale.UK;
        org.joda.time.LocalDateTime localDateTime34 = property30.setCopy("0", locale33);
        java.lang.String str35 = dateTimeZone9.getName(31536900000L, locale33);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str39 = locale38.getISO3Language();
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.lang.String str42 = locale38.getDisplayLanguage(locale41);
        java.lang.String str43 = dateTimeZone9.getShortName((long) 935, locale38);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime7, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minus(readableDuration45);
        int int47 = localDateTime44.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime52 = dateTime49.withFieldAdded(durationFieldType50, 0);
        org.joda.time.DateTime.Property property53 = dateTime49.minuteOfDay();
        org.joda.time.DateTime dateTime54 = property53.roundHalfEvenCopy();
        int int55 = dateTime54.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.minus(readablePeriod56);
        org.joda.time.DateTime dateTime59 = dateTime54.withYearOfEra(740);
        org.joda.time.DateTime dateTime61 = dateTime59.withYear(999);
        org.joda.time.DateTime.Property property62 = dateTime59.millisOfSecond();
        org.joda.time.DateTime.Property property63 = dateTime59.weekyear();
        org.joda.time.DateTime dateTime64 = localDateTime44.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 11L + "'", long18 == 11L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test17344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17344");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 10);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test17345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17345");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfCentury(10);
        org.joda.time.LocalDate localDate24 = localDate22.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate26 = localDate24.minusYears(900000);
        org.joda.time.LocalDate.Property property27 = localDate24.dayOfMonth();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusYears(389);
        java.lang.String str31 = localDate30.toString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0021-12-18" + "'", str31, "0021-12-18");
    }

    @Test
    public void test17346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17346");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.dayOfMonth();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths(146841);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test17347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17347");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMillisOfDay();
        org.joda.time.DateTime dateTime2 = localTime0.toDateTimeToday();
        org.joda.time.LocalTime.Property property3 = localTime0.millisOfSecond();
        org.joda.time.LocalTime localTime4 = property3.withMinimumValue();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 54192079 + "'", int1 == 54192079);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test17348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17348");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate localDate22 = localDate18.plusWeeks(20);
        org.joda.time.LocalDate localDate24 = localDate18.withYearOfCentury(6);
        org.joda.time.LocalDate localDate26 = localDate24.withEra(0);
        org.joda.time.LocalDate localDate28 = localDate26.plusDays(430);
        org.joda.time.DurationFieldType durationFieldType29 = null;
        boolean boolean30 = localDate26.isSupported(durationFieldType29);
        int int31 = localDate26.getDayOfYear();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 346 + "'", int31 == 346);
    }

    @Test
    public void test17349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17349");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.lang.String[] strArray9 = new java.lang.String[] { "Property[secondOfMinute]" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.lang.String str12 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String str20 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList18);
        java.lang.String[] strArray22 = new java.lang.String[] { "Property[secondOfMinute]" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList23);
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "DateTimeField[yearOfCentury]", "100", "gregory", "2022-02-21T14:53:54.648", "53640", "DateTimeField[yearOfCentury]", "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList43);
        boolean boolean46 = strSet36.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39);
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet36);
        strSet36.clear();
        int int49 = strSet36.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test17350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17350");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minusWeeks(20);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.plusSeconds(17);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readableDuration18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((-2));
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDurationAdded(readableDuration22, 707);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test17351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17351");
        java.util.Date date2 = new java.util.Date((long) (byte) 0);
        int int3 = date2.getMinutes();
        int int4 = date2.getDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object) date2, chronology5);
        org.joda.time.LocalDate localDate8 = localDate6.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        long long12 = dateTimeZone10.nextTransition((long) 893);
        org.joda.time.Instant instant13 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        long long16 = dateTimeZone10.getMillisKeepLocal(dateTimeZone14, 0L);
        org.joda.time.DateTime dateTime17 = localDate6.toDateTimeAtMidnight(dateTimeZone10);
        java.util.Date date19 = new java.util.Date((long) (byte) 0);
        int int20 = date19.getMinutes();
        int int21 = date19.getDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) date19, chronology22);
        org.joda.time.LocalDate localDate25 = localDate23.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant26 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone27 = instant26.getZone();
        long long29 = dateTimeZone27.nextTransition((long) 893);
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone31, 0L);
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.DateTime dateTime35 = localDate6.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate38 = localDate6.withPeriodAdded(readablePeriod36, 122);
        int int39 = localDate38.getYear();
        int int40 = localDate38.getDayOfWeek();
        org.joda.time.LocalDate localDate42 = localDate38.plusDays(669);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 510);
        org.joda.time.Instant instant45 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone46 = instant45.getZone();
        long long48 = dateTimeZone46.nextTransition((long) 893);
        java.lang.String str50 = dateTimeZone46.getName((long) 100);
        org.joda.time.Interval interval51 = localDate44.toInterval(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = localDate38.toDateTimeAtStartOfDay(dateTimeZone46);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 53738895, dateTimeZone46);
        java.util.TimeZone timeZone54 = dateTimeZone46.toTimeZone();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone54);
        java.util.TimeZone.setDefault(timeZone54);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 893L + "'", long12 == 893L);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 893L + "'", long29 == 893L);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 893L + "'", long48 == 893L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00" + "'", str50, "+00:00");
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645455792132,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=12,MILLISECOND=132,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test17352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17352");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.dayOfYear();
        java.lang.String str12 = copticChronology0.toString();
        java.lang.String str13 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology0.secondOfDay();
        java.util.Date date16 = new java.util.Date((long) (byte) 0);
        int int17 = date16.getMinutes();
        int int18 = date16.getDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) date16, chronology19);
        org.joda.time.LocalDate localDate22 = localDate20.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        long long26 = dateTimeZone24.nextTransition((long) 893);
        org.joda.time.Instant instant27 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone28, 0L);
        org.joda.time.DateTime dateTime31 = localDate20.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.LocalDate localDate33 = localDate20.withCenturyOfEra(14);
        long long35 = copticChronology0.set((org.joda.time.ReadablePartial) localDate33, 19439481600100L);
        org.joda.time.DateTimeField dateTimeField36 = copticChronology0.yearOfEra();
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology0.hourOfHalfday();
        int int39 = copticChronology0.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[UTC]" + "'", str8, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CopticChronology[UTC]" + "'", str13, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 893L + "'", long26 == 893L);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-6826118399900L) + "'", long35 == (-6826118399900L));
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
    }

    @Test
    public void test17353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17353");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 510);
        org.joda.time.Instant instant2 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        long long5 = dateTimeZone3.nextTransition((long) 893);
        java.lang.String str7 = dateTimeZone3.getName((long) 100);
        org.joda.time.Interval interval8 = localDate1.toInterval(dateTimeZone3);
        org.joda.time.LocalDate localDate10 = localDate1.plusMonths(53728689);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate13 = localDate1.withPeriodAdded(readablePeriod11, 0);
        org.joda.time.LocalDate localDate15 = localDate13.plusYears(53825);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 893L + "'", long5 == 893L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test17354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17354");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.plus(readableDuration11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfWeek();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusHours(484);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test17355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17355");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.setCopy(437);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        int int11 = property10.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundCeilingCopy();
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plus(readableDuration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes(898);
        int int18 = localDateTime17.getEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusDays(361);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readableDuration21);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43722 + "'", int13 == 43722);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test17356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17356");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.Instant instant5 = instant3.withMillis((long) 1);
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        long long9 = dateTimeZone7.nextTransition((long) 893);
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        long long13 = dateTimeZone7.getMillisKeepLocal(dateTimeZone11, 0L);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) instant3, dateTimeZone11);
        org.joda.time.LocalTime localTime16 = localTime14.minusMillis(12);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay(1630547712000008L, chronology17);
        boolean boolean19 = durationFieldType1.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology17.days();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 893L + "'", long9 == 893L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test17357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17357");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime1.toGregorianCalendar();
        int int7 = gregorianCalendar6.getFirstDayOfWeek();
        gregorianCalendar6.setMinimalDaysInFirstWeek((int) (byte) 1);
        gregorianCalendar6.setFirstDayOfWeek((int) '#');
        gregorianCalendar6.setLenient(false);
        gregorianCalendar6.setTimeInMillis((long) (byte) -1);
        int int16 = gregorianCalendar6.getFirstDayOfWeek();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test17358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17358");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        int int9 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks(12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readableDuration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis(53968);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17359");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 0, locale5);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(14);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(2);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) dateTime11);
        int int15 = dateTime14.getEra();
        org.joda.time.TimeOfDay timeOfDay16 = dateTime14.toTimeOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(21);
        org.joda.time.DateTime dateTime20 = dateTime14.minusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        int int24 = dateTime21.get(dateTimeFieldType22);
        int int25 = dateTime21.getMinuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime28 = dateTime21.withPeriodAdded(readablePeriod26, 490);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime30.withDurationAdded((long) (byte) 10, (int) 'a');
        boolean boolean34 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime33.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime33.plus(readableDuration36);
        java.lang.String str39 = dateTime37.toString("14:56:45.239");
        org.joda.time.DateTime dateTime41 = dateTime37.minus(1645455628871L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 843 + "'", int25 == 843);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "14:56:45.239" + "'", str39, "14:56:45.239");
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test17360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17360");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance();
        long long8 = copticChronology2.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField9 = copticChronology2.months();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType1.getField((org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = copticChronology2.getZone();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology2.weekyear();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(35L, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology2.dayOfWeek();
        org.joda.time.DurationField durationField17 = copticChronology2.millis();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology2.weekyear();
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        long long23 = dateTimeZone21.nextTransition((long) 893);
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.lang.String str26 = dateTimeZone21.getName((long) (short) 0, locale25);
        java.util.TimeZone timeZone27 = dateTimeZone21.toTimeZone();
        java.lang.String str29 = dateTimeZone21.getName((long) 12);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(15701731200999L, dateTimeZone21);
        org.joda.time.Chronology chronology31 = copticChronology2.withZone(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 57635003L + "'", long8 == 57635003L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 893L + "'", long23 == 893L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test17361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17361");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(324, 212, 371, 54182418, 53782602, 814);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54182418 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17362");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime dateTime6 = dateTime1.withWeekOfWeekyear((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime1.minus(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, 0);
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.withYearOfEra(740);
        org.joda.time.DateTime dateTime22 = dateTime20.withYear(999);
        boolean boolean23 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfEra(893);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.Instant instant30 = instant28.withMillis((long) 53871859);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime35 = dateTime32.withFieldAdded(durationFieldType33, 0);
        org.joda.time.DateTime.Property property36 = dateTime32.minuteOfDay();
        org.joda.time.DateTime dateTime37 = property36.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property38 = dateTime37.secondOfMinute();
        java.lang.String str39 = property38.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime44 = dateTime41.withFieldAdded(durationFieldType42, 0);
        org.joda.time.DateTime.Property property45 = dateTime41.minuteOfDay();
        org.joda.time.DateTime dateTime46 = property45.roundHalfEvenCopy();
        int int47 = dateTime46.getYearOfCentury();
        long long48 = property38.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfWeek(2);
        long long53 = dateTime50.getMillis();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime56 = dateTime50.withPeriodAdded(readablePeriod54, 9);
        int int57 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime.Property property58 = dateTime56.weekyear();
        org.joda.time.DateTime.Property property59 = dateTime56.weekyear();
        java.util.Date date61 = new java.util.Date((long) (byte) 0);
        int int62 = date61.getMinutes();
        int int63 = date61.getDay();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) date61, chronology64);
        int int66 = localDate65.getDayOfWeek();
        org.joda.time.LocalDate localDate68 = localDate65.minusWeeks(272);
        org.joda.time.LocalDate.Property property69 = localDate68.dayOfYear();
        org.joda.time.LocalDate localDate70 = property69.roundHalfCeilingCopy();
        int int71 = property69.getMaximumValueOverall();
        org.joda.time.LocalDate localDate72 = property69.withMinimumValue();
        int int73 = property59.compareTo((org.joda.time.ReadablePartial) localDate72);
        org.joda.time.DateTime dateTime74 = property59.roundCeilingCopy();
        org.joda.time.DateTime dateTime75 = property59.roundHalfCeilingCopy();
        boolean boolean76 = instant28.isEqual((org.joda.time.ReadableInstant) dateTime75);
        int int77 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Property[secondOfMinute]" + "'", str39, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645455792299L + "'", long53 == 1645455792299L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 366 + "'", int71 == 366);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test17363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17363");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property5.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime10 = property5.addWrapFieldToCopy(616);
        org.joda.time.DateTime dateTime11 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = property5.getDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfYear();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks(56770311);
        boolean boolean16 = dateTime12.isBeforeNow();
        org.joda.time.DateTime dateTime18 = dateTime12.plusSeconds(986);
        org.joda.time.DateTime dateTime20 = dateTime12.withYear(538);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime12.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime12.getZone();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone22);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test17364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17364");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter2.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
    }

    @Test
    public void test17365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17365");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(5);
        java.util.Locale locale10 = dateTimeFormatter7.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = dateTimeFormatter7.parseLocalDateTime("54093331");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(locale10);
    }

    @Test
    public void test17366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17366");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.year();
        int int16 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime3.withWeekyear(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime3.plusWeeks(50178018);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.era();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(2022);
        java.lang.String str25 = dateTimeZone23.getNameKey((long) 631);
        org.joda.time.DateTime dateTime26 = localDateTime20.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours(54052779);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test17367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17367");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime5 = dateTime2.withFieldAdded(durationFieldType3, 0);
        boolean boolean6 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime0.getMillisOfDay();
        org.joda.time.DateTime.Property property8 = dateTime0.secondOfDay();
        org.joda.time.DateTime dateTime10 = dateTime0.minusYears(52);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone11.isStandardOffset(221413222375000L);
        org.joda.time.DateTime dateTime14 = dateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology16);
        int int18 = localTime17.getHourOfDay();
        org.joda.time.LocalTime.Property property19 = localTime17.secondOfMinute();
        org.joda.time.LocalTime localTime21 = property19.addCopy((long) 52);
        org.joda.time.DateTimeField dateTimeField22 = property19.getField();
        org.joda.time.LocalTime localTime23 = property19.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime23.plus(readablePeriod24);
        org.joda.time.DateTime dateTime26 = localTime23.toDateTimeToday();
        int int27 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 54192408 + "'", int7 == 54192408);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test17368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17368");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear(867);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean11 = dateTimeFormatter10.isPrinter();
        boolean boolean12 = dateTimeFormatter10.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = dateTimeFormatter10.parseLocalTime("2022-02-21T14:55:15.136Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17369");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property5.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime10 = property5.addWrapFieldToCopy(616);
        boolean boolean11 = property5.isLeap();
        org.joda.time.DateTime dateTime13 = property5.addToCopy(1645455699439L);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test17370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17370");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withWeekOfWeekyear(2002);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2002 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test17371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17371");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.withMinimumValue();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime19 = property17.getLocalTime();
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test17372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17372");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfCentury();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeField3.getAsShortText(100, locale5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusSeconds((int) (byte) 10);
        int int16 = localDateTime15.getYearOfCentury();
        java.lang.String str17 = localDateTime15.toString();
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int22 = localDateTime20.get(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.roundHalfFloorCopy();
        boolean boolean26 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int[] intArray33 = new int[] { 53637233, 69, (short) -1, (short) 10, 16, 616 };
        int int34 = dateTimeField3.getMaximumValue((org.joda.time.ReadablePartial) localDateTime15, intArray33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime15.hourOfDay();
        org.joda.time.Chronology chronology36 = localDateTime15.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.millis();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-21T15:03:22.498" + "'", str17, "2022-02-21T15:03:22.498");
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[53637233, 69, -1, 10, 16, 616]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test17373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17373");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = property8.getMaximumValueOverall();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone13.nextTransition((long) 893);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = dateTimeZone13.getName((long) (short) 0, locale17);
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime20.minusYears(952);
        int int24 = dateTime20.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance();
        long long32 = copticChronology26.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField33 = copticChronology26.months();
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType25.getField((org.joda.time.Chronology) copticChronology26);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType25.getRangeDurationType();
        boolean boolean36 = dateTime20.isSupported(dateTimeFieldType25);
        org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstance();
        long long44 = copticChronology38.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField45 = copticChronology38.months();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology38.era();
        org.joda.time.DateTimeField dateTimeField47 = copticChronology38.clockhourOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 15, (org.joda.time.Chronology) copticChronology38);
        org.joda.time.DateTimeField dateTimeField49 = copticChronology38.hourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology38.clockhourOfHalfday();
        boolean boolean51 = dateTimeFieldType25.isSupported((org.joda.time.Chronology) copticChronology38);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType25.getRangeDurationType();
        java.lang.String str53 = dateTimeFieldType25.getName();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 893L + "'", long15 == 893L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 57635003L + "'", long32 == 57635003L);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(copticChronology38);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 57635003L + "'", long44 == 57635003L);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "dayOfYear" + "'", str53, "dayOfYear");
    }

    @Test
    public void test17374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17374");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property5.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime9 = property5.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property11 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = property12.addToCopy(112);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test17375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17375");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Calendar calendar9 = dateTime6.toCalendar(locale8);
        int int10 = calendar9.getFirstDayOfWeek();
        java.time.Instant instant11 = calendar9.toInstant();
        calendar9.set(54123808, (-335), 510, 54020375, 49, 957);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=54123808,MONTH=-335,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=510,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=54020375,MINUTE=49,SECOND=957,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test17376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17376");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime8 = property5.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime9 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime11 = property5.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(54189);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54189 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test17377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17377");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1469, 430);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1469 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17378");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        int int5 = dateTime4.getMillisOfSecond();
        java.util.Date date6 = dateTime4.toDate();
        org.joda.time.DateTime dateTime7 = dateTime4.withLaterOffsetAtOverlap();
        int int8 = dateTime7.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime7.getZone();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes(62);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 577 + "'", int5 == 577);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon May 02 15:03:12 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test17379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17379");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate5.minusDays(20);
        org.joda.time.LocalDate localDate20 = localDate18.plusWeeks(53);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfCentury(10);
        org.joda.time.LocalDate localDate24 = localDate22.withCenturyOfEra(4);
        org.joda.time.LocalDate localDate26 = localDate24.minusYears(900000);
        org.joda.time.LocalDate.Property property27 = localDate24.dayOfMonth();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.LocalDate localDate30 = property27.addWrapFieldToCopy(793);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = property27.setCopy(131);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 131 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test17380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17380");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        int int8 = dateTime7.getMinuteOfDay();
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime7.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone10);
        java.lang.String str13 = dateTimeZone10.toString();
        java.lang.String str15 = dateTimeZone10.getShortName((long) 161);
        long long17 = dateTimeZone10.nextTransition((long) 63);
        long long19 = dateTimeZone10.nextTransition(98461069153763000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(114, 53919748, 54141529, 114, 952, 879, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 114 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 903 + "'", int8 == 903);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 63L + "'", long17 == 63L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 98461069153763000L + "'", long19 == 98461069153763000L);
    }

    @Test
    public void test17381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17381");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.DateTime.Property property8 = dateTime6.secondOfDay();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded(readableDuration9, 6);
        org.joda.time.DateTime dateTime13 = dateTime6.minusMinutes((int) 'a');
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, 53801809);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test17382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17382");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property6.addWrapFieldToCopy(148);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(12106080);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test17383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17383");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute(7);
        int int10 = dateTime6.getEra();
        int int11 = dateTime6.getSecondOfDay();
        org.joda.time.DateTime.Property property12 = dateTime6.weekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test17384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17384");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField11 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.secondOfDay();
        org.joda.time.DurationField durationField13 = copticChronology1.millis();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57635003L + "'", long7 == 57635003L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test17385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17385");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.withMinimumValue();
        org.joda.time.LocalDate localDate10 = property8.getLocalDate();
        org.joda.time.LocalDate localDate11 = property8.getLocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.plusYears(751);
        org.joda.time.LocalDate localDate15 = localDate13.minusYears(131);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test17386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17386");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("");
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("425");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("2");
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("1946-02-21T15:14:07.594");
        java.util.Set<java.lang.String> strSet10 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test17387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17387");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withDayOfYear(53);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime14 = dateTime11.withFieldAdded(durationFieldType12, 0);
        org.joda.time.DateTime.Property property15 = dateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        org.joda.time.DateTime.Property property18 = dateTime16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime23 = dateTime20.withFieldAdded(durationFieldType21, 0);
        org.joda.time.DateTime.Property property24 = dateTime20.minuteOfDay();
        org.joda.time.DateTime dateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property26 = dateTime25.secondOfMinute();
        java.lang.String str27 = property26.toString();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str30 = property26.getAsShortText(locale29);
        java.lang.String str31 = property18.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.lang.String str33 = property18.getAsText(locale32);
        java.lang.String str34 = locale32.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet35 = locale32.getExtensionKeys();
        java.lang.String str36 = dateTimeField8.getAsShortText(569, locale32);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[secondOfMinute]" + "'", str27, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "54180" + "'", str31, "54180");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "54180" + "'", str33, "54180");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "569" + "'", str36, "569");
    }

    @Test
    public void test17388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17388");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) 54011022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17389");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(9);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(241);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime4.plus(readablePeriod7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(3);
        long long11 = dateTime8.getMillis();
        java.lang.String str12 = dateTime8.toString();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime8.minus(readablePeriod13);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime8.toGregorianCalendar();
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.secondOfMinute();
        org.joda.time.DurationField durationField18 = copticChronology16.months();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology16.yearOfCentury();
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        long long23 = dateTimeZone21.nextTransition((long) 893);
        org.joda.time.Chronology chronology24 = copticChronology16.withZone(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology16);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology16.yearOfEra();
        long long30 = copticChronology16.add((long) 54167248, (long) 631, 53663);
        org.joda.time.DateTime dateTime31 = dateTime8.toDateTime((org.joda.time.Chronology) copticChronology16);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645455792755L + "'", long11 == 1645455792755L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T15:03:12.755Z" + "'", str12, "2022-02-21T15:03:12.755Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 893L + "'", long23 == 893L);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 88028601L + "'", long30 == 88028601L);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test17390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17390");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        int int16 = localDateTime15.getSecondOfMinute();
        int int17 = localDateTime15.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMonths(655);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear(567);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57635003L + "'", long7 == 57635003L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 164 + "'", int17 == 164);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test17391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17391");
        java.util.Locale locale3 = new java.util.Locale("clockhourOfHalfday", "English (Canada)", "");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale locale5 = locale3.stripExtensions();
        java.lang.String str7 = locale5.getExtension('a');
        org.junit.Assert.assertEquals(locale3.toString(), "clockhourofhalfday_ENGLISH (CANADA)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "clockhourofhalfday_ENGLISH (CANADA)");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test17392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17392");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("hi!");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        long long4 = calendar3.getTimeInMillis();
        calendar3.set(32772, 669, 935);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("\u4e2d\u6587\u4e2d\u56fd)");
        calendar3.setTimeZone(timeZone10);
        java.util.Date date18 = new java.util.Date((int) '#', (int) (byte) 0, 20, 2, 12, 100);
        date18.setDate(272);
        date18.setMinutes(53738895);
        calendar3.setTime(date18);
        long long24 = calendar3.getTimeInMillis();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=2143217740000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2037,MONTH=10,WEEK_OF_YEAR=49,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=334,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=15,SECOND=40,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455792802L + "'", long4 == 1645455792802L);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals(date18.toString(), "Mon Nov 30 18:15:40 UTC 2037");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2143217740000L + "'", long24 == 2143217740000L);
    }

    @Test
    public void test17393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17393");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        int int9 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField10 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.dayOfYear();
        java.lang.String str12 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology0.secondOfMinute();
        long long15 = dateTimeField13.roundFloor((long) 54006172);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[UTC]" + "'", str8, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CopticChronology[UTC]" + "'", str12, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 54006000L + "'", long15 == 54006000L);
    }

    @Test
    public void test17394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17394");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property13 = dateTime11.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        org.joda.time.DateTime.Property property15 = dateTime11.secondOfMinute();
        java.util.Date date16 = dateTime11.toDate();
        org.joda.time.DateTime.Property property17 = dateTime11.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 21 15:03:12 UTC 2022");
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test17395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17395");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withEra(1);
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = localDateTime8.getFieldType(2);
        java.lang.String str12 = dateTimeFieldType11.getName();
        int int13 = localDateTime4.get(dateTimeFieldType11);
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.secondOfMinute();
        int int15 = property14.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, 35);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(342);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMonths(965);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusHours(2922728);
        int int26 = localDateTime23.getYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfMonth" + "'", str12, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 21 + "'", int13 == 21);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1941 + "'", int26 == 1941);
    }

    @Test
    public void test17396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17396");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.year();
        int int16 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.withCenturyOfEra(11);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.minus(readableDuration19);
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDateTime20.compareTo(readablePartial21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test17397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17397");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter10.getParser();
        java.util.Locale locale13 = dateTimeFormatter10.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.parse("", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNull(locale13);
    }

    @Test
    public void test17398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17398");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(30);
        long long3 = dateTimeZone1.convertUTCToLocal((long) 406);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 436L + "'", long3 == 436L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test17399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17399");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("CAN");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test17400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17400");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(9);
        org.joda.time.DateTime dateTime4 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMonths(241);
        org.joda.time.DateTime dateTime8 = dateTime4.withCenturyOfEra(669);
        org.joda.time.Instant instant9 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime11 = dateTime4.plus(1320000L);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readableDuration12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        int int16 = dateTime13.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
    }

    @Test
    public void test17401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17401");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minusWeeks(20);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.plusSeconds(17);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readableDuration18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.year();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test17402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17402");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 6);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        timeZone3.setID("hi!");
        java.util.Calendar.Builder builder6 = builder2.setTimeZone(timeZone3);
        java.util.Calendar calendar7 = builder2.build();
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = dateTimeZone9.getName((long) (short) 0, locale13);
        java.util.TimeZone timeZone15 = dateTimeZone9.toTimeZone();
        java.lang.String str16 = timeZone15.getID();
        java.util.Calendar.Builder builder17 = builder2.setTimeZone(timeZone15);
        java.lang.String str18 = timeZone15.getID();
        org.joda.time.Instant instant19 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        long long22 = dateTimeZone20.nextTransition((long) 893);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = dateTimeZone20.getName((long) (short) 0, locale24);
        java.util.TimeZone timeZone26 = dateTimeZone20.toTimeZone();
        java.lang.String str27 = timeZone26.getID();
        boolean boolean28 = timeZone26.observesDaylightTime();
        boolean boolean29 = timeZone26.observesDaylightTime();
        boolean boolean30 = timeZone15.hasSameRules(timeZone26);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone26);
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.secondOfMinute();
        org.joda.time.DurationField durationField35 = copticChronology33.months();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology33.millisOfDay();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((long) 122, (org.joda.time.Chronology) copticChronology33);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology33.secondOfMinute();
        boolean boolean39 = calendar31.after((java.lang.Object) dateTimeField38);
        int int40 = calendar31.getMinimalDaysInFirstWeek();
        boolean boolean41 = calendar31.isLenient();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=6,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=hi!,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 893L + "'", long22 == 893L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645455792907,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=12,MILLISECOND=907,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test17403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17403");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(919, 913, 53977, 405, 591);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 405 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17404");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology0.yearOfCentury();
        org.joda.time.DurationField durationField9 = copticChronology0.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test17405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17405");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.roundHalfEvenCopy();
        java.util.Locale locale20 = new java.util.Locale("java.util.GregorianCalendar[time=6,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"hi!\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]", "millisOfSecond", "11");
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale21.getDisplayCountry();
        java.lang.String str24 = property15.getAsShortText(locale21);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = dateTimeZone26.getName((long) (short) 0, locale30);
        boolean boolean32 = locale30.hasExtensions();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale30);
        java.lang.String str34 = locale21.getDisplayCountry(locale30);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals(locale20.toString(), "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]_MILLISOFSECOND_11");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]_MILLISOFSECOND_11");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]_MILLISOFSECOND_11");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MILLISOFSECOND" + "'", str23, "MILLISOFSECOND");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "939" + "'", str24, "939");
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455792951,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=12,MILLISECOND=951,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "MILLISOFSECOND" + "'", str34, "MILLISOFSECOND");
    }

    @Test
    public void test17406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17406");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra(21);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 52);
        org.joda.time.DateTime dateTime43 = localDate37.toDateTimeAtMidnight(dateTimeZone42);
        org.joda.time.DateTime.Property property44 = dateTime43.centuryOfEra();
        org.joda.time.DateTime dateTime45 = property44.roundHalfFloorCopy();
        int int46 = property44.get();
        long long47 = property44.remainder();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 19 + "'", int46 == 19);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test17407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17407");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.weekyear();
        java.lang.String str4 = dateTimeField3.toString();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DateTimeField[weekyear]" + "'", str4, "DateTimeField[weekyear]");
    }

    @Test
    public void test17408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17408");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.LocalTime localTime7 = property4.roundFloorCopy();
        int int8 = property4.get();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test17409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17409");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.util.Date date8 = dateTime6.toDate();
        org.joda.time.DateTime dateTime10 = dateTime6.plusYears((int) 'u');
        org.joda.time.Instant instant11 = dateTime6.toInstant();
        org.joda.time.Instant instant13 = instant11.plus((long) 19);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant15 = instant11.minus(readableDuration14);
        org.joda.time.Instant instant16 = instant11.toInstant();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Feb 21 15:03:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test17410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17410");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 703);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.DurationField durationField3 = property2.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test17411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17411");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = copticChronology0.add(readablePeriod7, (long) 116, 811);
        org.joda.time.DurationField durationField11 = copticChronology0.days();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 116L + "'", long10 == 116L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17412");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter3.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withDefaultYear(867);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(650);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.lang.String str15 = dateTimeZone12.getName((long) 32769, locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter10.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter10.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 53688260);
        boolean boolean20 = dateTimeFormatter19.isOffsetParsed();
        java.util.Locale locale21 = dateTimeFormatter19.getLocale();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance();
        long long28 = copticChronology22.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology22.halfdayOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withEra(1);
        int int34 = localDateTime33.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = localDateTime33.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusSeconds((int) (byte) 10);
        int int39 = localDateTime38.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusYears(0);
        boolean boolean42 = copticChronology22.equals((java.lang.Object) localDateTime41);
        org.joda.time.DateTimeField dateTimeField43 = copticChronology22.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology22);
        org.joda.time.DurationField durationField45 = copticChronology22.days();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology22.dayOfWeek();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter19.withChronology((org.joda.time.Chronology) copticChronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.parse("830", dateTimeFormatter47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.650" + "'", str15, "+00:00:00.650");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeParser17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 57635003L + "'", long28 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
    }

    @Test
    public void test17413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17413");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = instant5.getZone();
        long long8 = dateTimeZone6.nextTransition((long) 893);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = dateTimeZone6.getName((long) (short) 0, locale10);
        java.util.TimeZone timeZone12 = dateTimeZone6.toTimeZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter16.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter16.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 14);
        int int26 = dateTimeFormatter21.getDefaultYear();
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter21.withLocale(locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale27.getDisplayScript(locale29);
        java.lang.String str31 = dateTimeZone6.getName((-61788528000000L), locale27);
        org.joda.time.DateTime dateTime32 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime1.minus(readableDuration33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime1.minusMillis((int) '#');
        org.joda.time.Instant instant37 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        long long40 = dateTimeZone38.nextTransition((long) 893);
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = dateTimeZone38.getName((long) (short) 0, locale42);
        java.util.TimeZone timeZone44 = dateTimeZone38.toTimeZone();
        long long47 = dateTimeZone38.adjustOffset(25L, false);
        int int49 = dateTimeZone38.getStandardOffset(1645455324838L);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone38);
        int int51 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime1.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = property52.setCopy("\u97d3\u6587");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 893L + "'", long8 == 893L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNull(dateTimeParser17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 893L + "'", long40 == 893L);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 25L + "'", long47 == 25L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test17414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17414");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        org.joda.time.LocalDate.Property property38 = localDate37.centuryOfEra();
        java.lang.String str39 = property38.getAsString();
        org.joda.time.LocalDate localDate40 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate41 = property38.withMaximumValue();
        int int42 = property38.get();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "19" + "'", str39, "19");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
    }

    @Test
    public void test17415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17415");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear(952);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter2.getParser();
        java.lang.Integer int7 = dateTimeFormatter2.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test17416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17416");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.lang.String str8 = property7.toString();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, 0);
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        int int16 = dateTime15.getYearOfCentury();
        long long17 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime15);
        java.lang.String str18 = property7.getAsString();
        org.joda.time.DateTime dateTime20 = property7.addWrapFieldToCopy(53);
        org.joda.time.DateTime dateTime21 = property7.roundHalfFloorCopy();
        int int22 = dateTime21.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime21.getZone();
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int28 = localDateTime26.get(dateTimeFieldType27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime31 = property29.withMinimumValue();
        org.joda.time.DateTime dateTime32 = localDateTime31.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readablePeriod33);
        int int35 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[secondOfMinute]" + "'", str8, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test17417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17417");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.secondOfMinute();
        org.joda.time.DurationField durationField3 = copticChronology1.months();
        org.joda.time.DateTimeZone dateTimeZone4 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.hourOfHalfday();
        int int6 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = copticChronology1.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) 98727319490280000L, chronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(387);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17418");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime11.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusSeconds((int) (byte) 10);
        int int17 = localDateTime16.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusYears(0);
        boolean boolean20 = copticChronology0.equals((java.lang.Object) localDateTime19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology0.minuteOfDay();
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance();
        long long28 = copticChronology22.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology22.halfdayOfDay();
        org.joda.time.Chronology chronology30 = copticChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfDay();
        boolean boolean32 = copticChronology0.equals((java.lang.Object) dateTimeField31);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology0.era();
        org.joda.time.DurationField durationField34 = copticChronology0.millis();
        long long37 = durationField34.subtract((long) 1468, 832);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 57635003L + "'", long28 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 636L + "'", long37 == 636L);
    }

    @Test
    public void test17419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17419");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        long long8 = copticChronology0.add(readablePeriod5, (long) 816, (int) '#');
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = copticChronology0.years();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 816L + "'", long8 == 816L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test17420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17420");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 6);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        timeZone3.setID("hi!");
        java.util.Calendar.Builder builder6 = builder2.setTimeZone(timeZone3);
        java.util.Calendar calendar7 = builder2.build();
        java.util.Calendar.Builder builder11 = builder2.setWeekDate((int) (byte) 100, 44, (-292275054));
        java.util.Calendar.Builder builder16 = builder11.setTimeOfDay(0, 31, 5, 437);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        int int19 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks(10);
        int int22 = dateTime21.getMillisOfSecond();
        java.util.Date date23 = dateTime21.toDate();
        org.joda.time.DateTime dateTime24 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.LocalTime localTime27 = localTime25.minusMinutes((-1));
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalTime localTime29 = localTime27.plus(readablePeriod28);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = localTime27.toString("+00:00:00.650", locale31);
        java.util.Calendar.Builder builder33 = builder11.setLocale(locale31);
        java.util.Calendar.Builder builder38 = builder33.setTimeOfDay((int) 'a', (-2943902), 990, 623);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder41 = builder38.set(902, (-51));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=6,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=hi!,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 903 + "'", int19 == 903);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 210 + "'", int22 == 210);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Mon May 02 15:03:13 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.650" + "'", str32, "+00:00:00.650");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test17421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17421");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.secondOfMinute();
        org.joda.time.DurationField durationField5 = copticChronology3.months();
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology3.getZone();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(53716584);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter8.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter8.getPrinter();
        java.util.Locale locale16 = new java.util.Locale("2022-02-21T14:54:43.055", "2022-02-21T14:54:13.248", "days");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter8.withLocale(locale16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = dateTimeFormatter17.parseLocalDate("2022-02-21T14:55:51.436");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertEquals(locale16.toString(), "2022-02-21t14:54:43.055_2022-02-21T14:54:13.248_days");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test17422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17422");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        int int15 = localDateTime14.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = localDateTime14.getFieldType(2);
        int int18 = localDateTime3.get(dateTimeFieldType17);
        java.util.Date date19 = localDateTime3.toDate();
        long long20 = date19.getTime();
        int int21 = date19.getDate();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Mon Feb 21 15:03:13 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645455793242L + "'", long20 == 1645455793242L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
    }

    @Test
    public void test17423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17423");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(893);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy((long) 53700);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(2000);
        int int14 = localDateTime13.size();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime13.isSupported(durationFieldType15);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology17.hourOfDay();
        boolean boolean21 = durationFieldType15.isSupported((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology17.dayOfMonth();
        org.joda.time.DurationField durationField23 = copticChronology17.eras();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology17.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test17424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17424");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(893);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.dayOfYear();
        boolean boolean10 = property8.equals((java.lang.Object) 670);
        org.joda.time.LocalDateTime localDateTime12 = property8.addWrapFieldToCopy(669);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfCentury();
        int int14 = localDateTime12.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 13 + "'", int14 == 13);
    }

    @Test
    public void test17425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17425");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 32770);
        int int2 = localDateTime1.getEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test17426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17426");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        int int38 = localDate37.getYear();
        int int39 = localDate37.getDayOfWeek();
        int int40 = localDate37.getDayOfMonth();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property42 = dateTime41.secondOfMinute();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test17427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17427");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra(21);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 52);
        org.joda.time.DateTime dateTime43 = localDate37.toDateTimeAtMidnight(dateTimeZone42);
        org.joda.time.LocalDate.Property property44 = localDate37.yearOfCentury();
        org.joda.time.LocalDate localDate45 = property44.getLocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.withYearOfEra(952);
        org.joda.time.DateTime dateTime48 = localDate47.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property49 = dateTime48.minuteOfDay();
        java.lang.String str50 = property49.getAsShortText();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "903" + "'", str50, "903");
    }

    @Test
    public void test17428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17428");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(9);
        int int9 = dateTime8.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        long long11 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime14 = property12.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = dateTime14.toString("PM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 61879161600L + "'", long11 == 61879161600L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test17429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17429");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime localTime15 = localTime11.plusMillis((int) (short) 10);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfDay();
        org.joda.time.LocalTime localTime17 = property16.roundCeilingCopy();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test17430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17430");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        java.util.Date date3 = new java.util.Date((long) (byte) 0);
        int int4 = date3.getMinutes();
        int int5 = date3.getMinutes();
        boolean boolean6 = date1.before(date3);
        date1.setHours(11);
        date1.setMinutes(852);
        date1.setMonth(207);
        int int13 = date1.getDate();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, 0);
        org.joda.time.DateTime.Property property19 = dateTime15.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property21 = dateTime20.secondOfMinute();
        java.util.Date date22 = dateTime20.toDate();
        boolean boolean23 = date1.after(date22);
        java.lang.String str24 = date1.toGMTString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Apr 02 01:12:00 UTC 1987");
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 21 15:03:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2 Apr 1987 01:12:00 GMT" + "'", str24, "2 Apr 1987 01:12:00 GMT");
    }

    @Test
    public void test17431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17431");
        org.joda.time.Instant instant5 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone6 = instant5.getZone();
        long long8 = dateTimeZone6.nextTransition((long) 893);
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone10, 0L);
        long long15 = dateTimeZone6.convertLocalToUTC((long) 11, false);
        long long17 = dateTimeZone6.nextTransition((long) '#');
        long long19 = dateTimeZone6.nextTransition(17262201600000L);
        long long21 = dateTimeZone6.convertUTCToLocal(2199365640177L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(54067292, 54143164, 462, 0, 1946, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1946 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 893L + "'", long8 == 893L);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 11L + "'", long15 == 11L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 17262201600000L + "'", long19 == 17262201600000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2199365640177L + "'", long21 == 2199365640177L);
    }

    @Test
    public void test17432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17432");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) chronology0);
        int int3 = localDateTime2.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYear(1969);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusSeconds(587);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 473);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test17433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17433");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField2 = copticChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology0.weeks();
        org.joda.time.DurationFieldType durationFieldType5 = durationField4.getType();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance();
        long long13 = copticChronology7.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology7.halfdayOfDay();
        org.joda.time.DurationField durationField15 = copticChronology7.months();
        boolean boolean16 = durationFieldType6.isSupported((org.joda.time.Chronology) copticChronology7);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology7.yearOfCentury();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology7);
        org.joda.time.DurationField durationField19 = durationFieldType5.getField((org.joda.time.Chronology) copticChronology7);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 57635003L + "'", long13 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test17434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17434");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute(7);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillis((long) 32770);
        java.util.Date date13 = new java.util.Date((long) (byte) 0);
        int int14 = date13.getMinutes();
        int int15 = date13.getDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) date13, chronology16);
        org.joda.time.LocalDate localDate19 = localDate17.withWeekyear((int) (byte) 100);
        org.joda.time.LocalDate.Property property20 = localDate19.yearOfEra();
        org.joda.time.LocalDate localDate22 = property20.setCopy((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime9.withFields((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property24 = localDate22.dayOfWeek();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test17435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17435");
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "DateTimeField[yearOfCentury]", "100", "gregory", "2022-02-21T14:53:54.648", "53640", "DateTimeField[yearOfCentury]", "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList16);
        boolean boolean19 = strSet9.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear(9);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(241);
        boolean boolean27 = strSet9.equals((java.lang.Object) dateTime26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime30 = dateTime26.withPeriodAdded(readablePeriod28, 0);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury(13);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours(69);
        java.util.Date date36 = new java.util.Date((long) (byte) 0);
        int int37 = date36.getMinutes();
        int int38 = date36.getDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) date36, chronology39);
        org.joda.time.LocalDate localDate42 = localDate40.withYear((-1));
        org.joda.time.LocalDate.Property property43 = localDate42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        int int45 = property43.getMaximumValueOverall();
        org.joda.time.LocalDate localDate46 = property43.roundCeilingCopy();
        org.joda.time.Instant instant47 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone48 = instant47.getZone();
        long long50 = dateTimeZone48.nextTransition((long) 893);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = dateTimeZone48.getName((long) (short) 0, locale52);
        java.util.TimeZone timeZone54 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime55 = localDate46.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.DateTime dateTime56 = dateTime55.withLaterOffsetAtOverlap();
        boolean boolean57 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property58 = dateTime55.monthOfYear();
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 893L + "'", long50 == 893L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test17436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17436");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime11.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(2);
        java.lang.String str15 = dateTimeFieldType14.getName();
        int int16 = dateTime6.get(dateTimeFieldType14);
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        long long23 = copticChronology17.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField24 = copticChronology17.months();
        java.lang.String str25 = copticChronology17.toString();
        int int26 = copticChronology17.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField27 = copticChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology17.dayOfYear();
        java.lang.String str29 = copticChronology17.toString();
        boolean boolean30 = dateTimeFieldType14.isSupported((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTime.Property property32 = dateTime31.year();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfMonth" + "'", str15, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 57635003L + "'", long23 == 57635003L);
        org.junit.Assert.assertNotNull(durationField24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CopticChronology[UTC]" + "'", str25, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[UTC]" + "'", str29, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test17437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17437");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime dateTime6 = dateTime1.withWeekOfWeekyear((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime1.minus(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, 0);
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime15 = property14.roundHalfEvenCopy();
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime15.withYearOfEra(740);
        org.joda.time.DateTime dateTime22 = dateTime20.withYear(999);
        boolean boolean23 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime20.plus(readableDuration24);
        org.joda.time.Chronology chronology26 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.era();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test17438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17438");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 6);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        timeZone3.setID("hi!");
        java.util.Calendar.Builder builder6 = builder2.setTimeZone(timeZone3);
        java.util.Calendar.Builder builder8 = builder6.setLenient(true);
        java.util.Calendar calendar9 = builder6.build();
        java.util.Date date11 = new java.util.Date((long) (byte) 0);
        int int12 = date11.getMinutes();
        date11.setHours(893);
        java.util.Calendar.Builder builder15 = builder6.setInstant(date11);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance();
        long long23 = copticChronology17.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology17.halfdayOfDay();
        org.joda.time.DurationField durationField25 = copticChronology17.months();
        boolean boolean26 = durationFieldType16.isSupported((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology17.halfdayOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology28);
        int int30 = localTime29.getHourOfDay();
        org.joda.time.LocalTime.Property property31 = localTime29.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime36 = dateTime33.withFieldAdded(durationFieldType34, 0);
        boolean boolean37 = localTime29.isSupported(durationFieldType34);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = null;
        org.joda.time.format.DateTimeParser dateTimeParser40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser40);
        org.joda.time.format.DateTimeParser dateTimeParser42 = dateTimeFormatter41.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter41.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter41.withPivotYear((int) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter46.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter46.withPivotYear((java.lang.Integer) 14);
        int int51 = dateTimeFormatter46.getDefaultYear();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter46.withLocale(locale52);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale52.getDisplayScript(locale54);
        java.lang.String str56 = locale52.getDisplayCountry();
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstance();
        long long63 = copticChronology57.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField64 = copticChronology57.months();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology57.yearOfCentury();
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str68 = dateTimeField65.getAsText(31536000000L, locale67);
        java.lang.String str69 = locale52.getDisplayCountry(locale67);
        java.lang.String str70 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localTime29, 54, locale52);
        java.util.Calendar.Builder builder71 = builder6.setLocale(locale52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder76 = builder6.setTimeOfDay(45, 53940656, 540, 54119956);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=6,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=hi!,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date11.toString(), "Sat Feb 07 05:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 57635003L + "'", long23 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(dateTimeParser42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Canada" + "'", str56, "Canada");
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 57635003L + "'", long63 == 57635003L);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "87" + "'", str68, "87");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Canada" + "'", str69, "Canada");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "54" + "'", str70, "54");
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test17439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17439");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight5 = localDate4.toDateMidnight();
        int int6 = dateMidnight5.getDayOfYear();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test17440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17440");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime18 = property15.withMaximumValue();
        org.joda.time.LocalTime localTime19 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime22 = localTime20.minusSeconds(0);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test17441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17441");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfWeek();
        org.joda.time.LocalDate.Property property7 = localDate5.monthOfYear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate9 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra(847);
        java.lang.String str12 = localDate11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate11.withYearOfEra((-141290));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -141290 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0847-01-01" + "'", str12, "0847-01-01");
    }

    @Test
    public void test17442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17442");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap10);
        java.lang.String[] strArray36 = new java.lang.String[] { "CAN", "hi!", "9", "java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-21T14:54:11.392", "1970", "secondOfMinute", "\uc911\uad6d", "DateTimeField[yearOfEra]", "15 Feb 2022 14:54:13 GMT", "2022-02-21T14:54:25.436", "14:54:04.005", "secondOfMinute", "53664488", "minutes", "Coordinated Universal Time", "Sat Feb 07 05:00:00 UTC 1970", "java.util.gregoriancalendar[time=6,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"hi!\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=6,zone_offset=0,dst_offset=0]", "CopticChronology[Etc/UTC]", "gregory", "days", "clockhourOfHalfday", "Chine", "1970" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.util.Iterator<java.lang.String> strItor39 = strSet37.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet37.spliterator();
        strSet37.clear();
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags(languageRangeList11, (java.util.Collection<java.lang.String>) strSet37);
        java.lang.Object[] objArray43 = strSet37.toArray();
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstance();
        long long50 = copticChronology44.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField51 = copticChronology44.months();
        java.util.Date date53 = new java.util.Date((long) (byte) 0);
        int int54 = date53.getMinutes();
        int int55 = date53.getDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) date53, chronology56);
        int int58 = localDate57.getDayOfWeek();
        org.joda.time.LocalDate localDate60 = localDate57.minusWeeks(272);
        int[] intArray62 = copticChronology44.get((org.joda.time.ReadablePartial) localDate60, (long) 21);
        org.joda.time.DateTimeField dateTimeField63 = copticChronology44.year();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology44.yearOfCentury();
        boolean boolean65 = strSet37.equals((java.lang.Object) copticChronology44);
        java.lang.String str66 = copticChronology44.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long71 = copticChronology44.getDateTimeMillis(679, 256, 281, 467);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 256 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 57635003L + "'", long50 == 57635003L);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1686, 4, 23]");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "CopticChronology[UTC]" + "'", str66, "CopticChronology[UTC]");
    }

    @Test
    public void test17443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17443");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra(1);
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = localDateTime13.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime13.getFields();
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.year();
        boolean boolean20 = localDateTime13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        int int29 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDateTime26.isSupported(dateTimeFieldType30);
        boolean boolean32 = localDateTime13.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime13.withHourOfDay(5);
        int[] intArray36 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime13, (long) 15);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime13.withDurationAdded(readableDuration37, 824);
        org.joda.time.LocalDateTime.Property property40 = localDateTime13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57635003L + "'", long7 == 57635003L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1686, 4, 23, 15]");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test17444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17444");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(893);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMonths(44);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        java.lang.String str12 = localDateTime9.toString("-1");
        int int13 = localDateTime9.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minus(readableDuration14);
        int int16 = localDateTime15.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 25 + "'", int13 == 25);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54193689 + "'", int16 == 54193689);
    }

    @Test
    public void test17445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17445");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        boolean boolean10 = localDateTime3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withEra(1);
        int int19 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean21 = localDateTime16.isSupported(dateTimeFieldType20);
        boolean boolean22 = localDateTime3.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime3.withHourOfDay(5);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.property(dateTimeFieldType26);
        int int28 = localDateTime3.indexOf(dateTimeFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withEra(1);
        int int33 = localDateTime32.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = localDateTime32.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = localDateTime32.getFields();
        org.joda.time.LocalDateTime.Property property37 = localDateTime32.year();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        long long40 = dateTimeField38.roundHalfEven((long) (byte) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withEra(1);
        int int45 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44);
        int int46 = localDateTime44.getWeekyear();
        boolean boolean47 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withEra(1);
        int int52 = localDateTime51.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = localDateTime51.getFieldType(2);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withEra(1);
        int int59 = localDateTime58.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = localDateTime58.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray62 = localDateTime58.getFields();
        org.joda.time.LocalDateTime.Property property63 = localDateTime58.year();
        int int64 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime.Property property65 = localDateTime58.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime67 = property65.addToCopy(893L);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusMonths(912);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusMillis(598);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.plus(readableDuration72);
        boolean boolean74 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-292275054) + "'", int45 == (-292275054));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeFieldArray62);
        org.junit.Assert.assertNotNull(property63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test17446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17446");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(32769);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalDateTime localDateTime15 = property12.addWrapFieldToCopy(53824606);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfWeek(736);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 736 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test17447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17447");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.DateTime dateTime10 = dateTime6.withDurationAdded(0L, 52);
        org.joda.time.DateTime dateTime12 = dateTime10.plusWeeks(53683090);
        int int13 = dateTime12.getSecondOfDay();
        boolean boolean15 = dateTime12.isAfter((-1645439982L));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime20 = dateTime17.withFieldAdded(durationFieldType18, 0);
        org.joda.time.DateTime.Property property21 = dateTime17.minuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localDateTime25.getFields();
        int int30 = property21.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        java.lang.String str31 = property21.getAsString();
        org.joda.time.DateTime dateTime33 = property21.addToCopy((long) (short) 10);
        org.joda.time.DateTime dateTime35 = property21.addToCopy(53781869);
        boolean boolean36 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property37 = dateTime12.era();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 13 + "'", int13 == 13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "903" + "'", str31, "903");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test17448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17448");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        int int4 = dateTime3.getMinuteOfDay();
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime3);
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Calendar calendar7 = dateTime3.toCalendar(locale6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        int int12 = dateTime11.getMinuteOfDay();
        int int13 = instant8.compareTo((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Calendar calendar15 = dateTime11.toCalendar(locale14);
        boolean boolean16 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime18 = dateTime3.minusDays((-292275054));
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        int int20 = dateTime18.getMillisOfSecond();
        org.joda.time.DateTime dateTime22 = dateTime18.minusYears(740);
        org.joda.time.DateTime dateTime24 = dateTime18.minus(3600000L);
        org.joda.time.DateTime dateTime26 = dateTime18.withYear(53940);
        java.util.GregorianCalendar gregorianCalendar27 = dateTime18.toGregorianCalendar();
        org.joda.time.DateTime.Property property28 = dateTime18.dayOfYear();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 903 + "'", int4 == 903);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645455793767,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=13,MILLISECOND=767,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 903 + "'", int12 == 903);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455793767,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=13,MILLISECOND=767,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 767 + "'", int20 == 767);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(gregorianCalendar27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test17449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17449");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField7 = copticChronology0.months();
        java.lang.String str8 = copticChronology0.toString();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = copticChronology0.millis();
        long long12 = durationField10.getMillis(402);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(durationField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[UTC]" + "'", str8, "CopticChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 402L + "'", long12 == 402L);
    }

    @Test
    public void test17450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17450");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 1);
        org.joda.time.Instant instant3 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        long long6 = dateTimeZone4.nextTransition((long) 893);
        org.joda.time.Instant instant7 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone8, 0L);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) instant0, dateTimeZone8);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(12);
        org.joda.time.LocalTime localTime15 = localTime11.plusMillis((int) (short) 10);
        org.joda.time.Chronology chronology16 = localTime11.getChronology();
        org.joda.time.LocalTime localTime18 = localTime11.withMillisOfSecond(122);
        org.joda.time.LocalTime localTime20 = localTime11.minusMinutes(845);
        int int21 = localTime20.size();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 893L + "'", long6 == 893L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test17451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17451");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField8 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField((org.joda.time.Chronology) copticChronology1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withEra(1);
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = localDateTime13.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = localDateTime13.getFields();
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.year();
        boolean boolean20 = localDateTime13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withEra(1);
        int int29 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean31 = localDateTime26.isSupported(dateTimeFieldType30);
        boolean boolean32 = localDateTime13.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime13.withHourOfDay(5);
        int[] intArray36 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime13, (long) 15);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime13.minus(readableDuration37);
        int int39 = localDateTime13.getYear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime13.minusYears(911);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks(853);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57635003L + "'", long7 == 57635003L);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1686, 4, 23, 15]");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test17452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17452");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        java.util.Date date8 = dateTime6.toDate();
        org.joda.time.DateTime dateTime10 = dateTime6.plusYears((int) 'u');
        org.joda.time.Instant instant11 = dateTime6.toInstant();
        java.util.Date date13 = new java.util.Date((long) (byte) 0);
        int int14 = date13.getMinutes();
        int int15 = date13.getDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) date13, chronology16);
        org.joda.time.LocalDate localDate19 = localDate17.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant20 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        long long23 = dateTimeZone21.nextTransition((long) 893);
        org.joda.time.Instant instant24 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        long long27 = dateTimeZone21.getMillisKeepLocal(dateTimeZone25, 0L);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.LocalDate localDate30 = localDate17.minusDays(20);
        org.joda.time.LocalDate localDate32 = localDate30.plusWeeks(53);
        org.joda.time.LocalDate.Property property33 = localDate32.year();
        org.joda.time.LocalDate localDate34 = property33.getLocalDate();
        org.joda.time.LocalDate localDate35 = property33.roundHalfFloorCopy();
        int int36 = localDate35.getWeekOfWeekyear();
        int int37 = localDate35.getMonthOfYear();
        boolean boolean38 = instant11.equals((java.lang.Object) localDate35);
        org.joda.time.DateTime dateTime39 = instant11.toDateTime();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Feb 21 15:03:00 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 893L + "'", long23 == 893L);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53 + "'", int36 == 53);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test17453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17453");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime3.getFields();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category13, locale14);
        java.util.Calendar calendar16 = dateTime12.toCalendar(locale14);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance();
        long long24 = copticChronology18.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField25 = copticChronology18.months();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType17.getField((org.joda.time.Chronology) copticChronology18);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology18.yearOfCentury();
        boolean boolean28 = dateTime12.equals((java.lang.Object) dateTimeField27);
        org.joda.time.DateTime dateTime30 = dateTime12.withCenturyOfEra(283);
        org.joda.time.DateTime.Property property31 = dateTime30.secondOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 57635003L + "'", long24 == 57635003L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test17454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17454");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime7 = dateTime4.withFieldAdded(durationFieldType5, 0);
        org.joda.time.DateTime.Property property8 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfMinute();
        java.lang.String str11 = property10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime16 = dateTime13.withFieldAdded(durationFieldType14, 0);
        org.joda.time.DateTime.Property property17 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime18 = property17.roundHalfEvenCopy();
        int int19 = dateTime18.getYearOfCentury();
        long long20 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime18);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("+00:00");
        java.lang.String str23 = locale22.getISO3Language();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.lang.String str26 = locale22.getDisplayLanguage(locale25);
        int int27 = property10.getMaximumTextLength(locale25);
        java.util.Locale.Builder builder28 = builder2.setLocale(locale25);
        java.util.Locale.Builder builder30 = builder2.removeUnicodeLocaleAttribute("days");
        java.util.Locale.Builder builder32 = builder30.setRegion("100");
        java.util.Locale.Builder builder34 = builder30.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder34.setVariant("1969-11-11T00:00:00.845Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1969-11-11T00:00:00.845Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[secondOfMinute]" + "'", str11, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test17455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17455");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        org.joda.time.LocalDate localDate13 = localDate9.withFieldAdded(durationFieldType11, 16);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.LocalDate localDate15 = property14.roundHalfCeilingCopy();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test17456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17456");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 6);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        timeZone3.setID("hi!");
        java.util.Calendar.Builder builder6 = builder2.setTimeZone(timeZone3);
        java.util.Calendar calendar7 = builder2.build();
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = dateTimeZone9.getName((long) (short) 0, locale13);
        java.util.TimeZone timeZone15 = dateTimeZone9.toTimeZone();
        java.lang.String str16 = timeZone15.getID();
        java.util.Calendar.Builder builder17 = builder2.setTimeZone(timeZone15);
        java.util.Date date19 = new java.util.Date((long) (byte) 0);
        int int20 = date19.getMinutes();
        int int21 = date19.getDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) date19, chronology22);
        org.joda.time.LocalDate localDate25 = localDate23.withYear((-1));
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        int int28 = property26.getMaximumValueOverall();
        org.joda.time.LocalDate localDate29 = property26.roundCeilingCopy();
        org.joda.time.Instant instant30 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        long long33 = dateTimeZone31.nextTransition((long) 893);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = dateTimeZone31.getName((long) (short) 0, locale35);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDate29.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.LocalDate localDate40 = localDate29.minusWeeks((int) (short) 0);
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str43 = localDate29.toString("7", locale42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone15, locale42);
        calendar44.set(136, 122, 70);
        int int49 = calendar44.getFirstDayOfWeek();
        java.lang.String str50 = calendar44.getCalendarType();
        calendar44.setTimeInMillis(53672844L);
        // The following exception was thrown during execution in test generation
        try {
            calendar44.setWeekDate(54167248, 635, 501);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 501");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=6,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=hi!,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 292278993 + "'", int28 == 292278993);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 893L + "'", long33 == 893L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "7" + "'", str43, "7");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=53672844,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=54,SECOND=32,MILLISECOND=844,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "gregory" + "'", str50, "gregory");
    }

    @Test
    public void test17457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(53);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        boolean boolean9 = localTime5.isSupported(durationFieldType8);
        org.joda.time.LocalTime localTime11 = localTime5.minusSeconds(53688022);
        org.joda.time.LocalTime.Property property12 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime14 = localTime5.plusSeconds(292278994);
        org.joda.time.Instant instant15 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        long long18 = dateTimeZone16.nextTransition((long) 893);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = dateTimeZone16.getName((long) (short) 0, locale20);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(dateTimeZone16);
        org.joda.time.LocalTime localTime24 = localTime22.withHourOfDay(14);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfWeek(2);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime26);
        int int30 = dateTime29.getEra();
        org.joda.time.TimeOfDay timeOfDay31 = dateTime29.toTimeOfDay();
        org.joda.time.DateTime dateTime33 = dateTime29.plusSeconds(21);
        org.joda.time.DateTime dateTime35 = dateTime29.minusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime36 = localTime24.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getRangeDurationType();
        int int39 = dateTime36.get(dateTimeFieldType37);
        int int40 = dateTime36.getMinuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime43 = dateTime36.withPeriodAdded(readablePeriod41, 490);
        org.joda.time.DateTime dateTime45 = dateTime43.plus(124383264488L);
        org.joda.time.DateTime dateTime46 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalTime localTime48 = localTime14.plusHours(545);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalTime localTime50 = localTime14.minus(readablePeriod49);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 893L + "'", long18 == 893L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 843 + "'", int40 == 843);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
    }

    @Test
    public void test17458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17458");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime5 = property3.addWrapFieldToCopy((int) 'u');
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours(893);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusMonths(44);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.property(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMillis(2);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime25.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime25.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localDateTime25.getFields();
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.year();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.setDefault(category35, locale36);
        java.util.Calendar calendar38 = dateTime34.toCalendar(locale36);
        org.joda.time.DateTime dateTime40 = dateTime34.withMillis(27738633602000L);
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime46 = dateTime43.withFieldAdded(durationFieldType44, 0);
        org.joda.time.DateTime.Property property47 = dateTime43.minuteOfDay();
        org.joda.time.DateTime dateTime48 = property47.withMinimumValue();
        org.joda.time.DateTime dateTime50 = property47.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime51 = property47.roundCeilingCopy();
        org.joda.time.DateTime dateTime52 = property47.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime53 = property47.roundCeilingCopy();
        org.joda.time.DateTime dateTime55 = property47.setCopy(0);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property56.getFieldType();
        int int58 = dateTime40.get(dateTimeFieldType57);
        int int59 = localDateTime21.get(dateTimeFieldType57);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = localTime5.get(dateTimeFieldType57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.FORMAT + "'", category35.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2849 + "'", int58 == 2849);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2025 + "'", int59 == 2025);
    }

    @Test
    public void test17459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17459");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("14:59:59.556");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=14:59:59.556");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17460");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDate localDate10 = property8.getLocalDate();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis((-1806581999000L));
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.Instant instant18 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        long long21 = dateTimeZone19.nextTransition((long) 893);
        java.lang.String str23 = dateTimeZone19.getName((long) 100);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone19);
        int int25 = localDate24.getEra();
        org.joda.time.Chronology chronology26 = localDate24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.centuries();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfSecond();
        org.joda.time.DateTime dateTime29 = dateTime14.toDateTime(chronology26);
        long long30 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDate localDate31 = property8.withMinimumValue();
        org.joda.time.LocalDate localDate32 = property8.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = localDate32.withYearOfCentury(53816819);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53816819 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 893L + "'", long21 == 893L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1913L) + "'", long30 == (-1913L));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test17461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17461");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.year();
        int int16 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(893L);
        org.joda.time.LocalDateTime localDateTime20 = property17.roundFloorCopy();
        org.joda.time.Interval interval21 = property17.toInterval();
        org.joda.time.LocalDateTime localDateTime22 = property17.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test17462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17462");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime1.withEra(53737);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53737 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test17463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17463");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        long long4 = dateTimeZone2.nextTransition((long) 893);
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = dateTimeZone2.getName((long) (short) 0, locale6);
        long long9 = dateTimeZone2.nextTransition(0L);
        java.lang.String str11 = dateTimeZone2.getName(40140000L);
        java.lang.String str13 = dateTimeZone2.getShortName((long) 119);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj0, dateTimeZone2);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 893L + "'", long4 == 893L);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
    }

    @Test
    public void test17464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (short) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minus(readablePeriod11);
        int int13 = localDateTime12.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        int int16 = dateTime15.getMinuteOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks(10);
        org.joda.time.DateTime.Property property19 = dateTime15.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar20 = dateTime15.toGregorianCalendar();
        gregorianCalendar20.clear();
        java.util.Locale locale24 = new java.util.Locale("hi!", "");
        boolean boolean25 = locale24.hasExtensions();
        boolean boolean26 = gregorianCalendar20.after((java.lang.Object) locale24);
        java.time.Instant instant27 = gregorianCalendar20.toInstant();
        boolean boolean28 = localDateTime12.equals((java.lang.Object) instant27);
        org.joda.time.Chronology chronology29 = localDateTime12.getChronology();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime12.withDurationAdded(readableDuration30, 53765351);
        org.joda.time.LocalDateTime.Property property33 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property33.setCopy(53871859);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 15 + "'", int13 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 903 + "'", int16 == 903);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test17465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17465");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        java.util.Date date3 = new java.util.Date((long) (byte) 0);
        int int4 = date3.getMinutes();
        int int5 = date3.getMinutes();
        boolean boolean6 = date1.before(date3);
        date1.setDate(501);
        java.time.Instant instant9 = date1.toInstant();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromDateFields(date1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(204);
        org.junit.Assert.assertEquals(date1.toString(), "Sun May 16 00:00:00 UTC 1971");
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test17466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17466");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra(893);
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(53640000);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime12 = dateTime9.withFieldAdded(durationFieldType10, 0);
        org.joda.time.DateTime.Property property13 = dateTime9.minuteOfDay();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withEra(1);
        int int20 = localDateTime19.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = localDateTime19.getFieldType(2);
        java.lang.String str23 = dateTimeFieldType22.getName();
        int int24 = dateTime14.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMinutes(53631987);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime29 = dateTime26.withFieldAdded(durationFieldType27, 796);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime34 = dateTime31.withFieldAdded(durationFieldType32, 0);
        org.joda.time.DateTime.Property property35 = dateTime31.minuteOfDay();
        org.joda.time.DateTime dateTime36 = property35.withMinimumValue();
        org.joda.time.DateTime.Property property37 = dateTime36.era();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withEra(1);
        int int42 = localDateTime41.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime41.getFieldType(2);
        java.lang.String str45 = dateTimeFieldType44.getName();
        int int46 = dateTime36.get(dateTimeFieldType44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfWeek(2);
        boolean boolean51 = dateTime36.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime56 = dateTime53.withFieldAdded(durationFieldType54, 0);
        org.joda.time.DateTime.Property property57 = dateTime53.minuteOfDay();
        org.joda.time.DateTime dateTime58 = property57.withMinimumValue();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withEra(1);
        int int64 = localDateTime63.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = localDateTime63.getFieldType(2);
        java.lang.String str67 = dateTimeFieldType66.getName();
        int int68 = dateTime58.get(dateTimeFieldType66);
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstance();
        long long75 = copticChronology69.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField76 = copticChronology69.months();
        java.lang.String str77 = copticChronology69.toString();
        int int78 = copticChronology69.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField79 = copticChronology69.weekyears();
        org.joda.time.DateTimeField dateTimeField80 = copticChronology69.dayOfYear();
        java.lang.String str81 = copticChronology69.toString();
        boolean boolean82 = dateTimeFieldType66.isSupported((org.joda.time.Chronology) copticChronology69);
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType66.getDurationType();
        boolean boolean84 = dateTime36.isSupported(dateTimeFieldType66);
        boolean boolean85 = dateTime29.equals((java.lang.Object) dateTimeFieldType66);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.DateTime dateTime87 = dateTime29.plus(readableDuration86);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str89 = dateTimeFieldType88.toString();
        boolean boolean90 = dateTime29.isSupported(dateTimeFieldType88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime92 = dateTime7.withField(dateTimeFieldType88, 838);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 838 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "dayOfMonth" + "'", str23, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 21 + "'", int24 == 21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "dayOfMonth" + "'", str45, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 21 + "'", int46 == 21);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "dayOfMonth" + "'", str67, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 21 + "'", int68 == 21);
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 57635003L + "'", long75 == 57635003L);
        org.junit.Assert.assertNotNull(durationField76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "CopticChronology[UTC]" + "'", str77, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "CopticChronology[UTC]" + "'", str81, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "dayOfMonth" + "'", str89, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test17467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17467");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusHours((int) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusHours(53631987);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) chronology8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMonthOfYear(8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        int int15 = localDateTime14.getWeekOfWeekyear();
        boolean boolean16 = localDateTime10.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.withYear(2022);
        int int19 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime18);
        java.lang.String str20 = localDateTime18.toString();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-21T15:03:14.103" + "'", str20, "2022-02-21T15:03:14.103");
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test17468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17468");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 0, locale5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone1);
        long long10 = dateTimeZone1.adjustOffset((long) 12, false);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone1);
        java.util.Date date12 = dateTime11.toDate();
        date12.setDate(794);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 12L + "'", long10 == 12L);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Apr 04 15:03:14 UTC 2024");
    }

    @Test
    public void test17469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17469");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear((-1));
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        org.joda.time.LocalDate localDate11 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths(100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, 0);
        org.joda.time.DateTime.Property property19 = dateTime15.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property21 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property22 = dateTime20.secondOfDay();
        java.util.Date date24 = new java.util.Date((long) (byte) 0);
        int int25 = date24.getMinutes();
        int int26 = date24.getDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) date24, chronology27);
        boolean boolean29 = property22.equals((java.lang.Object) chronology27);
        org.joda.time.DurationField durationField30 = property22.getDurationField();
        org.joda.time.DateTime dateTime31 = property22.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime33 = property22.addToCopy(0L);
        org.joda.time.DateTime dateTime34 = property22.getDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.format.DateTimeParser dateTimeParser40 = dateTimeFormatter39.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter39.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter39.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter39.withDefaultYear(867);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter39.withDefaultYear(136);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter39.withOffsetParsed();
        boolean boolean50 = dateTime34.equals((java.lang.Object) dateTimeFormatter49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = localDate11.toString(dateTimeFormatter49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNull(dateTimeParser40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test17470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17470");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        int int5 = dateTime4.getMillisOfSecond();
        java.util.Date date6 = dateTime4.toDate();
        date6.setDate(56770311);
        java.lang.Object obj9 = date6.clone();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 144 + "'", int5 == 144);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 28 15:03:14 UTC 157454");
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "Tue Feb 28 15:03:14 UTC 157454");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "Tue Feb 28 15:03:14 UTC 157454");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "Tue Feb 28 15:03:14 UTC 157454");
    }

    @Test
    public void test17471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17471");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 0, locale5);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(dateTimeZone1);
        int int8 = localTime7.getHourOfDay();
        int int9 = localTime7.getSecondOfMinute();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 14 + "'", int9 == 14);
    }

    @Test
    public void test17472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17472");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks(10);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime1.toGregorianCalendar();
        gregorianCalendar6.clear();
        java.util.Locale locale10 = new java.util.Locale("hi!", "");
        boolean boolean11 = locale10.hasExtensions();
        boolean boolean12 = gregorianCalendar6.after((java.lang.Object) locale10);
        gregorianCalendar6.roll(1, false);
        java.util.TimeZone timeZone16 = gregorianCalendar6.getTimeZone();
        java.util.TimeZone.setDefault(timeZone16);
        java.time.ZoneId zoneId18 = timeZone16.toZoneId();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 903 + "'", int2 == 903);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId18);
    }

    @Test
    public void test17473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17473");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 6);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        timeZone3.setID("hi!");
        java.util.Calendar.Builder builder6 = builder2.setTimeZone(timeZone3);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        java.util.Calendar.Builder builder9 = builder2.setTimeZone(timeZone7);
        java.util.Calendar.Builder builder13 = builder2.setWeekDate(53861721, 25, 29);
        java.util.Calendar.Builder builder17 = builder13.setDate(53953696, 833, 53664);
        java.util.Calendar.Builder builder19 = builder17.setLenient(true);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        int int22 = dateTime21.getMinuteOfDay();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks(10);
        int int25 = dateTime24.getMillisOfSecond();
        org.joda.time.DateTime dateTime27 = dateTime24.minusMinutes((-1));
        java.util.GregorianCalendar gregorianCalendar28 = dateTime24.toGregorianCalendar();
        java.util.TimeZone timeZone29 = gregorianCalendar28.getTimeZone();
        java.util.Calendar.Builder builder30 = builder19.setTimeZone(timeZone29);
        timeZone29.setID("2022-02-21T15:00:44.958");
        int int33 = timeZone29.getDSTSavings();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455794175,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=14,MILLISECOND=175,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 903 + "'", int22 == 903);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 175 + "'", int25 == 175);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test17474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17474");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        long long4 = dateTimeZone2.nextTransition((long) 893);
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = dateTimeZone2.getName((long) (short) 0, locale6);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        java.lang.String str10 = dateTimeZone2.getName((long) 12);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(15701731200999L, dateTimeZone2);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 893L + "'", long4 == 893L);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test17475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17475");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.joda.time.LocalTime.Property property4 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(53);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.days();
        boolean boolean9 = localTime5.isSupported(durationFieldType8);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) localTime5);
        org.joda.time.LocalTime localTime12 = localTime10.withMillisOfDay(222);
        int int13 = localTime10.size();
        org.joda.time.LocalTime localTime15 = localTime10.minusSeconds(767);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test17476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17476");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0, 9, (int) (byte) 1, 0, 15);
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withEra(1);
        int int11 = localDateTime10.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(2);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.year();
        boolean boolean17 = localDateTime10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withEra(1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withEra(1);
        int int26 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean28 = localDateTime23.isSupported(dateTimeFieldType27);
        boolean boolean29 = localDateTime10.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime10.withEra((int) (byte) 1);
        org.joda.time.tz.Provider provider32 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet33 = provider32.getAvailableIDs();
        boolean boolean34 = strSet33.isEmpty();
        boolean boolean35 = localDateTime10.equals((java.lang.Object) boolean34);
        int int36 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology37 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime38 = localDateTime10.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.centuryOfEra();
        int int40 = dateTime38.getMinuteOfDay();
        org.joda.time.DateTime dateTime42 = dateTime38.minusMonths(53702963);
        int int43 = dateTime42.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 900000 + "'", int6 == 900000);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 903 + "'", int40 == 903);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 14 + "'", int43 == 14);
    }

    @Test
    public void test17477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17477");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T15:03:15.442");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test17478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17478");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeField dateTimeField5 = copticChronology0.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.year();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) copticChronology0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(53837433);
        int int12 = dateTimeZone10.getOffset(215L);
        org.joda.time.DateTime dateTime13 = dateTime8.withZone(dateTimeZone10);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53837433 + "'", int12 == 53837433);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test17479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17479");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        int int9 = localDateTime8.getYearOfCentury();
        java.lang.String str10 = localDateTime8.toString();
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDayOfMonth(22);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withDurationAdded(readableDuration22, 53640);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMonthOfYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        java.lang.String str28 = dateTimeFieldType27.getName();
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.property(dateTimeFieldType27);
        int int30 = localDateTime26.size();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMonths(53989798);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:03:24.268" + "'", str10, "2022-02-21T15:03:24.268");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test17480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17480");
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        long long4 = dateTimeZone2.nextTransition((long) 893);
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = dateTimeZone2.getName((long) (short) 0, locale6);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        long long11 = dateTimeZone2.adjustOffset(25L, false);
        int int13 = dateTimeZone2.getStandardOffset(1645455324838L);
        int int15 = dateTimeZone2.getOffset(0L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone2);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("2022-02-21T14:55:53.529");
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        boolean boolean20 = dateTimeZone2.equals((java.lang.Object) calendar19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) "\ub300\ub9cc", dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"?????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 893L + "'", long4 == 893L);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25L + "'", long11 == 25L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455794284,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=14,MILLISECOND=284,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test17481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17481");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(32769);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime10.getFields();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime17 = dateTime14.withFieldAdded(durationFieldType15, 0);
        org.joda.time.DateTime.Property property18 = dateTime14.minuteOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfMinute();
        int int21 = dateTime19.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = dateTime19.isSupported(dateTimeFieldType22);
        boolean boolean24 = localDateTime10.isSupported(dateTimeFieldType22);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withDefaultYear((int) (short) 0);
        java.util.Locale locale31 = dateTimeFormatter27.getLocale();
        boolean boolean32 = localDateTime10.equals((java.lang.Object) dateTimeFormatter27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeFormatter33.getZone();
        java.lang.String str36 = dateTimeZone34.getShortName((long) 54189480);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
    }

    @Test
    public void test17482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17482");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 3);
        org.joda.time.DateTime dateTime3 = dateTime1.withMillis((-1806581999000L));
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.plus(readableDuration5);
        org.joda.time.Instant instant7 = dateTime3.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test17483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17483");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology0.yearOfCentury();
        int int4 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((java.lang.Object) chronology5);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMonthOfYear(8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        int int12 = localDateTime11.getWeekOfWeekyear();
        boolean boolean13 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withYear(2022);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 0);
        org.joda.time.DateTime.Property property23 = dateTime19.minuteOfDay();
        org.joda.time.DateTime dateTime24 = property23.withMinimumValue();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withEra(1);
        int int30 = localDateTime29.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localDateTime29.getFieldType(2);
        java.lang.String str33 = dateTimeFieldType32.getName();
        int int34 = dateTime24.get(dateTimeFieldType32);
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstance();
        long long41 = copticChronology35.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DurationField durationField42 = copticChronology35.months();
        java.lang.String str43 = copticChronology35.toString();
        int int44 = copticChronology35.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField45 = copticChronology35.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology35.dayOfYear();
        java.lang.String str47 = copticChronology35.toString();
        boolean boolean48 = dateTimeFieldType32.isSupported((org.joda.time.Chronology) copticChronology35);
        org.joda.time.DateTimeField dateTimeField49 = copticChronology35.weekOfWeekyear();
        boolean boolean50 = dateTimeZone17.equals((java.lang.Object) dateTimeField49);
        long long53 = dateTimeZone17.convertLocalToUTC(3304800000L, false);
        org.joda.time.DateTime dateTime54 = localDateTime15.toDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime15.withMinuteOfHour(0);
        org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology57.secondOfMinute();
        org.joda.time.DurationField durationField59 = copticChronology57.months();
        org.joda.time.DateTimeZone dateTimeZone60 = copticChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField61 = copticChronology57.monthOfYear();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology57.secondOfDay();
        org.joda.time.Instant instant64 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone65 = instant64.getZone();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 16, dateTimeZone65);
        long long70 = dateTimeZone65.convertLocalToUTC((-1806581999000L), false, (long) 21);
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstance();
        long long77 = copticChronology71.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField78 = copticChronology71.halfdayOfDay();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(chronology79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withEra(1);
        int int83 = localDateTime82.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = localDateTime82.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime82.plusSeconds((int) (byte) 10);
        int int88 = localDateTime87.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime87.plusYears(0);
        boolean boolean91 = copticChronology71.equals((java.lang.Object) localDateTime90);
        boolean boolean92 = dateTimeZone65.isLocalDateTimeGap(localDateTime90);
        int[] intArray94 = copticChronology57.get((org.joda.time.ReadablePartial) localDateTime90, 501410L);
        copticChronology0.validate((org.joda.time.ReadablePartial) localDateTime56, intArray94);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "dayOfMonth" + "'", str33, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 57635003L + "'", long41 == 57635003L);
        org.junit.Assert.assertNotNull(durationField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CopticChronology[UTC]" + "'", str43, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "CopticChronology[UTC]" + "'", str47, "CopticChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3304800000L + "'", long53 == 3304800000L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(copticChronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1806581999000L) + "'", long70 == (-1806581999000L));
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 57635003L + "'", long77 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 22 + "'", int88 == 22);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[1686, 4, 23, 501410]");
    }

    @Test
    public void test17484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17484");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone1 = instant0.getZone();
        long long3 = dateTimeZone1.nextTransition((long) 893);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = dateTimeZone1.getName((long) (short) 0, locale5);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(14);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfWeek(2);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) dateTime11);
        int int15 = dateTime14.getEra();
        org.joda.time.TimeOfDay timeOfDay16 = dateTime14.toTimeOfDay();
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(21);
        org.joda.time.DateTime dateTime20 = dateTime14.minusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        int int24 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime26 = dateTime21.withCenturyOfEra(934);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 893L + "'", long3 == 893L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test17485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17485");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime4 = dateTime1.withFieldAdded(durationFieldType2, 0);
        org.joda.time.DateTime.Property property5 = dateTime1.minuteOfDay();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime11.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(2);
        java.lang.String str15 = dateTimeFieldType14.getName();
        int int16 = dateTime6.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime18 = dateTime6.plusMinutes(53631987);
        int int19 = dateTime18.getMillisOfSecond();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks(934);
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.secondOfMinute();
        org.joda.time.DurationField durationField24 = copticChronology22.months();
        org.joda.time.DateTimeZone dateTimeZone25 = copticChronology22.getZone();
        long long27 = dateTimeZone25.previousTransition((long) ' ');
        org.joda.time.DateTime dateTime28 = dateTime21.withZone(dateTimeZone25);
        org.joda.time.Instant instant29 = dateTime21.toInstant();
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfMonth" + "'", str15, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 21 + "'", int16 == 21);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 389 + "'", int19 == 389);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test17486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17486");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        int int7 = localDateTime3.getWeekyear();
        int int8 = localDateTime3.getHourOfDay();
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        int int10 = localDateTime3.getHourOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter13.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withDefaultYear((int) (short) 0);
        java.util.Locale locale17 = dateTimeFormatter13.getLocale();
        boolean boolean18 = localDateTime3.equals((java.lang.Object) locale17);
        int int19 = localDateTime3.getEra();
        int int20 = localDateTime3.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNull(dateTimeParser14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 54194410 + "'", int20 == 54194410);
    }

    @Test
    public void test17487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17487");
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(300000L, (org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test17488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17488");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(timeZone0);
        int int2 = calendar1.getWeekYear();
        calendar1.set(0, 658, 0, (int) (byte) 0, 993);
        java.util.Date date10 = new java.util.Date((long) (byte) 0);
        int int11 = date10.getMinutes();
        date10.setHours((-292275054));
        calendar1.setTime(date10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        int int17 = dateTime16.getMinuteOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks(10);
        org.joda.time.DateTime.Property property20 = dateTime16.minuteOfDay();
        java.util.GregorianCalendar gregorianCalendar21 = dateTime16.toGregorianCalendar();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar21);
        org.joda.time.LocalTime.Property property23 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime24 = property23.getLocalTime();
        boolean boolean25 = date10.equals((java.lang.Object) property23);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-1052189071200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=31373,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=39,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals(date10.toString(), "Sat Feb 08 18:00:00 UTC 31373");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 903 + "'", int17 == 903);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test17489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17489");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        int int9 = localDateTime8.getYearOfCentury();
        java.lang.String str10 = localDateTime8.toString();
        org.joda.time.Instant instant11 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        boolean boolean19 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDayOfMonth(22);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusWeeks(53659);
        org.joda.time.LocalDateTime.Property property24 = localDateTime18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T15:03:24.451" + "'", str10, "2022-02-21T15:03:24.451");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test17490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17490");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        int int2 = date1.getMinutes();
        int int3 = date1.getDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) date1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 893);
        org.joda.time.Instant instant12 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtMidnight(dateTimeZone9);
        java.util.Date date18 = new java.util.Date((long) (byte) 0);
        int int19 = date18.getMinutes();
        int int20 = date18.getDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) date18, chronology21);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) (byte) 100);
        org.joda.time.Instant instant25 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 893);
        org.joda.time.Instant instant29 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone30, 0L);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate37 = localDate5.withPeriodAdded(readablePeriod35, 122);
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra(21);
        org.joda.time.LocalDate.Property property40 = localDate39.monthOfYear();
        org.joda.time.LocalDate localDate41 = property40.roundHalfCeilingCopy();
        java.lang.String str42 = property40.getName();
        org.joda.time.LocalDate localDate44 = property40.addToCopy(53732568);
        org.joda.time.LocalDate localDate45 = property40.roundFloorCopy();
        org.joda.time.LocalDate localDate46 = property40.withMinimumValue();
        org.joda.time.LocalDate localDate47 = property40.getLocalDate();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 893L + "'", long11 == 893L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 893L + "'", long28 == 893L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "monthOfYear" + "'", str42, "monthOfYear");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test17491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17491");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = copticChronology0.secondOfMinute();
        org.joda.time.DurationField durationField2 = copticChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = copticChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology0.hourOfHalfday();
        int int5 = copticChronology0.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.hourOfDay();
        int int9 = dateTimeField7.getMinimumValue(1645455483134L);
        long long11 = dateTimeField7.remainder((long) 54060);
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 54060L + "'", long11 == 54060L);
    }

    @Test
    public void test17492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17492");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        int int2 = localTime1.getHourOfDay();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(9);
        int int9 = dateTime8.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        long long11 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime8.millisOfSecond();
        int int13 = property12.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 61879161600L + "'", long11 == 61879161600L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
    }

    @Test
    public void test17493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17493");
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance();
        long long12 = copticChronology6.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology6.dayOfWeek();
        org.joda.time.DurationField durationField15 = copticChronology6.months();
        org.joda.time.Chronology chronology16 = copticChronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology6.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone19 = copticChronology6.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(53805057, 53849022, 53781869, 0, 20706277, 535, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 20706277 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 57635003L + "'", long12 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test17494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17494");
        java.util.Date date1 = new java.util.Date((long) (byte) 0);
        java.util.Date date3 = new java.util.Date((long) (byte) 0);
        int int4 = date3.getMinutes();
        int int5 = date3.getMinutes();
        boolean boolean6 = date1.before(date3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology8);
        int int10 = localTime9.getHourOfDay();
        org.joda.time.LocalTime.Property property11 = localTime9.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime16 = dateTime13.withFieldAdded(durationFieldType14, 0);
        boolean boolean17 = localTime9.isSupported(durationFieldType14);
        org.joda.time.LocalTime localTime19 = localTime7.withFieldAdded(durationFieldType14, 8);
        org.joda.time.LocalTime localTime21 = localTime19.withMillisOfDay(618);
        java.lang.Object obj22 = null;
        boolean boolean23 = localTime19.equals(obj22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.monthOfYear();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime28 = property25.addToCopy((long) (-2720));
        int int29 = localDateTime28.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.era();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localTime19.compareTo((org.joda.time.ReadablePartial) localDateTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test17495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17495");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-21T14:57:14.406", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t14:57:14.406");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17496");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance();
        long long7 = copticChronology1.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.halfdayOfDay();
        org.joda.time.DurationField durationField9 = copticChronology1.months();
        boolean boolean10 = durationFieldType0.isSupported((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 57635003L + "'", long7 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test17497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17497");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (short) 1);
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(54);
        org.joda.time.DateTime dateTime13 = localDateTime8.toDateTime(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test17498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17498");
        org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
        long long6 = copticChronology0.getDateTimeMillis((long) (byte) 0, 16, 0, (int) '#', 3);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology0.halfdayOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withEra(1);
        int int12 = localDateTime11.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusSeconds((int) (byte) 10);
        int int17 = localDateTime16.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusYears(0);
        boolean boolean20 = copticChronology0.equals((java.lang.Object) localDateTime19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology0.millisOfDay();
        org.junit.Assert.assertNotNull(copticChronology0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 57635003L + "'", long6 == 57635003L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test17499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17499");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfWeek(2);
        long long4 = dateTime1.getMillis();
        int int5 = dateTime1.getSecondOfDay();
        int int6 = dateTime1.getMillisOfSecond();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "DateTimeField[yearOfCentury]", "100", "gregory", "2022-02-21T14:53:54.648", "53640", "DateTimeField[yearOfCentury]", "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        boolean boolean26 = strSet16.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear(9);
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths(241);
        boolean boolean34 = strSet16.equals((java.lang.Object) dateTime33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.lang.String str42 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList40);
        java.lang.String[] strArray44 = new java.lang.String[] { "Property[secondOfMinute]" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.lang.String str47 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray52 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.lang.String str55 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList53);
        java.lang.String[] strArray57 = new java.lang.String[] { "Property[secondOfMinute]" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList58);
        boolean boolean62 = strSet16.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        int int65 = dateTime64.getMinuteOfDay();
        org.joda.time.DateTime dateTime67 = dateTime64.plusWeeks(10);
        org.joda.time.DateTime.Property property68 = dateTime64.minuteOfDay();
        int int69 = dateTime64.getMinuteOfDay();
        org.joda.time.Chronology chronology70 = dateTime64.getChronology();
        boolean boolean71 = strSet16.equals((java.lang.Object) chronology70);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime1.toMutableDateTime(chronology70);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455794592L + "'", long4 == 1645455794592L);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54194 + "'", int5 == 54194);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 592 + "'", int6 == 592);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 903 + "'", int65 == 903);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 903 + "'", int69 == 903);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(mutableDateTime72);
    }

    @Test
    public void test17500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17500");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withEra(1);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusSeconds((int) (byte) 10);
        int int9 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusYears(0);
        int int12 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMillis(87);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(54000572);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }
}
